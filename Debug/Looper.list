
Looper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013b70  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  08013d40  08013d40  00023d40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015f08  08015f08  000300e8  2**0
                  CONTENTS
  4 .ARM          00000008  08015f08  08015f08  00025f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015f10  08015f10  000300e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015f10  08015f10  00025f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015f14  08015f14  00025f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08015f18  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000096a4  200000e8  08016000  000300e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000978c  08016000  0003978c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00035901  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c6e  00000000  00000000  00065a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a50  00000000  00000000  0006c688  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000027a8  00000000  00000000  0006f0d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030474  00000000  00000000  00071880  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000325d4  00000000  00000000  000a1cf4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112f56  00000000  00000000  000d42c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e721e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b520  00000000  00000000  001e7274  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013d28 	.word	0x08013d28

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	08013d28 	.word	0x08013d28

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <uint32toArray>:

/*--------------------------------*/
char data_char[5];
uint8_t data_uint[4];

void uint32toArray(uint32_t v, uint8_t *data) {
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	//little endian
	data[0] = (v & 0xff);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	701a      	strb	r2, [r3, #0]
	data[1] = (v & 0xff00) >> 8;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	0a1a      	lsrs	r2, r3, #8
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	b2d2      	uxtb	r2, r2
 80005d4:	701a      	strb	r2, [r3, #0]
	data[3] = (v & 0xff0000) >> 16;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	0c1a      	lsrs	r2, r3, #16
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	3303      	adds	r3, #3
 80005de:	b2d2      	uxtb	r2, r2
 80005e0:	701a      	strb	r2, [r3, #0]
	data[4] = (v & 0xff000000) >> 24;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	0e1a      	lsrs	r2, r3, #24
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	3304      	adds	r3, #4
 80005ea:	b2d2      	uxtb	r2, r2
 80005ec:	701a      	strb	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <uint16toArray>:

void uint16toArray(uint32_t v, uint8_t *data) {
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	6039      	str	r1, [r7, #0]
	//little endian
	data[0] = (v & 0xff);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	701a      	strb	r2, [r3, #0]
	data[1] = (v & 0xff00) >> 8;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	0a1a      	lsrs	r2, r3, #8
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	3301      	adds	r3, #1
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	701a      	strb	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <CreateWaveFile>:

void CreateWaveFile(Sample *sample) {
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b090      	sub	sp, #64	; 0x40
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */
	//Create file
	if (f_open(&(sample->fichier), strcat(sample->nom, ".WAV"),
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	f103 050c 	add.w	r5, r3, #12
 8000632:	687c      	ldr	r4, [r7, #4]
 8000634:	4620      	mov	r0, r4
 8000636:	f7ff fdeb 	bl	8000210 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	4423      	add	r3, r4
 800063e:	4a1c      	ldr	r2, [pc, #112]	; (80006b0 <CreateWaveFile+0x8c>)
 8000640:	6810      	ldr	r0, [r2, #0]
 8000642:	6018      	str	r0, [r3, #0]
 8000644:	7912      	ldrb	r2, [r2, #4]
 8000646:	711a      	strb	r2, [r3, #4]
 8000648:	220a      	movs	r2, #10
 800064a:	4621      	mov	r1, r4
 800064c:	4628      	mov	r0, r5
 800064e:	f00e fef9 	bl	800f444 <f_open>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <CreateWaveFile+0x3a>
	FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
		Error_Handler();
 8000658:	f001 fd00 	bl	800205c <Error_Handler>
			Error_Handler();
		} else {
			f_sync(&(sample->fichier));
		}
	}
}
 800065c:	e024      	b.n	80006a8 <CreateWaveFile+0x84>
		uint8_t wtext[44] = { 0 };
 800065e:	2300      	movs	r3, #0
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	f107 0310 	add.w	r3, r7, #16
 8000666:	2228      	movs	r2, #40	; 0x28
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f012 ff34 	bl	80134d8 <memset>
		res = f_write(&(sample->fichier), wtext, 44, (void*) &byteswritten);
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	f103 000c 	add.w	r0, r3, #12
 8000676:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800067a:	f107 010c 	add.w	r1, r7, #12
 800067e:	222c      	movs	r2, #44	; 0x2c
 8000680:	f00f f8a1 	bl	800f7c6 <f_write>
 8000684:	4603      	mov	r3, r0
 8000686:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if ((byteswritten == 0) || (res != FR_OK)) {
 800068a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800068c:	2b00      	cmp	r3, #0
 800068e:	d003      	beq.n	8000698 <CreateWaveFile+0x74>
 8000690:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000694:	2b00      	cmp	r3, #0
 8000696:	d002      	beq.n	800069e <CreateWaveFile+0x7a>
			Error_Handler();
 8000698:	f001 fce0 	bl	800205c <Error_Handler>
}
 800069c:	e004      	b.n	80006a8 <CreateWaveFile+0x84>
			f_sync(&(sample->fichier));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	330c      	adds	r3, #12
 80006a2:	4618      	mov	r0, r3
 80006a4:	f00f fa33 	bl	800fb0e <f_sync>
}
 80006a8:	bf00      	nop
 80006aa:	3740      	adds	r7, #64	; 0x40
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bdb0      	pop	{r4, r5, r7, pc}
 80006b0:	08013d40 	.word	0x08013d40

080006b4 <AddData>:

void AddData(Sample *sample, uint8_t *data, uint32_t nbytes) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	60f8      	str	r0, [r7, #12]
 80006bc:	60b9      	str	r1, [r7, #8]
 80006be:	607a      	str	r2, [r7, #4]

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */
	res = f_write(&(sample->fichier), data, nbytes,
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f103 000c 	add.w	r0, r3, #12
 80006c6:	f107 0310 	add.w	r3, r7, #16
 80006ca:	687a      	ldr	r2, [r7, #4]
 80006cc:	68b9      	ldr	r1, [r7, #8]
 80006ce:	f00f f87a 	bl	800f7c6 <f_write>
 80006d2:	4603      	mov	r3, r0
 80006d4:	75fb      	strb	r3, [r7, #23]
			(void*) &byteswritten);
	if ((byteswritten == 0) || (res != FR_OK)) {
 80006d6:	693b      	ldr	r3, [r7, #16]
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d002      	beq.n	80006e2 <AddData+0x2e>
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d002      	beq.n	80006e8 <AddData+0x34>
		Error_Handler();
 80006e2:	f001 fcbb 	bl	800205c <Error_Handler>
 80006e6:	e019      	b.n	800071c <AddData+0x68>
	} else {
		sample->numsamples += nbytes
 80006e8:	68fb      	ldr	r3, [r7, #12]
 80006ea:	f8d3 2240 	ldr.w	r2, [r3, #576]	; 0x240
				/ (sample->numchannels * sample->samplelength);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	f893 323f 	ldrb.w	r3, [r3, #575]	; 0x23f
 80006f4:	4619      	mov	r1, r3
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	f893 323e 	ldrb.w	r3, [r3, #574]	; 0x23e
 80006fc:	fb03 f301 	mul.w	r3, r3, r1
 8000700:	4619      	mov	r1, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	fbb3 f3f1 	udiv	r3, r3, r1
		sample->numsamples += nbytes
 8000708:	441a      	add	r2, r3
 800070a:	68fb      	ldr	r3, [r7, #12]
 800070c:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
		f_sync(&(sample->fichier));
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	330c      	adds	r3, #12
 8000714:	4618      	mov	r0, r3
 8000716:	f00f f9fa 	bl	800fb0e <f_sync>
	}
}
 800071a:	bf00      	nop
 800071c:	bf00      	nop
 800071e:	3718      	adds	r7, #24
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <SetHeader>:

void SetHeader(Sample *sample) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b090      	sub	sp, #64	; 0x40
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint32_t byteswritten; /* File write/read counts */

	//Write to the text file
	uint8_t wtext[44];

	sprintf(data_char, "RIFF");
 800072c:	4972      	ldr	r1, [pc, #456]	; (80008f8 <SetHeader+0x1d4>)
 800072e:	4873      	ldr	r0, [pc, #460]	; (80008fc <SetHeader+0x1d8>)
 8000730:	f012 feda 	bl	80134e8 <siprintf>
 8000734:	4b71      	ldr	r3, [pc, #452]	; (80008fc <SetHeader+0x1d8>)
 8000736:	681b      	ldr	r3, [r3, #0]
	memcpy(wtext, (uint8_t*) data_char, 4);
 8000738:	60fb      	str	r3, [r7, #12]

	//filesize
	uint32toArray(
			(uint32_t) sample->numchannels * sample->numsamples
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	f893 323f 	ldrb.w	r3, [r3, #575]	; 0x23f
 8000740:	461a      	mov	r2, r3
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 8000748:	fb03 f302 	mul.w	r3, r3, r2
					* sample->samplelength + 36, data_uint);
 800074c:	687a      	ldr	r2, [r7, #4]
 800074e:	f892 223e 	ldrb.w	r2, [r2, #574]	; 0x23e
 8000752:	fb02 f303 	mul.w	r3, r2, r3
	uint32toArray(
 8000756:	3324      	adds	r3, #36	; 0x24
 8000758:	4969      	ldr	r1, [pc, #420]	; (8000900 <SetHeader+0x1dc>)
 800075a:	4618      	mov	r0, r3
 800075c:	f7ff ff2c 	bl	80005b8 <uint32toArray>
	memcpy(wtext + 4, data_uint, 4);
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	3304      	adds	r3, #4
 8000766:	4a66      	ldr	r2, [pc, #408]	; (8000900 <SetHeader+0x1dc>)
 8000768:	6812      	ldr	r2, [r2, #0]
 800076a:	601a      	str	r2, [r3, #0]

	//file format
	sprintf(data_char, "WAVE");
 800076c:	4965      	ldr	r1, [pc, #404]	; (8000904 <SetHeader+0x1e0>)
 800076e:	4863      	ldr	r0, [pc, #396]	; (80008fc <SetHeader+0x1d8>)
 8000770:	f012 feba 	bl	80134e8 <siprintf>
	memcpy(wtext + 8, (uint8_t*) data_char, 4);
 8000774:	f107 030c 	add.w	r3, r7, #12
 8000778:	3308      	adds	r3, #8
 800077a:	4a60      	ldr	r2, [pc, #384]	; (80008fc <SetHeader+0x1d8>)
 800077c:	6812      	ldr	r2, [r2, #0]
 800077e:	601a      	str	r2, [r3, #0]

	//Bloc format audio
	sprintf(data_char, "fmt ");
 8000780:	4961      	ldr	r1, [pc, #388]	; (8000908 <SetHeader+0x1e4>)
 8000782:	485e      	ldr	r0, [pc, #376]	; (80008fc <SetHeader+0x1d8>)
 8000784:	f012 feb0 	bl	80134e8 <siprintf>
	memcpy(wtext + 12, (uint8_t*) data_char, 4);
 8000788:	f107 030c 	add.w	r3, r7, #12
 800078c:	330c      	adds	r3, #12
 800078e:	4a5b      	ldr	r2, [pc, #364]	; (80008fc <SetHeader+0x1d8>)
 8000790:	6812      	ldr	r2, [r2, #0]
 8000792:	601a      	str	r2, [r3, #0]
	//nombre d'octets du bloc
	uint32toArray((uint32_t) 16, data_uint);
 8000794:	495a      	ldr	r1, [pc, #360]	; (8000900 <SetHeader+0x1dc>)
 8000796:	2010      	movs	r0, #16
 8000798:	f7ff ff0e 	bl	80005b8 <uint32toArray>
	memcpy(wtext + 16, data_uint, 4);
 800079c:	f107 030c 	add.w	r3, r7, #12
 80007a0:	3310      	adds	r3, #16
 80007a2:	4a57      	ldr	r2, [pc, #348]	; (8000900 <SetHeader+0x1dc>)
 80007a4:	6812      	ldr	r2, [r2, #0]
 80007a6:	601a      	str	r2, [r3, #0]
	//audio format
	uint16toArray((uint16_t) 1, data_uint);
 80007a8:	4955      	ldr	r1, [pc, #340]	; (8000900 <SetHeader+0x1dc>)
 80007aa:	2001      	movs	r0, #1
 80007ac:	f7ff ff25 	bl	80005fa <uint16toArray>
	memcpy(wtext + 20, data_uint, 2);
 80007b0:	f107 030c 	add.w	r3, r7, #12
 80007b4:	3314      	adds	r3, #20
 80007b6:	4a52      	ldr	r2, [pc, #328]	; (8000900 <SetHeader+0x1dc>)
 80007b8:	8812      	ldrh	r2, [r2, #0]
 80007ba:	b292      	uxth	r2, r2
 80007bc:	801a      	strh	r2, [r3, #0]
	//nbr canaux
	uint16toArray((uint16_t) sample->numchannels, data_uint);
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	f893 323f 	ldrb.w	r3, [r3, #575]	; 0x23f
 80007c4:	494e      	ldr	r1, [pc, #312]	; (8000900 <SetHeader+0x1dc>)
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff17 	bl	80005fa <uint16toArray>
	memcpy(wtext + 22, data_uint, 2);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	3316      	adds	r3, #22
 80007d2:	4a4b      	ldr	r2, [pc, #300]	; (8000900 <SetHeader+0x1dc>)
 80007d4:	8812      	ldrh	r2, [r2, #0]
 80007d6:	b292      	uxth	r2, r2
 80007d8:	801a      	strh	r2, [r3, #0]
	//freq
	uint32toArray((uint32_t) sample->samplerate, data_uint);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	f8b3 323c 	ldrh.w	r3, [r3, #572]	; 0x23c
 80007e0:	4947      	ldr	r1, [pc, #284]	; (8000900 <SetHeader+0x1dc>)
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff fee8 	bl	80005b8 <uint32toArray>
	memcpy(wtext + 24, data_uint, 4);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	3318      	adds	r3, #24
 80007ee:	4a44      	ldr	r2, [pc, #272]	; (8000900 <SetHeader+0x1dc>)
 80007f0:	6812      	ldr	r2, [r2, #0]
 80007f2:	601a      	str	r2, [r3, #0]
	//bytepersec
	uint32toArray(
			(uint32_t) sample->samplerate * sample->samplelength
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f8b3 323c 	ldrh.w	r3, [r3, #572]	; 0x23c
 80007fa:	461a      	mov	r2, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	f893 323e 	ldrb.w	r3, [r3, #574]	; 0x23e
 8000802:	fb03 f302 	mul.w	r3, r3, r2
					* sample->numchannels, data_uint);
 8000806:	687a      	ldr	r2, [r7, #4]
 8000808:	f892 223f 	ldrb.w	r2, [r2, #575]	; 0x23f
	uint32toArray(
 800080c:	fb02 f303 	mul.w	r3, r2, r3
 8000810:	493b      	ldr	r1, [pc, #236]	; (8000900 <SetHeader+0x1dc>)
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff fed0 	bl	80005b8 <uint32toArray>
	memcpy(wtext + 28, data_uint, 4);
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	331c      	adds	r3, #28
 800081e:	4a38      	ldr	r2, [pc, #224]	; (8000900 <SetHeader+0x1dc>)
 8000820:	6812      	ldr	r2, [r2, #0]
 8000822:	601a      	str	r2, [r3, #0]
	//byteperbloc
	uint16toArray((uint16_t) sample->samplelength * sample->numchannels,
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	f893 323e 	ldrb.w	r3, [r3, #574]	; 0x23e
 800082a:	461a      	mov	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f893 323f 	ldrb.w	r3, [r3, #575]	; 0x23f
 8000832:	fb03 f302 	mul.w	r3, r3, r2
 8000836:	4932      	ldr	r1, [pc, #200]	; (8000900 <SetHeader+0x1dc>)
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fede 	bl	80005fa <uint16toArray>
			data_uint);
	memcpy(wtext + 32, data_uint, 2);
 800083e:	f107 030c 	add.w	r3, r7, #12
 8000842:	3320      	adds	r3, #32
 8000844:	4a2e      	ldr	r2, [pc, #184]	; (8000900 <SetHeader+0x1dc>)
 8000846:	8812      	ldrh	r2, [r2, #0]
 8000848:	b292      	uxth	r2, r2
 800084a:	801a      	strh	r2, [r3, #0]
	//bitspersample
	uint16toArray((uint16_t) 8 * sample->samplelength, data_uint);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f893 323e 	ldrb.w	r3, [r3, #574]	; 0x23e
 8000852:	00db      	lsls	r3, r3, #3
 8000854:	492a      	ldr	r1, [pc, #168]	; (8000900 <SetHeader+0x1dc>)
 8000856:	4618      	mov	r0, r3
 8000858:	f7ff fecf 	bl	80005fa <uint16toArray>
	memcpy(wtext + 34, data_uint, 2);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	3322      	adds	r3, #34	; 0x22
 8000862:	4a27      	ldr	r2, [pc, #156]	; (8000900 <SetHeader+0x1dc>)
 8000864:	8812      	ldrh	r2, [r2, #0]
 8000866:	b292      	uxth	r2, r2
 8000868:	801a      	strh	r2, [r3, #0]

	//Bloc donnees
	sprintf(data_char, "data");
 800086a:	4928      	ldr	r1, [pc, #160]	; (800090c <SetHeader+0x1e8>)
 800086c:	4823      	ldr	r0, [pc, #140]	; (80008fc <SetHeader+0x1d8>)
 800086e:	f012 fe3b 	bl	80134e8 <siprintf>
	memcpy(wtext + 36, (uint8_t*) data_char, 4);
 8000872:	f107 030c 	add.w	r3, r7, #12
 8000876:	3324      	adds	r3, #36	; 0x24
 8000878:	4a20      	ldr	r2, [pc, #128]	; (80008fc <SetHeader+0x1d8>)
 800087a:	6812      	ldr	r2, [r2, #0]
 800087c:	601a      	str	r2, [r3, #0]
	//databytes
	uint32toArray(
			(uint32_t) sample->numchannels * sample->numsamples
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f893 323f 	ldrb.w	r3, [r3, #575]	; 0x23f
 8000884:	461a      	mov	r2, r3
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	f8d3 3240 	ldr.w	r3, [r3, #576]	; 0x240
 800088c:	fb03 f302 	mul.w	r3, r3, r2
					* sample->samplelength, data_uint);
 8000890:	687a      	ldr	r2, [r7, #4]
 8000892:	f892 223e 	ldrb.w	r2, [r2, #574]	; 0x23e
	uint32toArray(
 8000896:	fb02 f303 	mul.w	r3, r2, r3
 800089a:	4919      	ldr	r1, [pc, #100]	; (8000900 <SetHeader+0x1dc>)
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fe8b 	bl	80005b8 <uint32toArray>
	memcpy(wtext + 40, data_uint, 4);
 80008a2:	f107 030c 	add.w	r3, r7, #12
 80008a6:	3328      	adds	r3, #40	; 0x28
 80008a8:	4a15      	ldr	r2, [pc, #84]	; (8000900 <SetHeader+0x1dc>)
 80008aa:	6812      	ldr	r2, [r2, #0]
 80008ac:	601a      	str	r2, [r3, #0]

	sample->fichier.fptr = 0;
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	; 0x24

	res = f_write(&(sample->fichier), wtext, 44, (void*) &byteswritten);
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f103 000c 	add.w	r0, r3, #12
 80008ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008be:	f107 010c 	add.w	r1, r7, #12
 80008c2:	222c      	movs	r2, #44	; 0x2c
 80008c4:	f00e ff7f 	bl	800f7c6 <f_write>
 80008c8:	4603      	mov	r3, r0
 80008ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if ((byteswritten == 0) || (res != FR_OK)) {
 80008ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d003      	beq.n	80008dc <SetHeader+0x1b8>
 80008d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d002      	beq.n	80008e2 <SetHeader+0x1be>
		Error_Handler();
 80008dc:	f001 fbbe 	bl	800205c <Error_Handler>
 80008e0:	e005      	b.n	80008ee <SetHeader+0x1ca>
	} else {
		f_close(&(sample->fichier));
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	330c      	adds	r3, #12
 80008e6:	4618      	mov	r0, r3
 80008e8:	f00f f99a 	bl	800fc20 <f_close>
	}
}
 80008ec:	bf00      	nop
 80008ee:	bf00      	nop
 80008f0:	3740      	adds	r7, #64	; 0x40
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	08013d48 	.word	0x08013d48
 80008fc:	20008890 	.word	0x20008890
 8000900:	2000888c 	.word	0x2000888c
 8000904:	08013d50 	.word	0x08013d50
 8000908:	08013d58 	.word	0x08013d58
 800090c:	08013d60 	.word	0x08013d60

08000910 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000914:	bf00      	nop
 8000916:	46bd      	mov	sp, r7
 8000918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800091c:	4770      	bx	lr

0800091e <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 800091e:	b480      	push	{r7}
 8000920:	b083      	sub	sp, #12
 8000922:	af00      	add	r7, sp, #0
 8000924:	6078      	str	r0, [r7, #4]
 8000926:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000938:	bf00      	nop
 800093a:	46bd      	mov	sp, r7
 800093c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000940:	4770      	bx	lr
	...

08000944 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000944:	b480      	push	{r7}
 8000946:	b085      	sub	sp, #20
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	4a07      	ldr	r2, [pc, #28]	; (8000970 <vApplicationGetIdleTaskMemory+0x2c>)
 8000954:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000956:	68bb      	ldr	r3, [r7, #8]
 8000958:	4a06      	ldr	r2, [pc, #24]	; (8000974 <vApplicationGetIdleTaskMemory+0x30>)
 800095a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2280      	movs	r2, #128	; 0x80
 8000960:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000962:	bf00      	nop
 8000964:	3714      	adds	r7, #20
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	20000104 	.word	0x20000104
 8000974:	20000158 	.word	0x20000158

08000978 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b082      	sub	sp, #8
 800097c:	af00      	add	r7, sp, #0
 800097e:	4603      	mov	r3, r0
 8000980:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000982:	20c8      	movs	r0, #200	; 0xc8
 8000984:	f001 fd7c 	bl	8002480 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000988:	f000 f9b4 	bl	8000cf4 <ft5336_I2C_InitializeIfRequired>
}
 800098c:	bf00      	nop
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}

08000994 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800099e:	bf00      	nop
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80009aa:	b580      	push	{r7, lr}
 80009ac:	b084      	sub	sp, #16
 80009ae:	af00      	add	r7, sp, #0
 80009b0:	4603      	mov	r3, r0
 80009b2:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80009b4:	2300      	movs	r3, #0
 80009b6:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80009bc:	2300      	movs	r3, #0
 80009be:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80009c0:	f000 f998 	bl	8000cf4 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80009c4:	2300      	movs	r3, #0
 80009c6:	73fb      	strb	r3, [r7, #15]
 80009c8:	e010      	b.n	80009ec <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80009ca:	88fb      	ldrh	r3, [r7, #6]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	21a8      	movs	r1, #168	; 0xa8
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 fd37 	bl	8002444 <TS_IO_Read>
 80009d6:	4603      	mov	r3, r0
 80009d8:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80009da:	7b7b      	ldrb	r3, [r7, #13]
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	2b51      	cmp	r3, #81	; 0x51
 80009e0:	d101      	bne.n	80009e6 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80009e2:	2301      	movs	r3, #1
 80009e4:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80009e6:	7bfb      	ldrb	r3, [r7, #15]
 80009e8:	3301      	adds	r3, #1
 80009ea:	73fb      	strb	r3, [r7, #15]
 80009ec:	7bfb      	ldrb	r3, [r7, #15]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d802      	bhi.n	80009f8 <ft5336_ReadID+0x4e>
 80009f2:	7bbb      	ldrb	r3, [r7, #14]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0e8      	beq.n	80009ca <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80009f8:	7b7b      	ldrb	r3, [r7, #13]
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	b29b      	uxth	r3, r3
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3710      	adds	r7, #16
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000a10:	88fb      	ldrh	r3, [r7, #6]
 8000a12:	4618      	mov	r0, r3
 8000a14:	f000 f97e 	bl	8000d14 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	f000 f932 	bl	8000c84 <ft5336_TS_DisableIT>
}
 8000a20:	bf00      	nop
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b084      	sub	sp, #16
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	b2db      	uxtb	r3, r3
 8000a3a:	2102      	movs	r1, #2
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fd01 	bl	8002444 <TS_IO_Read>
 8000a42:	4603      	mov	r3, r0
 8000a44:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 8000a46:	7bfb      	ldrb	r3, [r7, #15]
 8000a48:	b2db      	uxtb	r3, r3
 8000a4a:	f003 030f 	and.w	r3, r3, #15
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8000a52:	7bfb      	ldrb	r3, [r7, #15]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b05      	cmp	r3, #5
 8000a58:	d901      	bls.n	8000a5e <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <ft5336_TS_DetectTouch+0x50>)
 8000a64:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000a66:	4b04      	ldr	r3, [pc, #16]	; (8000a78 <ft5336_TS_DetectTouch+0x50>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000a6c:	7bfb      	ldrb	r3, [r7, #15]
 8000a6e:	b2db      	uxtb	r3, r3
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3710      	adds	r7, #16
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000358 	.word	0x20000358

08000a7c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
 8000a88:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000a9e:	4b6d      	ldr	r3, [pc, #436]	; (8000c54 <ft5336_TS_GetXY+0x1d8>)
 8000aa0:	789a      	ldrb	r2, [r3, #2]
 8000aa2:	4b6c      	ldr	r3, [pc, #432]	; (8000c54 <ft5336_TS_GetXY+0x1d8>)
 8000aa4:	785b      	ldrb	r3, [r3, #1]
 8000aa6:	429a      	cmp	r2, r3
 8000aa8:	f080 80cf 	bcs.w	8000c4a <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000aac:	4b69      	ldr	r3, [pc, #420]	; (8000c54 <ft5336_TS_GetXY+0x1d8>)
 8000aae:	789b      	ldrb	r3, [r3, #2]
 8000ab0:	2b09      	cmp	r3, #9
 8000ab2:	d871      	bhi.n	8000b98 <ft5336_TS_GetXY+0x11c>
 8000ab4:	a201      	add	r2, pc, #4	; (adr r2, 8000abc <ft5336_TS_GetXY+0x40>)
 8000ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aba:	bf00      	nop
 8000abc:	08000ae5 	.word	0x08000ae5
 8000ac0:	08000af7 	.word	0x08000af7
 8000ac4:	08000b09 	.word	0x08000b09
 8000ac8:	08000b1b 	.word	0x08000b1b
 8000acc:	08000b2d 	.word	0x08000b2d
 8000ad0:	08000b3f 	.word	0x08000b3f
 8000ad4:	08000b51 	.word	0x08000b51
 8000ad8:	08000b63 	.word	0x08000b63
 8000adc:	08000b75 	.word	0x08000b75
 8000ae0:	08000b87 	.word	0x08000b87
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000ae4:	2304      	movs	r3, #4
 8000ae6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000ae8:	2303      	movs	r3, #3
 8000aea:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000aec:	2306      	movs	r3, #6
 8000aee:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000af0:	2305      	movs	r3, #5
 8000af2:	753b      	strb	r3, [r7, #20]
      break;
 8000af4:	e051      	b.n	8000b9a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000af6:	230a      	movs	r3, #10
 8000af8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000afa:	2309      	movs	r3, #9
 8000afc:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000afe:	230c      	movs	r3, #12
 8000b00:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000b02:	230b      	movs	r3, #11
 8000b04:	753b      	strb	r3, [r7, #20]
      break;
 8000b06:	e048      	b.n	8000b9a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000b08:	2310      	movs	r3, #16
 8000b0a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000b0c:	230f      	movs	r3, #15
 8000b0e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000b10:	2312      	movs	r3, #18
 8000b12:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000b14:	2311      	movs	r3, #17
 8000b16:	753b      	strb	r3, [r7, #20]
      break;
 8000b18:	e03f      	b.n	8000b9a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000b1a:	2316      	movs	r3, #22
 8000b1c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000b1e:	2315      	movs	r3, #21
 8000b20:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000b22:	2318      	movs	r3, #24
 8000b24:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000b26:	2317      	movs	r3, #23
 8000b28:	753b      	strb	r3, [r7, #20]
      break;
 8000b2a:	e036      	b.n	8000b9a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000b2c:	231c      	movs	r3, #28
 8000b2e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000b30:	231b      	movs	r3, #27
 8000b32:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000b34:	231e      	movs	r3, #30
 8000b36:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000b38:	231d      	movs	r3, #29
 8000b3a:	753b      	strb	r3, [r7, #20]
      break;
 8000b3c:	e02d      	b.n	8000b9a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000b3e:	2322      	movs	r3, #34	; 0x22
 8000b40:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000b42:	2321      	movs	r3, #33	; 0x21
 8000b44:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000b46:	2324      	movs	r3, #36	; 0x24
 8000b48:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000b4a:	2323      	movs	r3, #35	; 0x23
 8000b4c:	753b      	strb	r3, [r7, #20]
      break;
 8000b4e:	e024      	b.n	8000b9a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000b50:	2328      	movs	r3, #40	; 0x28
 8000b52:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000b54:	2327      	movs	r3, #39	; 0x27
 8000b56:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000b58:	232a      	movs	r3, #42	; 0x2a
 8000b5a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000b5c:	2329      	movs	r3, #41	; 0x29
 8000b5e:	753b      	strb	r3, [r7, #20]
      break;
 8000b60:	e01b      	b.n	8000b9a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000b62:	232e      	movs	r3, #46	; 0x2e
 8000b64:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000b66:	232d      	movs	r3, #45	; 0x2d
 8000b68:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000b6a:	2330      	movs	r3, #48	; 0x30
 8000b6c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000b6e:	232f      	movs	r3, #47	; 0x2f
 8000b70:	753b      	strb	r3, [r7, #20]
      break;
 8000b72:	e012      	b.n	8000b9a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000b74:	2334      	movs	r3, #52	; 0x34
 8000b76:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000b78:	2333      	movs	r3, #51	; 0x33
 8000b7a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000b7c:	2336      	movs	r3, #54	; 0x36
 8000b7e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000b80:	2335      	movs	r3, #53	; 0x35
 8000b82:	753b      	strb	r3, [r7, #20]
      break;
 8000b84:	e009      	b.n	8000b9a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000b86:	233a      	movs	r3, #58	; 0x3a
 8000b88:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000b8a:	2339      	movs	r3, #57	; 0x39
 8000b8c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000b8e:	233c      	movs	r3, #60	; 0x3c
 8000b90:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000b92:	233b      	movs	r3, #59	; 0x3b
 8000b94:	753b      	strb	r3, [r7, #20]
      break;
 8000b96:	e000      	b.n	8000b9a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000b98:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000b9a:	89fb      	ldrh	r3, [r7, #14]
 8000b9c:	b2db      	uxtb	r3, r3
 8000b9e:	7dfa      	ldrb	r2, [r7, #23]
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fc4e 	bl	8002444 <TS_IO_Read>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000bac:	7cfb      	ldrb	r3, [r7, #19]
 8000bae:	b2db      	uxtb	r3, r3
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	4b29      	ldr	r3, [pc, #164]	; (8000c58 <ft5336_TS_GetXY+0x1dc>)
 8000bb4:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000bb6:	89fb      	ldrh	r3, [r7, #14]
 8000bb8:	b2db      	uxtb	r3, r3
 8000bba:	7dba      	ldrb	r2, [r7, #22]
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f001 fc40 	bl	8002444 <TS_IO_Read>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000bc8:	7cfb      	ldrb	r3, [r7, #19]
 8000bca:	b2db      	uxtb	r3, r3
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000bd2:	b21a      	sxth	r2, r3
 8000bd4:	4b20      	ldr	r3, [pc, #128]	; (8000c58 <ft5336_TS_GetXY+0x1dc>)
 8000bd6:	881b      	ldrh	r3, [r3, #0]
 8000bd8:	b21b      	sxth	r3, r3
 8000bda:	4313      	orrs	r3, r2
 8000bdc:	b21b      	sxth	r3, r3
 8000bde:	b29a      	uxth	r2, r3
 8000be0:	4b1d      	ldr	r3, [pc, #116]	; (8000c58 <ft5336_TS_GetXY+0x1dc>)
 8000be2:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000be4:	4b1c      	ldr	r3, [pc, #112]	; (8000c58 <ft5336_TS_GetXY+0x1dc>)
 8000be6:	881a      	ldrh	r2, [r3, #0]
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000bec:	89fb      	ldrh	r3, [r7, #14]
 8000bee:	b2db      	uxtb	r3, r3
 8000bf0:	7d7a      	ldrb	r2, [r7, #21]
 8000bf2:	4611      	mov	r1, r2
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	f001 fc25 	bl	8002444 <TS_IO_Read>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000bfe:	7cfb      	ldrb	r3, [r7, #19]
 8000c00:	b2db      	uxtb	r3, r3
 8000c02:	b29a      	uxth	r2, r3
 8000c04:	4b14      	ldr	r3, [pc, #80]	; (8000c58 <ft5336_TS_GetXY+0x1dc>)
 8000c06:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000c08:	89fb      	ldrh	r3, [r7, #14]
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	7d3a      	ldrb	r2, [r7, #20]
 8000c0e:	4611      	mov	r1, r2
 8000c10:	4618      	mov	r0, r3
 8000c12:	f001 fc17 	bl	8002444 <TS_IO_Read>
 8000c16:	4603      	mov	r3, r0
 8000c18:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000c1a:	7cfb      	ldrb	r3, [r7, #19]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	021b      	lsls	r3, r3, #8
 8000c20:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000c24:	b21a      	sxth	r2, r3
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <ft5336_TS_GetXY+0x1dc>)
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	b21b      	sxth	r3, r3
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	b29a      	uxth	r2, r3
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <ft5336_TS_GetXY+0x1dc>)
 8000c34:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <ft5336_TS_GetXY+0x1dc>)
 8000c38:	881a      	ldrh	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000c3e:	4b05      	ldr	r3, [pc, #20]	; (8000c54 <ft5336_TS_GetXY+0x1d8>)
 8000c40:	789b      	ldrb	r3, [r3, #2]
 8000c42:	3301      	adds	r3, #1
 8000c44:	b2da      	uxtb	r2, r3
 8000c46:	4b03      	ldr	r3, [pc, #12]	; (8000c54 <ft5336_TS_GetXY+0x1d8>)
 8000c48:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000c4a:	bf00      	nop
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000358 	.word	0x20000358
 8000c58:	2000035c 	.word	0x2000035c

08000c5c <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000c6e:	88fb      	ldrh	r3, [r7, #6]
 8000c70:	b2db      	uxtb	r3, r3
 8000c72:	7bfa      	ldrb	r2, [r7, #15]
 8000c74:	21a4      	movs	r1, #164	; 0xa4
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fbca 	bl	8002410 <TS_IO_Write>
}
 8000c7c:	bf00      	nop
 8000c7e:	3710      	adds	r7, #16
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b084      	sub	sp, #16
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000c92:	2300      	movs	r3, #0
 8000c94:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000c96:	88fb      	ldrh	r3, [r7, #6]
 8000c98:	b2db      	uxtb	r3, r3
 8000c9a:	7bfa      	ldrb	r2, [r7, #15]
 8000c9c:	21a4      	movs	r1, #164	; 0xa4
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f001 fbb6 	bl	8002410 <TS_IO_Write>
}
 8000ca4:	bf00      	nop
 8000ca6:	3710      	adds	r7, #16
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}

08000cac <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	370c      	adds	r7, #12
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	4603      	mov	r3, r0
 8000ccc:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
	...

08000cdc <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000ce2:	781b      	ldrb	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	20000358 	.word	0x20000358

08000cf4 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000cf8:	f7ff fff0 	bl	8000cdc <ft5336_Get_I2C_InitializedStatus>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d104      	bne.n	8000d0c <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000d02:	f001 fb7b 	bl	80023fc <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000d06:	4b02      	ldr	r3, [pc, #8]	; (8000d10 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000d08:	2201      	movs	r2, #1
 8000d0a:	701a      	strb	r2, [r3, #0]
  }
}
 8000d0c:	bf00      	nop
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	20000358 	.word	0x20000358

08000d14 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b085      	sub	sp, #20
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000d22:	68fb      	ldr	r3, [r7, #12]
}
 8000d24:	4618      	mov	r0, r3
 8000d26:	3714      	adds	r7, #20
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000d34:	f3bf 8f4f 	dsb	sy
}
 8000d38:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d3a:	f3bf 8f6f 	isb	sy
}
 8000d3e:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000d40:	4b0d      	ldr	r3, [pc, #52]	; (8000d78 <SCB_EnableICache+0x48>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000d48:	f3bf 8f4f 	dsb	sy
}
 8000d4c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d4e:	f3bf 8f6f 	isb	sy
}
 8000d52:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <SCB_EnableICache+0x48>)
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	4a07      	ldr	r2, [pc, #28]	; (8000d78 <SCB_EnableICache+0x48>)
 8000d5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d5e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d60:	f3bf 8f4f 	dsb	sy
}
 8000d64:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d66:	f3bf 8f6f 	isb	sy
}
 8000d6a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b085      	sub	sp, #20
 8000d80:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000d82:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <SCB_EnableDCache+0x84>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d8a:	f3bf 8f4f 	dsb	sy
}
 8000d8e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d90:	4b1b      	ldr	r3, [pc, #108]	; (8000e00 <SCB_EnableDCache+0x84>)
 8000d92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d96:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	0b5b      	lsrs	r3, r3, #13
 8000d9c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000da0:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	08db      	lsrs	r3, r3, #3
 8000da6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000daa:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	015a      	lsls	r2, r3, #5
 8000db0:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000db4:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000db6:	68ba      	ldr	r2, [r7, #8]
 8000db8:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000dba:	4911      	ldr	r1, [pc, #68]	; (8000e00 <SCB_EnableDCache+0x84>)
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000dc2:	68bb      	ldr	r3, [r7, #8]
 8000dc4:	1e5a      	subs	r2, r3, #1
 8000dc6:	60ba      	str	r2, [r7, #8]
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1ef      	bne.n	8000dac <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	1e5a      	subs	r2, r3, #1
 8000dd0:	60fa      	str	r2, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d1e5      	bne.n	8000da2 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000dd6:	f3bf 8f4f 	dsb	sy
}
 8000dda:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000ddc:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <SCB_EnableDCache+0x84>)
 8000dde:	695b      	ldr	r3, [r3, #20]
 8000de0:	4a07      	ldr	r2, [pc, #28]	; (8000e00 <SCB_EnableDCache+0x84>)
 8000de2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000de6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000de8:	f3bf 8f4f 	dsb	sy
}
 8000dec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000dee:	f3bf 8f6f 	isb	sy
}
 8000df2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000df4:	bf00      	nop
 8000df6:	3714      	adds	r7, #20
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr
 8000e00:	e000ed00 	.word	0xe000ed00

08000e04 <RL_sep>:
void StartDefaultTask(void const *argument);
void SDTask(void const *argument);
void AudioTask(void const *argument);

/* USER CODE BEGIN PFP */
void RL_sep(uint16_t *buffer, uint16_t size) {
 8000e04:	b480      	push	{r7}
 8000e06:	b085      	sub	sp, #20
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	807b      	strh	r3, [r7, #2]
	uint16_t j = 0, k = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	81fb      	strh	r3, [r7, #14]
 8000e14:	2300      	movs	r3, #0
 8000e16:	81bb      	strh	r3, [r7, #12]
	for (size_t i = 0; i < size; i++) {
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60bb      	str	r3, [r7, #8]
 8000e1c:	e022      	b.n	8000e64 <RL_sep+0x60>
		if (i % 2) {
 8000e1e:	68bb      	ldr	r3, [r7, #8]
 8000e20:	f003 0301 	and.w	r3, r3, #1
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d00d      	beq.n	8000e44 <RL_sep+0x40>
			((uint16_t*) AUDIO_BUFFER_R)[j] = buffer[i];
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	441a      	add	r2, r3
 8000e30:	89fb      	ldrh	r3, [r7, #14]
 8000e32:	0059      	lsls	r1, r3, #1
 8000e34:	4b11      	ldr	r3, [pc, #68]	; (8000e7c <RL_sep+0x78>)
 8000e36:	440b      	add	r3, r1
 8000e38:	8812      	ldrh	r2, [r2, #0]
 8000e3a:	801a      	strh	r2, [r3, #0]
			j++;
 8000e3c:	89fb      	ldrh	r3, [r7, #14]
 8000e3e:	3301      	adds	r3, #1
 8000e40:	81fb      	strh	r3, [r7, #14]
 8000e42:	e00c      	b.n	8000e5e <RL_sep+0x5a>
		} else {
			((uint16_t*) AUDIO_BUFFER_L)[k] = buffer[i];
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	687a      	ldr	r2, [r7, #4]
 8000e4a:	441a      	add	r2, r3
 8000e4c:	89bb      	ldrh	r3, [r7, #12]
 8000e4e:	0059      	lsls	r1, r3, #1
 8000e50:	4b0b      	ldr	r3, [pc, #44]	; (8000e80 <RL_sep+0x7c>)
 8000e52:	440b      	add	r3, r1
 8000e54:	8812      	ldrh	r2, [r2, #0]
 8000e56:	801a      	strh	r2, [r3, #0]
			k++;
 8000e58:	89bb      	ldrh	r3, [r7, #12]
 8000e5a:	3301      	adds	r3, #1
 8000e5c:	81bb      	strh	r3, [r7, #12]
	for (size_t i = 0; i < size; i++) {
 8000e5e:	68bb      	ldr	r3, [r7, #8]
 8000e60:	3301      	adds	r3, #1
 8000e62:	60bb      	str	r3, [r7, #8]
 8000e64:	887b      	ldrh	r3, [r7, #2]
 8000e66:	68ba      	ldr	r2, [r7, #8]
 8000e68:	429a      	cmp	r2, r3
 8000e6a:	d3d8      	bcc.n	8000e1e <RL_sep+0x1a>
		}
	}
}
 8000e6c:	bf00      	nop
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	c0080000 	.word	0xc0080000
 8000e80:	c0080200 	.word	0xc0080200

08000e84 <treatment>:
			k++;
		}
	}
}

void treatment() {
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < AUDIO_BLOCK_SIZE / 2; i++) {
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
 8000e8e:	e013      	b.n	8000eb8 <treatment+0x34>
		((uint16_t*) AUDIO_POST)[i] = ((uint16_t*) AUDIO_BUFFER_L)[i]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	005a      	lsls	r2, r3, #1
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <treatment+0x48>)
 8000e96:	4413      	add	r3, r2
 8000e98:	8819      	ldrh	r1, [r3, #0]
				+ ((uint16_t*) AUDIO_BUFFER_R)[i];
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	005a      	lsls	r2, r3, #1
 8000e9e:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <treatment+0x4c>)
 8000ea0:	4413      	add	r3, r2
 8000ea2:	881a      	ldrh	r2, [r3, #0]
		((uint16_t*) AUDIO_POST)[i] = ((uint16_t*) AUDIO_BUFFER_L)[i]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	0058      	lsls	r0, r3, #1
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <treatment+0x50>)
 8000eaa:	4403      	add	r3, r0
				+ ((uint16_t*) AUDIO_BUFFER_R)[i];
 8000eac:	440a      	add	r2, r1
 8000eae:	b292      	uxth	r2, r2
		((uint16_t*) AUDIO_POST)[i] = ((uint16_t*) AUDIO_BUFFER_L)[i]
 8000eb0:	801a      	strh	r2, [r3, #0]
	for (size_t i = 0; i < AUDIO_BLOCK_SIZE / 2; i++) {
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	3301      	adds	r3, #1
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2bff      	cmp	r3, #255	; 0xff
 8000ebc:	d9e8      	bls.n	8000e90 <treatment+0xc>
	}
}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	c0080200 	.word	0xc0080200
 8000ed0:	c0080000 	.word	0xc0080000
 8000ed4:	c0080400 	.word	0xc0080400

08000ed8 <RL_cat2>:

void RL_cat2(uint16_t *buffer, uint16_t size) {
 8000ed8:	b480      	push	{r7}
 8000eda:	b085      	sub	sp, #20
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	807b      	strh	r3, [r7, #2]
	uint16_t j = 0, k = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	81fb      	strh	r3, [r7, #14]
 8000ee8:	2300      	movs	r3, #0
 8000eea:	81bb      	strh	r3, [r7, #12]
	for (size_t i = 0; i < size; i++) {
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	e022      	b.n	8000f38 <RL_cat2+0x60>
		if (i % 2) {
 8000ef2:	68bb      	ldr	r3, [r7, #8]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d00d      	beq.n	8000f18 <RL_cat2+0x40>
			buffer[i] = ((uint16_t*) AUDIO_POST)[j];
 8000efc:	89fb      	ldrh	r3, [r7, #14]
 8000efe:	005a      	lsls	r2, r3, #1
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <RL_cat2+0x78>)
 8000f02:	4413      	add	r3, r2
 8000f04:	68ba      	ldr	r2, [r7, #8]
 8000f06:	0052      	lsls	r2, r2, #1
 8000f08:	6879      	ldr	r1, [r7, #4]
 8000f0a:	440a      	add	r2, r1
 8000f0c:	881b      	ldrh	r3, [r3, #0]
 8000f0e:	8013      	strh	r3, [r2, #0]
			j++;
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	3301      	adds	r3, #1
 8000f14:	81fb      	strh	r3, [r7, #14]
 8000f16:	e00c      	b.n	8000f32 <RL_cat2+0x5a>
		} else {
			buffer[i] = ((uint16_t*) AUDIO_POST)[k];
 8000f18:	89bb      	ldrh	r3, [r7, #12]
 8000f1a:	005a      	lsls	r2, r3, #1
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <RL_cat2+0x78>)
 8000f1e:	4413      	add	r3, r2
 8000f20:	68ba      	ldr	r2, [r7, #8]
 8000f22:	0052      	lsls	r2, r2, #1
 8000f24:	6879      	ldr	r1, [r7, #4]
 8000f26:	440a      	add	r2, r1
 8000f28:	881b      	ldrh	r3, [r3, #0]
 8000f2a:	8013      	strh	r3, [r2, #0]
			k++;
 8000f2c:	89bb      	ldrh	r3, [r7, #12]
 8000f2e:	3301      	adds	r3, #1
 8000f30:	81bb      	strh	r3, [r7, #12]
	for (size_t i = 0; i < size; i++) {
 8000f32:	68bb      	ldr	r3, [r7, #8]
 8000f34:	3301      	adds	r3, #1
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	887b      	ldrh	r3, [r7, #2]
 8000f3a:	68ba      	ldr	r2, [r7, #8]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	d3d8      	bcc.n	8000ef2 <RL_cat2+0x1a>
		}
	}
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3714      	adds	r7, #20
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	c0080400 	.word	0xc0080400

08000f54 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000f54:	b5b0      	push	{r4, r5, r7, lr}
 8000f56:	b096      	sub	sp, #88	; 0x58
 8000f58:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t status = 0;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000f60:	f7ff fee6 	bl	8000d30 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000f64:	f7ff ff0a 	bl	8000d7c <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f68:	f004 fe0e 	bl	8005b88 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f6c:	f000 f8ca 	bl	8001104 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f70:	f000 fba2 	bl	80016b8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000f74:	f000 fb1c 	bl	80015b0 <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 8000f78:	f000 faca 	bl	8001510 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8000f7c:	f00c f9f2 	bl	800d364 <MX_FATFS_Init>
	MX_FMC_Init();
 8000f80:	f000 fb4c 	bl	800161c <MX_FMC_Init>
	MX_LTDC_Init();
 8000f84:	f000 f99a 	bl	80012bc <MX_LTDC_Init>
	MX_USART1_UART_Init();
 8000f88:	f000 fae2 	bl	8001550 <MX_USART1_UART_Init>
	MX_DMA2D_Init();
 8000f8c:	f000 f964 	bl	8001258 <MX_DMA2D_Init>
	MX_SAI2_Init();
 8000f90:	f000 fa16 	bl	80013c0 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000f94:	f001 fe94 	bl	8002cc0 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000f98:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000f9c:	2000      	movs	r0, #0
 8000f9e:	f001 ff27 	bl	8002df0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
	LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000fa2:	f001 fefd 	bl	8002da0 <BSP_LCD_GetXSize>
 8000fa6:	4604      	mov	r4, r0
 8000fa8:	f001 ff0e 	bl	8002dc8 <BSP_LCD_GetYSize>
 8000fac:	4603      	mov	r3, r0
 8000fae:	fb03 f304 	mul.w	r3, r3, r4
 8000fb2:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4619      	mov	r1, r3
 8000fba:	2001      	movs	r0, #1
 8000fbc:	f001 ff18 	bl	8002df0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000fc0:	f002 f94e 	bl	8003260 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f001 ff73 	bl	8002eb0 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000fca:	f04f 30ff 	mov.w	r0, #4294967295
 8000fce:	f001 ffcb 	bl	8002f68 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000fd2:	4840      	ldr	r0, [pc, #256]	; (80010d4 <main+0x180>)
 8000fd4:	f001 ffae 	bl	8002f34 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f001 ff90 	bl	8002f00 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 8000fe0:	483d      	ldr	r0, [pc, #244]	; (80010d8 <main+0x184>)
 8000fe2:	f001 ff75 	bl	8002ed0 <BSP_LCD_SetTextColor>

	status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000fe6:	f001 fedb 	bl	8002da0 <BSP_LCD_GetXSize>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b29c      	uxth	r4, r3
 8000fee:	f001 feeb 	bl	8002dc8 <BSP_LCD_GetYSize>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	f002 fcff 	bl	80039fc <BSP_TS_Init>
 8000ffe:	4603      	mov	r3, r0
 8001000:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (status != TS_OK) {
 8001004:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8001008:	2b00      	cmp	r3, #0
 800100a:	d01d      	beq.n	8001048 <main+0xf4>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f001 ff76 	bl	8002f00 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8001014:	4831      	ldr	r0, [pc, #196]	; (80010dc <main+0x188>)
 8001016:	f001 ff5b 	bl	8002ed0 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t*) "ERROR",
 800101a:	f001 fed5 	bl	8002dc8 <BSP_LCD_GetYSize>
 800101e:	4603      	mov	r3, r0
 8001020:	b29b      	uxth	r3, r3
 8001022:	3b5f      	subs	r3, #95	; 0x5f
 8001024:	b299      	uxth	r1, r3
 8001026:	2301      	movs	r3, #1
 8001028:	4a2d      	ldr	r2, [pc, #180]	; (80010e0 <main+0x18c>)
 800102a:	2000      	movs	r0, #0
 800102c:	f002 f808 	bl	8003040 <BSP_LCD_DisplayStringAt>
				CENTER_MODE);
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80,
 8001030:	f001 feca 	bl	8002dc8 <BSP_LCD_GetYSize>
 8001034:	4603      	mov	r3, r0
 8001036:	b29b      	uxth	r3, r3
 8001038:	3b50      	subs	r3, #80	; 0x50
 800103a:	b299      	uxth	r1, r3
 800103c:	2301      	movs	r3, #1
 800103e:	4a29      	ldr	r2, [pc, #164]	; (80010e4 <main+0x190>)
 8001040:	2000      	movs	r0, #0
 8001042:	f001 fffd 	bl	8003040 <BSP_LCD_DisplayStringAt>
 8001046:	e00a      	b.n	800105e <main+0x10a>
				(uint8_t*) "Touchscreen cannot be initialized", CENTER_MODE);
	} else {
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 150,
 8001048:	f001 febe 	bl	8002dc8 <BSP_LCD_GetYSize>
 800104c:	4603      	mov	r3, r0
 800104e:	b29b      	uxth	r3, r3
 8001050:	3b96      	subs	r3, #150	; 0x96
 8001052:	b299      	uxth	r1, r3
 8001054:	2301      	movs	r3, #1
 8001056:	4a24      	ldr	r2, [pc, #144]	; (80010e8 <main+0x194>)
 8001058:	2000      	movs	r0, #0
 800105a:	f001 fff1 	bl	8003040 <BSP_LCD_DisplayStringAt>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800105e:	4b23      	ldr	r3, [pc, #140]	; (80010ec <main+0x198>)
 8001060:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001064:	461d      	mov	r5, r3
 8001066:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001068:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800106a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800106e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001072:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001076:	2100      	movs	r1, #0
 8001078:	4618      	mov	r0, r3
 800107a:	f00f fb21 	bl	80106c0 <osThreadCreate>
 800107e:	4603      	mov	r3, r0
 8001080:	4a1b      	ldr	r2, [pc, #108]	; (80010f0 <main+0x19c>)
 8001082:	6013      	str	r3, [r2, #0]

	/* definition and creation of SD */
	osThreadDef(SD, SDTask, osPriorityAboveNormal, 0, 4096);
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <main+0x1a0>)
 8001086:	f107 041c 	add.w	r4, r7, #28
 800108a:	461d      	mov	r5, r3
 800108c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800108e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001090:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001094:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SDHandle = osThreadCreate(osThread(SD), NULL);
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	2100      	movs	r1, #0
 800109e:	4618      	mov	r0, r3
 80010a0:	f00f fb0e 	bl	80106c0 <osThreadCreate>
 80010a4:	4603      	mov	r3, r0
 80010a6:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <main+0x1a4>)
 80010a8:	6013      	str	r3, [r2, #0]

	/* definition and creation of Audio */
	osThreadDef(Audio, AudioTask, osPriorityNormal, 0, 2048);
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <main+0x1a8>)
 80010ac:	463c      	mov	r4, r7
 80010ae:	461d      	mov	r5, r3
 80010b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80010b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80010b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80010b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AudioHandle = osThreadCreate(osThread(Audio), NULL);
 80010bc:	463b      	mov	r3, r7
 80010be:	2100      	movs	r1, #0
 80010c0:	4618      	mov	r0, r3
 80010c2:	f00f fafd 	bl	80106c0 <osThreadCreate>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4a0d      	ldr	r2, [pc, #52]	; (8001100 <main+0x1ac>)
 80010ca:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 80010cc:	f00f fad5 	bl	801067a <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 80010d0:	e7fe      	b.n	80010d0 <main+0x17c>
 80010d2:	bf00      	nop
 80010d4:	20000034 	.word	0x20000034
 80010d8:	ff8080ff 	.word	0xff8080ff
 80010dc:	ffff0000 	.word	0xffff0000
 80010e0:	08013d80 	.word	0x08013d80
 80010e4:	08013d88 	.word	0x08013d88
 80010e8:	08013dac 	.word	0x08013dac
 80010ec:	08013dc0 	.word	0x08013dc0
 80010f0:	2000891c 	.word	0x2000891c
 80010f4:	08013ddc 	.word	0x08013ddc
 80010f8:	20008a88 	.word	0x20008a88
 80010fc:	08013df8 	.word	0x08013df8
 8001100:	20008fb8 	.word	0x20008fb8

08001104 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001104:	b580      	push	{r7, lr}
 8001106:	b0b4      	sub	sp, #208	; 0xd0
 8001108:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800110a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800110e:	2230      	movs	r2, #48	; 0x30
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f012 f9e0 	bl	80134d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001118:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	2284      	movs	r2, #132	; 0x84
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f012 f9d1 	bl	80134d8 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001136:	f007 f881 	bl	800823c <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800113a:	4b44      	ldr	r3, [pc, #272]	; (800124c <SystemClock_Config+0x148>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	4a43      	ldr	r2, [pc, #268]	; (800124c <SystemClock_Config+0x148>)
 8001140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001144:	6413      	str	r3, [r2, #64]	; 0x40
 8001146:	4b41      	ldr	r3, [pc, #260]	; (800124c <SystemClock_Config+0x148>)
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114e:	607b      	str	r3, [r7, #4]
 8001150:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001152:	4b3f      	ldr	r3, [pc, #252]	; (8001250 <SystemClock_Config+0x14c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4a3e      	ldr	r2, [pc, #248]	; (8001250 <SystemClock_Config+0x14c>)
 8001158:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800115c:	6013      	str	r3, [r2, #0]
 800115e:	4b3c      	ldr	r3, [pc, #240]	; (8001250 <SystemClock_Config+0x14c>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001166:	603b      	str	r3, [r7, #0]
 8001168:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800116a:	2301      	movs	r3, #1
 800116c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001174:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001178:	2302      	movs	r3, #2
 800117a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800117e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001182:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001186:	2319      	movs	r3, #25
 8001188:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 800118c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001190:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001194:	2302      	movs	r3, #2
 8001196:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 800119a:	2309      	movs	r3, #9
 800119c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80011a0:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011a4:	4618      	mov	r0, r3
 80011a6:	f007 f8a9 	bl	80082fc <HAL_RCC_OscConfig>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d001      	beq.n	80011b4 <SystemClock_Config+0xb0>
		Error_Handler();
 80011b0:	f000 ff54 	bl	800205c <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 80011b4:	f007 f852 	bl	800825c <HAL_PWREx_EnableOverDrive>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d001      	beq.n	80011c2 <SystemClock_Config+0xbe>
		Error_Handler();
 80011be:	f000 ff4d 	bl	800205c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80011c2:	230f      	movs	r3, #15
 80011c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011c8:	2302      	movs	r3, #2
 80011ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011d4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 80011e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80011e8:	2106      	movs	r1, #6
 80011ea:	4618      	mov	r0, r3
 80011ec:	f007 fb2a 	bl	8008844 <HAL_RCC_ClockConfig>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <SystemClock_Config+0xf6>
		Error_Handler();
 80011f6:	f000 ff31 	bl	800205c <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 80011fa:	4b16      	ldr	r3, [pc, #88]	; (8001254 <SystemClock_Config+0x150>)
 80011fc:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_SDMMC1
			| RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80011fe:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001202:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001204:	2305      	movs	r3, #5
 8001206:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001208:	2302      	movs	r3, #2
 800120a:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800120c:	2303      	movs	r3, #3
 800120e:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001210:	2301      	movs	r3, #1
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001218:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800121a:	2300      	movs	r3, #0
 800121c:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800121e:	2300      	movs	r3, #0
 8001220:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 8001222:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001226:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800122a:	2300      	movs	r3, #0
 800122c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8001230:	f107 0308 	add.w	r3, r7, #8
 8001234:	4618      	mov	r0, r3
 8001236:	f007 fd0d 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d001      	beq.n	8001244 <SystemClock_Config+0x140>
		Error_Handler();
 8001240:	f000 ff0c 	bl	800205c <Error_Handler>
	}
}
 8001244:	bf00      	nop
 8001246:	37d0      	adds	r7, #208	; 0xd0
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	40023800 	.word	0x40023800
 8001250:	40007000 	.word	0x40007000
 8001254:	00b00048 	.word	0x00b00048

08001258 <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 800125c:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <MX_DMA2D_Init+0x5c>)
 800125e:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <MX_DMA2D_Init+0x60>)
 8001260:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <MX_DMA2D_Init+0x5c>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_DMA2D_Init+0x5c>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_DMA2D_Init+0x5c>)
 8001270:	2200      	movs	r2, #0
 8001272:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_DMA2D_Init+0x5c>)
 8001276:	2200      	movs	r2, #0
 8001278:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_DMA2D_Init+0x5c>)
 800127c:	2200      	movs	r2, #0
 800127e:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_DMA2D_Init+0x5c>)
 8001282:	2200      	movs	r2, #0
 8001284:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 8001286:	4b0b      	ldr	r3, [pc, #44]	; (80012b4 <MX_DMA2D_Init+0x5c>)
 8001288:	2200      	movs	r2, #0
 800128a:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 800128c:	4809      	ldr	r0, [pc, #36]	; (80012b4 <MX_DMA2D_Init+0x5c>)
 800128e:	f005 f9bb 	bl	8006608 <HAL_DMA2D_Init>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_DMA2D_Init+0x44>
		Error_Handler();
 8001298:	f000 fee0 	bl	800205c <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 800129c:	2101      	movs	r1, #1
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <MX_DMA2D_Init+0x5c>)
 80012a0:	f005 fb10 	bl	80068c4 <HAL_DMA2D_ConfigLayer>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_DMA2D_Init+0x56>
		Error_Handler();
 80012aa:	f000 fed7 	bl	800205c <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	2000907c 	.word	0x2000907c
 80012b8:	4002b000 	.word	0x4002b000

080012bc <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08e      	sub	sp, #56	; 0x38
 80012c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	2234      	movs	r2, #52	; 0x34
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f012 f905 	bl	80134d8 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 80012ce:	4b3a      	ldr	r3, [pc, #232]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012d0:	4a3a      	ldr	r2, [pc, #232]	; (80013bc <MX_LTDC_Init+0x100>)
 80012d2:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80012d4:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80012da:	4b37      	ldr	r3, [pc, #220]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012dc:	2200      	movs	r2, #0
 80012de:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80012e0:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80012e6:	4b34      	ldr	r3, [pc, #208]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 80012ec:	4b32      	ldr	r3, [pc, #200]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012ee:	2228      	movs	r2, #40	; 0x28
 80012f0:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012f4:	2209      	movs	r2, #9
 80012f6:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 80012f8:	4b2f      	ldr	r3, [pc, #188]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80012fa:	2235      	movs	r2, #53	; 0x35
 80012fc:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <MX_LTDC_Init+0xfc>)
 8001300:	220b      	movs	r2, #11
 8001302:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001304:	4b2c      	ldr	r3, [pc, #176]	; (80013b8 <MX_LTDC_Init+0xfc>)
 8001306:	f240 2215 	movw	r2, #533	; 0x215
 800130a:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 800130c:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <MX_LTDC_Init+0xfc>)
 800130e:	f240 121b 	movw	r2, #283	; 0x11b
 8001312:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001314:	4b28      	ldr	r3, [pc, #160]	; (80013b8 <MX_LTDC_Init+0xfc>)
 8001316:	f240 2235 	movw	r2, #565	; 0x235
 800131a:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 800131c:	4b26      	ldr	r3, [pc, #152]	; (80013b8 <MX_LTDC_Init+0xfc>)
 800131e:	f240 121d 	movw	r2, #285	; 0x11d
 8001322:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 8001324:	4b24      	ldr	r3, [pc, #144]	; (80013b8 <MX_LTDC_Init+0xfc>)
 8001326:	2200      	movs	r2, #0
 8001328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 800132c:	4b22      	ldr	r3, [pc, #136]	; (80013b8 <MX_LTDC_Init+0xfc>)
 800132e:	2200      	movs	r2, #0
 8001330:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_LTDC_Init+0xfc>)
 8001336:	2200      	movs	r2, #0
 8001338:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 800133c:	481e      	ldr	r0, [pc, #120]	; (80013b8 <MX_LTDC_Init+0xfc>)
 800133e:	f006 fc05 	bl	8007b4c <HAL_LTDC_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_LTDC_Init+0x90>
		Error_Handler();
 8001348:	f000 fe88 	bl	800205c <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 8001350:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001354:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 800135a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800135e:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001360:	2302      	movs	r3, #2
 8001362:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 8001364:	23ff      	movs	r3, #255	; 0xff
 8001366:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 8001368:	2300      	movs	r3, #0
 800136a:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800136c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001370:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001372:	2307      	movs	r3, #7
 8001374:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 8001376:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 800137c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001382:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001386:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 8001388:	2300      	movs	r3, #0
 800138a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001394:	2300      	movs	r3, #0
 8001396:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800139a:	1d3b      	adds	r3, r7, #4
 800139c:	2200      	movs	r2, #0
 800139e:	4619      	mov	r1, r3
 80013a0:	4805      	ldr	r0, [pc, #20]	; (80013b8 <MX_LTDC_Init+0xfc>)
 80013a2:	f006 fd65 	bl	8007e70 <HAL_LTDC_ConfigLayer>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_LTDC_Init+0xf4>
		Error_Handler();
 80013ac:	f000 fe56 	bl	800205c <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	3738      	adds	r7, #56	; 0x38
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20008a8c 	.word	0x20008a8c
 80013bc:	40016800 	.word	0x40016800

080013c0 <MX_SAI2_Init>:
/**
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 80013c4:	4b4e      	ldr	r3, [pc, #312]	; (8001500 <MX_SAI2_Init+0x140>)
 80013c6:	4a4f      	ldr	r2, [pc, #316]	; (8001504 <MX_SAI2_Init+0x144>)
 80013c8:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 80013ca:	4b4d      	ldr	r3, [pc, #308]	; (8001500 <MX_SAI2_Init+0x140>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80013d0:	4b4b      	ldr	r3, [pc, #300]	; (8001500 <MX_SAI2_Init+0x140>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 80013d6:	4b4a      	ldr	r3, [pc, #296]	; (8001500 <MX_SAI2_Init+0x140>)
 80013d8:	2240      	movs	r2, #64	; 0x40
 80013da:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80013dc:	4b48      	ldr	r3, [pc, #288]	; (8001500 <MX_SAI2_Init+0x140>)
 80013de:	2200      	movs	r2, #0
 80013e0:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80013e2:	4b47      	ldr	r3, [pc, #284]	; (8001500 <MX_SAI2_Init+0x140>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80013e8:	4b45      	ldr	r3, [pc, #276]	; (8001500 <MX_SAI2_Init+0x140>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80013ee:	4b44      	ldr	r3, [pc, #272]	; (8001500 <MX_SAI2_Init+0x140>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80013f4:	4b42      	ldr	r3, [pc, #264]	; (8001500 <MX_SAI2_Init+0x140>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80013fa:	4b41      	ldr	r3, [pc, #260]	; (8001500 <MX_SAI2_Init+0x140>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001400:	4b3f      	ldr	r3, [pc, #252]	; (8001500 <MX_SAI2_Init+0x140>)
 8001402:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001406:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001408:	4b3d      	ldr	r3, [pc, #244]	; (8001500 <MX_SAI2_Init+0x140>)
 800140a:	2200      	movs	r2, #0
 800140c:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800140e:	4b3c      	ldr	r3, [pc, #240]	; (8001500 <MX_SAI2_Init+0x140>)
 8001410:	2200      	movs	r2, #0
 8001412:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001414:	4b3a      	ldr	r3, [pc, #232]	; (8001500 <MX_SAI2_Init+0x140>)
 8001416:	2200      	movs	r2, #0
 8001418:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800141a:	4b39      	ldr	r3, [pc, #228]	; (8001500 <MX_SAI2_Init+0x140>)
 800141c:	2200      	movs	r2, #0
 800141e:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 8;
 8001420:	4b37      	ldr	r3, [pc, #220]	; (8001500 <MX_SAI2_Init+0x140>)
 8001422:	2208      	movs	r2, #8
 8001424:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 8001426:	4b36      	ldr	r3, [pc, #216]	; (8001500 <MX_SAI2_Init+0x140>)
 8001428:	2201      	movs	r2, #1
 800142a:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800142c:	4b34      	ldr	r3, [pc, #208]	; (8001500 <MX_SAI2_Init+0x140>)
 800142e:	2200      	movs	r2, #0
 8001430:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8001432:	4b33      	ldr	r3, [pc, #204]	; (8001500 <MX_SAI2_Init+0x140>)
 8001434:	2200      	movs	r2, #0
 8001436:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001438:	4b31      	ldr	r3, [pc, #196]	; (8001500 <MX_SAI2_Init+0x140>)
 800143a:	2200      	movs	r2, #0
 800143c:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 800143e:	4b30      	ldr	r3, [pc, #192]	; (8001500 <MX_SAI2_Init+0x140>)
 8001440:	2200      	movs	r2, #0
 8001442:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8001444:	4b2e      	ldr	r3, [pc, #184]	; (8001500 <MX_SAI2_Init+0x140>)
 8001446:	2200      	movs	r2, #0
 8001448:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 1;
 800144a:	4b2d      	ldr	r3, [pc, #180]	; (8001500 <MX_SAI2_Init+0x140>)
 800144c:	2201      	movs	r2, #1
 800144e:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 8001450:	4b2b      	ldr	r3, [pc, #172]	; (8001500 <MX_SAI2_Init+0x140>)
 8001452:	2200      	movs	r2, #0
 8001454:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK) {
 8001456:	482a      	ldr	r0, [pc, #168]	; (8001500 <MX_SAI2_Init+0x140>)
 8001458:	f008 fa3c 	bl	80098d4 <HAL_SAI_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_SAI2_Init+0xa6>
		Error_Handler();
 8001462:	f000 fdfb 	bl	800205c <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8001466:	4b28      	ldr	r3, [pc, #160]	; (8001508 <MX_SAI2_Init+0x148>)
 8001468:	4a28      	ldr	r2, [pc, #160]	; (800150c <MX_SAI2_Init+0x14c>)
 800146a:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 800146c:	4b26      	ldr	r3, [pc, #152]	; (8001508 <MX_SAI2_Init+0x148>)
 800146e:	2200      	movs	r2, #0
 8001470:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8001472:	4b25      	ldr	r3, [pc, #148]	; (8001508 <MX_SAI2_Init+0x148>)
 8001474:	2203      	movs	r2, #3
 8001476:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 8001478:	4b23      	ldr	r3, [pc, #140]	; (8001508 <MX_SAI2_Init+0x148>)
 800147a:	2240      	movs	r2, #64	; 0x40
 800147c:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 800147e:	4b22      	ldr	r3, [pc, #136]	; (8001508 <MX_SAI2_Init+0x148>)
 8001480:	2200      	movs	r2, #0
 8001482:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001484:	4b20      	ldr	r3, [pc, #128]	; (8001508 <MX_SAI2_Init+0x148>)
 8001486:	2200      	movs	r2, #0
 8001488:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800148a:	4b1f      	ldr	r3, [pc, #124]	; (8001508 <MX_SAI2_Init+0x148>)
 800148c:	2201      	movs	r2, #1
 800148e:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001490:	4b1d      	ldr	r3, [pc, #116]	; (8001508 <MX_SAI2_Init+0x148>)
 8001492:	2200      	movs	r2, #0
 8001494:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8001496:	4b1c      	ldr	r3, [pc, #112]	; (8001508 <MX_SAI2_Init+0x148>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800149c:	4b1a      	ldr	r3, [pc, #104]	; (8001508 <MX_SAI2_Init+0x148>)
 800149e:	2200      	movs	r2, #0
 80014a0:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 80014a2:	4b19      	ldr	r3, [pc, #100]	; (8001508 <MX_SAI2_Init+0x148>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80014a8:	4b17      	ldr	r3, [pc, #92]	; (8001508 <MX_SAI2_Init+0x148>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80014ae:	4b16      	ldr	r3, [pc, #88]	; (8001508 <MX_SAI2_Init+0x148>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 8;
 80014b4:	4b14      	ldr	r3, [pc, #80]	; (8001508 <MX_SAI2_Init+0x148>)
 80014b6:	2208      	movs	r2, #8
 80014b8:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 80014ba:	4b13      	ldr	r3, [pc, #76]	; (8001508 <MX_SAI2_Init+0x148>)
 80014bc:	2201      	movs	r2, #1
 80014be:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80014c0:	4b11      	ldr	r3, [pc, #68]	; (8001508 <MX_SAI2_Init+0x148>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80014c6:	4b10      	ldr	r3, [pc, #64]	; (8001508 <MX_SAI2_Init+0x148>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80014cc:	4b0e      	ldr	r3, [pc, #56]	; (8001508 <MX_SAI2_Init+0x148>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 80014d2:	4b0d      	ldr	r3, [pc, #52]	; (8001508 <MX_SAI2_Init+0x148>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <MX_SAI2_Init+0x148>)
 80014da:	2200      	movs	r2, #0
 80014dc:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 1;
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <MX_SAI2_Init+0x148>)
 80014e0:	2201      	movs	r2, #1
 80014e2:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 80014e4:	4b08      	ldr	r3, [pc, #32]	; (8001508 <MX_SAI2_Init+0x148>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK) {
 80014ea:	4807      	ldr	r0, [pc, #28]	; (8001508 <MX_SAI2_Init+0x148>)
 80014ec:	f008 f9f2 	bl	80098d4 <HAL_SAI_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_SAI2_Init+0x13a>
		Error_Handler();
 80014f6:	f000 fdb1 	bl	800205c <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	/* USER CODE END SAI2_Init 2 */

}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20008980 	.word	0x20008980
 8001504:	40015c04 	.word	0x40015c04
 8001508:	20008898 	.word	0x20008898
 800150c:	40015c24 	.word	0x40015c24

08001510 <MX_SDMMC1_SD_Init>:
/**
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void) {
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 8001516:	4a0d      	ldr	r2, [pc, #52]	; (800154c <MX_SDMMC1_SD_Init+0x3c>)
 8001518:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800151a:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 800151c:	2200      	movs	r2, #0
 800151e:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001520:	4b09      	ldr	r3, [pc, #36]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001526:	4b08      	ldr	r3, [pc, #32]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 8001528:	2200      	movs	r2, #0
 800152a:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8001532:	4b05      	ldr	r3, [pc, #20]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 8001534:	2200      	movs	r2, #0
 8001536:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 8001538:	4b03      	ldr	r3, [pc, #12]	; (8001548 <MX_SDMMC1_SD_Init+0x38>)
 800153a:	2200      	movs	r2, #0
 800153c:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	20008a04 	.word	0x20008a04
 800154c:	40012c00 	.word	0x40012c00

08001550 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001554:	4b14      	ldr	r3, [pc, #80]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001556:	4a15      	ldr	r2, [pc, #84]	; (80015ac <MX_USART1_UART_Init+0x5c>)
 8001558:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800155a:	4b13      	ldr	r3, [pc, #76]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 800155c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001560:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001562:	4b11      	ldr	r3, [pc, #68]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800156e:	4b0e      	ldr	r3, [pc, #56]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001570:	2200      	movs	r2, #0
 8001572:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001576:	220c      	movs	r2, #12
 8001578:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800157a:	4b0b      	ldr	r3, [pc, #44]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 800157c:	2200      	movs	r2, #0
 800157e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001580:	4b09      	ldr	r3, [pc, #36]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001582:	2200      	movs	r2, #0
 8001584:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001586:	4b08      	ldr	r3, [pc, #32]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001588:	2200      	movs	r2, #0
 800158a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800158c:	4b06      	ldr	r3, [pc, #24]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 800158e:	2200      	movs	r2, #0
 8001590:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001592:	4805      	ldr	r0, [pc, #20]	; (80015a8 <MX_USART1_UART_Init+0x58>)
 8001594:	f00a fc42 	bl	800be1c <HAL_UART_Init>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 800159e:	f000 fd5d 	bl	800205c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	20008f34 	.word	0x20008f34
 80015ac:	40011000 	.word	0x40011000

080015b0 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80015b6:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_DMA_Init+0x68>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a17      	ldr	r2, [pc, #92]	; (8001618 <MX_DMA_Init+0x68>)
 80015bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b15      	ldr	r3, [pc, #84]	; (8001618 <MX_DMA_Init+0x68>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 80015ce:	2200      	movs	r2, #0
 80015d0:	2105      	movs	r1, #5
 80015d2:	203b      	movs	r0, #59	; 0x3b
 80015d4:	f004 fbea 	bl	8005dac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80015d8:	203b      	movs	r0, #59	; 0x3b
 80015da:	f004 fc03 	bl	8005de4 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2105      	movs	r1, #5
 80015e2:	203c      	movs	r0, #60	; 0x3c
 80015e4:	f004 fbe2 	bl	8005dac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80015e8:	203c      	movs	r0, #60	; 0x3c
 80015ea:	f004 fbfb 	bl	8005de4 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2105      	movs	r1, #5
 80015f2:	2045      	movs	r0, #69	; 0x45
 80015f4:	f004 fbda 	bl	8005dac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 80015f8:	2045      	movs	r0, #69	; 0x45
 80015fa:	f004 fbf3 	bl	8005de4 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 80015fe:	2200      	movs	r2, #0
 8001600:	2105      	movs	r1, #5
 8001602:	2046      	movs	r0, #70	; 0x46
 8001604:	f004 fbd2 	bl	8005dac <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001608:	2046      	movs	r0, #70	; 0x46
 800160a:	f004 fbeb 	bl	8005de4 <HAL_NVIC_EnableIRQ>

}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	40023800 	.word	0x40023800

0800161c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b088      	sub	sp, #32
 8001620:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 8001622:	1d3b      	adds	r3, r7, #4
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]
 8001630:	615a      	str	r2, [r3, #20]
 8001632:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001634:	4b1e      	ldr	r3, [pc, #120]	; (80016b0 <MX_FMC_Init+0x94>)
 8001636:	4a1f      	ldr	r2, [pc, #124]	; (80016b4 <MX_FMC_Init+0x98>)
 8001638:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800163a:	4b1d      	ldr	r3, [pc, #116]	; (80016b0 <MX_FMC_Init+0x94>)
 800163c:	2200      	movs	r2, #0
 800163e:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001640:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <MX_FMC_Init+0x94>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001646:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <MX_FMC_Init+0x94>)
 8001648:	2204      	movs	r2, #4
 800164a:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800164c:	4b18      	ldr	r3, [pc, #96]	; (80016b0 <MX_FMC_Init+0x94>)
 800164e:	2210      	movs	r2, #16
 8001650:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001652:	4b17      	ldr	r3, [pc, #92]	; (80016b0 <MX_FMC_Init+0x94>)
 8001654:	2240      	movs	r2, #64	; 0x40
 8001656:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001658:	4b15      	ldr	r3, [pc, #84]	; (80016b0 <MX_FMC_Init+0x94>)
 800165a:	2280      	movs	r2, #128	; 0x80
 800165c:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800165e:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <MX_FMC_Init+0x94>)
 8001660:	2200      	movs	r2, #0
 8001662:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_FMC_Init+0x94>)
 8001666:	2200      	movs	r2, #0
 8001668:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_FMC_Init+0x94>)
 800166c:	2200      	movs	r2, #0
 800166e:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_FMC_Init+0x94>)
 8001672:	2200      	movs	r2, #0
 8001674:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 8001676:	2310      	movs	r3, #16
 8001678:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 800167a:	2310      	movs	r3, #16
 800167c:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 800167e:	2310      	movs	r3, #16
 8001680:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 8001682:	2310      	movs	r3, #16
 8001684:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 8001686:	2310      	movs	r3, #16
 8001688:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 800168a:	2310      	movs	r3, #16
 800168c:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 800168e:	2310      	movs	r3, #16
 8001690:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	4619      	mov	r1, r3
 8001696:	4806      	ldr	r0, [pc, #24]	; (80016b0 <MX_FMC_Init+0x94>)
 8001698:	f00a f861 	bl	800b75e <HAL_SDRAM_Init>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d001      	beq.n	80016a6 <MX_FMC_Init+0x8a>
		Error_Handler();
 80016a2:	f000 fcdb 	bl	800205c <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 80016a6:	bf00      	nop
 80016a8:	3720      	adds	r7, #32
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200090bc 	.word	0x200090bc
 80016b4:	a0000140 	.word	0xa0000140

080016b8 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b090      	sub	sp, #64	; 0x40
 80016bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80016be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80016ce:	4bae      	ldr	r3, [pc, #696]	; (8001988 <MX_GPIO_Init+0x2d0>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	4aad      	ldr	r2, [pc, #692]	; (8001988 <MX_GPIO_Init+0x2d0>)
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	6313      	str	r3, [r2, #48]	; 0x30
 80016da:	4bab      	ldr	r3, [pc, #684]	; (8001988 <MX_GPIO_Init+0x2d0>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	f003 0310 	and.w	r3, r3, #16
 80016e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80016e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80016e6:	4ba8      	ldr	r3, [pc, #672]	; (8001988 <MX_GPIO_Init+0x2d0>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	4aa7      	ldr	r2, [pc, #668]	; (8001988 <MX_GPIO_Init+0x2d0>)
 80016ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016f0:	6313      	str	r3, [r2, #48]	; 0x30
 80016f2:	4ba5      	ldr	r3, [pc, #660]	; (8001988 <MX_GPIO_Init+0x2d0>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80016fa:	627b      	str	r3, [r7, #36]	; 0x24
 80016fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	4ba2      	ldr	r3, [pc, #648]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	4aa1      	ldr	r2, [pc, #644]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	6313      	str	r3, [r2, #48]	; 0x30
 800170a:	4b9f      	ldr	r3, [pc, #636]	; (8001988 <MX_GPIO_Init+0x2d0>)
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	623b      	str	r3, [r7, #32]
 8001714:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001716:	4b9c      	ldr	r3, [pc, #624]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a9b      	ldr	r2, [pc, #620]	; (8001988 <MX_GPIO_Init+0x2d0>)
 800171c:	f043 0308 	orr.w	r3, r3, #8
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b99      	ldr	r3, [pc, #612]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0308 	and.w	r3, r3, #8
 800172a:	61fb      	str	r3, [r7, #28]
 800172c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800172e:	4b96      	ldr	r3, [pc, #600]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	4a95      	ldr	r2, [pc, #596]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001734:	f043 0304 	orr.w	r3, r3, #4
 8001738:	6313      	str	r3, [r2, #48]	; 0x30
 800173a:	4b93      	ldr	r3, [pc, #588]	; (8001988 <MX_GPIO_Init+0x2d0>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173e:	f003 0304 	and.w	r3, r3, #4
 8001742:	61bb      	str	r3, [r7, #24]
 8001744:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001746:	4b90      	ldr	r3, [pc, #576]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a8f      	ldr	r2, [pc, #572]	; (8001988 <MX_GPIO_Init+0x2d0>)
 800174c:	f043 0301 	orr.w	r3, r3, #1
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b8d      	ldr	r3, [pc, #564]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0301 	and.w	r3, r3, #1
 800175a:	617b      	str	r3, [r7, #20]
 800175c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 800175e:	4b8a      	ldr	r3, [pc, #552]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001762:	4a89      	ldr	r2, [pc, #548]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001764:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001768:	6313      	str	r3, [r2, #48]	; 0x30
 800176a:	4b87      	ldr	r3, [pc, #540]	; (8001988 <MX_GPIO_Init+0x2d0>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001772:	613b      	str	r3, [r7, #16]
 8001774:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001776:	4b84      	ldr	r3, [pc, #528]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	4a83      	ldr	r2, [pc, #524]	; (8001988 <MX_GPIO_Init+0x2d0>)
 800177c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001780:	6313      	str	r3, [r2, #48]	; 0x30
 8001782:	4b81      	ldr	r3, [pc, #516]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001786:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 800178e:	4b7e      	ldr	r3, [pc, #504]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a7d      	ldr	r2, [pc, #500]	; (8001988 <MX_GPIO_Init+0x2d0>)
 8001794:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b7b      	ldr	r3, [pc, #492]	; (8001988 <MX_GPIO_Init+0x2d0>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80017a6:	4b78      	ldr	r3, [pc, #480]	; (8001988 <MX_GPIO_Init+0x2d0>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a77      	ldr	r2, [pc, #476]	; (8001988 <MX_GPIO_Init+0x2d0>)
 80017ac:	f043 0320 	orr.w	r3, r3, #32
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b75      	ldr	r3, [pc, #468]	; (8001988 <MX_GPIO_Init+0x2d0>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0320 	and.w	r3, r3, #32
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80017be:	4b72      	ldr	r3, [pc, #456]	; (8001988 <MX_GPIO_Init+0x2d0>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a71      	ldr	r2, [pc, #452]	; (8001988 <MX_GPIO_Init+0x2d0>)
 80017c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b6f      	ldr	r3, [pc, #444]	; (8001988 <MX_GPIO_Init+0x2d0>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 80017d6:	2201      	movs	r2, #1
 80017d8:	2120      	movs	r1, #32
 80017da:	486c      	ldr	r0, [pc, #432]	; (800198c <MX_GPIO_Init+0x2d4>)
 80017dc:	f005 fc70 	bl	80070c0 <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin,
 80017e0:	2200      	movs	r2, #0
 80017e2:	f241 010c 	movw	r1, #4108	; 0x100c
 80017e6:	486a      	ldr	r0, [pc, #424]	; (8001990 <MX_GPIO_Init+0x2d8>)
 80017e8:	f005 fc6a 	bl	80070c0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 80017ec:	2200      	movs	r2, #0
 80017ee:	2108      	movs	r1, #8
 80017f0:	4868      	ldr	r0, [pc, #416]	; (8001994 <MX_GPIO_Init+0x2dc>)
 80017f2:	f005 fc65 	bl	80070c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017fc:	4866      	ldr	r0, [pc, #408]	; (8001998 <MX_GPIO_Init+0x2e0>)
 80017fe:	f005 fc5f 	bl	80070c0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 8001802:	2200      	movs	r2, #0
 8001804:	21c8      	movs	r1, #200	; 0xc8
 8001806:	4865      	ldr	r0, [pc, #404]	; (800199c <MX_GPIO_Init+0x2e4>)
 8001808:	f005 fc5a 	bl	80070c0 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 800180c:	2308      	movs	r3, #8
 800180e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001810:	2300      	movs	r3, #0
 8001812:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001818:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800181c:	4619      	mov	r1, r3
 800181e:	4860      	ldr	r0, [pc, #384]	; (80019a0 <MX_GPIO_Init+0x2e8>)
 8001820:	f005 f97e 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8001824:	2304      	movs	r3, #4
 8001826:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001828:	2302      	movs	r3, #2
 800182a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182c:	2300      	movs	r3, #0
 800182e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2303      	movs	r3, #3
 8001832:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001834:	2309      	movs	r3, #9
 8001836:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8001838:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800183c:	4619      	mov	r1, r3
 800183e:	4858      	ldr	r0, [pc, #352]	; (80019a0 <MX_GPIO_Init+0x2e8>)
 8001840:	f005 f96e 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 8001844:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8001848:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184a:	2302      	movs	r3, #2
 800184c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184e:	2300      	movs	r3, #0
 8001850:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001852:	2303      	movs	r3, #3
 8001854:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001856:	230b      	movs	r3, #11
 8001858:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800185a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800185e:	4619      	mov	r1, r3
 8001860:	484e      	ldr	r0, [pc, #312]	; (800199c <MX_GPIO_Init+0x2e4>)
 8001862:	f005 f95d 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 8001866:	f44f 7340 	mov.w	r3, #768	; 0x300
 800186a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800186c:	2312      	movs	r3, #18
 800186e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001870:	2301      	movs	r3, #1
 8001872:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001878:	2304      	movs	r3, #4
 800187a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001880:	4619      	mov	r1, r3
 8001882:	4848      	ldr	r0, [pc, #288]	; (80019a4 <MX_GPIO_Init+0x2ec>)
 8001884:	f005 f94c 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
	 ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
 8001888:	f643 4323 	movw	r3, #15395	; 0x3c23
 800188c:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800188e:	2302      	movs	r3, #2
 8001890:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001896:	2303      	movs	r3, #3
 8001898:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800189a:	230a      	movs	r3, #10
 800189c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800189e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a2:	4619      	mov	r1, r3
 80018a4:	483f      	ldr	r0, [pc, #252]	; (80019a4 <MX_GPIO_Init+0x2ec>)
 80018a6:	f005 f93b 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 80018aa:	2310      	movs	r3, #16
 80018ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	2302      	movs	r3, #2
 80018b0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b6:	2300      	movs	r3, #0
 80018b8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ba:	2302      	movs	r3, #2
 80018bc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 80018be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c2:	4619      	mov	r1, r3
 80018c4:	4837      	ldr	r0, [pc, #220]	; (80019a4 <MX_GPIO_Init+0x2ec>)
 80018c6:	f005 f92b 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 80018ca:	2380      	movs	r3, #128	; 0x80
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ce:	2302      	movs	r3, #2
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d6:	2300      	movs	r3, #0
 80018d8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 80018da:	2308      	movs	r3, #8
 80018dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e2:	4619      	mov	r1, r3
 80018e4:	4829      	ldr	r0, [pc, #164]	; (800198c <MX_GPIO_Init+0x2d4>)
 80018e6:	f005 f91b 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 80018ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f8:	2300      	movs	r3, #0
 80018fa:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80018fc:	2301      	movs	r3, #1
 80018fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001900:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001904:	4619      	mov	r1, r3
 8001906:	4828      	ldr	r0, [pc, #160]	; (80019a8 <MX_GPIO_Init+0x2f0>)
 8001908:	f005 f90a 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin | DCMI_D7_Pin;
 800190c:	2360      	movs	r3, #96	; 0x60
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001918:	2300      	movs	r3, #0
 800191a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800191c:	230d      	movs	r3, #13
 800191e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001924:	4619      	mov	r1, r3
 8001926:	481e      	ldr	r0, [pc, #120]	; (80019a0 <MX_GPIO_Init+0x2e8>)
 8001928:	f005 f8fa 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 800192c:	2340      	movs	r3, #64	; 0x40
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001930:	2302      	movs	r3, #2
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001934:	2300      	movs	r3, #0
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001938:	2303      	movs	r3, #3
 800193a:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800193c:	230a      	movs	r3, #10
 800193e:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8001940:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001944:	4619      	mov	r1, r3
 8001946:	4817      	ldr	r0, [pc, #92]	; (80019a4 <MX_GPIO_Init+0x2ec>)
 8001948:	f005 f8ea 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 800194c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001950:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001952:	2300      	movs	r3, #0
 8001954:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 800195a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800195e:	4619      	mov	r1, r3
 8001960:	4812      	ldr	r0, [pc, #72]	; (80019ac <MX_GPIO_Init+0x2f4>)
 8001962:	f005 f8dd 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001966:	2340      	movs	r3, #64	; 0x40
 8001968:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_GPIO_Init+0x2f8>)
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001976:	4619      	mov	r1, r3
 8001978:	4804      	ldr	r0, [pc, #16]	; (800198c <MX_GPIO_Init+0x2d4>)
 800197a:	f005 f8d1 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 800197e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001982:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001984:	e016      	b.n	80019b4 <MX_GPIO_Init+0x2fc>
 8001986:	bf00      	nop
 8001988:	40023800 	.word	0x40023800
 800198c:	40020c00 	.word	0x40020c00
 8001990:	40022000 	.word	0x40022000
 8001994:	40022800 	.word	0x40022800
 8001998:	40021c00 	.word	0x40021c00
 800199c:	40021800 	.word	0x40021800
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40020400 	.word	0x40020400
 80019a8:	40020000 	.word	0x40020000
 80019ac:	40022400 	.word	0x40022400
 80019b0:	10120000 	.word	0x10120000
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b4:	2302      	movs	r3, #2
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80019c0:	230a      	movs	r3, #10
 80019c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c8:	4619      	mov	r1, r3
 80019ca:	48bc      	ldr	r0, [pc, #752]	; (8001cbc <MX_GPIO_Init+0x604>)
 80019cc:	f005 f8a8 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 80019d0:	2320      	movs	r3, #32
 80019d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d4:	2301      	movs	r3, #1
 80019d6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019dc:	2300      	movs	r3, #0
 80019de:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80019e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019e4:	4619      	mov	r1, r3
 80019e6:	48b6      	ldr	r0, [pc, #728]	; (8001cc0 <MX_GPIO_Init+0x608>)
 80019e8:	f005 f89a 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 80019ec:	2308      	movs	r3, #8
 80019ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f8:	2300      	movs	r3, #0
 80019fa:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80019fc:	230d      	movs	r3, #13
 80019fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001a00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a04:	4619      	mov	r1, r3
 8001a06:	48ae      	ldr	r0, [pc, #696]	; (8001cc0 <MX_GPIO_Init+0x608>)
 8001a08:	f005 f88a 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 8001a0c:	f241 030c 	movw	r3, #4108	; 0x100c
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a22:	4619      	mov	r1, r3
 8001a24:	48a7      	ldr	r0, [pc, #668]	; (8001cc4 <MX_GPIO_Init+0x60c>)
 8001a26:	f005 f87b 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a30:	2300      	movs	r3, #0
 8001a32:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a38:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	48a2      	ldr	r0, [pc, #648]	; (8001cc8 <MX_GPIO_Init+0x610>)
 8001a40:	f005 f86e 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a44:	2308      	movs	r3, #8
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	489c      	ldr	r0, [pc, #624]	; (8001ccc <MX_GPIO_Init+0x614>)
 8001a5c:	f005 f860 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 8001a60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a66:	2302      	movs	r3, #2
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a72:	230d      	movs	r3, #13
 8001a74:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 8001a76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4894      	ldr	r0, [pc, #592]	; (8001cd0 <MX_GPIO_Init+0x618>)
 8001a7e:	f005 f84f 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a82:	2310      	movs	r3, #16
 8001a84:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a86:	2300      	movs	r3, #0
 8001a88:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a92:	4619      	mov	r1, r3
 8001a94:	488a      	ldr	r0, [pc, #552]	; (8001cc0 <MX_GPIO_Init+0x608>)
 8001a96:	f005 f843 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8001a9a:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001aa8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aac:	4619      	mov	r1, r3
 8001aae:	4889      	ldr	r0, [pc, #548]	; (8001cd4 <MX_GPIO_Init+0x61c>)
 8001ab0:	f005 f836 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ac4:	2305      	movs	r3, #5
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001ac8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001acc:	4619      	mov	r1, r3
 8001ace:	487d      	ldr	r0, [pc, #500]	; (8001cc4 <MX_GPIO_Init+0x60c>)
 8001ad0:	f005 f826 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001ad4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ada:	2301      	movs	r3, #1
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001ae6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aea:	4619      	mov	r1, r3
 8001aec:	4879      	ldr	r0, [pc, #484]	; (8001cd4 <MX_GPIO_Init+0x61c>)
 8001aee:	f005 f817 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
	 DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin | DCMI_D3_Pin | DCMI_D0_Pin | DCMI_D2_Pin
 8001af2:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
			| DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b00:	2300      	movs	r3, #0
 8001b02:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001b04:	230d      	movs	r3, #13
 8001b06:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	4871      	ldr	r0, [pc, #452]	; (8001cd4 <MX_GPIO_Init+0x61c>)
 8001b10:	f005 f806 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001b14:	2301      	movs	r3, #1
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b20:	2300      	movs	r3, #0
 8001b22:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001b24:	2302      	movs	r3, #2
 8001b26:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	4865      	ldr	r0, [pc, #404]	; (8001cc4 <MX_GPIO_Init+0x60c>)
 8001b30:	f004 fff6 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001b38:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b42:	2300      	movs	r3, #0
 8001b44:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001b46:	2301      	movs	r3, #1
 8001b48:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4e:	4619      	mov	r1, r3
 8001b50:	485a      	ldr	r0, [pc, #360]	; (8001cbc <MX_GPIO_Init+0x604>)
 8001b52:	f004 ffe5 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b56:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b5c:	4b5e      	ldr	r3, [pc, #376]	; (8001cd8 <MX_GPIO_Init+0x620>)
 8001b5e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b60:	2300      	movs	r3, #0
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b68:	4619      	mov	r1, r3
 8001b6a:	4856      	ldr	r0, [pc, #344]	; (8001cc4 <MX_GPIO_Init+0x60c>)
 8001b6c:	f004 ffd8 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8001b70:	23c0      	movs	r3, #192	; 0xc0
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b74:	2302      	movs	r3, #2
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b80:	2308      	movs	r3, #8
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b88:	4619      	mov	r1, r3
 8001b8a:	484f      	ldr	r0, [pc, #316]	; (8001cc8 <MX_GPIO_Init+0x610>)
 8001b8c:	f004 ffc8 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b90:	2310      	movs	r3, #16
 8001b92:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b94:	2302      	movs	r3, #2
 8001b96:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001ba0:	230a      	movs	r3, #10
 8001ba2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001ba4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba8:	4619      	mov	r1, r3
 8001baa:	484a      	ldr	r0, [pc, #296]	; (8001cd4 <MX_GPIO_Init+0x61c>)
 8001bac:	f004 ffb8 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8001bb0:	23c8      	movs	r3, #200	; 0xc8
 8001bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4842      	ldr	r0, [pc, #264]	; (8001cd0 <MX_GPIO_Init+0x618>)
 8001bc8:	f004 ffaa 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
	 ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin | ARDUINO_A5_Pin | ARDUINO_A1_Pin
 8001bcc:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ARDUINO_A2_Pin | ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bd2:	2303      	movs	r3, #3
 8001bd4:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bda:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bde:	4619      	mov	r1, r3
 8001be0:	483e      	ldr	r0, [pc, #248]	; (8001cdc <MX_GPIO_Init+0x624>)
 8001be2:	f004 ff9d 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8001be6:	2305      	movs	r3, #5
 8001be8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bf6:	230a      	movs	r3, #10
 8001bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bfa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	4831      	ldr	r0, [pc, #196]	; (8001cc8 <MX_GPIO_Init+0x610>)
 8001c02:	f004 ff8d 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8001c06:	2332      	movs	r3, #50	; 0x32
 8001c08:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c16:	230b      	movs	r3, #11
 8001c18:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4829      	ldr	r0, [pc, #164]	; (8001cc8 <MX_GPIO_Init+0x610>)
 8001c22:	f004 ff7d 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c26:	2304      	movs	r3, #4
 8001c28:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2a:	2302      	movs	r3, #2
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c32:	2303      	movs	r3, #3
 8001c34:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c36:	2309      	movs	r3, #9
 8001c38:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4827      	ldr	r0, [pc, #156]	; (8001ce0 <MX_GPIO_Init+0x628>)
 8001c42:	f004 ff6d 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 8001c46:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001c4a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001c58:	2309      	movs	r3, #9
 8001c5a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c60:	4619      	mov	r1, r3
 8001c62:	4817      	ldr	r0, [pc, #92]	; (8001cc0 <MX_GPIO_Init+0x608>)
 8001c64:	f004 ff5c 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001c68:	2304      	movs	r3, #4
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4815      	ldr	r0, [pc, #84]	; (8001cd0 <MX_GPIO_Init+0x618>)
 8001c7c:	f004 ff50 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8001c80:	2386      	movs	r3, #134	; 0x86
 8001c82:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c84:	2302      	movs	r3, #2
 8001c86:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c90:	230b      	movs	r3, #11
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4808      	ldr	r0, [pc, #32]	; (8001cbc <MX_GPIO_Init+0x604>)
 8001c9c:	f004 ff40 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001cac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4802      	ldr	r0, [pc, #8]	; (8001cbc <MX_GPIO_Init+0x604>)
 8001cb4:	f004 ff34 	bl	8006b20 <HAL_GPIO_Init>
 8001cb8:	e014      	b.n	8001ce4 <MX_GPIO_Init+0x62c>
 8001cba:	bf00      	nop
 8001cbc:	40020000 	.word	0x40020000
 8001cc0:	40020c00 	.word	0x40020c00
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	40020800 	.word	0x40020800
 8001ccc:	40022800 	.word	0x40022800
 8001cd0:	40021800 	.word	0x40021800
 8001cd4:	40021c00 	.word	0x40021c00
 8001cd8:	10120000 	.word	0x10120000
 8001cdc:	40021400 	.word	0x40021400
 8001ce0:	40020400 	.word	0x40020400

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin | GPIO_PIN_6;
 8001ce4:	2350      	movs	r3, #80	; 0x50
 8001ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001cf4:	230d      	movs	r3, #13
 8001cf6:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4824      	ldr	r0, [pc, #144]	; (8001d90 <MX_GPIO_Init+0x6d8>)
 8001d00:	f004 ff0e 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
	GPIO_InitStruct.Pin = LCD_SCL_Pin | LCD_SDA_Pin;
 8001d04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001d08:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d0a:	2312      	movs	r3, #18
 8001d0c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d12:	2303      	movs	r3, #3
 8001d14:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001d16:	2304      	movs	r3, #4
 8001d18:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d1e:	4619      	mov	r1, r3
 8001d20:	481c      	ldr	r0, [pc, #112]	; (8001d94 <MX_GPIO_Init+0x6dc>)
 8001d22:	f004 fefd 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8001d26:	2328      	movs	r3, #40	; 0x28
 8001d28:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d32:	2303      	movs	r3, #3
 8001d34:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001d36:	230a      	movs	r3, #10
 8001d38:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4813      	ldr	r0, [pc, #76]	; (8001d90 <MX_GPIO_Init+0x6d8>)
 8001d42:	f004 feed 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001d46:	2340      	movs	r3, #64	; 0x40
 8001d48:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d52:	2300      	movs	r3, #0
 8001d54:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001d56:	2309      	movs	r3, #9
 8001d58:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d5e:	4619      	mov	r1, r3
 8001d60:	480c      	ldr	r0, [pc, #48]	; (8001d94 <MX_GPIO_Init+0x6dc>)
 8001d62:	f004 fedd 	bl	8006b20 <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 8001d66:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d70:	2300      	movs	r3, #0
 8001d72:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d74:	2300      	movs	r3, #0
 8001d76:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d78:	2305      	movs	r3, #5
 8001d7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d80:	4619      	mov	r1, r3
 8001d82:	4805      	ldr	r0, [pc, #20]	; (8001d98 <MX_GPIO_Init+0x6e0>)
 8001d84:	f004 fecc 	bl	8006b20 <HAL_GPIO_Init>

}
 8001d88:	bf00      	nop
 8001d8a:	3740      	adds	r7, #64	; 0x40
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	40020000 	.word	0x40020000
 8001d94:	40021c00 	.word	0x40021c00
 8001d98:	40020400 	.word	0x40020400

08001d9c <BSP_AUDIO_IN_TransferComplete_CallBack>:

/* USER CODE BEGIN 4 */
void BSP_AUDIO_IN_TransferComplete_CallBack(void) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	af00      	add	r7, sp, #0
	audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8001da0:	4b03      	ldr	r3, [pc, #12]	; (8001db0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8001da2:	2202      	movs	r2, #2
 8001da4:	601a      	str	r2, [r3, #0]
	return;
 8001da6:	bf00      	nop
}
 8001da8:	46bd      	mov	sp, r7
 8001daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dae:	4770      	bx	lr
 8001db0:	20009150 	.word	0x20009150

08001db4 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void) {
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
	audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
	return;
 8001dbe:	bf00      	nop
}
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr
 8001dc8:	20009150 	.word	0x20009150

08001dcc <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b082      	sub	sp, #8
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001dd4:	2001      	movs	r0, #1
 8001dd6:	f00e fcbf 	bl	8010758 <osDelay>
 8001dda:	e7fb      	b.n	8001dd4 <StartDefaultTask+0x8>

08001ddc <SDTask>:
 * @brief Function implementing the SD thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SDTask */
void SDTask(void const *argument) {
 8001ddc:	b5b0      	push	{r4, r5, r7, lr}
 8001dde:	f6ad 4d98 	subw	sp, sp, #3224	; 0xc98
 8001de2:	af02      	add	r7, sp, #8
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN SDTask */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */
	uint8_t wtext[] = "La version v1.16.1 ne devrait plus poser de soucis :)"; /* File write buffer */
 8001de8:	4b52      	ldr	r3, [pc, #328]	; (8001f34 <SDTask+0x158>)
 8001dea:	f607 444c 	addw	r4, r7, #3148	; 0xc4c
 8001dee:	461d      	mov	r5, r3
 8001df0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001df6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001df8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dfc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001e00:	6020      	str	r0, [r4, #0]
 8001e02:	3404      	adds	r4, #4
 8001e04:	8021      	strh	r1, [r4, #0]
	uint8_t rtext[_MAX_SS];/* File read buffer */
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 8001e06:	2200      	movs	r2, #0
 8001e08:	494b      	ldr	r1, [pc, #300]	; (8001f38 <SDTask+0x15c>)
 8001e0a:	484c      	ldr	r0, [pc, #304]	; (8001f3c <SDTask+0x160>)
 8001e0c:	f00d fab6 	bl	800f37c <f_mount>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d002      	beq.n	8001e1c <SDTask+0x40>
		Error_Handler();
 8001e16:	f000 f921 	bl	800205c <Error_Handler>
 8001e1a:	e038      	b.n	8001e8e <SDTask+0xb2>
	} else {
		if (f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext))
 8001e1c:	f607 234c 	addw	r3, r7, #2636	; 0xa4c
 8001e20:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e24:	9200      	str	r2, [sp, #0]
 8001e26:	2200      	movs	r2, #0
 8001e28:	2107      	movs	r1, #7
 8001e2a:	4843      	ldr	r0, [pc, #268]	; (8001f38 <SDTask+0x15c>)
 8001e2c:	f00d ff28 	bl	800fc80 <f_mkfs>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d002      	beq.n	8001e3c <SDTask+0x60>
				!= FR_OK) {
			Error_Handler();
 8001e36:	f000 f911 	bl	800205c <Error_Handler>
 8001e3a:	e028      	b.n	8001e8e <SDTask+0xb2>
		} else {
			//Open file for writing (Create)
			if (f_open(&SDFile, "EEA.TXT", FA_CREATE_ALWAYS | FA_WRITE)
 8001e3c:	220a      	movs	r2, #10
 8001e3e:	4940      	ldr	r1, [pc, #256]	; (8001f40 <SDTask+0x164>)
 8001e40:	4840      	ldr	r0, [pc, #256]	; (8001f44 <SDTask+0x168>)
 8001e42:	f00d faff 	bl	800f444 <f_open>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d002      	beq.n	8001e52 <SDTask+0x76>
					!= FR_OK) {
				Error_Handler();
 8001e4c:	f000 f906 	bl	800205c <Error_Handler>
 8001e50:	e01d      	b.n	8001e8e <SDTask+0xb2>
			} else {
				//Write to the text file
				res = f_write(&SDFile, wtext, strlen((char*) wtext),
 8001e52:	f607 434c 	addw	r3, r7, #3148	; 0xc4c
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe f9da 	bl	8000210 <strlen>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	f607 4384 	addw	r3, r7, #3204	; 0xc84
 8001e62:	f607 414c 	addw	r1, r7, #3148	; 0xc4c
 8001e66:	4837      	ldr	r0, [pc, #220]	; (8001f44 <SDTask+0x168>)
 8001e68:	f00d fcad 	bl	800f7c6 <f_write>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	f887 3c8b 	strb.w	r3, [r7, #3211]	; 0xc8b
						(void*) &byteswritten);
				if ((byteswritten == 0) || (res != FR_OK)) {
 8001e72:	f8d7 3c84 	ldr.w	r3, [r7, #3204]	; 0xc84
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d003      	beq.n	8001e82 <SDTask+0xa6>
 8001e7a:	f897 3c8b 	ldrb.w	r3, [r7, #3211]	; 0xc8b
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <SDTask+0xac>
					Error_Handler();
 8001e82:	f000 f8eb 	bl	800205c <Error_Handler>
 8001e86:	e002      	b.n	8001e8e <SDTask+0xb2>
				} else {
					f_close(&SDFile);
 8001e88:	482e      	ldr	r0, [pc, #184]	; (8001f44 <SDTask+0x168>)
 8001e8a:	f00d fec9 	bl	800fc20 <f_close>
			}
		}
	}

	Sample sample1;
	sprintf(sample1.nom, "Test1");
 8001e8e:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001e92:	492d      	ldr	r1, [pc, #180]	; (8001f48 <SDTask+0x16c>)
 8001e94:	4618      	mov	r0, r3
 8001e96:	f011 fb27 	bl	80134e8 <siprintf>
	sample1.numchannels = 2;
 8001e9a:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	f883 223f 	strb.w	r2, [r3, #575]	; 0x23f
	sample1.samplelength = 2;
 8001ea4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001ea8:	2202      	movs	r2, #2
 8001eaa:	f883 223e 	strb.w	r2, [r3, #574]	; 0x23e
	sample1.samplerate = 8000;
 8001eae:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001eb2:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8001eb6:	f8a3 223c 	strh.w	r2, [r3, #572]	; 0x23c
	sample1.numsamples = 0;
 8001eba:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	CreateWaveFile(&sample1);
 8001ec4:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7fe fbab 	bl	8000624 <CreateWaveFile>

	uint8_t wdata[2048] = {0};
 8001ece:	f107 0308 	add.w	r3, r7, #8
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
 8001ed6:	3304      	adds	r3, #4
 8001ed8:	f240 72fc 	movw	r2, #2044	; 0x7fc
 8001edc:	2100      	movs	r1, #0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f011 fafa 	bl	80134d8 <memset>
	for (int j = 0; j < 2048; ++j) {
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 8001eea:	e00b      	b.n	8001f04 <SDTask+0x128>
		wdata[j] = 25;
 8001eec:	f107 0208 	add.w	r2, r7, #8
 8001ef0:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8001ef4:	4413      	add	r3, r2
 8001ef6:	2219      	movs	r2, #25
 8001ef8:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 2048; ++j) {
 8001efa:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8001efe:	3301      	adds	r3, #1
 8001f00:	f8c7 3c8c 	str.w	r3, [r7, #3212]	; 0xc8c
 8001f04:	f8d7 3c8c 	ldr.w	r3, [r7, #3212]	; 0xc8c
 8001f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f0c:	dbee      	blt.n	8001eec <SDTask+0x110>
	}
	AddData(&sample1, wdata, 2048);
 8001f0e:	f107 0108 	add.w	r1, r7, #8
 8001f12:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001f16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f7fe fbca 	bl	80006b4 <AddData>
	SetHeader(&sample1);
 8001f20:	f607 0308 	addw	r3, r7, #2056	; 0x808
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fbfd 	bl	8000724 <SetHeader>


	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8001f2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f2e:	f00e fc13 	bl	8010758 <osDelay>
 8001f32:	e7fa      	b.n	8001f2a <SDTask+0x14e>
 8001f34:	08013e24 	.word	0x08013e24
 8001f38:	200092d4 	.word	0x200092d4
 8001f3c:	20009508 	.word	0x20009508
 8001f40:	08013e14 	.word	0x08013e14
 8001f44:	200092d8 	.word	0x200092d8
 8001f48:	08013e1c 	.word	0x08013e1c

08001f4c <AudioTask>:
 * @brief Function implementing the Audio thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_AudioTask */
void AudioTask(void const *argument) {
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af02      	add	r7, sp, #8
 8001f52:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AudioTask */
	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2,
 8001f54:	2302      	movs	r3, #2
 8001f56:	9300      	str	r3, [sp, #0]
 8001f58:	2310      	movs	r3, #16
 8001f5a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001f5e:	2102      	movs	r1, #2
 8001f60:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001f64:	f000 fc62 	bl	800282c <BSP_AUDIO_IN_OUT_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d112      	bne.n	8001f94 <AudioTask+0x48>
	OUTPUT_DEVICE_HEADPHONE, 16000, DEFAULT_AUDIO_IN_BIT_RESOLUTION,
	DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK) {
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001f6e:	f04f 30ff 	mov.w	r0, #4294967295
 8001f72:	f000 ffc5 	bl	8002f00 <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001f76:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001f7a:	f000 ffa9 	bl	8002ed0 <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 90,
 8001f7e:	f000 ff23 	bl	8002dc8 <BSP_LCD_GetYSize>
 8001f82:	4603      	mov	r3, r0
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	3b5a      	subs	r3, #90	; 0x5a
 8001f88:	b299      	uxth	r1, r3
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	4a24      	ldr	r2, [pc, #144]	; (8002020 <AudioTask+0xd4>)
 8001f8e:	2000      	movs	r0, #0
 8001f90:	f001 f856 	bl	8003040 <BSP_LCD_DisplayStringAt>
				(uint8_t*) "  AUDIO RECORD INIT OK  ", CENTER_MODE);
	}

	/* Initialize SDRAM buffers */
	memset((uint16_t*) AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE * 2);
 8001f94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f98:	2100      	movs	r1, #0
 8001f9a:	4822      	ldr	r0, [pc, #136]	; (8002024 <AudioTask+0xd8>)
 8001f9c:	f011 fa9c 	bl	80134d8 <memset>
	memset((uint16_t*) AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE * 2);
 8001fa0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	4820      	ldr	r0, [pc, #128]	; (8002028 <AudioTask+0xdc>)
 8001fa8:	f011 fa96 	bl	80134d8 <memset>
	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8001fac:	4b1f      	ldr	r3, [pc, #124]	; (800202c <AudioTask+0xe0>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]

	/* Start Recording */
	BSP_AUDIO_IN_Record((uint16_t*) AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 8001fb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fb6:	481b      	ldr	r0, [pc, #108]	; (8002024 <AudioTask+0xd8>)
 8001fb8:	f000 fcb2 	bl	8002920 <BSP_AUDIO_IN_Record>
	BSP_AUDIO_IN_SetVolume(80);
 8001fbc:	2050      	movs	r0, #80	; 0x50
 8001fbe:	f000 fcc7 	bl	8002950 <BSP_AUDIO_IN_SetVolume>
	/* Start Playback */
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8001fc2:	2005      	movs	r0, #5
 8001fc4:	f000 fa92 	bl	80024ec <BSP_AUDIO_OUT_SetAudioFrameSlot>
	BSP_AUDIO_OUT_Play((uint16_t*) AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE * 2);
 8001fc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001fcc:	4816      	ldr	r0, [pc, #88]	; (8002028 <AudioTask+0xdc>)
 8001fce:	f000 fa63 	bl	8002498 <BSP_AUDIO_OUT_Play>
	/* Infinite loop */
	for (;;) {
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 8001fd2:	bf00      	nop
 8001fd4:	4b15      	ldr	r3, [pc, #84]	; (800202c <AudioTask+0xe0>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d1fb      	bne.n	8001fd4 <AudioTask+0x88>
			;
		RL_sep((uint16_t*) AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 8001fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe0:	4810      	ldr	r0, [pc, #64]	; (8002024 <AudioTask+0xd8>)
 8001fe2:	f7fe ff0f 	bl	8000e04 <RL_sep>
		treatment();
 8001fe6:	f7fe ff4d 	bl	8000e84 <treatment>
		RL_cat2((uint16_t*) AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE);
 8001fea:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fee:	480e      	ldr	r0, [pc, #56]	; (8002028 <AudioTask+0xdc>)
 8001ff0:	f7fe ff72 	bl	8000ed8 <RL_cat2>
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 8001ff4:	bf00      	nop
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	; (800202c <AudioTask+0xe0>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	2b02      	cmp	r3, #2
 8001ffc:	d1fb      	bne.n	8001ff6 <AudioTask+0xaa>
			;
		RL_sep((uint16_t*) (AUDIO_BUFFER_IN + (AUDIO_BLOCK_SIZE)),
 8001ffe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002002:	480b      	ldr	r0, [pc, #44]	; (8002030 <AudioTask+0xe4>)
 8002004:	f7fe fefe 	bl	8000e04 <RL_sep>
		AUDIO_BLOCK_SIZE);
		treatment();
 8002008:	f7fe ff3c 	bl	8000e84 <treatment>
		RL_cat2((uint16_t*) (AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)),
 800200c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002010:	4808      	ldr	r0, [pc, #32]	; (8002034 <AudioTask+0xe8>)
 8002012:	f7fe ff61 	bl	8000ed8 <RL_cat2>
		AUDIO_BLOCK_SIZE);
		osDelay(2);
 8002016:	2002      	movs	r0, #2
 8002018:	f00e fb9e 	bl	8010758 <osDelay>
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 800201c:	e7d9      	b.n	8001fd2 <AudioTask+0x86>
 800201e:	bf00      	nop
 8002020:	08013e5c 	.word	0x08013e5c
 8002024:	c007f800 	.word	0xc007f800
 8002028:	c007fc00 	.word	0xc007fc00
 800202c:	20009150 	.word	0x20009150
 8002030:	c007fa00 	.word	0xc007fa00
 8002034:	c007fe00 	.word	0xc007fe00

08002038 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a04      	ldr	r2, [pc, #16]	; (8002058 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d101      	bne.n	800204e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800204a:	f003 fdb3 	bl	8005bb4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40001000 	.word	0x40001000

0800205c <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002060:	b672      	cpsid	i
}
 8002062:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002064:	e7fe      	b.n	8002064 <Error_Handler+0x8>
	...

08002068 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b08c      	sub	sp, #48	; 0x30
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	4a51      	ldr	r2, [pc, #324]	; (80021b8 <I2Cx_MspInit+0x150>)
 8002074:	4293      	cmp	r3, r2
 8002076:	d14d      	bne.n	8002114 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002078:	4b50      	ldr	r3, [pc, #320]	; (80021bc <I2Cx_MspInit+0x154>)
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	4a4f      	ldr	r2, [pc, #316]	; (80021bc <I2Cx_MspInit+0x154>)
 800207e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002082:	6313      	str	r3, [r2, #48]	; 0x30
 8002084:	4b4d      	ldr	r3, [pc, #308]	; (80021bc <I2Cx_MspInit+0x154>)
 8002086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800208c:	61bb      	str	r3, [r7, #24]
 800208e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002090:	2380      	movs	r3, #128	; 0x80
 8002092:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002094:	2312      	movs	r3, #18
 8002096:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800209c:	2302      	movs	r3, #2
 800209e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80020a0:	2304      	movs	r3, #4
 80020a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80020a4:	f107 031c 	add.w	r3, r7, #28
 80020a8:	4619      	mov	r1, r3
 80020aa:	4845      	ldr	r0, [pc, #276]	; (80021c0 <I2Cx_MspInit+0x158>)
 80020ac:	f004 fd38 	bl	8006b20 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80020b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020b4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80020b6:	f107 031c 	add.w	r3, r7, #28
 80020ba:	4619      	mov	r1, r3
 80020bc:	4840      	ldr	r0, [pc, #256]	; (80021c0 <I2Cx_MspInit+0x158>)
 80020be:	f004 fd2f 	bl	8006b20 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80020c2:	4b3e      	ldr	r3, [pc, #248]	; (80021bc <I2Cx_MspInit+0x154>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c6:	4a3d      	ldr	r2, [pc, #244]	; (80021bc <I2Cx_MspInit+0x154>)
 80020c8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020cc:	6413      	str	r3, [r2, #64]	; 0x40
 80020ce:	4b3b      	ldr	r3, [pc, #236]	; (80021bc <I2Cx_MspInit+0x154>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 80020da:	4b38      	ldr	r3, [pc, #224]	; (80021bc <I2Cx_MspInit+0x154>)
 80020dc:	6a1b      	ldr	r3, [r3, #32]
 80020de:	4a37      	ldr	r2, [pc, #220]	; (80021bc <I2Cx_MspInit+0x154>)
 80020e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80020e4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80020e6:	4b35      	ldr	r3, [pc, #212]	; (80021bc <I2Cx_MspInit+0x154>)
 80020e8:	6a1b      	ldr	r3, [r3, #32]
 80020ea:	4a34      	ldr	r2, [pc, #208]	; (80021bc <I2Cx_MspInit+0x154>)
 80020ec:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80020f0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80020f2:	2200      	movs	r2, #0
 80020f4:	210f      	movs	r1, #15
 80020f6:	2048      	movs	r0, #72	; 0x48
 80020f8:	f003 fe58 	bl	8005dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80020fc:	2048      	movs	r0, #72	; 0x48
 80020fe:	f003 fe71 	bl	8005de4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002102:	2200      	movs	r2, #0
 8002104:	210f      	movs	r1, #15
 8002106:	2049      	movs	r0, #73	; 0x49
 8002108:	f003 fe50 	bl	8005dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800210c:	2049      	movs	r0, #73	; 0x49
 800210e:	f003 fe69 	bl	8005de4 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002112:	e04d      	b.n	80021b0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002114:	4b29      	ldr	r3, [pc, #164]	; (80021bc <I2Cx_MspInit+0x154>)
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	4a28      	ldr	r2, [pc, #160]	; (80021bc <I2Cx_MspInit+0x154>)
 800211a:	f043 0302 	orr.w	r3, r3, #2
 800211e:	6313      	str	r3, [r2, #48]	; 0x30
 8002120:	4b26      	ldr	r3, [pc, #152]	; (80021bc <I2Cx_MspInit+0x154>)
 8002122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002124:	f003 0302 	and.w	r3, r3, #2
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800212c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002130:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002132:	2312      	movs	r3, #18
 8002134:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800213a:	2302      	movs	r3, #2
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800213e:	2304      	movs	r3, #4
 8002140:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002142:	f107 031c 	add.w	r3, r7, #28
 8002146:	4619      	mov	r1, r3
 8002148:	481e      	ldr	r0, [pc, #120]	; (80021c4 <I2Cx_MspInit+0x15c>)
 800214a:	f004 fce9 	bl	8006b20 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800214e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002152:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002154:	f107 031c 	add.w	r3, r7, #28
 8002158:	4619      	mov	r1, r3
 800215a:	481a      	ldr	r0, [pc, #104]	; (80021c4 <I2Cx_MspInit+0x15c>)
 800215c:	f004 fce0 	bl	8006b20 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <I2Cx_MspInit+0x154>)
 8002162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002164:	4a15      	ldr	r2, [pc, #84]	; (80021bc <I2Cx_MspInit+0x154>)
 8002166:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800216a:	6413      	str	r3, [r2, #64]	; 0x40
 800216c:	4b13      	ldr	r3, [pc, #76]	; (80021bc <I2Cx_MspInit+0x154>)
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002174:	60fb      	str	r3, [r7, #12]
 8002176:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <I2Cx_MspInit+0x154>)
 800217a:	6a1b      	ldr	r3, [r3, #32]
 800217c:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <I2Cx_MspInit+0x154>)
 800217e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002182:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002184:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <I2Cx_MspInit+0x154>)
 8002186:	6a1b      	ldr	r3, [r3, #32]
 8002188:	4a0c      	ldr	r2, [pc, #48]	; (80021bc <I2Cx_MspInit+0x154>)
 800218a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800218e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002190:	2200      	movs	r2, #0
 8002192:	210f      	movs	r1, #15
 8002194:	201f      	movs	r0, #31
 8002196:	f003 fe09 	bl	8005dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800219a:	201f      	movs	r0, #31
 800219c:	f003 fe22 	bl	8005de4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80021a0:	2200      	movs	r2, #0
 80021a2:	210f      	movs	r1, #15
 80021a4:	2020      	movs	r0, #32
 80021a6:	f003 fe01 	bl	8005dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80021aa:	2020      	movs	r0, #32
 80021ac:	f003 fe1a 	bl	8005de4 <HAL_NVIC_EnableIRQ>
}
 80021b0:	bf00      	nop
 80021b2:	3730      	adds	r7, #48	; 0x30
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000360 	.word	0x20000360
 80021bc:	40023800 	.word	0x40023800
 80021c0:	40021c00 	.word	0x40021c00
 80021c4:	40020400 	.word	0x40020400

080021c8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b082      	sub	sp, #8
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80021d0:	6878      	ldr	r0, [r7, #4]
 80021d2:	f005 fa91 	bl	80076f8 <HAL_I2C_GetState>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d125      	bne.n	8002228 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a14      	ldr	r2, [pc, #80]	; (8002230 <I2Cx_Init+0x68>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d103      	bne.n	80021ec <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a13      	ldr	r2, [pc, #76]	; (8002234 <I2Cx_Init+0x6c>)
 80021e8:	601a      	str	r2, [r3, #0]
 80021ea:	e002      	b.n	80021f2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a12      	ldr	r2, [pc, #72]	; (8002238 <I2Cx_Init+0x70>)
 80021f0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a11      	ldr	r2, [pc, #68]	; (800223c <I2Cx_Init+0x74>)
 80021f6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2200      	movs	r2, #0
 8002208:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2200      	movs	r2, #0
 800220e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2200      	movs	r2, #0
 8002214:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	f7ff ff23 	bl	8002068 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	f004 ff66 	bl	80070f4 <HAL_I2C_Init>
  }
}
 8002228:	bf00      	nop
 800222a:	3708      	adds	r7, #8
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	20000360 	.word	0x20000360
 8002234:	40005c00 	.word	0x40005c00
 8002238:	40005400 	.word	0x40005400
 800223c:	40912732 	.word	0x40912732

08002240 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b08a      	sub	sp, #40	; 0x28
 8002244:	af04      	add	r7, sp, #16
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	4608      	mov	r0, r1
 800224a:	4611      	mov	r1, r2
 800224c:	461a      	mov	r2, r3
 800224e:	4603      	mov	r3, r0
 8002250:	72fb      	strb	r3, [r7, #11]
 8002252:	460b      	mov	r3, r1
 8002254:	813b      	strh	r3, [r7, #8]
 8002256:	4613      	mov	r3, r2
 8002258:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800225e:	7afb      	ldrb	r3, [r7, #11]
 8002260:	b299      	uxth	r1, r3
 8002262:	88f8      	ldrh	r0, [r7, #6]
 8002264:	893a      	ldrh	r2, [r7, #8]
 8002266:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800226a:	9302      	str	r3, [sp, #8]
 800226c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800226e:	9301      	str	r3, [sp, #4]
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	9300      	str	r3, [sp, #0]
 8002274:	4603      	mov	r3, r0
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f005 f924 	bl	80074c4 <HAL_I2C_Mem_Read>
 800227c:	4603      	mov	r3, r0
 800227e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8002280:	7dfb      	ldrb	r3, [r7, #23]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d004      	beq.n	8002290 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002286:	7afb      	ldrb	r3, [r7, #11]
 8002288:	4619      	mov	r1, r3
 800228a:	68f8      	ldr	r0, [r7, #12]
 800228c:	f000 f832 	bl	80022f4 <I2Cx_Error>
  }
  return status;    
 8002290:	7dfb      	ldrb	r3, [r7, #23]
}
 8002292:	4618      	mov	r0, r3
 8002294:	3718      	adds	r7, #24
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}

0800229a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b08a      	sub	sp, #40	; 0x28
 800229e:	af04      	add	r7, sp, #16
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	4608      	mov	r0, r1
 80022a4:	4611      	mov	r1, r2
 80022a6:	461a      	mov	r2, r3
 80022a8:	4603      	mov	r3, r0
 80022aa:	72fb      	strb	r3, [r7, #11]
 80022ac:	460b      	mov	r3, r1
 80022ae:	813b      	strh	r3, [r7, #8]
 80022b0:	4613      	mov	r3, r2
 80022b2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80022b4:	2300      	movs	r3, #0
 80022b6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80022b8:	7afb      	ldrb	r3, [r7, #11]
 80022ba:	b299      	uxth	r1, r3
 80022bc:	88f8      	ldrh	r0, [r7, #6]
 80022be:	893a      	ldrh	r2, [r7, #8]
 80022c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022c4:	9302      	str	r3, [sp, #8]
 80022c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80022c8:	9301      	str	r3, [sp, #4]
 80022ca:	6a3b      	ldr	r3, [r7, #32]
 80022cc:	9300      	str	r3, [sp, #0]
 80022ce:	4603      	mov	r3, r0
 80022d0:	68f8      	ldr	r0, [r7, #12]
 80022d2:	f004 ffe3 	bl	800729c <HAL_I2C_Mem_Write>
 80022d6:	4603      	mov	r3, r0
 80022d8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 80022da:	7dfb      	ldrb	r3, [r7, #23]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d004      	beq.n	80022ea <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80022e0:	7afb      	ldrb	r3, [r7, #11]
 80022e2:	4619      	mov	r1, r3
 80022e4:	68f8      	ldr	r0, [r7, #12]
 80022e6:	f000 f805 	bl	80022f4 <I2Cx_Error>
  }
  return status;
 80022ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}

080022f4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002300:	6878      	ldr	r0, [r7, #4]
 8002302:	f004 ff87 	bl	8007214 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff ff5e 	bl	80021c8 <I2Cx_Init>
}
 800230c:	bf00      	nop
 800230e:	3708      	adds	r7, #8
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002318:	4802      	ldr	r0, [pc, #8]	; (8002324 <AUDIO_IO_Init+0x10>)
 800231a:	f7ff ff55 	bl	80021c8 <I2Cx_Init>
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000360 	.word	0x20000360

08002328 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
	...

08002338 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af02      	add	r7, sp, #8
 800233e:	4603      	mov	r3, r0
 8002340:	71fb      	strb	r3, [r7, #7]
 8002342:	460b      	mov	r3, r1
 8002344:	80bb      	strh	r3, [r7, #4]
 8002346:	4613      	mov	r3, r2
 8002348:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 800234e:	89fb      	ldrh	r3, [r7, #14]
 8002350:	0a1b      	lsrs	r3, r3, #8
 8002352:	b29b      	uxth	r3, r3
 8002354:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 8002356:	89fb      	ldrh	r3, [r7, #14]
 8002358:	021b      	lsls	r3, r3, #8
 800235a:	b29b      	uxth	r3, r3
 800235c:	b21a      	sxth	r2, r3
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	b21b      	sxth	r3, r3
 8002362:	4313      	orrs	r3, r2
 8002364:	b21b      	sxth	r3, r3
 8002366:	b29b      	uxth	r3, r3
 8002368:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 800236a:	88ba      	ldrh	r2, [r7, #4]
 800236c:	79f9      	ldrb	r1, [r7, #7]
 800236e:	2302      	movs	r3, #2
 8002370:	9301      	str	r3, [sp, #4]
 8002372:	1cbb      	adds	r3, r7, #2
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2302      	movs	r3, #2
 8002378:	4803      	ldr	r0, [pc, #12]	; (8002388 <AUDIO_IO_Write+0x50>)
 800237a:	f7ff ff8e 	bl	800229a <I2Cx_WriteMultiple>
}
 800237e:	bf00      	nop
 8002380:	3710      	adds	r7, #16
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000360 	.word	0x20000360

0800238c <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af02      	add	r7, sp, #8
 8002392:	4603      	mov	r3, r0
 8002394:	460a      	mov	r2, r1
 8002396:	71fb      	strb	r3, [r7, #7]
 8002398:	4613      	mov	r3, r2
 800239a:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 800239c:	2300      	movs	r3, #0
 800239e:	81bb      	strh	r3, [r7, #12]
 80023a0:	2300      	movs	r3, #0
 80023a2:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 80023a4:	88ba      	ldrh	r2, [r7, #4]
 80023a6:	79f9      	ldrb	r1, [r7, #7]
 80023a8:	2302      	movs	r3, #2
 80023aa:	9301      	str	r3, [sp, #4]
 80023ac:	f107 030c 	add.w	r3, r7, #12
 80023b0:	9300      	str	r3, [sp, #0]
 80023b2:	2302      	movs	r3, #2
 80023b4:	480a      	ldr	r0, [pc, #40]	; (80023e0 <AUDIO_IO_Read+0x54>)
 80023b6:	f7ff ff43 	bl	8002240 <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 80023ba:	89bb      	ldrh	r3, [r7, #12]
 80023bc:	0a1b      	lsrs	r3, r3, #8
 80023be:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 80023c0:	89bb      	ldrh	r3, [r7, #12]
 80023c2:	021b      	lsls	r3, r3, #8
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	b21a      	sxth	r2, r3
 80023c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	b21b      	sxth	r3, r3
 80023d0:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 80023d2:	89fb      	ldrh	r3, [r7, #14]
 80023d4:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 80023d6:	89bb      	ldrh	r3, [r7, #12]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3710      	adds	r7, #16
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	20000360 	.word	0x20000360

080023e4 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b082      	sub	sp, #8
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f003 fc01 	bl	8005bf4 <HAL_Delay>
}
 80023f2:	bf00      	nop
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002400:	4802      	ldr	r0, [pc, #8]	; (800240c <TS_IO_Init+0x10>)
 8002402:	f7ff fee1 	bl	80021c8 <I2Cx_Init>
}
 8002406:	bf00      	nop
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	20000360 	.word	0x20000360

08002410 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b084      	sub	sp, #16
 8002414:	af02      	add	r7, sp, #8
 8002416:	4603      	mov	r3, r0
 8002418:	71fb      	strb	r3, [r7, #7]
 800241a:	460b      	mov	r3, r1
 800241c:	71bb      	strb	r3, [r7, #6]
 800241e:	4613      	mov	r3, r2
 8002420:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002422:	79bb      	ldrb	r3, [r7, #6]
 8002424:	b29a      	uxth	r2, r3
 8002426:	79f9      	ldrb	r1, [r7, #7]
 8002428:	2301      	movs	r3, #1
 800242a:	9301      	str	r3, [sp, #4]
 800242c:	1d7b      	adds	r3, r7, #5
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	2301      	movs	r3, #1
 8002432:	4803      	ldr	r0, [pc, #12]	; (8002440 <TS_IO_Write+0x30>)
 8002434:	f7ff ff31 	bl	800229a <I2Cx_WriteMultiple>
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}
 8002440:	20000360 	.word	0x20000360

08002444 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af02      	add	r7, sp, #8
 800244a:	4603      	mov	r3, r0
 800244c:	460a      	mov	r2, r1
 800244e:	71fb      	strb	r3, [r7, #7]
 8002450:	4613      	mov	r3, r2
 8002452:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002454:	2300      	movs	r3, #0
 8002456:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8002458:	79bb      	ldrb	r3, [r7, #6]
 800245a:	b29a      	uxth	r2, r3
 800245c:	79f9      	ldrb	r1, [r7, #7]
 800245e:	2301      	movs	r3, #1
 8002460:	9301      	str	r3, [sp, #4]
 8002462:	f107 030f 	add.w	r3, r7, #15
 8002466:	9300      	str	r3, [sp, #0]
 8002468:	2301      	movs	r3, #1
 800246a:	4804      	ldr	r0, [pc, #16]	; (800247c <TS_IO_Read+0x38>)
 800246c:	f7ff fee8 	bl	8002240 <I2Cx_ReadMultiple>

  return read_value;
 8002470:	7bfb      	ldrb	r3, [r7, #15]
}
 8002472:	4618      	mov	r0, r3
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	20000360 	.word	0x20000360

08002480 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b082      	sub	sp, #8
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f003 fbb3 	bl	8005bf4 <HAL_Delay>
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
	...

08002498 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
 80024a0:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 80024a2:	4b10      	ldr	r3, [pc, #64]	; (80024e4 <BSP_AUDIO_OUT_Play+0x4c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	68db      	ldr	r3, [r3, #12]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	b292      	uxth	r2, r2
 80024ac:	6879      	ldr	r1, [r7, #4]
 80024ae:	2034      	movs	r0, #52	; 0x34
 80024b0:	4798      	blx	r3
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e00f      	b.n	80024dc <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80024c2:	d203      	bcs.n	80024cc <BSP_AUDIO_OUT_Play+0x34>
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	085b      	lsrs	r3, r3, #1
 80024c8:	b29b      	uxth	r3, r3
 80024ca:	e001      	b.n	80024d0 <BSP_AUDIO_OUT_Play+0x38>
 80024cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024d0:	461a      	mov	r2, r3
 80024d2:	6879      	ldr	r1, [r7, #4]
 80024d4:	4804      	ldr	r0, [pc, #16]	; (80024e8 <BSP_AUDIO_OUT_Play+0x50>)
 80024d6:	f007 fbb1 	bl	8009c3c <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 80024da:	2300      	movs	r3, #0
  }
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3708      	adds	r7, #8
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	200091a0 	.word	0x200091a0
 80024e8:	200003ac 	.word	0x200003ac

080024ec <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 80024f4:	4b0c      	ldr	r3, [pc, #48]	; (8002528 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002502:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8002504:	4a08      	ldr	r2, [pc, #32]	; (8002528 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6613      	str	r3, [r2, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 800250a:	4807      	ldr	r0, [pc, #28]	; (8002528 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800250c:	f007 f9e2 	bl	80098d4 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	4b04      	ldr	r3, [pc, #16]	; (8002528 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800251e:	601a      	str	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	3708      	adds	r7, #8
 8002524:	46bd      	mov	sp, r7
 8002526:	bd80      	pop	{r7, pc}
 8002528:	200003ac 	.word	0x200003ac

0800252c <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 8002534:	f000 f834 	bl	80025a0 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 8002548:	f000 f831 	bl	80025ae <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800254c:	bf00      	nop
 800254e:	3708      	adds	r7, #8
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}

08002554 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 800255c:	480e      	ldr	r0, [pc, #56]	; (8002598 <HAL_SAI_ErrorCallback+0x44>)
 800255e:	f007 fcab 	bl	8009eb8 <HAL_SAI_GetState>
 8002562:	4603      	mov	r3, r0
 8002564:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 8002566:	480d      	ldr	r0, [pc, #52]	; (800259c <HAL_SAI_ErrorCallback+0x48>)
 8002568:	f007 fca6 	bl	8009eb8 <HAL_SAI_GetState>
 800256c:	4603      	mov	r3, r0
 800256e:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b02      	cmp	r3, #2
 8002574:	d002      	beq.n	800257c <HAL_SAI_ErrorCallback+0x28>
 8002576:	7bfb      	ldrb	r3, [r7, #15]
 8002578:	2b12      	cmp	r3, #18
 800257a:	d101      	bne.n	8002580 <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 800257c:	f000 f81e 	bl	80025bc <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 8002580:	7bbb      	ldrb	r3, [r7, #14]
 8002582:	2b02      	cmp	r3, #2
 8002584:	d002      	beq.n	800258c <HAL_SAI_ErrorCallback+0x38>
 8002586:	7bbb      	ldrb	r3, [r7, #14]
 8002588:	2b22      	cmp	r3, #34	; 0x22
 800258a:	d101      	bne.n	8002590 <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 800258c:	f000 fa12 	bl	80029b4 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 8002590:	bf00      	nop
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	200003ac 	.word	0x200003ac
 800259c:	20000430 	.word	0x20000430

080025a0 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
/**
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
}
 80025a4:	bf00      	nop
 80025a6:	46bd      	mov	sp, r7
 80025a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ac:	4770      	bx	lr

080025ae <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 80025ae:	b480      	push	{r7}
 80025b0:	af00      	add	r7, sp, #0
}
 80025b2:	bf00      	nop
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr

080025bc <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
}
 80025c0:	bf00      	nop
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
	...

080025cc <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b08c      	sub	sp, #48	; 0x30
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
 80025d4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 80025d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025da:	4a62      	ldr	r2, [pc, #392]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 80025dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025e0:	6453      	str	r3, [r2, #68]	; 0x44
 80025e2:	4b60      	ldr	r3, [pc, #384]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025ea:	61bb      	str	r3, [r7, #24]
 80025ec:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 80025ee:	4b5d      	ldr	r3, [pc, #372]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 80025f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f2:	4a5c      	ldr	r2, [pc, #368]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f8:	6313      	str	r3, [r2, #48]	; 0x30
 80025fa:	4b5a      	ldr	r3, [pc, #360]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8002606:	4b57      	ldr	r3, [pc, #348]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	4a56      	ldr	r2, [pc, #344]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 800260c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002610:	6313      	str	r3, [r2, #48]	; 0x30
 8002612:	4b54      	ldr	r3, [pc, #336]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800261a:	613b      	str	r3, [r7, #16]
 800261c:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 800261e:	4b51      	ldr	r3, [pc, #324]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002622:	4a50      	ldr	r2, [pc, #320]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002624:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002628:	6313      	str	r3, [r2, #48]	; 0x30
 800262a:	4b4e      	ldr	r3, [pc, #312]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002632:	60fb      	str	r3, [r7, #12]
 8002634:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8002636:	2380      	movs	r3, #128	; 0x80
 8002638:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002642:	2303      	movs	r3, #3
 8002644:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002646:	230a      	movs	r3, #10
 8002648:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800264a:	f107 031c 	add.w	r3, r7, #28
 800264e:	4619      	mov	r1, r3
 8002650:	4845      	ldr	r0, [pc, #276]	; (8002768 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002652:	f004 fa65 	bl	8006b20 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8002656:	2320      	movs	r3, #32
 8002658:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800265a:	2302      	movs	r3, #2
 800265c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002662:	2303      	movs	r3, #3
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8002666:	230a      	movs	r3, #10
 8002668:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800266a:	f107 031c 	add.w	r3, r7, #28
 800266e:	4619      	mov	r1, r3
 8002670:	483d      	ldr	r0, [pc, #244]	; (8002768 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002672:	f004 fa55 	bl	8006b20 <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8002676:	2340      	movs	r3, #64	; 0x40
 8002678:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800267a:	2302      	movs	r3, #2
 800267c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 8002682:	2303      	movs	r3, #3
 8002684:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002686:	230a      	movs	r3, #10
 8002688:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 800268a:	f107 031c 	add.w	r3, r7, #28
 800268e:	4619      	mov	r1, r3
 8002690:	4835      	ldr	r0, [pc, #212]	; (8002768 <BSP_AUDIO_OUT_MspInit+0x19c>)
 8002692:	f004 fa45 	bl	8006b20 <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8002696:	2310      	movs	r3, #16
 8002698:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800269a:	2302      	movs	r3, #2
 800269c:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800269e:	2300      	movs	r3, #0
 80026a0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80026a2:	2303      	movs	r3, #3
 80026a4:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80026a6:	230a      	movs	r3, #10
 80026a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80026aa:	f107 031c 	add.w	r3, r7, #28
 80026ae:	4619      	mov	r1, r3
 80026b0:	482d      	ldr	r0, [pc, #180]	; (8002768 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80026b2:	f004 fa35 	bl	8006b20 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 80026b6:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	4a2a      	ldr	r2, [pc, #168]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 80026bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80026c0:	6313      	str	r3, [r2, #48]	; 0x30
 80026c2:	4b28      	ldr	r3, [pc, #160]	; (8002764 <BSP_AUDIO_OUT_MspInit+0x198>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ca:	60bb      	str	r3, [r7, #8]
 80026cc:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a26      	ldr	r2, [pc, #152]	; (800276c <BSP_AUDIO_OUT_MspInit+0x1a0>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d138      	bne.n	800274a <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 80026d8:	4b25      	ldr	r3, [pc, #148]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80026da:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80026de:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80026e0:	4b23      	ldr	r3, [pc, #140]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80026e2:	2240      	movs	r2, #64	; 0x40
 80026e4:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80026e6:	4b22      	ldr	r3, [pc, #136]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80026ec:	4b20      	ldr	r3, [pc, #128]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80026ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026f2:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 80026f4:	4b1e      	ldr	r3, [pc, #120]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80026f6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80026fa:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 80026fc:	4b1c      	ldr	r3, [pc, #112]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80026fe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002702:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8002704:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002706:	f44f 7280 	mov.w	r2, #256	; 0x100
 800270a:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800270c:	4b18      	ldr	r3, [pc, #96]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800270e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002712:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8002714:	4b16      	ldr	r3, [pc, #88]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002716:	2204      	movs	r2, #4
 8002718:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800271a:	4b15      	ldr	r3, [pc, #84]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800271c:	2203      	movs	r2, #3
 800271e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002720:	4b13      	ldr	r3, [pc, #76]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002722:	2200      	movs	r2, #0
 8002724:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8002726:	4b12      	ldr	r3, [pc, #72]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002728:	2200      	movs	r2, #0
 800272a:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 800272c:	4b10      	ldr	r3, [pc, #64]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800272e:	4a11      	ldr	r2, [pc, #68]	; (8002774 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 8002730:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002736:	66da      	str	r2, [r3, #108]	; 0x6c
 8002738:	4a0d      	ldr	r2, [pc, #52]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 800273e:	480c      	ldr	r0, [pc, #48]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002740:	f003 fc0c 	bl	8005f5c <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 8002744:	480a      	ldr	r0, [pc, #40]	; (8002770 <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002746:	f003 fb5b 	bl	8005e00 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 800274a:	2200      	movs	r2, #0
 800274c:	210e      	movs	r1, #14
 800274e:	203c      	movs	r0, #60	; 0x3c
 8002750:	f003 fb2c 	bl	8005dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 8002754:	203c      	movs	r0, #60	; 0x3c
 8002756:	f003 fb45 	bl	8005de4 <HAL_NVIC_EnableIRQ>
}
 800275a:	bf00      	nop
 800275c:	3730      	adds	r7, #48	; 0x30
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023800 	.word	0x40023800
 8002768:	40022000 	.word	0x40022000
 800276c:	40015c04 	.word	0x40015c04
 8002770:	200004b4 	.word	0x200004b4
 8002774:	40026470 	.word	0x40026470

08002778 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 8002778:	b580      	push	{r7, lr}
 800277a:	b0a6      	sub	sp, #152	; 0x98
 800277c:	af00      	add	r7, sp, #0
 800277e:	60f8      	str	r0, [r7, #12]
 8002780:	60b9      	str	r1, [r7, #8]
 8002782:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002784:	f107 0314 	add.w	r3, r7, #20
 8002788:	4618      	mov	r0, r3
 800278a:	f006 fe53 	bl	8009434 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002794:	4293      	cmp	r3, r2
 8002796:	d009      	beq.n	80027ac <BSP_AUDIO_OUT_ClockConfig+0x34>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f245 6222 	movw	r2, #22050	; 0x5622
 800279e:	4293      	cmp	r3, r2
 80027a0:	d004      	beq.n	80027ac <BSP_AUDIO_OUT_ClockConfig+0x34>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	f64a 4244 	movw	r2, #44100	; 0xac44
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d112      	bne.n	80027d2 <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80027ac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027b0:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80027b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027b6:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 80027b8:	f240 13ad 	movw	r3, #429	; 0x1ad
 80027bc:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 80027be:	2302      	movs	r3, #2
 80027c0:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 80027c2:	2313      	movs	r3, #19
 80027c4:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80027c6:	f107 0314 	add.w	r3, r7, #20
 80027ca:	4618      	mov	r0, r3
 80027cc:	f006 fa42 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
 80027d0:	e012      	b.n	80027f8 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80027d2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027d6:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 80027d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027dc:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 80027de:	f44f 73ac 	mov.w	r3, #344	; 0x158
 80027e2:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 80027e4:	2307      	movs	r3, #7
 80027e6:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 80027e8:	2301      	movs	r3, #1
 80027ea:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	4618      	mov	r0, r3
 80027f2:	f006 fa2f 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 80027f6:	bf00      	nop
 80027f8:	bf00      	nop
 80027fa:	3798      	adds	r7, #152	; 0x98
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}

08002800 <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002804:	4b07      	ldr	r3, [pc, #28]	; (8002824 <SAIx_Out_DeInit+0x24>)
 8002806:	4a08      	ldr	r2, [pc, #32]	; (8002828 <SAIx_Out_DeInit+0x28>)
 8002808:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 800280a:	4b06      	ldr	r3, [pc, #24]	; (8002824 <SAIx_Out_DeInit+0x24>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b04      	ldr	r3, [pc, #16]	; (8002824 <SAIx_Out_DeInit+0x24>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002818:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 800281a:	4802      	ldr	r0, [pc, #8]	; (8002824 <SAIx_Out_DeInit+0x24>)
 800281c:	f007 f9d8 	bl	8009bd0 <HAL_SAI_DeInit>
}
 8002820:	bf00      	nop
 8002822:	bd80      	pop	{r7, pc}
 8002824:	200003ac 	.word	0x200003ac
 8002828:	40015c04 	.word	0x40015c04

0800282c <BSP_AUDIO_IN_OUT_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 800282c:	b590      	push	{r4, r7, lr}
 800282e:	b089      	sub	sp, #36	; 0x24
 8002830:	af00      	add	r7, sp, #0
 8002832:	60ba      	str	r2, [r7, #8]
 8002834:	607b      	str	r3, [r7, #4]
 8002836:	4603      	mov	r3, r0
 8002838:	81fb      	strh	r3, [r7, #14]
 800283a:	460b      	mov	r3, r1
 800283c:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = AUDIO_ERROR;
 800283e:	2301      	movs	r3, #1
 8002840:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 8002846:	89fb      	ldrh	r3, [r7, #14]
 8002848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800284c:	d002      	beq.n	8002854 <BSP_AUDIO_IN_OUT_Init+0x28>
  {
    ret = AUDIO_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	77fb      	strb	r3, [r7, #31]
 8002852:	e054      	b.n	80028fe <BSP_AUDIO_IN_OUT_Init+0xd2>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 8002854:	f000 fa1e 	bl	8002c94 <SAIx_In_DeInit>
    SAIx_Out_DeInit();
 8002858:	f7ff ffd2 	bl	8002800 <SAIx_Out_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 800285c:	2200      	movs	r2, #0
 800285e:	68b9      	ldr	r1, [r7, #8]
 8002860:	4829      	ldr	r0, [pc, #164]	; (8002908 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 8002862:	f7ff ff89 	bl	8002778 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002866:	4b28      	ldr	r3, [pc, #160]	; (8002908 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 8002868:	4a28      	ldr	r2, [pc, #160]	; (800290c <BSP_AUDIO_IN_OUT_Init+0xe0>)
 800286a:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 800286c:	4826      	ldr	r0, [pc, #152]	; (8002908 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 800286e:	f007 fb23 	bl	8009eb8 <HAL_SAI_GetState>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d103      	bne.n	8002880 <BSP_AUDIO_IN_OUT_Init+0x54>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 8002878:	2100      	movs	r1, #0
 800287a:	4823      	ldr	r0, [pc, #140]	; (8002908 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 800287c:	f000 f8a2 	bl	80029c4 <BSP_AUDIO_IN_MspInit>
    }

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002880:	4b23      	ldr	r3, [pc, #140]	; (8002910 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8002882:	4a24      	ldr	r2, [pc, #144]	; (8002914 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 8002884:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8002886:	4822      	ldr	r0, [pc, #136]	; (8002910 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8002888:	f007 fb16 	bl	8009eb8 <HAL_SAI_GetState>
 800288c:	4603      	mov	r3, r0
 800288e:	2b00      	cmp	r3, #0
 8002890:	d103      	bne.n	800289a <BSP_AUDIO_IN_OUT_Init+0x6e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 8002892:	2100      	movs	r1, #0
 8002894:	481e      	ldr	r0, [pc, #120]	; (8002910 <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8002896:	f7ff fe99 	bl	80025cc <BSP_AUDIO_OUT_MspInit>

    /* Configure SAI in master mode :
     *   - SAI2_block_A in master TX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 800289a:	89fb      	ldrh	r3, [r7, #14]
 800289c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028a0:	d102      	bne.n	80028a8 <BSP_AUDIO_IN_OUT_Init+0x7c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 80028a2:	230a      	movs	r3, #10
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	e001      	b.n	80028ac <BSP_AUDIO_IN_OUT_Init+0x80>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 80028a8:	2305      	movs	r3, #5
 80028aa:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 80028ac:	68ba      	ldr	r2, [r7, #8]
 80028ae:	69b9      	ldr	r1, [r7, #24]
 80028b0:	2000      	movs	r0, #0
 80028b2:	f000 f939 	bl	8002b28 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 80028b6:	4b18      	ldr	r3, [pc, #96]	; (8002918 <BSP_AUDIO_IN_OUT_Init+0xec>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	2034      	movs	r0, #52	; 0x34
 80028bc:	4798      	blx	r3
 80028be:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	f648 1294 	movw	r2, #35220	; 0x8994
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d109      	bne.n	80028de <BSP_AUDIO_IN_OUT_Init+0xb2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 80028ca:	4b13      	ldr	r3, [pc, #76]	; (8002918 <BSP_AUDIO_IN_OUT_Init+0xec>)
 80028cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ce:	2034      	movs	r0, #52	; 0x34
 80028d0:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 80028d2:	4b12      	ldr	r3, [pc, #72]	; (800291c <BSP_AUDIO_IN_OUT_Init+0xf0>)
 80028d4:	4a10      	ldr	r2, [pc, #64]	; (8002918 <BSP_AUDIO_IN_OUT_Init+0xec>)
 80028d6:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 80028d8:	2300      	movs	r3, #0
 80028da:	77fb      	strb	r3, [r7, #31]
 80028dc:	e001      	b.n	80028e2 <BSP_AUDIO_IN_OUT_Init+0xb6>
    }
    else
    {
      ret = AUDIO_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 80028e2:	7ffb      	ldrb	r3, [r7, #31]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d10a      	bne.n	80028fe <BSP_AUDIO_IN_OUT_Init+0xd2>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100, AudioFreq);
 80028e8:	4b0c      	ldr	r3, [pc, #48]	; (800291c <BSP_AUDIO_IN_OUT_Init+0xf0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681c      	ldr	r4, [r3, #0]
 80028ee:	89fa      	ldrh	r2, [r7, #14]
 80028f0:	89bb      	ldrh	r3, [r7, #12]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	b299      	uxth	r1, r3
 80028f6:	68bb      	ldr	r3, [r7, #8]
 80028f8:	2264      	movs	r2, #100	; 0x64
 80028fa:	2034      	movs	r0, #52	; 0x34
 80028fc:	47a0      	blx	r4
    }
  }
  return ret;
 80028fe:	7ffb      	ldrb	r3, [r7, #31]
}
 8002900:	4618      	mov	r0, r3
 8002902:	3724      	adds	r7, #36	; 0x24
 8002904:	46bd      	mov	sp, r7
 8002906:	bd90      	pop	{r4, r7, pc}
 8002908:	20000430 	.word	0x20000430
 800290c:	40015c24 	.word	0x40015c24
 8002910:	200003ac 	.word	0x200003ac
 8002914:	40015c04 	.word	0x40015c04
 8002918:	20000044 	.word	0x20000044
 800291c:	200091a0 	.word	0x200091a0

08002920 <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b084      	sub	sp, #16
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
 8002928:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 800292a:	2301      	movs	r3, #1
 800292c:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 800292e:	683b      	ldr	r3, [r7, #0]
 8002930:	b29b      	uxth	r3, r3
 8002932:	461a      	mov	r2, r3
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4805      	ldr	r0, [pc, #20]	; (800294c <BSP_AUDIO_IN_Record+0x2c>)
 8002938:	f007 fa30 	bl	8009d9c <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 800293c:	2300      	movs	r3, #0
 800293e:	60fb      	str	r3, [r7, #12]
  
  return ret;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	b2db      	uxtb	r3, r3
}
 8002944:	4618      	mov	r0, r3
 8002946:	3710      	adds	r7, #16
 8002948:	46bd      	mov	sp, r7
 800294a:	bd80      	pop	{r7, pc}
 800294c:	20000430 	.word	0x20000430

08002950 <BSP_AUDIO_IN_SetVolume>:
  * @brief  Controls the audio in volume level. 
  * @param  Volume: Volume level in range 0(Mute)..80(+0dB)..100(+17.625dB)
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_SetVolume(uint8_t Volume)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b082      	sub	sp, #8
 8002954:	af00      	add	r7, sp, #0
 8002956:	4603      	mov	r3, r0
 8002958:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 800295a:	4b0a      	ldr	r3, [pc, #40]	; (8002984 <BSP_AUDIO_IN_SetVolume+0x34>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	79fa      	ldrb	r2, [r7, #7]
 8002962:	4611      	mov	r1, r2
 8002964:	2034      	movs	r0, #52	; 0x34
 8002966:	4798      	blx	r3
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <BSP_AUDIO_IN_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e004      	b.n	800297c <BSP_AUDIO_IN_SetVolume+0x2c>
  }
  else
  {
    /* Set the Global variable AudioInVolume  */
    AudioInVolume = Volume;
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	b29a      	uxth	r2, r3
 8002976:	4b04      	ldr	r3, [pc, #16]	; (8002988 <BSP_AUDIO_IN_SetVolume+0x38>)
 8002978:	801a      	strh	r2, [r3, #0]
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 800297a:	2300      	movs	r3, #0
  }
}
 800297c:	4618      	mov	r0, r3
 800297e:	3708      	adds	r7, #8
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}
 8002984:	200091a0 	.word	0x200091a0
 8002988:	20000028 	.word	0x20000028

0800298c <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b082      	sub	sp, #8
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002994:	f7ff fa02 	bl	8001d9c <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002998:	bf00      	nop
 800299a:	3708      	adds	r7, #8
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b082      	sub	sp, #8
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 80029a8:	f7ff fa04 	bl	8001db4 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80029ac:	bf00      	nop
 80029ae:	3708      	adds	r7, #8
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
	...

080029c4 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08c      	sub	sp, #48	; 0x30
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 80029ce:	4b50      	ldr	r3, [pc, #320]	; (8002b10 <BSP_AUDIO_IN_MspInit+0x14c>)
 80029d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029d2:	4a4f      	ldr	r2, [pc, #316]	; (8002b10 <BSP_AUDIO_IN_MspInit+0x14c>)
 80029d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029d8:	6453      	str	r3, [r2, #68]	; 0x44
 80029da:	4b4d      	ldr	r3, [pc, #308]	; (8002b10 <BSP_AUDIO_IN_MspInit+0x14c>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029de:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029e2:	61bb      	str	r3, [r7, #24]
 80029e4:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 80029e6:	4b4a      	ldr	r3, [pc, #296]	; (8002b10 <BSP_AUDIO_IN_MspInit+0x14c>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ea:	4a49      	ldr	r2, [pc, #292]	; (8002b10 <BSP_AUDIO_IN_MspInit+0x14c>)
 80029ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80029f0:	6313      	str	r3, [r2, #48]	; 0x30
 80029f2:	4b47      	ldr	r3, [pc, #284]	; (8002b10 <BSP_AUDIO_IN_MspInit+0x14c>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029fa:	617b      	str	r3, [r7, #20]
 80029fc:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80029fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a02:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002a04:	2302      	movs	r3, #2
 8002a06:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 8002a10:	230a      	movs	r3, #10
 8002a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002a14:	f107 031c 	add.w	r3, r7, #28
 8002a18:	4619      	mov	r1, r3
 8002a1a:	483e      	ldr	r0, [pc, #248]	; (8002b14 <BSP_AUDIO_IN_MspInit+0x150>)
 8002a1c:	f004 f880 	bl	8006b20 <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 8002a20:	4b3b      	ldr	r3, [pc, #236]	; (8002b10 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a24:	4a3a      	ldr	r2, [pc, #232]	; (8002b10 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a2a:	6313      	str	r3, [r2, #48]	; 0x30
 8002a2c:	4b38      	ldr	r3, [pc, #224]	; (8002b10 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 8002a38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a3c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002a46:	2302      	movs	r3, #2
 8002a48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 8002a4a:	f107 031c 	add.w	r3, r7, #28
 8002a4e:	4619      	mov	r1, r3
 8002a50:	4831      	ldr	r0, [pc, #196]	; (8002b18 <BSP_AUDIO_IN_MspInit+0x154>)
 8002a52:	f004 f865 	bl	8006b20 <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8002a56:	4b2e      	ldr	r3, [pc, #184]	; (8002b10 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a5a:	4a2d      	ldr	r2, [pc, #180]	; (8002b10 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002a5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a60:	6313      	str	r3, [r2, #48]	; 0x30
 8002a62:	4b2b      	ldr	r3, [pc, #172]	; (8002b10 <BSP_AUDIO_IN_MspInit+0x14c>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a6a:	60fb      	str	r3, [r7, #12]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a2a      	ldr	r2, [pc, #168]	; (8002b1c <BSP_AUDIO_IN_MspInit+0x158>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d137      	bne.n	8002ae8 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 8002a78:	4b29      	ldr	r3, [pc, #164]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8002a7e:	4b28      	ldr	r3, [pc, #160]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002a84:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002a8a:	4b25      	ldr	r3, [pc, #148]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a90:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002a92:	4b23      	ldr	r3, [pc, #140]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a94:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a98:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8002a9a:	4b21      	ldr	r3, [pc, #132]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002aa0:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002aa2:	4b1f      	ldr	r3, [pc, #124]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002aa4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002aa8:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002aaa:	4b1d      	ldr	r3, [pc, #116]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002aac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ab0:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002ab2:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002aba:	2203      	movs	r2, #3
 8002abc:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002abe:	4b18      	ldr	r3, [pc, #96]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002ac4:	4b16      	ldr	r3, [pc, #88]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002aca:	4b15      	ldr	r3, [pc, #84]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002acc:	4a15      	ldr	r2, [pc, #84]	; (8002b24 <BSP_AUDIO_IN_MspInit+0x160>)
 8002ace:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	4a13      	ldr	r2, [pc, #76]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002ad4:	671a      	str	r2, [r3, #112]	; 0x70
 8002ad6:	4a12      	ldr	r2, [pc, #72]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002adc:	4810      	ldr	r0, [pc, #64]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002ade:	f003 fa3d 	bl	8005f5c <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8002ae2:	480f      	ldr	r0, [pc, #60]	; (8002b20 <BSP_AUDIO_IN_MspInit+0x15c>)
 8002ae4:	f003 f98c 	bl	8005e00 <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002ae8:	2200      	movs	r2, #0
 8002aea:	210f      	movs	r1, #15
 8002aec:	2046      	movs	r0, #70	; 0x46
 8002aee:	f003 f95d 	bl	8005dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8002af2:	2046      	movs	r0, #70	; 0x46
 8002af4:	f003 f976 	bl	8005de4 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002af8:	2200      	movs	r2, #0
 8002afa:	210f      	movs	r1, #15
 8002afc:	2028      	movs	r0, #40	; 0x28
 8002afe:	f003 f955 	bl	8005dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8002b02:	2028      	movs	r0, #40	; 0x28
 8002b04:	f003 f96e 	bl	8005de4 <HAL_NVIC_EnableIRQ>
}
 8002b08:	bf00      	nop
 8002b0a:	3730      	adds	r7, #48	; 0x30
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40021800 	.word	0x40021800
 8002b18:	40021c00 	.word	0x40021c00
 8002b1c:	40015c24 	.word	0x40015c24
 8002b20:	20000514 	.word	0x20000514
 8002b24:	400264b8 	.word	0x400264b8

08002b28 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b084      	sub	sp, #16
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	60f8      	str	r0, [r7, #12]
 8002b30:	60b9      	str	r1, [r7, #8]
 8002b32:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002b34:	4b53      	ldr	r3, [pc, #332]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b36:	4a54      	ldr	r2, [pc, #336]	; (8002c88 <SAIx_In_Init+0x160>)
 8002b38:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002b3a:	4b52      	ldr	r3, [pc, #328]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	4b50      	ldr	r3, [pc, #320]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b48:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002b4a:	4a4e      	ldr	r2, [pc, #312]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8002b50:	4a4c      	ldr	r2, [pc, #304]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002b56:	4b4b      	ldr	r3, [pc, #300]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002b5c:	4b49      	ldr	r3, [pc, #292]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b5e:	2200      	movs	r2, #0
 8002b60:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8002b62:	4b48      	ldr	r3, [pc, #288]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002b68:	4b46      	ldr	r3, [pc, #280]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002b6e:	4b45      	ldr	r3, [pc, #276]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b70:	2201      	movs	r2, #1
 8002b72:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8002b74:	4b43      	ldr	r3, [pc, #268]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b76:	2200      	movs	r2, #0
 8002b78:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8002b7a:	4b42      	ldr	r3, [pc, #264]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b7c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b80:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002b82:	4b40      	ldr	r3, [pc, #256]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b84:	2201      	movs	r2, #1
 8002b86:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8002b88:	4b3e      	ldr	r3, [pc, #248]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b8a:	2240      	movs	r2, #64	; 0x40
 8002b8c:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002b8e:	4b3d      	ldr	r3, [pc, #244]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b90:	2220      	movs	r2, #32
 8002b92:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002b94:	4b3b      	ldr	r3, [pc, #236]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b96:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b9a:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002b9c:	4b39      	ldr	r3, [pc, #228]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002ba2:	4b38      	ldr	r3, [pc, #224]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002ba4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002ba8:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8002baa:	4b36      	ldr	r3, [pc, #216]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002bb0:	4b34      	ldr	r3, [pc, #208]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8002bb6:	4b33      	ldr	r3, [pc, #204]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002bb8:	2204      	movs	r2, #4
 8002bba:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8002bbc:	4a31      	ldr	r2, [pc, #196]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002bbe:	68bb      	ldr	r3, [r7, #8]
 8002bc0:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8002bc2:	4830      	ldr	r0, [pc, #192]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002bc4:	f006 fe86 	bl	80098d4 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002bc8:	4b30      	ldr	r3, [pc, #192]	; (8002c8c <SAIx_In_Init+0x164>)
 8002bca:	4a31      	ldr	r2, [pc, #196]	; (8002c90 <SAIx_In_Init+0x168>)
 8002bcc:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002bce:	4b2f      	ldr	r3, [pc, #188]	; (8002c8c <SAIx_In_Init+0x164>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	4b2d      	ldr	r3, [pc, #180]	; (8002c8c <SAIx_In_Init+0x164>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002bdc:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8002bde:	4a2b      	ldr	r2, [pc, #172]	; (8002c8c <SAIx_In_Init+0x164>)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8002be4:	4b29      	ldr	r3, [pc, #164]	; (8002c8c <SAIx_In_Init+0x164>)
 8002be6:	2203      	movs	r2, #3
 8002be8:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002bea:	4b28      	ldr	r3, [pc, #160]	; (8002c8c <SAIx_In_Init+0x164>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002bf0:	4b26      	ldr	r3, [pc, #152]	; (8002c8c <SAIx_In_Init+0x164>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8002bf6:	4b25      	ldr	r3, [pc, #148]	; (8002c8c <SAIx_In_Init+0x164>)
 8002bf8:	2280      	movs	r2, #128	; 0x80
 8002bfa:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002bfc:	4b23      	ldr	r3, [pc, #140]	; (8002c8c <SAIx_In_Init+0x164>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002c02:	4b22      	ldr	r3, [pc, #136]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c04:	2201      	movs	r2, #1
 8002c06:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8002c08:	4b20      	ldr	r3, [pc, #128]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c0a:	2201      	movs	r2, #1
 8002c0c:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8002c0e:	4b1f      	ldr	r3, [pc, #124]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002c14:	4b1d      	ldr	r3, [pc, #116]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8002c1a:	4b1c      	ldr	r3, [pc, #112]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c1c:	2240      	movs	r2, #64	; 0x40
 8002c1e:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8002c20:	4b1a      	ldr	r3, [pc, #104]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c22:	2220      	movs	r2, #32
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002c26:	4b19      	ldr	r3, [pc, #100]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c28:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002c2c:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002c2e:	4b17      	ldr	r3, [pc, #92]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c30:	2200      	movs	r2, #0
 8002c32:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002c34:	4b15      	ldr	r3, [pc, #84]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c36:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002c3a:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8002c3c:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c3e:	2200      	movs	r2, #0
 8002c40:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002c42:	4b12      	ldr	r3, [pc, #72]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c44:	2200      	movs	r2, #0
 8002c46:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8002c48:	4b10      	ldr	r3, [pc, #64]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c4a:	2204      	movs	r2, #4
 8002c4c:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8002c4e:	4a0f      	ldr	r2, [pc, #60]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8002c54:	480d      	ldr	r0, [pc, #52]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c56:	f006 fe3d 	bl	80098d4 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002c5a:	4b0a      	ldr	r3, [pc, #40]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	4b08      	ldr	r3, [pc, #32]	; (8002c84 <SAIx_In_Init+0x15c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c68:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681a      	ldr	r2, [r3, #0]
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <SAIx_In_Init+0x164>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002c78:	601a      	str	r2, [r3, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	200003ac 	.word	0x200003ac
 8002c88:	40015c04 	.word	0x40015c04
 8002c8c:	20000430 	.word	0x20000430
 8002c90:	40015c24 	.word	0x40015c24

08002c94 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002c98:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <SAIx_In_DeInit+0x24>)
 8002c9a:	4a08      	ldr	r2, [pc, #32]	; (8002cbc <SAIx_In_DeInit+0x28>)
 8002c9c:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <SAIx_In_DeInit+0x24>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	4b04      	ldr	r3, [pc, #16]	; (8002cb8 <SAIx_In_DeInit+0x24>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002cac:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8002cae:	4802      	ldr	r0, [pc, #8]	; (8002cb8 <SAIx_In_DeInit+0x24>)
 8002cb0:	f006 ff8e 	bl	8009bd0 <HAL_SAI_DeInit>
}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	20000430 	.word	0x20000430
 8002cbc:	40015c24 	.word	0x40015c24

08002cc0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002cc4:	4b31      	ldr	r3, [pc, #196]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002cc6:	2228      	movs	r2, #40	; 0x28
 8002cc8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002cca:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002ccc:	2209      	movs	r2, #9
 8002cce:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002cd0:	4b2e      	ldr	r3, [pc, #184]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002cd2:	2235      	movs	r2, #53	; 0x35
 8002cd4:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002cd6:	4b2d      	ldr	r3, [pc, #180]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002cd8:	220b      	movs	r2, #11
 8002cda:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002cdc:	4b2b      	ldr	r3, [pc, #172]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002cde:	f240 121b 	movw	r2, #283	; 0x11b
 8002ce2:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002ce4:	4b29      	ldr	r3, [pc, #164]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002ce6:	f240 2215 	movw	r2, #533	; 0x215
 8002cea:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002cec:	4b27      	ldr	r3, [pc, #156]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002cee:	f240 121d 	movw	r2, #285	; 0x11d
 8002cf2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002cf4:	4b25      	ldr	r3, [pc, #148]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002cf6:	f240 2235 	movw	r2, #565	; 0x235
 8002cfa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002cfc:	2100      	movs	r1, #0
 8002cfe:	4823      	ldr	r0, [pc, #140]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d00:	f000 fba6 	bl	8003450 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002d04:	4b21      	ldr	r3, [pc, #132]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d06:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002d0a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002d0c:	4b1f      	ldr	r3, [pc, #124]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d0e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002d12:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002d14:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002d1c:	4b1b      	ldr	r3, [pc, #108]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002d24:	4b19      	ldr	r3, [pc, #100]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002d2c:	4b17      	ldr	r3, [pc, #92]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002d32:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002d3e:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d46:	4a12      	ldr	r2, [pc, #72]	; (8002d90 <BSP_LCD_Init+0xd0>)
 8002d48:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002d4a:	4810      	ldr	r0, [pc, #64]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d4c:	f005 f8ce 	bl	8007eec <HAL_LTDC_GetState>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d103      	bne.n	8002d5e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002d56:	2100      	movs	r1, #0
 8002d58:	480c      	ldr	r0, [pc, #48]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d5a:	f000 fa9f 	bl	800329c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002d5e:	480b      	ldr	r0, [pc, #44]	; (8002d8c <BSP_LCD_Init+0xcc>)
 8002d60:	f004 fef4 	bl	8007b4c <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002d64:	2201      	movs	r2, #1
 8002d66:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002d6a:	480a      	ldr	r0, [pc, #40]	; (8002d94 <BSP_LCD_Init+0xd4>)
 8002d6c:	f004 f9a8 	bl	80070c0 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002d70:	2201      	movs	r2, #1
 8002d72:	2108      	movs	r1, #8
 8002d74:	4808      	ldr	r0, [pc, #32]	; (8002d98 <BSP_LCD_Init+0xd8>)
 8002d76:	f004 f9a3 	bl	80070c0 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002d7a:	f000 fc89 	bl	8003690 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002d7e:	4807      	ldr	r0, [pc, #28]	; (8002d9c <BSP_LCD_Init+0xdc>)
 8002d80:	f000 f8d8 	bl	8002f34 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	200091a4 	.word	0x200091a4
 8002d90:	40016800 	.word	0x40016800
 8002d94:	40022000 	.word	0x40022000
 8002d98:	40022800 	.word	0x40022800
 8002d9c:	2000002c 	.word	0x2000002c

08002da0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002da4:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <BSP_LCD_GetXSize+0x20>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <BSP_LCD_GetXSize+0x24>)
 8002daa:	2134      	movs	r1, #52	; 0x34
 8002dac:	fb01 f303 	mul.w	r3, r1, r3
 8002db0:	4413      	add	r3, r2
 8002db2:	3360      	adds	r3, #96	; 0x60
 8002db4:	681b      	ldr	r3, [r3, #0]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	200005b4 	.word	0x200005b4
 8002dc4:	200091a4 	.word	0x200091a4

08002dc8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <BSP_LCD_GetYSize+0x20>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a06      	ldr	r2, [pc, #24]	; (8002dec <BSP_LCD_GetYSize+0x24>)
 8002dd2:	2134      	movs	r1, #52	; 0x34
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3364      	adds	r3, #100	; 0x64
 8002ddc:	681b      	ldr	r3, [r3, #0]
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr
 8002de8:	200005b4 	.word	0x200005b4
 8002dec:	200091a4 	.word	0x200091a4

08002df0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b090      	sub	sp, #64	; 0x40
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	4603      	mov	r3, r0
 8002df8:	6039      	str	r1, [r7, #0]
 8002dfa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002e00:	f7ff ffce 	bl	8002da0 <BSP_LCD_GetXSize>
 8002e04:	4603      	mov	r3, r0
 8002e06:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002e0c:	f7ff ffdc 	bl	8002dc8 <BSP_LCD_GetYSize>
 8002e10:	4603      	mov	r3, r0
 8002e12:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002e14:	2300      	movs	r3, #0
 8002e16:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002e1c:	23ff      	movs	r3, #255	; 0xff
 8002e1e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002e20:	2300      	movs	r3, #0
 8002e22:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002e24:	2300      	movs	r3, #0
 8002e26:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002e30:	2300      	movs	r3, #0
 8002e32:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002e36:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002e3a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002e3c:	2307      	movs	r3, #7
 8002e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002e40:	f7ff ffae 	bl	8002da0 <BSP_LCD_GetXSize>
 8002e44:	4603      	mov	r3, r0
 8002e46:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002e48:	f7ff ffbe 	bl	8002dc8 <BSP_LCD_GetYSize>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002e50:	88fa      	ldrh	r2, [r7, #6]
 8002e52:	f107 030c 	add.w	r3, r7, #12
 8002e56:	4619      	mov	r1, r3
 8002e58:	4812      	ldr	r0, [pc, #72]	; (8002ea4 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002e5a:	f005 f809 	bl	8007e70 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002e5e:	88fa      	ldrh	r2, [r7, #6]
 8002e60:	4911      	ldr	r1, [pc, #68]	; (8002ea8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	009b      	lsls	r3, r3, #2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	f04f 32ff 	mov.w	r2, #4294967295
 8002e72:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002e74:	88fa      	ldrh	r2, [r7, #6]
 8002e76:	490c      	ldr	r1, [pc, #48]	; (8002ea8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e78:	4613      	mov	r3, r2
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	440b      	add	r3, r1
 8002e82:	3308      	adds	r3, #8
 8002e84:	4a09      	ldr	r2, [pc, #36]	; (8002eac <BSP_LCD_LayerDefaultInit+0xbc>)
 8002e86:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002e88:	88fa      	ldrh	r2, [r7, #6]
 8002e8a:	4907      	ldr	r1, [pc, #28]	; (8002ea8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002e9a:	601a      	str	r2, [r3, #0]
}
 8002e9c:	bf00      	nop
 8002e9e:	3740      	adds	r7, #64	; 0x40
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	200091a4 	.word	0x200091a4
 8002ea8:	200005b8 	.word	0x200005b8
 8002eac:	2000002c 	.word	0x2000002c

08002eb0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002eb8:	4a04      	ldr	r2, [pc, #16]	; (8002ecc <BSP_LCD_SelectLayer+0x1c>)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6013      	str	r3, [r2, #0]
} 
 8002ebe:	bf00      	nop
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	200005b4 	.word	0x200005b4

08002ed0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002ed8:	4b07      	ldr	r3, [pc, #28]	; (8002ef8 <BSP_LCD_SetTextColor+0x28>)
 8002eda:	681a      	ldr	r2, [r3, #0]
 8002edc:	4907      	ldr	r1, [pc, #28]	; (8002efc <BSP_LCD_SetTextColor+0x2c>)
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	687a      	ldr	r2, [r7, #4]
 8002eea:	601a      	str	r2, [r3, #0]
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	200005b4 	.word	0x200005b4
 8002efc:	200005b8 	.word	0x200005b8

08002f00 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002f08:	4b08      	ldr	r3, [pc, #32]	; (8002f2c <BSP_LCD_SetBackColor+0x2c>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4908      	ldr	r1, [pc, #32]	; (8002f30 <BSP_LCD_SetBackColor+0x30>)
 8002f0e:	4613      	mov	r3, r2
 8002f10:	005b      	lsls	r3, r3, #1
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	440b      	add	r3, r1
 8002f18:	3304      	adds	r3, #4
 8002f1a:	687a      	ldr	r2, [r7, #4]
 8002f1c:	601a      	str	r2, [r3, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	200005b4 	.word	0x200005b4
 8002f30:	200005b8 	.word	0x200005b8

08002f34 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <BSP_LCD_SetFont+0x2c>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4908      	ldr	r1, [pc, #32]	; (8002f64 <BSP_LCD_SetFont+0x30>)
 8002f42:	4613      	mov	r3, r2
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	4413      	add	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	3308      	adds	r3, #8
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	601a      	str	r2, [r3, #0]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	200005b4 	.word	0x200005b4
 8002f64:	200005b8 	.word	0x200005b8

08002f68 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002f68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f6a:	b085      	sub	sp, #20
 8002f6c:	af02      	add	r7, sp, #8
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002f70:	4b0f      	ldr	r3, [pc, #60]	; (8002fb0 <BSP_LCD_Clear+0x48>)
 8002f72:	681c      	ldr	r4, [r3, #0]
 8002f74:	4b0e      	ldr	r3, [pc, #56]	; (8002fb0 <BSP_LCD_Clear+0x48>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a0e      	ldr	r2, [pc, #56]	; (8002fb4 <BSP_LCD_Clear+0x4c>)
 8002f7a:	2134      	movs	r1, #52	; 0x34
 8002f7c:	fb01 f303 	mul.w	r3, r1, r3
 8002f80:	4413      	add	r3, r2
 8002f82:	335c      	adds	r3, #92	; 0x5c
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	461e      	mov	r6, r3
 8002f88:	f7ff ff0a 	bl	8002da0 <BSP_LCD_GetXSize>
 8002f8c:	4605      	mov	r5, r0
 8002f8e:	f7ff ff1b 	bl	8002dc8 <BSP_LCD_GetYSize>
 8002f92:	4602      	mov	r2, r0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	2300      	movs	r3, #0
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	462a      	mov	r2, r5
 8002fa0:	4631      	mov	r1, r6
 8002fa2:	4620      	mov	r0, r4
 8002fa4:	f000 fb28 	bl	80035f8 <LL_FillBuffer>
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002fb0:	200005b4 	.word	0x200005b4
 8002fb4:	200091a4 	.word	0x200091a4

08002fb8 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002fb8:	b590      	push	{r4, r7, lr}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	80fb      	strh	r3, [r7, #6]
 8002fc2:	460b      	mov	r3, r1
 8002fc4:	80bb      	strh	r3, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002fca:	4b1b      	ldr	r3, [pc, #108]	; (8003038 <BSP_LCD_DisplayChar+0x80>)
 8002fcc:	681a      	ldr	r2, [r3, #0]
 8002fce:	491b      	ldr	r1, [pc, #108]	; (800303c <BSP_LCD_DisplayChar+0x84>)
 8002fd0:	4613      	mov	r3, r2
 8002fd2:	005b      	lsls	r3, r3, #1
 8002fd4:	4413      	add	r3, r2
 8002fd6:	009b      	lsls	r3, r3, #2
 8002fd8:	440b      	add	r3, r1
 8002fda:	3308      	adds	r3, #8
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	6819      	ldr	r1, [r3, #0]
 8002fe0:	78fb      	ldrb	r3, [r7, #3]
 8002fe2:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <BSP_LCD_DisplayChar+0x80>)
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	4c14      	ldr	r4, [pc, #80]	; (800303c <BSP_LCD_DisplayChar+0x84>)
 8002fec:	4613      	mov	r3, r2
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	4423      	add	r3, r4
 8002ff6:	3308      	adds	r3, #8
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002ffc:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003000:	4b0d      	ldr	r3, [pc, #52]	; (8003038 <BSP_LCD_DisplayChar+0x80>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4c0d      	ldr	r4, [pc, #52]	; (800303c <BSP_LCD_DisplayChar+0x84>)
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4423      	add	r3, r4
 8003010:	3308      	adds	r3, #8
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	889b      	ldrh	r3, [r3, #4]
 8003016:	3307      	adds	r3, #7
 8003018:	2b00      	cmp	r3, #0
 800301a:	da00      	bge.n	800301e <BSP_LCD_DisplayChar+0x66>
 800301c:	3307      	adds	r3, #7
 800301e:	10db      	asrs	r3, r3, #3
 8003020:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003024:	18ca      	adds	r2, r1, r3
 8003026:	88b9      	ldrh	r1, [r7, #4]
 8003028:	88fb      	ldrh	r3, [r7, #6]
 800302a:	4618      	mov	r0, r3
 800302c:	f000 fa2c 	bl	8003488 <DrawChar>
}
 8003030:	bf00      	nop
 8003032:	370c      	adds	r7, #12
 8003034:	46bd      	mov	sp, r7
 8003036:	bd90      	pop	{r4, r7, pc}
 8003038:	200005b4 	.word	0x200005b4
 800303c:	200005b8 	.word	0x200005b8

08003040 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003040:	b5b0      	push	{r4, r5, r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af00      	add	r7, sp, #0
 8003046:	60ba      	str	r2, [r7, #8]
 8003048:	461a      	mov	r2, r3
 800304a:	4603      	mov	r3, r0
 800304c:	81fb      	strh	r3, [r7, #14]
 800304e:	460b      	mov	r3, r1
 8003050:	81bb      	strh	r3, [r7, #12]
 8003052:	4613      	mov	r3, r2
 8003054:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003056:	2301      	movs	r3, #1
 8003058:	83fb      	strh	r3, [r7, #30]
 800305a:	2300      	movs	r3, #0
 800305c:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	2300      	movs	r3, #0
 8003064:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003066:	68bb      	ldr	r3, [r7, #8]
 8003068:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 800306a:	e002      	b.n	8003072 <BSP_LCD_DisplayStringAt+0x32>
 800306c:	69bb      	ldr	r3, [r7, #24]
 800306e:	3301      	adds	r3, #1
 8003070:	61bb      	str	r3, [r7, #24]
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	1c5a      	adds	r2, r3, #1
 8003076:	617a      	str	r2, [r7, #20]
 8003078:	781b      	ldrb	r3, [r3, #0]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d1f6      	bne.n	800306c <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800307e:	f7ff fe8f 	bl	8002da0 <BSP_LCD_GetXSize>
 8003082:	4601      	mov	r1, r0
 8003084:	4b50      	ldr	r3, [pc, #320]	; (80031c8 <BSP_LCD_DisplayStringAt+0x188>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4850      	ldr	r0, [pc, #320]	; (80031cc <BSP_LCD_DisplayStringAt+0x18c>)
 800308a:	4613      	mov	r3, r2
 800308c:	005b      	lsls	r3, r3, #1
 800308e:	4413      	add	r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	4403      	add	r3, r0
 8003094:	3308      	adds	r3, #8
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	889b      	ldrh	r3, [r3, #4]
 800309a:	fbb1 f3f3 	udiv	r3, r1, r3
 800309e:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80030a0:	79fb      	ldrb	r3, [r7, #7]
 80030a2:	2b03      	cmp	r3, #3
 80030a4:	d01c      	beq.n	80030e0 <BSP_LCD_DisplayStringAt+0xa0>
 80030a6:	2b03      	cmp	r3, #3
 80030a8:	dc33      	bgt.n	8003112 <BSP_LCD_DisplayStringAt+0xd2>
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d002      	beq.n	80030b4 <BSP_LCD_DisplayStringAt+0x74>
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d019      	beq.n	80030e6 <BSP_LCD_DisplayStringAt+0xa6>
 80030b2:	e02e      	b.n	8003112 <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	1ad1      	subs	r1, r2, r3
 80030ba:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <BSP_LCD_DisplayStringAt+0x188>)
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	4843      	ldr	r0, [pc, #268]	; (80031cc <BSP_LCD_DisplayStringAt+0x18c>)
 80030c0:	4613      	mov	r3, r2
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	4413      	add	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4403      	add	r3, r0
 80030ca:	3308      	adds	r3, #8
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	889b      	ldrh	r3, [r3, #4]
 80030d0:	fb03 f301 	mul.w	r3, r3, r1
 80030d4:	085b      	lsrs	r3, r3, #1
 80030d6:	b29a      	uxth	r2, r3
 80030d8:	89fb      	ldrh	r3, [r7, #14]
 80030da:	4413      	add	r3, r2
 80030dc:	83fb      	strh	r3, [r7, #30]
      break;
 80030de:	e01b      	b.n	8003118 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80030e0:	89fb      	ldrh	r3, [r7, #14]
 80030e2:	83fb      	strh	r3, [r7, #30]
      break;
 80030e4:	e018      	b.n	8003118 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80030e6:	693a      	ldr	r2, [r7, #16]
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	1ad3      	subs	r3, r2, r3
 80030ec:	b299      	uxth	r1, r3
 80030ee:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <BSP_LCD_DisplayStringAt+0x188>)
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	4836      	ldr	r0, [pc, #216]	; (80031cc <BSP_LCD_DisplayStringAt+0x18c>)
 80030f4:	4613      	mov	r3, r2
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4403      	add	r3, r0
 80030fe:	3308      	adds	r3, #8
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	889b      	ldrh	r3, [r3, #4]
 8003104:	fb11 f303 	smulbb	r3, r1, r3
 8003108:	b29a      	uxth	r2, r3
 800310a:	89fb      	ldrh	r3, [r7, #14]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	83fb      	strh	r3, [r7, #30]
      break;
 8003110:	e002      	b.n	8003118 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003112:	89fb      	ldrh	r3, [r7, #14]
 8003114:	83fb      	strh	r3, [r7, #30]
      break;
 8003116:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003118:	8bfb      	ldrh	r3, [r7, #30]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <BSP_LCD_DisplayStringAt+0xe6>
 800311e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003122:	2b00      	cmp	r3, #0
 8003124:	da1d      	bge.n	8003162 <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003126:	2301      	movs	r3, #1
 8003128:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 800312a:	e01a      	b.n	8003162 <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	89b9      	ldrh	r1, [r7, #12]
 8003132:	8bfb      	ldrh	r3, [r7, #30]
 8003134:	4618      	mov	r0, r3
 8003136:	f7ff ff3f 	bl	8002fb8 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 800313a:	4b23      	ldr	r3, [pc, #140]	; (80031c8 <BSP_LCD_DisplayStringAt+0x188>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4923      	ldr	r1, [pc, #140]	; (80031cc <BSP_LCD_DisplayStringAt+0x18c>)
 8003140:	4613      	mov	r3, r2
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	3308      	adds	r3, #8
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	889a      	ldrh	r2, [r3, #4]
 8003150:	8bfb      	ldrh	r3, [r7, #30]
 8003152:	4413      	add	r3, r2
 8003154:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	3301      	adds	r3, #1
 800315a:	60bb      	str	r3, [r7, #8]
    i++;
 800315c:	8bbb      	ldrh	r3, [r7, #28]
 800315e:	3301      	adds	r3, #1
 8003160:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	bf14      	ite	ne
 800316a:	2301      	movne	r3, #1
 800316c:	2300      	moveq	r3, #0
 800316e:	b2dc      	uxtb	r4, r3
 8003170:	f7ff fe16 	bl	8002da0 <BSP_LCD_GetXSize>
 8003174:	8bb9      	ldrh	r1, [r7, #28]
 8003176:	4b14      	ldr	r3, [pc, #80]	; (80031c8 <BSP_LCD_DisplayStringAt+0x188>)
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	4d14      	ldr	r5, [pc, #80]	; (80031cc <BSP_LCD_DisplayStringAt+0x18c>)
 800317c:	4613      	mov	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	442b      	add	r3, r5
 8003186:	3308      	adds	r3, #8
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	889b      	ldrh	r3, [r3, #4]
 800318c:	fb03 f301 	mul.w	r3, r3, r1
 8003190:	1ac3      	subs	r3, r0, r3
 8003192:	b299      	uxth	r1, r3
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <BSP_LCD_DisplayStringAt+0x188>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	480c      	ldr	r0, [pc, #48]	; (80031cc <BSP_LCD_DisplayStringAt+0x18c>)
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4403      	add	r3, r0
 80031a4:	3308      	adds	r3, #8
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	889b      	ldrh	r3, [r3, #4]
 80031aa:	4299      	cmp	r1, r3
 80031ac:	bf2c      	ite	cs
 80031ae:	2301      	movcs	r3, #1
 80031b0:	2300      	movcc	r3, #0
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	4023      	ands	r3, r4
 80031b6:	b2db      	uxtb	r3, r3
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d1b7      	bne.n	800312c <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 80031bc:	bf00      	nop
 80031be:	bf00      	nop
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bdb0      	pop	{r4, r5, r7, pc}
 80031c6:	bf00      	nop
 80031c8:	200005b4 	.word	0x200005b4
 80031cc:	200005b8 	.word	0x200005b8

080031d0 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 80031d0:	b5b0      	push	{r4, r5, r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	603a      	str	r2, [r7, #0]
 80031da:	80fb      	strh	r3, [r7, #6]
 80031dc:	460b      	mov	r3, r1
 80031de:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80031e0:	4b1d      	ldr	r3, [pc, #116]	; (8003258 <BSP_LCD_DrawPixel+0x88>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1d      	ldr	r2, [pc, #116]	; (800325c <BSP_LCD_DrawPixel+0x8c>)
 80031e6:	2134      	movs	r1, #52	; 0x34
 80031e8:	fb01 f303 	mul.w	r3, r1, r3
 80031ec:	4413      	add	r3, r2
 80031ee:	3348      	adds	r3, #72	; 0x48
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d116      	bne.n	8003224 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80031f6:	4b18      	ldr	r3, [pc, #96]	; (8003258 <BSP_LCD_DrawPixel+0x88>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a18      	ldr	r2, [pc, #96]	; (800325c <BSP_LCD_DrawPixel+0x8c>)
 80031fc:	2134      	movs	r1, #52	; 0x34
 80031fe:	fb01 f303 	mul.w	r3, r1, r3
 8003202:	4413      	add	r3, r2
 8003204:	335c      	adds	r3, #92	; 0x5c
 8003206:	681c      	ldr	r4, [r3, #0]
 8003208:	88bd      	ldrh	r5, [r7, #4]
 800320a:	f7ff fdc9 	bl	8002da0 <BSP_LCD_GetXSize>
 800320e:	4603      	mov	r3, r0
 8003210:	fb03 f205 	mul.w	r2, r3, r5
 8003214:	88fb      	ldrh	r3, [r7, #6]
 8003216:	4413      	add	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4423      	add	r3, r4
 800321c:	683a      	ldr	r2, [r7, #0]
 800321e:	b292      	uxth	r2, r2
 8003220:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003222:	e015      	b.n	8003250 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003224:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <BSP_LCD_DrawPixel+0x88>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a0c      	ldr	r2, [pc, #48]	; (800325c <BSP_LCD_DrawPixel+0x8c>)
 800322a:	2134      	movs	r1, #52	; 0x34
 800322c:	fb01 f303 	mul.w	r3, r1, r3
 8003230:	4413      	add	r3, r2
 8003232:	335c      	adds	r3, #92	; 0x5c
 8003234:	681c      	ldr	r4, [r3, #0]
 8003236:	88bd      	ldrh	r5, [r7, #4]
 8003238:	f7ff fdb2 	bl	8002da0 <BSP_LCD_GetXSize>
 800323c:	4603      	mov	r3, r0
 800323e:	fb03 f205 	mul.w	r2, r3, r5
 8003242:	88fb      	ldrh	r3, [r7, #6]
 8003244:	4413      	add	r3, r2
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4423      	add	r3, r4
 800324a:	461a      	mov	r2, r3
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	6013      	str	r3, [r2, #0]
}
 8003250:	bf00      	nop
 8003252:	3708      	adds	r7, #8
 8003254:	46bd      	mov	sp, r7
 8003256:	bdb0      	pop	{r4, r5, r7, pc}
 8003258:	200005b4 	.word	0x200005b4
 800325c:	200091a4 	.word	0x200091a4

08003260 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003264:	4b0a      	ldr	r3, [pc, #40]	; (8003290 <BSP_LCD_DisplayOn+0x30>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699a      	ldr	r2, [r3, #24]
 800326a:	4b09      	ldr	r3, [pc, #36]	; (8003290 <BSP_LCD_DisplayOn+0x30>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f042 0201 	orr.w	r2, r2, #1
 8003272:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003274:	2201      	movs	r2, #1
 8003276:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800327a:	4806      	ldr	r0, [pc, #24]	; (8003294 <BSP_LCD_DisplayOn+0x34>)
 800327c:	f003 ff20 	bl	80070c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003280:	2201      	movs	r2, #1
 8003282:	2108      	movs	r1, #8
 8003284:	4804      	ldr	r0, [pc, #16]	; (8003298 <BSP_LCD_DisplayOn+0x38>)
 8003286:	f003 ff1b 	bl	80070c0 <HAL_GPIO_WritePin>
}
 800328a:	bf00      	nop
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	200091a4 	.word	0x200091a4
 8003294:	40022000 	.word	0x40022000
 8003298:	40022800 	.word	0x40022800

0800329c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b090      	sub	sp, #64	; 0x40
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80032a6:	4b64      	ldr	r3, [pc, #400]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 80032a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032aa:	4a63      	ldr	r2, [pc, #396]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 80032ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032b0:	6453      	str	r3, [r2, #68]	; 0x44
 80032b2:	4b61      	ldr	r3, [pc, #388]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 80032b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032b6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80032ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80032bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80032be:	4b5e      	ldr	r3, [pc, #376]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a5d      	ldr	r2, [pc, #372]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 80032c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b5b      	ldr	r3, [pc, #364]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
 80032d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80032d6:	4b58      	ldr	r3, [pc, #352]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	4a57      	ldr	r2, [pc, #348]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 80032dc:	f043 0310 	orr.w	r3, r3, #16
 80032e0:	6313      	str	r3, [r2, #48]	; 0x30
 80032e2:	4b55      	ldr	r3, [pc, #340]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f003 0310 	and.w	r3, r3, #16
 80032ea:	623b      	str	r3, [r7, #32]
 80032ec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80032ee:	4b52      	ldr	r3, [pc, #328]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	4a51      	ldr	r2, [pc, #324]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 80032f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032f8:	6313      	str	r3, [r2, #48]	; 0x30
 80032fa:	4b4f      	ldr	r3, [pc, #316]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 80032fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003302:	61fb      	str	r3, [r7, #28]
 8003304:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003306:	4b4c      	ldr	r3, [pc, #304]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	4a4b      	ldr	r2, [pc, #300]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 800330c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003310:	6313      	str	r3, [r2, #48]	; 0x30
 8003312:	4b49      	ldr	r3, [pc, #292]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800331a:	61bb      	str	r3, [r7, #24]
 800331c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800331e:	4b46      	ldr	r3, [pc, #280]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 8003320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003322:	4a45      	ldr	r2, [pc, #276]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 8003324:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003328:	6313      	str	r3, [r2, #48]	; 0x30
 800332a:	4b43      	ldr	r3, [pc, #268]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003332:	617b      	str	r3, [r7, #20]
 8003334:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003336:	4b40      	ldr	r3, [pc, #256]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 8003338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800333a:	4a3f      	ldr	r2, [pc, #252]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 800333c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003340:	6313      	str	r3, [r2, #48]	; 0x30
 8003342:	4b3d      	ldr	r3, [pc, #244]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 8003344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800334e:	4b3a      	ldr	r3, [pc, #232]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 8003350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003352:	4a39      	ldr	r2, [pc, #228]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 8003354:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003358:	6313      	str	r3, [r2, #48]	; 0x30
 800335a:	4b37      	ldr	r3, [pc, #220]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 800335c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003366:	4b34      	ldr	r3, [pc, #208]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 8003368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800336a:	4a33      	ldr	r2, [pc, #204]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 800336c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003370:	6313      	str	r3, [r2, #48]	; 0x30
 8003372:	4b31      	ldr	r3, [pc, #196]	; (8003438 <BSP_LCD_MspInit+0x19c>)
 8003374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003376:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800337e:	2310      	movs	r3, #16
 8003380:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800338a:	2302      	movs	r3, #2
 800338c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800338e:	230e      	movs	r3, #14
 8003390:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003392:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003396:	4619      	mov	r1, r3
 8003398:	4828      	ldr	r0, [pc, #160]	; (800343c <BSP_LCD_MspInit+0x1a0>)
 800339a:	f003 fbc1 	bl	8006b20 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800339e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80033a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033a4:	2302      	movs	r3, #2
 80033a6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80033a8:	2309      	movs	r3, #9
 80033aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80033ac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033b0:	4619      	mov	r1, r3
 80033b2:	4823      	ldr	r0, [pc, #140]	; (8003440 <BSP_LCD_MspInit+0x1a4>)
 80033b4:	f003 fbb4 	bl	8006b20 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80033b8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80033bc:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033be:	2302      	movs	r3, #2
 80033c0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033c2:	230e      	movs	r3, #14
 80033c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80033c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033ca:	4619      	mov	r1, r3
 80033cc:	481d      	ldr	r0, [pc, #116]	; (8003444 <BSP_LCD_MspInit+0x1a8>)
 80033ce:	f003 fba7 	bl	8006b20 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80033d2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80033d6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033d8:	2302      	movs	r3, #2
 80033da:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033dc:	230e      	movs	r3, #14
 80033de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80033e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033e4:	4619      	mov	r1, r3
 80033e6:	4818      	ldr	r0, [pc, #96]	; (8003448 <BSP_LCD_MspInit+0x1ac>)
 80033e8:	f003 fb9a 	bl	8006b20 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80033ec:	23f7      	movs	r3, #247	; 0xf7
 80033ee:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80033f0:	2302      	movs	r3, #2
 80033f2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80033f4:	230e      	movs	r3, #14
 80033f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80033f8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033fc:	4619      	mov	r1, r3
 80033fe:	4813      	ldr	r0, [pc, #76]	; (800344c <BSP_LCD_MspInit+0x1b0>)
 8003400:	f003 fb8e 	bl	8006b20 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003404:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003408:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800340a:	2301      	movs	r3, #1
 800340c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800340e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003412:	4619      	mov	r1, r3
 8003414:	480b      	ldr	r0, [pc, #44]	; (8003444 <BSP_LCD_MspInit+0x1a8>)
 8003416:	f003 fb83 	bl	8006b20 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800341a:	2308      	movs	r3, #8
 800341c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800341e:	2301      	movs	r3, #1
 8003420:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003422:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003426:	4619      	mov	r1, r3
 8003428:	4808      	ldr	r0, [pc, #32]	; (800344c <BSP_LCD_MspInit+0x1b0>)
 800342a:	f003 fb79 	bl	8006b20 <HAL_GPIO_Init>
}
 800342e:	bf00      	nop
 8003430:	3740      	adds	r7, #64	; 0x40
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	40023800 	.word	0x40023800
 800343c:	40021000 	.word	0x40021000
 8003440:	40021800 	.word	0x40021800
 8003444:	40022000 	.word	0x40022000
 8003448:	40022400 	.word	0x40022400
 800344c:	40022800 	.word	0x40022800

08003450 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <BSP_LCD_ClockConfig+0x34>)
 800345c:	2208      	movs	r2, #8
 800345e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003460:	4b08      	ldr	r3, [pc, #32]	; (8003484 <BSP_LCD_ClockConfig+0x34>)
 8003462:	22c0      	movs	r2, #192	; 0xc0
 8003464:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003466:	4b07      	ldr	r3, [pc, #28]	; (8003484 <BSP_LCD_ClockConfig+0x34>)
 8003468:	2205      	movs	r2, #5
 800346a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800346c:	4b05      	ldr	r3, [pc, #20]	; (8003484 <BSP_LCD_ClockConfig+0x34>)
 800346e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003474:	4803      	ldr	r0, [pc, #12]	; (8003484 <BSP_LCD_ClockConfig+0x34>)
 8003476:	f005 fbed 	bl	8008c54 <HAL_RCCEx_PeriphCLKConfig>
}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200005d0 	.word	0x200005d0

08003488 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b088      	sub	sp, #32
 800348c:	af00      	add	r7, sp, #0
 800348e:	4603      	mov	r3, r0
 8003490:	603a      	str	r2, [r7, #0]
 8003492:	80fb      	strh	r3, [r7, #6]
 8003494:	460b      	mov	r3, r1
 8003496:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	61fb      	str	r3, [r7, #28]
 800349c:	2300      	movs	r3, #0
 800349e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80034a0:	4b53      	ldr	r3, [pc, #332]	; (80035f0 <DrawChar+0x168>)
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	4953      	ldr	r1, [pc, #332]	; (80035f4 <DrawChar+0x16c>)
 80034a6:	4613      	mov	r3, r2
 80034a8:	005b      	lsls	r3, r3, #1
 80034aa:	4413      	add	r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	3308      	adds	r3, #8
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	88db      	ldrh	r3, [r3, #6]
 80034b6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80034b8:	4b4d      	ldr	r3, [pc, #308]	; (80035f0 <DrawChar+0x168>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	494d      	ldr	r1, [pc, #308]	; (80035f4 <DrawChar+0x16c>)
 80034be:	4613      	mov	r3, r2
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	440b      	add	r3, r1
 80034c8:	3308      	adds	r3, #8
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	889b      	ldrh	r3, [r3, #4]
 80034ce:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80034d0:	8a3b      	ldrh	r3, [r7, #16]
 80034d2:	3307      	adds	r3, #7
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	da00      	bge.n	80034da <DrawChar+0x52>
 80034d8:	3307      	adds	r3, #7
 80034da:	10db      	asrs	r3, r3, #3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	00db      	lsls	r3, r3, #3
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	8a3b      	ldrh	r3, [r7, #16]
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	1ad3      	subs	r3, r2, r3
 80034e8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
 80034ee:	e076      	b.n	80035de <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80034f0:	8a3b      	ldrh	r3, [r7, #16]
 80034f2:	3307      	adds	r3, #7
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	da00      	bge.n	80034fa <DrawChar+0x72>
 80034f8:	3307      	adds	r3, #7
 80034fa:	10db      	asrs	r3, r3, #3
 80034fc:	461a      	mov	r2, r3
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	fb03 f302 	mul.w	r3, r3, r2
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	4413      	add	r3, r2
 8003508:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800350a:	8a3b      	ldrh	r3, [r7, #16]
 800350c:	3307      	adds	r3, #7
 800350e:	2b00      	cmp	r3, #0
 8003510:	da00      	bge.n	8003514 <DrawChar+0x8c>
 8003512:	3307      	adds	r3, #7
 8003514:	10db      	asrs	r3, r3, #3
 8003516:	2b01      	cmp	r3, #1
 8003518:	d002      	beq.n	8003520 <DrawChar+0x98>
 800351a:	2b02      	cmp	r3, #2
 800351c:	d004      	beq.n	8003528 <DrawChar+0xa0>
 800351e:	e00c      	b.n	800353a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	781b      	ldrb	r3, [r3, #0]
 8003524:	617b      	str	r3, [r7, #20]
      break;
 8003526:	e016      	b.n	8003556 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	021b      	lsls	r3, r3, #8
 800352e:	68ba      	ldr	r2, [r7, #8]
 8003530:	3201      	adds	r2, #1
 8003532:	7812      	ldrb	r2, [r2, #0]
 8003534:	4313      	orrs	r3, r2
 8003536:	617b      	str	r3, [r7, #20]
      break;
 8003538:	e00d      	b.n	8003556 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	041a      	lsls	r2, r3, #16
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	3301      	adds	r3, #1
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	021b      	lsls	r3, r3, #8
 8003548:	4313      	orrs	r3, r2
 800354a:	68ba      	ldr	r2, [r7, #8]
 800354c:	3202      	adds	r2, #2
 800354e:	7812      	ldrb	r2, [r2, #0]
 8003550:	4313      	orrs	r3, r2
 8003552:	617b      	str	r3, [r7, #20]
      break;
 8003554:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003556:	2300      	movs	r3, #0
 8003558:	61bb      	str	r3, [r7, #24]
 800355a:	e036      	b.n	80035ca <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800355c:	8a3a      	ldrh	r2, [r7, #16]
 800355e:	69bb      	ldr	r3, [r7, #24]
 8003560:	1ad2      	subs	r2, r2, r3
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	4413      	add	r3, r2
 8003566:	3b01      	subs	r3, #1
 8003568:	2201      	movs	r2, #1
 800356a:	fa02 f303 	lsl.w	r3, r2, r3
 800356e:	461a      	mov	r2, r3
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	4013      	ands	r3, r2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d012      	beq.n	800359e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	b29a      	uxth	r2, r3
 800357c:	88fb      	ldrh	r3, [r7, #6]
 800357e:	4413      	add	r3, r2
 8003580:	b298      	uxth	r0, r3
 8003582:	4b1b      	ldr	r3, [pc, #108]	; (80035f0 <DrawChar+0x168>)
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	491b      	ldr	r1, [pc, #108]	; (80035f4 <DrawChar+0x16c>)
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	440b      	add	r3, r1
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	88bb      	ldrh	r3, [r7, #4]
 8003596:	4619      	mov	r1, r3
 8003598:	f7ff fe1a 	bl	80031d0 <BSP_LCD_DrawPixel>
 800359c:	e012      	b.n	80035c4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800359e:	69bb      	ldr	r3, [r7, #24]
 80035a0:	b29a      	uxth	r2, r3
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	4413      	add	r3, r2
 80035a6:	b298      	uxth	r0, r3
 80035a8:	4b11      	ldr	r3, [pc, #68]	; (80035f0 <DrawChar+0x168>)
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4911      	ldr	r1, [pc, #68]	; (80035f4 <DrawChar+0x16c>)
 80035ae:	4613      	mov	r3, r2
 80035b0:	005b      	lsls	r3, r3, #1
 80035b2:	4413      	add	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	440b      	add	r3, r1
 80035b8:	3304      	adds	r3, #4
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	88bb      	ldrh	r3, [r7, #4]
 80035be:	4619      	mov	r1, r3
 80035c0:	f7ff fe06 	bl	80031d0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	3301      	adds	r3, #1
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	8a3b      	ldrh	r3, [r7, #16]
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d3c4      	bcc.n	800355c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80035d2:	88bb      	ldrh	r3, [r7, #4]
 80035d4:	3301      	adds	r3, #1
 80035d6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80035d8:	69fb      	ldr	r3, [r7, #28]
 80035da:	3301      	adds	r3, #1
 80035dc:	61fb      	str	r3, [r7, #28]
 80035de:	8a7b      	ldrh	r3, [r7, #18]
 80035e0:	69fa      	ldr	r2, [r7, #28]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d384      	bcc.n	80034f0 <DrawChar+0x68>
  }
}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	3720      	adds	r7, #32
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	200005b4 	.word	0x200005b4
 80035f4:	200005b8 	.word	0x200005b8

080035f8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	60b9      	str	r1, [r7, #8]
 8003602:	607a      	str	r2, [r7, #4]
 8003604:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003606:	4b1e      	ldr	r3, [pc, #120]	; (8003680 <LL_FillBuffer+0x88>)
 8003608:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800360c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800360e:	4b1d      	ldr	r3, [pc, #116]	; (8003684 <LL_FillBuffer+0x8c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1d      	ldr	r2, [pc, #116]	; (8003688 <LL_FillBuffer+0x90>)
 8003614:	2134      	movs	r1, #52	; 0x34
 8003616:	fb01 f303 	mul.w	r3, r1, r3
 800361a:	4413      	add	r3, r2
 800361c:	3348      	adds	r3, #72	; 0x48
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	2b02      	cmp	r3, #2
 8003622:	d103      	bne.n	800362c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003624:	4b16      	ldr	r3, [pc, #88]	; (8003680 <LL_FillBuffer+0x88>)
 8003626:	2202      	movs	r2, #2
 8003628:	609a      	str	r2, [r3, #8]
 800362a:	e002      	b.n	8003632 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800362c:	4b14      	ldr	r3, [pc, #80]	; (8003680 <LL_FillBuffer+0x88>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003632:	4a13      	ldr	r2, [pc, #76]	; (8003680 <LL_FillBuffer+0x88>)
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003638:	4b11      	ldr	r3, [pc, #68]	; (8003680 <LL_FillBuffer+0x88>)
 800363a:	4a14      	ldr	r2, [pc, #80]	; (800368c <LL_FillBuffer+0x94>)
 800363c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800363e:	4810      	ldr	r0, [pc, #64]	; (8003680 <LL_FillBuffer+0x88>)
 8003640:	f002 ffe2 	bl	8006608 <HAL_DMA2D_Init>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d115      	bne.n	8003676 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 800364a:	68f9      	ldr	r1, [r7, #12]
 800364c:	480c      	ldr	r0, [pc, #48]	; (8003680 <LL_FillBuffer+0x88>)
 800364e:	f003 f939 	bl	80068c4 <HAL_DMA2D_ConfigLayer>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d10e      	bne.n	8003676 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	9300      	str	r3, [sp, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	69f9      	ldr	r1, [r7, #28]
 8003662:	4807      	ldr	r0, [pc, #28]	; (8003680 <LL_FillBuffer+0x88>)
 8003664:	f003 f81a 	bl	800669c <HAL_DMA2D_Start>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d103      	bne.n	8003676 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800366e:	210a      	movs	r1, #10
 8003670:	4803      	ldr	r0, [pc, #12]	; (8003680 <LL_FillBuffer+0x88>)
 8003672:	f003 f83e 	bl	80066f2 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	20000574 	.word	0x20000574
 8003684:	200005b4 	.word	0x200005b4
 8003688:	200091a4 	.word	0x200091a4
 800368c:	4002b000 	.word	0x4002b000

08003690 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003694:	4b29      	ldr	r3, [pc, #164]	; (800373c <BSP_SDRAM_Init+0xac>)
 8003696:	4a2a      	ldr	r2, [pc, #168]	; (8003740 <BSP_SDRAM_Init+0xb0>)
 8003698:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800369a:	4b2a      	ldr	r3, [pc, #168]	; (8003744 <BSP_SDRAM_Init+0xb4>)
 800369c:	2202      	movs	r2, #2
 800369e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 80036a0:	4b28      	ldr	r3, [pc, #160]	; (8003744 <BSP_SDRAM_Init+0xb4>)
 80036a2:	2207      	movs	r2, #7
 80036a4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 80036a6:	4b27      	ldr	r3, [pc, #156]	; (8003744 <BSP_SDRAM_Init+0xb4>)
 80036a8:	2204      	movs	r2, #4
 80036aa:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 80036ac:	4b25      	ldr	r3, [pc, #148]	; (8003744 <BSP_SDRAM_Init+0xb4>)
 80036ae:	2207      	movs	r2, #7
 80036b0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <BSP_SDRAM_Init+0xb4>)
 80036b4:	2202      	movs	r2, #2
 80036b6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 80036b8:	4b22      	ldr	r3, [pc, #136]	; (8003744 <BSP_SDRAM_Init+0xb4>)
 80036ba:	2202      	movs	r2, #2
 80036bc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 80036be:	4b21      	ldr	r3, [pc, #132]	; (8003744 <BSP_SDRAM_Init+0xb4>)
 80036c0:	2202      	movs	r2, #2
 80036c2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 80036c4:	4b1d      	ldr	r3, [pc, #116]	; (800373c <BSP_SDRAM_Init+0xac>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80036ca:	4b1c      	ldr	r3, [pc, #112]	; (800373c <BSP_SDRAM_Init+0xac>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 80036d0:	4b1a      	ldr	r3, [pc, #104]	; (800373c <BSP_SDRAM_Init+0xac>)
 80036d2:	2204      	movs	r2, #4
 80036d4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 80036d6:	4b19      	ldr	r3, [pc, #100]	; (800373c <BSP_SDRAM_Init+0xac>)
 80036d8:	2210      	movs	r2, #16
 80036da:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80036dc:	4b17      	ldr	r3, [pc, #92]	; (800373c <BSP_SDRAM_Init+0xac>)
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 80036e2:	4b16      	ldr	r3, [pc, #88]	; (800373c <BSP_SDRAM_Init+0xac>)
 80036e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036e8:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <BSP_SDRAM_Init+0xac>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <BSP_SDRAM_Init+0xac>)
 80036f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036f6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80036f8:	4b10      	ldr	r3, [pc, #64]	; (800373c <BSP_SDRAM_Init+0xac>)
 80036fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80036fe:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003700:	4b0e      	ldr	r3, [pc, #56]	; (800373c <BSP_SDRAM_Init+0xac>)
 8003702:	2200      	movs	r2, #0
 8003704:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003706:	2100      	movs	r1, #0
 8003708:	480c      	ldr	r0, [pc, #48]	; (800373c <BSP_SDRAM_Init+0xac>)
 800370a:	f000 f87f 	bl	800380c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800370e:	490d      	ldr	r1, [pc, #52]	; (8003744 <BSP_SDRAM_Init+0xb4>)
 8003710:	480a      	ldr	r0, [pc, #40]	; (800373c <BSP_SDRAM_Init+0xac>)
 8003712:	f008 f824 	bl	800b75e <HAL_SDRAM_Init>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d003      	beq.n	8003724 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800371c:	4b0a      	ldr	r3, [pc, #40]	; (8003748 <BSP_SDRAM_Init+0xb8>)
 800371e:	2201      	movs	r2, #1
 8003720:	701a      	strb	r2, [r3, #0]
 8003722:	e002      	b.n	800372a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003724:	4b08      	ldr	r3, [pc, #32]	; (8003748 <BSP_SDRAM_Init+0xb8>)
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800372a:	f240 6003 	movw	r0, #1539	; 0x603
 800372e:	f000 f80d 	bl	800374c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <BSP_SDRAM_Init+0xb8>)
 8003734:	781b      	ldrb	r3, [r3, #0]
}
 8003736:	4618      	mov	r0, r3
 8003738:	bd80      	pop	{r7, pc}
 800373a:	bf00      	nop
 800373c:	2000924c 	.word	0x2000924c
 8003740:	a0000140 	.word	0xa0000140
 8003744:	20000654 	.word	0x20000654
 8003748:	2000003c 	.word	0x2000003c

0800374c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	b084      	sub	sp, #16
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003758:	4b2a      	ldr	r3, [pc, #168]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800375a:	2201      	movs	r2, #1
 800375c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 800375e:	4b29      	ldr	r3, [pc, #164]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003760:	2210      	movs	r2, #16
 8003762:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003764:	4b27      	ldr	r3, [pc, #156]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003766:	2201      	movs	r2, #1
 8003768:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800376a:	4b26      	ldr	r3, [pc, #152]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800376c:	2200      	movs	r2, #0
 800376e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003770:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003774:	4923      	ldr	r1, [pc, #140]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003776:	4824      	ldr	r0, [pc, #144]	; (8003808 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003778:	f008 f825 	bl	800b7c6 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800377c:	2001      	movs	r0, #1
 800377e:	f002 fa39 	bl	8005bf4 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003782:	4b20      	ldr	r3, [pc, #128]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003784:	2202      	movs	r2, #2
 8003786:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003788:	4b1e      	ldr	r3, [pc, #120]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800378a:	2210      	movs	r2, #16
 800378c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800378e:	4b1d      	ldr	r3, [pc, #116]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003790:	2201      	movs	r2, #1
 8003792:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003794:	4b1b      	ldr	r3, [pc, #108]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003796:	2200      	movs	r2, #0
 8003798:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 800379a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800379e:	4919      	ldr	r1, [pc, #100]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a0:	4819      	ldr	r0, [pc, #100]	; (8003808 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037a2:	f008 f810 	bl	800b7c6 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 80037a6:	4b17      	ldr	r3, [pc, #92]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037a8:	2203      	movs	r2, #3
 80037aa:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80037ac:	4b15      	ldr	r3, [pc, #84]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ae:	2210      	movs	r2, #16
 80037b0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 80037b2:	4b14      	ldr	r3, [pc, #80]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037b4:	2208      	movs	r2, #8
 80037b6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80037b8:	4b12      	ldr	r3, [pc, #72]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80037be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037c2:	4910      	ldr	r1, [pc, #64]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037c4:	4810      	ldr	r0, [pc, #64]	; (8003808 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037c6:	f007 fffe 	bl	800b7c6 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 80037ca:	f44f 7308 	mov.w	r3, #544	; 0x220
 80037ce:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 80037d0:	4b0c      	ldr	r3, [pc, #48]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037d2:	2204      	movs	r2, #4
 80037d4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80037d6:	4b0b      	ldr	r3, [pc, #44]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037d8:	2210      	movs	r2, #16
 80037da:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80037dc:	4b09      	ldr	r3, [pc, #36]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037de:	2201      	movs	r2, #1
 80037e0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	4a07      	ldr	r2, [pc, #28]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037e6:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80037e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80037ec:	4905      	ldr	r1, [pc, #20]	; (8003804 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80037ee:	4806      	ldr	r0, [pc, #24]	; (8003808 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037f0:	f007 ffe9 	bl	800b7c6 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 80037f4:	6879      	ldr	r1, [r7, #4]
 80037f6:	4804      	ldr	r0, [pc, #16]	; (8003808 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80037f8:	f008 f810 	bl	800b81c <HAL_SDRAM_ProgramRefreshRate>
}
 80037fc:	bf00      	nop
 80037fe:	3710      	adds	r7, #16
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}
 8003804:	20000670 	.word	0x20000670
 8003808:	2000924c 	.word	0x2000924c

0800380c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 800380c:	b580      	push	{r7, lr}
 800380e:	b090      	sub	sp, #64	; 0x40
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003816:	4b70      	ldr	r3, [pc, #448]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 8003818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800381a:	4a6f      	ldr	r2, [pc, #444]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 800381c:	f043 0301 	orr.w	r3, r3, #1
 8003820:	6393      	str	r3, [r2, #56]	; 0x38
 8003822:	4b6d      	ldr	r3, [pc, #436]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 8003824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003826:	f003 0301 	and.w	r3, r3, #1
 800382a:	62bb      	str	r3, [r7, #40]	; 0x28
 800382c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800382e:	4b6a      	ldr	r3, [pc, #424]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	4a69      	ldr	r2, [pc, #420]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 8003834:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003838:	6313      	str	r3, [r2, #48]	; 0x30
 800383a:	4b67      	ldr	r3, [pc, #412]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
 8003844:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003846:	4b64      	ldr	r3, [pc, #400]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	4a63      	ldr	r2, [pc, #396]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 800384c:	f043 0304 	orr.w	r3, r3, #4
 8003850:	6313      	str	r3, [r2, #48]	; 0x30
 8003852:	4b61      	ldr	r3, [pc, #388]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 8003854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	623b      	str	r3, [r7, #32]
 800385c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800385e:	4b5e      	ldr	r3, [pc, #376]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4a5d      	ldr	r2, [pc, #372]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 8003864:	f043 0308 	orr.w	r3, r3, #8
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4b5b      	ldr	r3, [pc, #364]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f003 0308 	and.w	r3, r3, #8
 8003872:	61fb      	str	r3, [r7, #28]
 8003874:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003876:	4b58      	ldr	r3, [pc, #352]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 8003878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387a:	4a57      	ldr	r2, [pc, #348]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 800387c:	f043 0310 	orr.w	r3, r3, #16
 8003880:	6313      	str	r3, [r2, #48]	; 0x30
 8003882:	4b55      	ldr	r3, [pc, #340]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 8003884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800388e:	4b52      	ldr	r3, [pc, #328]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 8003890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003892:	4a51      	ldr	r2, [pc, #324]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 8003894:	f043 0320 	orr.w	r3, r3, #32
 8003898:	6313      	str	r3, [r2, #48]	; 0x30
 800389a:	4b4f      	ldr	r3, [pc, #316]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 800389c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80038a6:	4b4c      	ldr	r3, [pc, #304]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 80038a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038aa:	4a4b      	ldr	r2, [pc, #300]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 80038ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80038b0:	6313      	str	r3, [r2, #48]	; 0x30
 80038b2:	4b49      	ldr	r3, [pc, #292]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038be:	4b46      	ldr	r3, [pc, #280]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	4a45      	ldr	r2, [pc, #276]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 80038c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038c8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ca:	4b43      	ldr	r3, [pc, #268]	; (80039d8 <BSP_SDRAM_MspInit+0x1cc>)
 80038cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038d2:	60fb      	str	r3, [r7, #12]
 80038d4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80038d6:	2302      	movs	r3, #2
 80038d8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 80038da:	2301      	movs	r3, #1
 80038dc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80038de:	2302      	movs	r3, #2
 80038e0:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80038e2:	230c      	movs	r3, #12
 80038e4:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 80038e6:	2308      	movs	r3, #8
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80038ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038ee:	4619      	mov	r1, r3
 80038f0:	483a      	ldr	r0, [pc, #232]	; (80039dc <BSP_SDRAM_MspInit+0x1d0>)
 80038f2:	f003 f915 	bl	8006b20 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 80038f6:	f24c 7303 	movw	r3, #50947	; 0xc703
 80038fa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80038fc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003900:	4619      	mov	r1, r3
 8003902:	4837      	ldr	r0, [pc, #220]	; (80039e0 <BSP_SDRAM_MspInit+0x1d4>)
 8003904:	f003 f90c 	bl	8006b20 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003908:	f64f 7383 	movw	r3, #65411	; 0xff83
 800390c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800390e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003912:	4619      	mov	r1, r3
 8003914:	4833      	ldr	r0, [pc, #204]	; (80039e4 <BSP_SDRAM_MspInit+0x1d8>)
 8003916:	f003 f903 	bl	8006b20 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800391a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003920:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003924:	4619      	mov	r1, r3
 8003926:	4830      	ldr	r0, [pc, #192]	; (80039e8 <BSP_SDRAM_MspInit+0x1dc>)
 8003928:	f003 f8fa 	bl	8006b20 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 800392c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003930:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003932:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003936:	4619      	mov	r1, r3
 8003938:	482c      	ldr	r0, [pc, #176]	; (80039ec <BSP_SDRAM_MspInit+0x1e0>)
 800393a:	f003 f8f1 	bl	8006b20 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 800393e:	2328      	movs	r3, #40	; 0x28
 8003940:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003946:	4619      	mov	r1, r3
 8003948:	4829      	ldr	r0, [pc, #164]	; (80039f0 <BSP_SDRAM_MspInit+0x1e4>)
 800394a:	f003 f8e9 	bl	8006b20 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800394e:	4b29      	ldr	r3, [pc, #164]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 8003950:	2200      	movs	r2, #0
 8003952:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003954:	4b27      	ldr	r3, [pc, #156]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 8003956:	2280      	movs	r2, #128	; 0x80
 8003958:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800395a:	4b26      	ldr	r3, [pc, #152]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 800395c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003960:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003962:	4b24      	ldr	r3, [pc, #144]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 8003964:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003968:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800396a:	4b22      	ldr	r3, [pc, #136]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 800396c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003970:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003972:	4b20      	ldr	r3, [pc, #128]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 8003974:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003978:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 800397a:	4b1e      	ldr	r3, [pc, #120]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 800397c:	2200      	movs	r2, #0
 800397e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003980:	4b1c      	ldr	r3, [pc, #112]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 8003982:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003986:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003988:	4b1a      	ldr	r3, [pc, #104]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 800398a:	2200      	movs	r2, #0
 800398c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800398e:	4b19      	ldr	r3, [pc, #100]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 8003990:	2203      	movs	r2, #3
 8003992:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003994:	4b17      	ldr	r3, [pc, #92]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 8003996:	2200      	movs	r2, #0
 8003998:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800399a:	4b16      	ldr	r3, [pc, #88]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 800399c:	2200      	movs	r2, #0
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 80039a0:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 80039a2:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <BSP_SDRAM_MspInit+0x1ec>)
 80039a4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a12      	ldr	r2, [pc, #72]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 80039aa:	631a      	str	r2, [r3, #48]	; 0x30
 80039ac:	4a11      	ldr	r2, [pc, #68]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 80039b2:	4810      	ldr	r0, [pc, #64]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 80039b4:	f002 fad2 	bl	8005f5c <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 80039b8:	480e      	ldr	r0, [pc, #56]	; (80039f4 <BSP_SDRAM_MspInit+0x1e8>)
 80039ba:	f002 fa21 	bl	8005e00 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 80039be:	2200      	movs	r2, #0
 80039c0:	210f      	movs	r1, #15
 80039c2:	2038      	movs	r0, #56	; 0x38
 80039c4:	f002 f9f2 	bl	8005dac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 80039c8:	2038      	movs	r0, #56	; 0x38
 80039ca:	f002 fa0b 	bl	8005de4 <HAL_NVIC_EnableIRQ>
}
 80039ce:	bf00      	nop
 80039d0:	3740      	adds	r7, #64	; 0x40
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40020800 	.word	0x40020800
 80039e0:	40020c00 	.word	0x40020c00
 80039e4:	40021000 	.word	0x40021000
 80039e8:	40021400 	.word	0x40021400
 80039ec:	40021800 	.word	0x40021800
 80039f0:	40021c00 	.word	0x40021c00
 80039f4:	20000680 	.word	0x20000680
 80039f8:	40026410 	.word	0x40026410

080039fc <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	4603      	mov	r3, r0
 8003a04:	460a      	mov	r2, r1
 8003a06:	80fb      	strh	r3, [r7, #6]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003a10:	4a14      	ldr	r2, [pc, #80]	; (8003a64 <BSP_TS_Init+0x68>)
 8003a12:	88fb      	ldrh	r3, [r7, #6]
 8003a14:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003a16:	4a14      	ldr	r2, [pc, #80]	; (8003a68 <BSP_TS_Init+0x6c>)
 8003a18:	88bb      	ldrh	r3, [r7, #4]
 8003a1a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003a1c:	4b13      	ldr	r3, [pc, #76]	; (8003a6c <BSP_TS_Init+0x70>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	2070      	movs	r0, #112	; 0x70
 8003a22:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003a24:	4b11      	ldr	r3, [pc, #68]	; (8003a6c <BSP_TS_Init+0x70>)
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2070      	movs	r0, #112	; 0x70
 8003a2a:	4798      	blx	r3
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	2b51      	cmp	r3, #81	; 0x51
 8003a30:	d111      	bne.n	8003a56 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003a32:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <BSP_TS_Init+0x74>)
 8003a34:	4a0d      	ldr	r2, [pc, #52]	; (8003a6c <BSP_TS_Init+0x70>)
 8003a36:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003a38:	4b0e      	ldr	r3, [pc, #56]	; (8003a74 <BSP_TS_Init+0x78>)
 8003a3a:	2270      	movs	r2, #112	; 0x70
 8003a3c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003a3e:	4b0e      	ldr	r3, [pc, #56]	; (8003a78 <BSP_TS_Init+0x7c>)
 8003a40:	2208      	movs	r2, #8
 8003a42:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003a44:	4b0a      	ldr	r3, [pc, #40]	; (8003a70 <BSP_TS_Init+0x74>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	4a0a      	ldr	r2, [pc, #40]	; (8003a74 <BSP_TS_Init+0x78>)
 8003a4c:	7812      	ldrb	r2, [r2, #0]
 8003a4e:	b292      	uxth	r2, r2
 8003a50:	4610      	mov	r0, r2
 8003a52:	4798      	blx	r3
 8003a54:	e001      	b.n	8003a5a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003a56:	2303      	movs	r3, #3
 8003a58:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	200006e4 	.word	0x200006e4
 8003a68:	200006e6 	.word	0x200006e6
 8003a6c:	20000000 	.word	0x20000000
 8003a70:	200006e0 	.word	0x200006e0
 8003a74:	200006e9 	.word	0x200006e9
 8003a78:	200006e8 	.word	0x200006e8

08003a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003a82:	4b11      	ldr	r3, [pc, #68]	; (8003ac8 <HAL_MspInit+0x4c>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	4a10      	ldr	r2, [pc, #64]	; (8003ac8 <HAL_MspInit+0x4c>)
 8003a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <HAL_MspInit+0x4c>)
 8003a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a96:	607b      	str	r3, [r7, #4]
 8003a98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a9a:	4b0b      	ldr	r3, [pc, #44]	; (8003ac8 <HAL_MspInit+0x4c>)
 8003a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a9e:	4a0a      	ldr	r2, [pc, #40]	; (8003ac8 <HAL_MspInit+0x4c>)
 8003aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8003aa6:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <HAL_MspInit+0x4c>)
 8003aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003aae:	603b      	str	r3, [r7, #0]
 8003ab0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	210f      	movs	r1, #15
 8003ab6:	f06f 0001 	mvn.w	r0, #1
 8003aba:	f002 f977 	bl	8005dac <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	40023800 	.word	0x40023800

08003acc <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a0a      	ldr	r2, [pc, #40]	; (8003b04 <HAL_DMA2D_MspInit+0x38>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d10b      	bne.n	8003af6 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <HAL_DMA2D_MspInit+0x3c>)
 8003ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae2:	4a09      	ldr	r2, [pc, #36]	; (8003b08 <HAL_DMA2D_MspInit+0x3c>)
 8003ae4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aea:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <HAL_DMA2D_MspInit+0x3c>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003af2:	60fb      	str	r3, [r7, #12]
 8003af4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003af6:	bf00      	nop
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	4002b000 	.word	0x4002b000
 8003b08:	40023800 	.word	0x40023800

08003b0c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b08e      	sub	sp, #56	; 0x38
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b18:	2200      	movs	r2, #0
 8003b1a:	601a      	str	r2, [r3, #0]
 8003b1c:	605a      	str	r2, [r3, #4]
 8003b1e:	609a      	str	r2, [r3, #8]
 8003b20:	60da      	str	r2, [r3, #12]
 8003b22:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a55      	ldr	r2, [pc, #340]	; (8003c80 <HAL_LTDC_MspInit+0x174>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	f040 80a3 	bne.w	8003c76 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003b30:	4b54      	ldr	r3, [pc, #336]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b34:	4a53      	ldr	r2, [pc, #332]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b3a:	6453      	str	r3, [r2, #68]	; 0x44
 8003b3c:	4b51      	ldr	r3, [pc, #324]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b40:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b44:	623b      	str	r3, [r7, #32]
 8003b46:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b48:	4b4e      	ldr	r3, [pc, #312]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b4c:	4a4d      	ldr	r2, [pc, #308]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b4e:	f043 0310 	orr.w	r3, r3, #16
 8003b52:	6313      	str	r3, [r2, #48]	; 0x30
 8003b54:	4b4b      	ldr	r3, [pc, #300]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b58:	f003 0310 	and.w	r3, r3, #16
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003b60:	4b48      	ldr	r3, [pc, #288]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	4a47      	ldr	r2, [pc, #284]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b66:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b6a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6c:	4b45      	ldr	r3, [pc, #276]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003b78:	4b42      	ldr	r3, [pc, #264]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7c:	4a41      	ldr	r2, [pc, #260]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003b82:	6313      	str	r3, [r2, #48]	; 0x30
 8003b84:	4b3f      	ldr	r3, [pc, #252]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b8c:	617b      	str	r3, [r7, #20]
 8003b8e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b90:	4b3c      	ldr	r3, [pc, #240]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b94:	4a3b      	ldr	r2, [pc, #236]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b9a:	6313      	str	r3, [r2, #48]	; 0x30
 8003b9c:	4b39      	ldr	r3, [pc, #228]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ba4:	613b      	str	r3, [r7, #16]
 8003ba6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003ba8:	4b36      	ldr	r3, [pc, #216]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	4a35      	ldr	r2, [pc, #212]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003bae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8003bb4:	4b33      	ldr	r3, [pc, #204]	; (8003c84 <HAL_LTDC_MspInit+0x178>)
 8003bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003bc0:	2310      	movs	r3, #16
 8003bc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc4:	2302      	movs	r3, #2
 8003bc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bcc:	2300      	movs	r3, #0
 8003bce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003bd0:	230e      	movs	r3, #14
 8003bd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003bd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bd8:	4619      	mov	r1, r3
 8003bda:	482b      	ldr	r0, [pc, #172]	; (8003c88 <HAL_LTDC_MspInit+0x17c>)
 8003bdc:	f002 ffa0 	bl	8006b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003be0:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003be4:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be6:	2302      	movs	r3, #2
 8003be8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bea:	2300      	movs	r3, #0
 8003bec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003bf2:	230e      	movs	r3, #14
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003bf6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4823      	ldr	r0, [pc, #140]	; (8003c8c <HAL_LTDC_MspInit+0x180>)
 8003bfe:	f002 ff8f 	bl	8006b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003c02:	23f7      	movs	r3, #247	; 0xf7
 8003c04:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c06:	2302      	movs	r3, #2
 8003c08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c12:	230e      	movs	r3, #14
 8003c14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003c16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	481c      	ldr	r0, [pc, #112]	; (8003c90 <HAL_LTDC_MspInit+0x184>)
 8003c1e:	f002 ff7f 	bl	8006b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003c22:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003c26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c30:	2300      	movs	r3, #0
 8003c32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003c34:	2309      	movs	r3, #9
 8003c36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003c38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4815      	ldr	r0, [pc, #84]	; (8003c94 <HAL_LTDC_MspInit+0x188>)
 8003c40:	f002 ff6e 	bl	8006b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003c44:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003c48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c4a:	2302      	movs	r3, #2
 8003c4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c52:	2300      	movs	r3, #0
 8003c54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003c56:	230e      	movs	r3, #14
 8003c58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003c5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c5e:	4619      	mov	r1, r3
 8003c60:	480d      	ldr	r0, [pc, #52]	; (8003c98 <HAL_LTDC_MspInit+0x18c>)
 8003c62:	f002 ff5d 	bl	8006b20 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003c66:	2200      	movs	r2, #0
 8003c68:	2105      	movs	r1, #5
 8003c6a:	2058      	movs	r0, #88	; 0x58
 8003c6c:	f002 f89e 	bl	8005dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003c70:	2058      	movs	r0, #88	; 0x58
 8003c72:	f002 f8b7 	bl	8005de4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003c76:	bf00      	nop
 8003c78:	3738      	adds	r7, #56	; 0x38
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40016800 	.word	0x40016800
 8003c84:	40023800 	.word	0x40023800
 8003c88:	40021000 	.word	0x40021000
 8003c8c:	40022400 	.word	0x40022400
 8003c90:	40022800 	.word	0x40022800
 8003c94:	40021800 	.word	0x40021800
 8003c98:	40022000 	.word	0x40022000

08003c9c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b08a      	sub	sp, #40	; 0x28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca4:	f107 0314 	add.w	r3, r7, #20
 8003ca8:	2200      	movs	r2, #0
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	605a      	str	r2, [r3, #4]
 8003cae:	609a      	str	r2, [r3, #8]
 8003cb0:	60da      	str	r2, [r3, #12]
 8003cb2:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a65      	ldr	r2, [pc, #404]	; (8003e50 <HAL_SD_MspInit+0x1b4>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	f040 80c3 	bne.w	8003e46 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003cc0:	4b64      	ldr	r3, [pc, #400]	; (8003e54 <HAL_SD_MspInit+0x1b8>)
 8003cc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc4:	4a63      	ldr	r2, [pc, #396]	; (8003e54 <HAL_SD_MspInit+0x1b8>)
 8003cc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003cca:	6453      	str	r3, [r2, #68]	; 0x44
 8003ccc:	4b61      	ldr	r3, [pc, #388]	; (8003e54 <HAL_SD_MspInit+0x1b8>)
 8003cce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd8:	4b5e      	ldr	r3, [pc, #376]	; (8003e54 <HAL_SD_MspInit+0x1b8>)
 8003cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cdc:	4a5d      	ldr	r2, [pc, #372]	; (8003e54 <HAL_SD_MspInit+0x1b8>)
 8003cde:	f043 0304 	orr.w	r3, r3, #4
 8003ce2:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce4:	4b5b      	ldr	r3, [pc, #364]	; (8003e54 <HAL_SD_MspInit+0x1b8>)
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	60fb      	str	r3, [r7, #12]
 8003cee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cf0:	4b58      	ldr	r3, [pc, #352]	; (8003e54 <HAL_SD_MspInit+0x1b8>)
 8003cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf4:	4a57      	ldr	r2, [pc, #348]	; (8003e54 <HAL_SD_MspInit+0x1b8>)
 8003cf6:	f043 0308 	orr.w	r3, r3, #8
 8003cfa:	6313      	str	r3, [r2, #48]	; 0x30
 8003cfc:	4b55      	ldr	r3, [pc, #340]	; (8003e54 <HAL_SD_MspInit+0x1b8>)
 8003cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	60bb      	str	r3, [r7, #8]
 8003d06:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003d08:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003d0c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d16:	2303      	movs	r3, #3
 8003d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003d1a:	230c      	movs	r3, #12
 8003d1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d1e:	f107 0314 	add.w	r3, r7, #20
 8003d22:	4619      	mov	r1, r3
 8003d24:	484c      	ldr	r0, [pc, #304]	; (8003e58 <HAL_SD_MspInit+0x1bc>)
 8003d26:	f002 fefb 	bl	8006b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8003d2a:	2304      	movs	r3, #4
 8003d2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d2e:	2302      	movs	r3, #2
 8003d30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d32:	2300      	movs	r3, #0
 8003d34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d36:	2303      	movs	r3, #3
 8003d38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003d3a:	230c      	movs	r3, #12
 8003d3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8003d3e:	f107 0314 	add.w	r3, r7, #20
 8003d42:	4619      	mov	r1, r3
 8003d44:	4845      	ldr	r0, [pc, #276]	; (8003e5c <HAL_SD_MspInit+0x1c0>)
 8003d46:	f002 feeb 	bl	8006b20 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8003d4a:	4b45      	ldr	r3, [pc, #276]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003d4c:	4a45      	ldr	r2, [pc, #276]	; (8003e64 <HAL_SD_MspInit+0x1c8>)
 8003d4e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8003d50:	4b43      	ldr	r3, [pc, #268]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003d52:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d56:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003d58:	4b41      	ldr	r3, [pc, #260]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d5e:	4b40      	ldr	r3, [pc, #256]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003d60:	2200      	movs	r2, #0
 8003d62:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003d64:	4b3e      	ldr	r3, [pc, #248]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003d66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d6a:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d6c:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003d6e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d72:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d74:	4b3a      	ldr	r3, [pc, #232]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003d76:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d7a:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8003d7c:	4b38      	ldr	r3, [pc, #224]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003d7e:	2220      	movs	r2, #32
 8003d80:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003d82:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d88:	4b35      	ldr	r3, [pc, #212]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003d8a:	2204      	movs	r2, #4
 8003d8c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d8e:	4b34      	ldr	r3, [pc, #208]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003d90:	2203      	movs	r2, #3
 8003d92:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003d94:	4b32      	ldr	r3, [pc, #200]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003d96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d9c:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003d9e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003da2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003da4:	482e      	ldr	r0, [pc, #184]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003da6:	f002 f82b 	bl	8005e00 <HAL_DMA_Init>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8003db0:	f7fe f954 	bl	800205c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a2a      	ldr	r2, [pc, #168]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003db8:	641a      	str	r2, [r3, #64]	; 0x40
 8003dba:	4a29      	ldr	r2, [pc, #164]	; (8003e60 <HAL_SD_MspInit+0x1c4>)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8003dc0:	4b29      	ldr	r3, [pc, #164]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003dc2:	4a2a      	ldr	r2, [pc, #168]	; (8003e6c <HAL_SD_MspInit+0x1d0>)
 8003dc4:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8003dc6:	4b28      	ldr	r3, [pc, #160]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003dc8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dcc:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dce:	4b26      	ldr	r3, [pc, #152]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003dd0:	2240      	movs	r2, #64	; 0x40
 8003dd2:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dd4:	4b24      	ldr	r3, [pc, #144]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dda:	4b23      	ldr	r3, [pc, #140]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003ddc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003de0:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003de2:	4b21      	ldr	r3, [pc, #132]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003de4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003de8:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003dea:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003dec:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003df0:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8003df2:	4b1d      	ldr	r3, [pc, #116]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003df4:	2220      	movs	r2, #32
 8003df6:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003df8:	4b1b      	ldr	r3, [pc, #108]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003dfe:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003e00:	2204      	movs	r2, #4
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003e04:	4b18      	ldr	r3, [pc, #96]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003e06:	2203      	movs	r2, #3
 8003e08:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003e0a:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003e0c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003e10:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003e12:	4b15      	ldr	r3, [pc, #84]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003e14:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003e18:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8003e1a:	4813      	ldr	r0, [pc, #76]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003e1c:	f001 fff0 	bl	8005e00 <HAL_DMA_Init>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8003e26:	f7fe f919 	bl	800205c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a0e      	ldr	r2, [pc, #56]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003e2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e30:	4a0d      	ldr	r2, [pc, #52]	; (8003e68 <HAL_SD_MspInit+0x1cc>)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8003e36:	2200      	movs	r2, #0
 8003e38:	2105      	movs	r1, #5
 8003e3a:	2031      	movs	r0, #49	; 0x31
 8003e3c:	f001 ffb6 	bl	8005dac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003e40:	2031      	movs	r0, #49	; 0x31
 8003e42:	f001 ffcf 	bl	8005de4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003e46:	bf00      	nop
 8003e48:	3728      	adds	r7, #40	; 0x28
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40012c00 	.word	0x40012c00
 8003e54:	40023800 	.word	0x40023800
 8003e58:	40020800 	.word	0x40020800
 8003e5c:	40020c00 	.word	0x40020c00
 8003e60:	20008fbc 	.word	0x20008fbc
 8003e64:	40026458 	.word	0x40026458
 8003e68:	200090f0 	.word	0x200090f0
 8003e6c:	400264a0 	.word	0x400264a0

08003e70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b08a      	sub	sp, #40	; 0x28
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e78:	f107 0314 	add.w	r3, r7, #20
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	601a      	str	r2, [r3, #0]
 8003e80:	605a      	str	r2, [r3, #4]
 8003e82:	609a      	str	r2, [r3, #8]
 8003e84:	60da      	str	r2, [r3, #12]
 8003e86:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a25      	ldr	r2, [pc, #148]	; (8003f24 <HAL_UART_MspInit+0xb4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d144      	bne.n	8003f1c <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e92:	4b25      	ldr	r3, [pc, #148]	; (8003f28 <HAL_UART_MspInit+0xb8>)
 8003e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e96:	4a24      	ldr	r2, [pc, #144]	; (8003f28 <HAL_UART_MspInit+0xb8>)
 8003e98:	f043 0310 	orr.w	r3, r3, #16
 8003e9c:	6453      	str	r3, [r2, #68]	; 0x44
 8003e9e:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <HAL_UART_MspInit+0xb8>)
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	613b      	str	r3, [r7, #16]
 8003ea8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003eaa:	4b1f      	ldr	r3, [pc, #124]	; (8003f28 <HAL_UART_MspInit+0xb8>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	4a1e      	ldr	r2, [pc, #120]	; (8003f28 <HAL_UART_MspInit+0xb8>)
 8003eb0:	f043 0302 	orr.w	r3, r3, #2
 8003eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb6:	4b1c      	ldr	r3, [pc, #112]	; (8003f28 <HAL_UART_MspInit+0xb8>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	f003 0302 	and.w	r3, r3, #2
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ec2:	4b19      	ldr	r3, [pc, #100]	; (8003f28 <HAL_UART_MspInit+0xb8>)
 8003ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ec6:	4a18      	ldr	r2, [pc, #96]	; (8003f28 <HAL_UART_MspInit+0xb8>)
 8003ec8:	f043 0301 	orr.w	r3, r3, #1
 8003ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8003ece:	4b16      	ldr	r3, [pc, #88]	; (8003f28 <HAL_UART_MspInit+0xb8>)
 8003ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed2:	f003 0301 	and.w	r3, r3, #1
 8003ed6:	60bb      	str	r3, [r7, #8]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ede:	2302      	movs	r3, #2
 8003ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003eea:	2307      	movs	r3, #7
 8003eec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003eee:	f107 0314 	add.w	r3, r7, #20
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	480d      	ldr	r0, [pc, #52]	; (8003f2c <HAL_UART_MspInit+0xbc>)
 8003ef6:	f002 fe13 	bl	8006b20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003efa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f00:	2302      	movs	r3, #2
 8003f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f08:	2300      	movs	r3, #0
 8003f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003f0c:	2307      	movs	r3, #7
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003f10:	f107 0314 	add.w	r3, r7, #20
 8003f14:	4619      	mov	r1, r3
 8003f16:	4806      	ldr	r0, [pc, #24]	; (8003f30 <HAL_UART_MspInit+0xc0>)
 8003f18:	f002 fe02 	bl	8006b20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003f1c:	bf00      	nop
 8003f1e:	3728      	adds	r7, #40	; 0x28
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40011000 	.word	0x40011000
 8003f28:	40023800 	.word	0x40023800
 8003f2c:	40020400 	.word	0x40020400
 8003f30:	40020000 	.word	0x40020000

08003f34 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003f3a:	1d3b      	adds	r3, r7, #4
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	601a      	str	r2, [r3, #0]
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	609a      	str	r2, [r3, #8]
 8003f44:	60da      	str	r2, [r3, #12]
 8003f46:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003f48:	4b3a      	ldr	r3, [pc, #232]	; (8004034 <HAL_FMC_MspInit+0x100>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d16d      	bne.n	800402c <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003f50:	4b38      	ldr	r3, [pc, #224]	; (8004034 <HAL_FMC_MspInit+0x100>)
 8003f52:	2201      	movs	r2, #1
 8003f54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003f56:	4b38      	ldr	r3, [pc, #224]	; (8004038 <HAL_FMC_MspInit+0x104>)
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	4a37      	ldr	r2, [pc, #220]	; (8004038 <HAL_FMC_MspInit+0x104>)
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	6393      	str	r3, [r2, #56]	; 0x38
 8003f62:	4b35      	ldr	r3, [pc, #212]	; (8004038 <HAL_FMC_MspInit+0x104>)
 8003f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	603b      	str	r3, [r7, #0]
 8003f6c:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003f6e:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003f72:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f74:	2302      	movs	r3, #2
 8003f76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f80:	230c      	movs	r3, #12
 8003f82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f84:	1d3b      	adds	r3, r7, #4
 8003f86:	4619      	mov	r1, r3
 8003f88:	482c      	ldr	r0, [pc, #176]	; (800403c <HAL_FMC_MspInit+0x108>)
 8003f8a:	f002 fdc9 	bl	8006b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003f8e:	f248 1333 	movw	r3, #33075	; 0x8133
 8003f92:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f94:	2302      	movs	r3, #2
 8003f96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f9c:	2303      	movs	r3, #3
 8003f9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fa0:	230c      	movs	r3, #12
 8003fa2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003fa4:	1d3b      	adds	r3, r7, #4
 8003fa6:	4619      	mov	r1, r3
 8003fa8:	4825      	ldr	r0, [pc, #148]	; (8004040 <HAL_FMC_MspInit+0x10c>)
 8003faa:	f002 fdb9 	bl	8006b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003fae:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003fb2:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fc0:	230c      	movs	r3, #12
 8003fc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003fc4:	1d3b      	adds	r3, r7, #4
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	481e      	ldr	r0, [pc, #120]	; (8004044 <HAL_FMC_MspInit+0x110>)
 8003fca:	f002 fda9 	bl	8006b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003fce:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003fd2:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd4:	2302      	movs	r3, #2
 8003fd6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fdc:	2303      	movs	r3, #3
 8003fde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003fe0:	230c      	movs	r3, #12
 8003fe2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fe4:	1d3b      	adds	r3, r7, #4
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	4817      	ldr	r0, [pc, #92]	; (8004048 <HAL_FMC_MspInit+0x114>)
 8003fea:	f002 fd99 	bl	8006b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003fee:	2328      	movs	r3, #40	; 0x28
 8003ff0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ff2:	2302      	movs	r3, #2
 8003ff4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003ffe:	230c      	movs	r3, #12
 8004000:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004002:	1d3b      	adds	r3, r7, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4811      	ldr	r0, [pc, #68]	; (800404c <HAL_FMC_MspInit+0x118>)
 8004008:	f002 fd8a 	bl	8006b20 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 800400c:	2308      	movs	r3, #8
 800400e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004010:	2302      	movs	r3, #2
 8004012:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004014:	2300      	movs	r3, #0
 8004016:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004018:	2303      	movs	r3, #3
 800401a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800401c:	230c      	movs	r3, #12
 800401e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8004020:	1d3b      	adds	r3, r7, #4
 8004022:	4619      	mov	r1, r3
 8004024:	480a      	ldr	r0, [pc, #40]	; (8004050 <HAL_FMC_MspInit+0x11c>)
 8004026:	f002 fd7b 	bl	8006b20 <HAL_GPIO_Init>
 800402a:	e000      	b.n	800402e <HAL_FMC_MspInit+0xfa>
    return;
 800402c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800402e:	3718      	adds	r7, #24
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}
 8004034:	200006ec 	.word	0x200006ec
 8004038:	40023800 	.word	0x40023800
 800403c:	40021000 	.word	0x40021000
 8004040:	40021800 	.word	0x40021800
 8004044:	40020c00 	.word	0x40020c00
 8004048:	40021400 	.word	0x40021400
 800404c:	40021c00 	.word	0x40021c00
 8004050:	40020800 	.word	0x40020800

08004054 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004054:	b580      	push	{r7, lr}
 8004056:	b082      	sub	sp, #8
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800405c:	f7ff ff6a 	bl	8003f34 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a61      	ldr	r2, [pc, #388]	; (80041fc <HAL_SAI_MspInit+0x194>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d15b      	bne.n	8004132 <HAL_SAI_MspInit+0xca>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 800407a:	4b61      	ldr	r3, [pc, #388]	; (8004200 <HAL_SAI_MspInit+0x198>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10b      	bne.n	800409a <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004082:	4b60      	ldr	r3, [pc, #384]	; (8004204 <HAL_SAI_MspInit+0x19c>)
 8004084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004086:	4a5f      	ldr	r2, [pc, #380]	; (8004204 <HAL_SAI_MspInit+0x19c>)
 8004088:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800408c:	6453      	str	r3, [r2, #68]	; 0x44
 800408e:	4b5d      	ldr	r3, [pc, #372]	; (8004204 <HAL_SAI_MspInit+0x19c>)
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004096:	613b      	str	r3, [r7, #16]
 8004098:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 800409a:	4b59      	ldr	r3, [pc, #356]	; (8004200 <HAL_SAI_MspInit+0x198>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	3301      	adds	r3, #1
 80040a0:	4a57      	ldr	r2, [pc, #348]	; (8004200 <HAL_SAI_MspInit+0x198>)
 80040a2:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 80040a4:	23f0      	movs	r3, #240	; 0xf0
 80040a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040a8:	2302      	movs	r3, #2
 80040aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ac:	2300      	movs	r3, #0
 80040ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040b0:	2300      	movs	r3, #0
 80040b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80040b4:	230a      	movs	r3, #10
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80040b8:	f107 0314 	add.w	r3, r7, #20
 80040bc:	4619      	mov	r1, r3
 80040be:	4852      	ldr	r0, [pc, #328]	; (8004208 <HAL_SAI_MspInit+0x1a0>)
 80040c0:	f002 fd2e 	bl	8006b20 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 80040c4:	4b51      	ldr	r3, [pc, #324]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 80040c6:	4a52      	ldr	r2, [pc, #328]	; (8004210 <HAL_SAI_MspInit+0x1a8>)
 80040c8:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 80040ca:	4b50      	ldr	r3, [pc, #320]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 80040cc:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80040d0:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80040d2:	4b4e      	ldr	r3, [pc, #312]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 80040d4:	2240      	movs	r2, #64	; 0x40
 80040d6:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 80040d8:	4b4c      	ldr	r3, [pc, #304]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 80040da:	2200      	movs	r2, #0
 80040dc:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 80040de:	4b4b      	ldr	r3, [pc, #300]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 80040e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040e4:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80040e6:	4b49      	ldr	r3, [pc, #292]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 80040e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040ec:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80040ee:	4b47      	ldr	r3, [pc, #284]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 80040f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80040f4:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 80040f6:	4b45      	ldr	r3, [pc, #276]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 80040f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040fc:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 80040fe:	4b43      	ldr	r3, [pc, #268]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 8004100:	2200      	movs	r2, #0
 8004102:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004104:	4b41      	ldr	r3, [pc, #260]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 8004106:	2200      	movs	r2, #0
 8004108:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800410a:	4840      	ldr	r0, [pc, #256]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 800410c:	f001 fe78 	bl	8005e00 <HAL_DMA_Init>
 8004110:	4603      	mov	r3, r0
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 8004116:	f7fd ffa1 	bl	800205c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	4a3b      	ldr	r2, [pc, #236]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 800411e:	671a      	str	r2, [r3, #112]	; 0x70
 8004120:	4a3a      	ldr	r2, [pc, #232]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a38      	ldr	r2, [pc, #224]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 800412a:	66da      	str	r2, [r3, #108]	; 0x6c
 800412c:	4a37      	ldr	r2, [pc, #220]	; (800420c <HAL_SAI_MspInit+0x1a4>)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a37      	ldr	r2, [pc, #220]	; (8004214 <HAL_SAI_MspInit+0x1ac>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d15b      	bne.n	80041f4 <HAL_SAI_MspInit+0x18c>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800413c:	4b30      	ldr	r3, [pc, #192]	; (8004200 <HAL_SAI_MspInit+0x198>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10b      	bne.n	800415c <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8004144:	4b2f      	ldr	r3, [pc, #188]	; (8004204 <HAL_SAI_MspInit+0x19c>)
 8004146:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004148:	4a2e      	ldr	r2, [pc, #184]	; (8004204 <HAL_SAI_MspInit+0x19c>)
 800414a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800414e:	6453      	str	r3, [r2, #68]	; 0x44
 8004150:	4b2c      	ldr	r3, [pc, #176]	; (8004204 <HAL_SAI_MspInit+0x19c>)
 8004152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004154:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004158:	60fb      	str	r3, [r7, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 800415c:	4b28      	ldr	r3, [pc, #160]	; (8004200 <HAL_SAI_MspInit+0x198>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	3301      	adds	r3, #1
 8004162:	4a27      	ldr	r2, [pc, #156]	; (8004200 <HAL_SAI_MspInit+0x198>)
 8004164:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 8004166:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800416a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800416c:	2302      	movs	r3, #2
 800416e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004170:	2300      	movs	r3, #0
 8004172:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004174:	2300      	movs	r3, #0
 8004176:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004178:	230a      	movs	r3, #10
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 800417c:	f107 0314 	add.w	r3, r7, #20
 8004180:	4619      	mov	r1, r3
 8004182:	4825      	ldr	r0, [pc, #148]	; (8004218 <HAL_SAI_MspInit+0x1b0>)
 8004184:	f002 fccc 	bl	8006b20 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8004188:	4b24      	ldr	r3, [pc, #144]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 800418a:	4a25      	ldr	r2, [pc, #148]	; (8004220 <HAL_SAI_MspInit+0x1b8>)
 800418c:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 800418e:	4b23      	ldr	r3, [pc, #140]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 8004190:	2200      	movs	r2, #0
 8004192:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004194:	4b21      	ldr	r3, [pc, #132]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 8004196:	2200      	movs	r2, #0
 8004198:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800419a:	4b20      	ldr	r3, [pc, #128]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 800419c:	2200      	movs	r2, #0
 800419e:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80041a0:	4b1e      	ldr	r3, [pc, #120]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 80041a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80041a6:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80041a8:	4b1c      	ldr	r3, [pc, #112]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 80041aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041ae:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80041b0:	4b1a      	ldr	r3, [pc, #104]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 80041b2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80041b6:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80041b8:	4b18      	ldr	r3, [pc, #96]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 80041ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041be:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 80041c0:	4b16      	ldr	r3, [pc, #88]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80041cc:	4813      	ldr	r0, [pc, #76]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 80041ce:	f001 fe17 	bl	8005e00 <HAL_DMA_Init>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 80041d8:	f7fd ff40 	bl	800205c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a0f      	ldr	r2, [pc, #60]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 80041e0:	671a      	str	r2, [r3, #112]	; 0x70
 80041e2:	4a0e      	ldr	r2, [pc, #56]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4a0c      	ldr	r2, [pc, #48]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 80041ec:	66da      	str	r2, [r3, #108]	; 0x6c
 80041ee:	4a0b      	ldr	r2, [pc, #44]	; (800421c <HAL_SAI_MspInit+0x1b4>)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80041f4:	bf00      	nop
 80041f6:	3728      	adds	r7, #40	; 0x28
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40015c04 	.word	0x40015c04
 8004200:	200006f0 	.word	0x200006f0
 8004204:	40023800 	.word	0x40023800
 8004208:	40022000 	.word	0x40022000
 800420c:	2000901c 	.word	0x2000901c
 8004210:	40026470 	.word	0x40026470
 8004214:	40015c24 	.word	0x40015c24
 8004218:	40021800 	.word	0x40021800
 800421c:	20008920 	.word	0x20008920
 8004220:	400264b8 	.word	0x400264b8

08004224 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a23      	ldr	r2, [pc, #140]	; (80042c0 <HAL_SAI_MspDeInit+0x9c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d11c      	bne.n	8004270 <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 8004236:	4b23      	ldr	r3, [pc, #140]	; (80042c4 <HAL_SAI_MspDeInit+0xa0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3b01      	subs	r3, #1
 800423c:	4a21      	ldr	r2, [pc, #132]	; (80042c4 <HAL_SAI_MspDeInit+0xa0>)
 800423e:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 8004240:	4b20      	ldr	r3, [pc, #128]	; (80042c4 <HAL_SAI_MspDeInit+0xa0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d105      	bne.n	8004254 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 8004248:	4b1f      	ldr	r3, [pc, #124]	; (80042c8 <HAL_SAI_MspDeInit+0xa4>)
 800424a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424c:	4a1e      	ldr	r2, [pc, #120]	; (80042c8 <HAL_SAI_MspDeInit+0xa4>)
 800424e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004252:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 8004254:	21f0      	movs	r1, #240	; 0xf0
 8004256:	481d      	ldr	r0, [pc, #116]	; (80042cc <HAL_SAI_MspDeInit+0xa8>)
 8004258:	f002 fe0e 	bl	8006e78 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(hsai->hdmarx);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4618      	mov	r0, r3
 8004262:	f001 fe7b 	bl	8005f5c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800426a:	4618      	mov	r0, r3
 800426c:	f001 fe76 	bl	8005f5c <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a16      	ldr	r2, [pc, #88]	; (80042d0 <HAL_SAI_MspDeInit+0xac>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d11d      	bne.n	80042b6 <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 800427a:	4b12      	ldr	r3, [pc, #72]	; (80042c4 <HAL_SAI_MspDeInit+0xa0>)
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	3b01      	subs	r3, #1
 8004280:	4a10      	ldr	r2, [pc, #64]	; (80042c4 <HAL_SAI_MspDeInit+0xa0>)
 8004282:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8004284:	4b0f      	ldr	r3, [pc, #60]	; (80042c4 <HAL_SAI_MspDeInit+0xa0>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d105      	bne.n	8004298 <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 800428c:	4b0e      	ldr	r3, [pc, #56]	; (80042c8 <HAL_SAI_MspDeInit+0xa4>)
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	4a0d      	ldr	r2, [pc, #52]	; (80042c8 <HAL_SAI_MspDeInit+0xa4>)
 8004292:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004296:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8004298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800429c:	480d      	ldr	r0, [pc, #52]	; (80042d4 <HAL_SAI_MspDeInit+0xb0>)
 800429e:	f002 fdeb 	bl	8006e78 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(hsai->hdmarx);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 fe58 	bl	8005f5c <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042b0:	4618      	mov	r0, r3
 80042b2:	f001 fe53 	bl	8005f5c <HAL_DMA_DeInit>
    }
}
 80042b6:	bf00      	nop
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	40015c04 	.word	0x40015c04
 80042c4:	200006f0 	.word	0x200006f0
 80042c8:	40023800 	.word	0x40023800
 80042cc:	40022000 	.word	0x40022000
 80042d0:	40015c24 	.word	0x40015c24
 80042d4:	40021800 	.word	0x40021800

080042d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08c      	sub	sp, #48	; 0x30
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80042e0:	2300      	movs	r3, #0
 80042e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80042e8:	2200      	movs	r2, #0
 80042ea:	6879      	ldr	r1, [r7, #4]
 80042ec:	2036      	movs	r0, #54	; 0x36
 80042ee:	f001 fd5d 	bl	8005dac <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80042f2:	2036      	movs	r0, #54	; 0x36
 80042f4:	f001 fd76 	bl	8005de4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80042f8:	4b1f      	ldr	r3, [pc, #124]	; (8004378 <HAL_InitTick+0xa0>)
 80042fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fc:	4a1e      	ldr	r2, [pc, #120]	; (8004378 <HAL_InitTick+0xa0>)
 80042fe:	f043 0310 	orr.w	r3, r3, #16
 8004302:	6413      	str	r3, [r2, #64]	; 0x40
 8004304:	4b1c      	ldr	r3, [pc, #112]	; (8004378 <HAL_InitTick+0xa0>)
 8004306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004308:	f003 0310 	and.w	r3, r3, #16
 800430c:	60fb      	str	r3, [r7, #12]
 800430e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004310:	f107 0210 	add.w	r2, r7, #16
 8004314:	f107 0314 	add.w	r3, r7, #20
 8004318:	4611      	mov	r1, r2
 800431a:	4618      	mov	r0, r3
 800431c:	f004 fc68 	bl	8008bf0 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004320:	f004 fc3e 	bl	8008ba0 <HAL_RCC_GetPCLK1Freq>
 8004324:	4603      	mov	r3, r0
 8004326:	005b      	lsls	r3, r3, #1
 8004328:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800432a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432c:	4a13      	ldr	r2, [pc, #76]	; (800437c <HAL_InitTick+0xa4>)
 800432e:	fba2 2303 	umull	r2, r3, r2, r3
 8004332:	0c9b      	lsrs	r3, r3, #18
 8004334:	3b01      	subs	r3, #1
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004338:	4b11      	ldr	r3, [pc, #68]	; (8004380 <HAL_InitTick+0xa8>)
 800433a:	4a12      	ldr	r2, [pc, #72]	; (8004384 <HAL_InitTick+0xac>)
 800433c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800433e:	4b10      	ldr	r3, [pc, #64]	; (8004380 <HAL_InitTick+0xa8>)
 8004340:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004344:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004346:	4a0e      	ldr	r2, [pc, #56]	; (8004380 <HAL_InitTick+0xa8>)
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800434c:	4b0c      	ldr	r3, [pc, #48]	; (8004380 <HAL_InitTick+0xa8>)
 800434e:	2200      	movs	r2, #0
 8004350:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004352:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <HAL_InitTick+0xa8>)
 8004354:	2200      	movs	r2, #0
 8004356:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004358:	4809      	ldr	r0, [pc, #36]	; (8004380 <HAL_InitTick+0xa8>)
 800435a:	f007 fa7f 	bl	800b85c <HAL_TIM_Base_Init>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d104      	bne.n	800436e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004364:	4806      	ldr	r0, [pc, #24]	; (8004380 <HAL_InitTick+0xa8>)
 8004366:	f007 fadb 	bl	800b920 <HAL_TIM_Base_Start_IT>
 800436a:	4603      	mov	r3, r0
 800436c:	e000      	b.n	8004370 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
}
 8004370:	4618      	mov	r0, r3
 8004372:	3730      	adds	r7, #48	; 0x30
 8004374:	46bd      	mov	sp, r7
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40023800 	.word	0x40023800
 800437c:	431bde83 	.word	0x431bde83
 8004380:	20009280 	.word	0x20009280
 8004384:	40001000 	.word	0x40001000

08004388 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004388:	b480      	push	{r7}
 800438a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800438c:	e7fe      	b.n	800438c <NMI_Handler+0x4>

0800438e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800438e:	b480      	push	{r7}
 8004390:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004392:	e7fe      	b.n	8004392 <HardFault_Handler+0x4>

08004394 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004394:	b480      	push	{r7}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004398:	e7fe      	b.n	8004398 <MemManage_Handler+0x4>

0800439a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800439a:	b480      	push	{r7}
 800439c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800439e:	e7fe      	b.n	800439e <BusFault_Handler+0x4>

080043a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043a4:	e7fe      	b.n	80043a4 <UsageFault_Handler+0x4>

080043a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043a6:	b480      	push	{r7}
 80043a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043aa:	bf00      	nop
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80043b8:	4802      	ldr	r0, [pc, #8]	; (80043c4 <SDMMC1_IRQHandler+0x10>)
 80043ba:	f006 f927 	bl	800a60c <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80043be:	bf00      	nop
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20008a04 	.word	0x20008a04

080043c8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80043cc:	4802      	ldr	r0, [pc, #8]	; (80043d8 <TIM6_DAC_IRQHandler+0x10>)
 80043ce:	f007 fb1f 	bl	800ba10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80043d2:	bf00      	nop
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop
 80043d8:	20009280 	.word	0x20009280

080043dc <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80043dc:	b580      	push	{r7, lr}
 80043de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 80043e0:	4802      	ldr	r0, [pc, #8]	; (80043ec <DMA2_Stream3_IRQHandler+0x10>)
 80043e2:	f001 fe9b 	bl	800611c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80043e6:	bf00      	nop
 80043e8:	bd80      	pop	{r7, pc}
 80043ea:	bf00      	nop
 80043ec:	20008fbc 	.word	0x20008fbc

080043f0 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 80043f4:	4802      	ldr	r0, [pc, #8]	; (8004400 <DMA2_Stream4_IRQHandler+0x10>)
 80043f6:	f001 fe91 	bl	800611c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80043fa:	bf00      	nop
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	2000901c 	.word	0x2000901c

08004404 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8004408:	4802      	ldr	r0, [pc, #8]	; (8004414 <DMA2_Stream6_IRQHandler+0x10>)
 800440a:	f001 fe87 	bl	800611c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800440e:	bf00      	nop
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	200090f0 	.word	0x200090f0

08004418 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 800441c:	4802      	ldr	r0, [pc, #8]	; (8004428 <DMA2_Stream7_IRQHandler+0x10>)
 800441e:	f001 fe7d 	bl	800611c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8004422:	bf00      	nop
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	20008920 	.word	0x20008920

0800442c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004430:	4802      	ldr	r0, [pc, #8]	; (800443c <LTDC_IRQHandler+0x10>)
 8004432:	f003 fc5b 	bl	8007cec <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004436:	bf00      	nop
 8004438:	bd80      	pop	{r7, pc}
 800443a:	bf00      	nop
 800443c:	20008a8c 	.word	0x20008a8c

08004440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004448:	4a14      	ldr	r2, [pc, #80]	; (800449c <_sbrk+0x5c>)
 800444a:	4b15      	ldr	r3, [pc, #84]	; (80044a0 <_sbrk+0x60>)
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004450:	697b      	ldr	r3, [r7, #20]
 8004452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004454:	4b13      	ldr	r3, [pc, #76]	; (80044a4 <_sbrk+0x64>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800445c:	4b11      	ldr	r3, [pc, #68]	; (80044a4 <_sbrk+0x64>)
 800445e:	4a12      	ldr	r2, [pc, #72]	; (80044a8 <_sbrk+0x68>)
 8004460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004462:	4b10      	ldr	r3, [pc, #64]	; (80044a4 <_sbrk+0x64>)
 8004464:	681a      	ldr	r2, [r3, #0]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4413      	add	r3, r2
 800446a:	693a      	ldr	r2, [r7, #16]
 800446c:	429a      	cmp	r2, r3
 800446e:	d207      	bcs.n	8004480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004470:	f00e fffa 	bl	8013468 <__errno>
 8004474:	4603      	mov	r3, r0
 8004476:	220c      	movs	r2, #12
 8004478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800447a:	f04f 33ff 	mov.w	r3, #4294967295
 800447e:	e009      	b.n	8004494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004480:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <_sbrk+0x64>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004486:	4b07      	ldr	r3, [pc, #28]	; (80044a4 <_sbrk+0x64>)
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4413      	add	r3, r2
 800448e:	4a05      	ldr	r2, [pc, #20]	; (80044a4 <_sbrk+0x64>)
 8004490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004492:	68fb      	ldr	r3, [r7, #12]
}
 8004494:	4618      	mov	r0, r3
 8004496:	3718      	adds	r7, #24
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20050000 	.word	0x20050000
 80044a0:	00000800 	.word	0x00000800
 80044a4:	200006f4 	.word	0x200006f4
 80044a8:	20009790 	.word	0x20009790

080044ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80044ac:	b480      	push	{r7}
 80044ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044b0:	4b06      	ldr	r3, [pc, #24]	; (80044cc <SystemInit+0x20>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	4a05      	ldr	r2, [pc, #20]	; (80044cc <SystemInit+0x20>)
 80044b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044c0:	bf00      	nop
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	e000ed00 	.word	0xe000ed00

080044d0 <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b088      	sub	sp, #32
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	4603      	mov	r3, r0
 80044da:	81fb      	strh	r3, [r7, #14]
 80044dc:	460b      	mov	r3, r1
 80044de:	81bb      	strh	r3, [r7, #12]
 80044e0:	4613      	mov	r3, r2
 80044e2:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 80044e8:	89bb      	ldrh	r3, [r7, #12]
 80044ea:	b2db      	uxtb	r3, r3
 80044ec:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 80044ee:	89bb      	ldrh	r3, [r7, #12]
 80044f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044f4:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 80044f6:	2300      	movs	r3, #0
 80044f8:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80044fa:	f7fd ff0b 	bl	8002314 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 80044fe:	89fb      	ldrh	r3, [r7, #14]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2203      	movs	r2, #3
 8004504:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004508:	4618      	mov	r0, r3
 800450a:	f001 fafb 	bl	8005b04 <CODEC_IO_Write>
 800450e:	4603      	mov	r3, r0
 8004510:	461a      	mov	r2, r3
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8004518:	89fb      	ldrh	r3, [r7, #14]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	2200      	movs	r2, #0
 800451e:	f640 0117 	movw	r1, #2071	; 0x817
 8004522:	4618      	mov	r0, r3
 8004524:	f001 faee 	bl	8005b04 <CODEC_IO_Write>
 8004528:	4603      	mov	r3, r0
 800452a:	461a      	mov	r2, r3
 800452c:	69fb      	ldr	r3, [r7, #28]
 800452e:	4413      	add	r3, r2
 8004530:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 8004532:	89fb      	ldrh	r3, [r7, #14]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2200      	movs	r2, #0
 8004538:	f44f 7181 	mov.w	r1, #258	; 0x102
 800453c:	4618      	mov	r0, r3
 800453e:	f001 fae1 	bl	8005b04 <CODEC_IO_Write>
 8004542:	4603      	mov	r3, r0
 8004544:	461a      	mov	r2, r3
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	4413      	add	r3, r2
 800454a:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 800454c:	89fb      	ldrh	r3, [r7, #14]
 800454e:	b2db      	uxtb	r3, r3
 8004550:	226c      	movs	r2, #108	; 0x6c
 8004552:	2139      	movs	r1, #57	; 0x39
 8004554:	4618      	mov	r0, r3
 8004556:	f001 fad5 	bl	8005b04 <CODEC_IO_Write>
 800455a:	4603      	mov	r3, r0
 800455c:	461a      	mov	r2, r3
 800455e:	69fb      	ldr	r3, [r7, #28]
 8004560:	4413      	add	r3, r2
 8004562:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 8004564:	8afb      	ldrh	r3, [r7, #22]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00c      	beq.n	8004584 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 800456a:	89fb      	ldrh	r3, [r7, #14]
 800456c:	b2db      	uxtb	r3, r3
 800456e:	2213      	movs	r2, #19
 8004570:	2101      	movs	r1, #1
 8004572:	4618      	mov	r0, r3
 8004574:	f001 fac6 	bl	8005b04 <CODEC_IO_Write>
 8004578:	4603      	mov	r3, r0
 800457a:	461a      	mov	r2, r3
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	4413      	add	r3, r2
 8004580:	61fb      	str	r3, [r7, #28]
 8004582:	e00b      	b.n	800459c <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8004584:	89fb      	ldrh	r3, [r7, #14]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	2203      	movs	r2, #3
 800458a:	2101      	movs	r1, #1
 800458c:	4618      	mov	r0, r3
 800458e:	f001 fab9 	bl	8005b04 <CODEC_IO_Write>
 8004592:	4603      	mov	r3, r0
 8004594:	461a      	mov	r2, r3
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	4413      	add	r3, r2
 800459a:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 800459c:	2032      	movs	r0, #50	; 0x32
 800459e:	f7fd ff21 	bl	80023e4 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 80045a2:	8b3b      	ldrh	r3, [r7, #24]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 815f 	beq.w	8004868 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 80045aa:	4bae      	ldr	r3, [pc, #696]	; (8004864 <wm8994_Init+0x394>)
 80045ac:	2201      	movs	r2, #1
 80045ae:	601a      	str	r2, [r3, #0]

    switch (output_device)
 80045b0:	8b3b      	ldrh	r3, [r7, #24]
 80045b2:	2b03      	cmp	r3, #3
 80045b4:	f000 808c 	beq.w	80046d0 <wm8994_Init+0x200>
 80045b8:	2b03      	cmp	r3, #3
 80045ba:	f300 8111 	bgt.w	80047e0 <wm8994_Init+0x310>
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d002      	beq.n	80045c8 <wm8994_Init+0xf8>
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d042      	beq.n	800464c <wm8994_Init+0x17c>
 80045c6:	e10b      	b.n	80047e0 <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 80045c8:	89fb      	ldrh	r3, [r7, #14]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f640 420c 	movw	r2, #3084	; 0xc0c
 80045d0:	2105      	movs	r1, #5
 80045d2:	4618      	mov	r0, r3
 80045d4:	f001 fa96 	bl	8005b04 <CODEC_IO_Write>
 80045d8:	4603      	mov	r3, r0
 80045da:	461a      	mov	r2, r3
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	4413      	add	r3, r2
 80045e0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 80045e2:	89fb      	ldrh	r3, [r7, #14]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2200      	movs	r2, #0
 80045e8:	f240 6101 	movw	r1, #1537	; 0x601
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 fa89 	bl	8005b04 <CODEC_IO_Write>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80045fc:	89fb      	ldrh	r3, [r7, #14]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2200      	movs	r2, #0
 8004602:	f240 6102 	movw	r1, #1538	; 0x602
 8004606:	4618      	mov	r0, r3
 8004608:	f001 fa7c 	bl	8005b04 <CODEC_IO_Write>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	4413      	add	r3, r2
 8004614:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2202      	movs	r2, #2
 800461c:	f240 6104 	movw	r1, #1540	; 0x604
 8004620:	4618      	mov	r0, r3
 8004622:	f001 fa6f 	bl	8005b04 <CODEC_IO_Write>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8004630:	89fb      	ldrh	r3, [r7, #14]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2202      	movs	r2, #2
 8004636:	f240 6105 	movw	r1, #1541	; 0x605
 800463a:	4618      	mov	r0, r3
 800463c:	f001 fa62 	bl	8005b04 <CODEC_IO_Write>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	4413      	add	r3, r2
 8004648:	61fb      	str	r3, [r7, #28]
      break;
 800464a:	e110      	b.n	800486e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800464c:	89fb      	ldrh	r3, [r7, #14]
 800464e:	b2db      	uxtb	r3, r3
 8004650:	f240 3203 	movw	r2, #771	; 0x303
 8004654:	2105      	movs	r1, #5
 8004656:	4618      	mov	r0, r3
 8004658:	f001 fa54 	bl	8005b04 <CODEC_IO_Write>
 800465c:	4603      	mov	r3, r0
 800465e:	461a      	mov	r2, r3
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	4413      	add	r3, r2
 8004664:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004666:	89fb      	ldrh	r3, [r7, #14]
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2201      	movs	r2, #1
 800466c:	f240 6101 	movw	r1, #1537	; 0x601
 8004670:	4618      	mov	r0, r3
 8004672:	f001 fa47 	bl	8005b04 <CODEC_IO_Write>
 8004676:	4603      	mov	r3, r0
 8004678:	461a      	mov	r2, r3
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004680:	89fb      	ldrh	r3, [r7, #14]
 8004682:	b2db      	uxtb	r3, r3
 8004684:	2201      	movs	r2, #1
 8004686:	f240 6102 	movw	r1, #1538	; 0x602
 800468a:	4618      	mov	r0, r3
 800468c:	f001 fa3a 	bl	8005b04 <CODEC_IO_Write>
 8004690:	4603      	mov	r3, r0
 8004692:	461a      	mov	r2, r3
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800469a:	89fb      	ldrh	r3, [r7, #14]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	2200      	movs	r2, #0
 80046a0:	f240 6104 	movw	r1, #1540	; 0x604
 80046a4:	4618      	mov	r0, r3
 80046a6:	f001 fa2d 	bl	8005b04 <CODEC_IO_Write>
 80046aa:	4603      	mov	r3, r0
 80046ac:	461a      	mov	r2, r3
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	4413      	add	r3, r2
 80046b2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80046b4:	89fb      	ldrh	r3, [r7, #14]
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	2200      	movs	r2, #0
 80046ba:	f240 6105 	movw	r1, #1541	; 0x605
 80046be:	4618      	mov	r0, r3
 80046c0:	f001 fa20 	bl	8005b04 <CODEC_IO_Write>
 80046c4:	4603      	mov	r3, r0
 80046c6:	461a      	mov	r2, r3
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	4413      	add	r3, r2
 80046cc:	61fb      	str	r3, [r7, #28]
      break;
 80046ce:	e0ce      	b.n	800486e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80046d0:	8afb      	ldrh	r3, [r7, #22]
 80046d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d6:	d141      	bne.n	800475c <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80046d8:	89fb      	ldrh	r3, [r7, #14]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f640 720f 	movw	r2, #3855	; 0xf0f
 80046e0:	2105      	movs	r1, #5
 80046e2:	4618      	mov	r0, r3
 80046e4:	f001 fa0e 	bl	8005b04 <CODEC_IO_Write>
 80046e8:	4603      	mov	r3, r0
 80046ea:	461a      	mov	r2, r3
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	4413      	add	r3, r2
 80046f0:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 80046f2:	89fb      	ldrh	r3, [r7, #14]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2203      	movs	r2, #3
 80046f8:	f240 6101 	movw	r1, #1537	; 0x601
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 fa01 	bl	8005b04 <CODEC_IO_Write>
 8004702:	4603      	mov	r3, r0
 8004704:	461a      	mov	r2, r3
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	4413      	add	r3, r2
 800470a:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 800470c:	89fb      	ldrh	r3, [r7, #14]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2203      	movs	r2, #3
 8004712:	f240 6102 	movw	r1, #1538	; 0x602
 8004716:	4618      	mov	r0, r3
 8004718:	f001 f9f4 	bl	8005b04 <CODEC_IO_Write>
 800471c:	4603      	mov	r3, r0
 800471e:	461a      	mov	r2, r3
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	4413      	add	r3, r2
 8004724:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 8004726:	89fb      	ldrh	r3, [r7, #14]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2203      	movs	r2, #3
 800472c:	f240 6104 	movw	r1, #1540	; 0x604
 8004730:	4618      	mov	r0, r3
 8004732:	f001 f9e7 	bl	8005b04 <CODEC_IO_Write>
 8004736:	4603      	mov	r3, r0
 8004738:	461a      	mov	r2, r3
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 8004740:	89fb      	ldrh	r3, [r7, #14]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2203      	movs	r2, #3
 8004746:	f240 6105 	movw	r1, #1541	; 0x605
 800474a:	4618      	mov	r0, r3
 800474c:	f001 f9da 	bl	8005b04 <CODEC_IO_Write>
 8004750:	4603      	mov	r3, r0
 8004752:	461a      	mov	r2, r3
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 800475a:	e088      	b.n	800486e <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 800475c:	89fb      	ldrh	r3, [r7, #14]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f640 720f 	movw	r2, #3855	; 0xf0f
 8004764:	2105      	movs	r1, #5
 8004766:	4618      	mov	r0, r3
 8004768:	f001 f9cc 	bl	8005b04 <CODEC_IO_Write>
 800476c:	4603      	mov	r3, r0
 800476e:	461a      	mov	r2, r3
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	4413      	add	r3, r2
 8004774:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004776:	89fb      	ldrh	r3, [r7, #14]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2201      	movs	r2, #1
 800477c:	f240 6101 	movw	r1, #1537	; 0x601
 8004780:	4618      	mov	r0, r3
 8004782:	f001 f9bf 	bl	8005b04 <CODEC_IO_Write>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004790:	89fb      	ldrh	r3, [r7, #14]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2201      	movs	r2, #1
 8004796:	f240 6102 	movw	r1, #1538	; 0x602
 800479a:	4618      	mov	r0, r3
 800479c:	f001 f9b2 	bl	8005b04 <CODEC_IO_Write>
 80047a0:	4603      	mov	r3, r0
 80047a2:	461a      	mov	r2, r3
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80047aa:	89fb      	ldrh	r3, [r7, #14]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2202      	movs	r2, #2
 80047b0:	f240 6104 	movw	r1, #1540	; 0x604
 80047b4:	4618      	mov	r0, r3
 80047b6:	f001 f9a5 	bl	8005b04 <CODEC_IO_Write>
 80047ba:	4603      	mov	r3, r0
 80047bc:	461a      	mov	r2, r3
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 80047c4:	89fb      	ldrh	r3, [r7, #14]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2202      	movs	r2, #2
 80047ca:	f240 6105 	movw	r1, #1541	; 0x605
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 f998 	bl	8005b04 <CODEC_IO_Write>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	4413      	add	r3, r2
 80047dc:	61fb      	str	r3, [r7, #28]
      break;
 80047de:	e046      	b.n	800486e <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80047e0:	89fb      	ldrh	r3, [r7, #14]
 80047e2:	b2db      	uxtb	r3, r3
 80047e4:	f240 3203 	movw	r2, #771	; 0x303
 80047e8:	2105      	movs	r1, #5
 80047ea:	4618      	mov	r0, r3
 80047ec:	f001 f98a 	bl	8005b04 <CODEC_IO_Write>
 80047f0:	4603      	mov	r3, r0
 80047f2:	461a      	mov	r2, r3
 80047f4:	69fb      	ldr	r3, [r7, #28]
 80047f6:	4413      	add	r3, r2
 80047f8:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80047fa:	89fb      	ldrh	r3, [r7, #14]
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	2201      	movs	r2, #1
 8004800:	f240 6101 	movw	r1, #1537	; 0x601
 8004804:	4618      	mov	r0, r3
 8004806:	f001 f97d 	bl	8005b04 <CODEC_IO_Write>
 800480a:	4603      	mov	r3, r0
 800480c:	461a      	mov	r2, r3
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	4413      	add	r3, r2
 8004812:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004814:	89fb      	ldrh	r3, [r7, #14]
 8004816:	b2db      	uxtb	r3, r3
 8004818:	2201      	movs	r2, #1
 800481a:	f240 6102 	movw	r1, #1538	; 0x602
 800481e:	4618      	mov	r0, r3
 8004820:	f001 f970 	bl	8005b04 <CODEC_IO_Write>
 8004824:	4603      	mov	r3, r0
 8004826:	461a      	mov	r2, r3
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	4413      	add	r3, r2
 800482c:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800482e:	89fb      	ldrh	r3, [r7, #14]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2200      	movs	r2, #0
 8004834:	f240 6104 	movw	r1, #1540	; 0x604
 8004838:	4618      	mov	r0, r3
 800483a:	f001 f963 	bl	8005b04 <CODEC_IO_Write>
 800483e:	4603      	mov	r3, r0
 8004840:	461a      	mov	r2, r3
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	4413      	add	r3, r2
 8004846:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004848:	89fb      	ldrh	r3, [r7, #14]
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2200      	movs	r2, #0
 800484e:	f240 6105 	movw	r1, #1541	; 0x605
 8004852:	4618      	mov	r0, r3
 8004854:	f001 f956 	bl	8005b04 <CODEC_IO_Write>
 8004858:	4603      	mov	r3, r0
 800485a:	461a      	mov	r2, r3
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	4413      	add	r3, r2
 8004860:	61fb      	str	r3, [r7, #28]
      break;
 8004862:	e004      	b.n	800486e <wm8994_Init+0x39e>
 8004864:	200006f8 	.word	0x200006f8
    }
  }
  else
  {
    outputEnabled = 0;
 8004868:	4b99      	ldr	r3, [pc, #612]	; (8004ad0 <wm8994_Init+0x600>)
 800486a:	2200      	movs	r2, #0
 800486c:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 800486e:	8afb      	ldrh	r3, [r7, #22]
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 81ab 	beq.w	8004bcc <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 8004876:	4b97      	ldr	r3, [pc, #604]	; (8004ad4 <wm8994_Init+0x604>)
 8004878:	2201      	movs	r2, #1
 800487a:	601a      	str	r2, [r3, #0]
    switch (input_device)
 800487c:	8afb      	ldrh	r3, [r7, #22]
 800487e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004882:	f000 8129 	beq.w	8004ad8 <wm8994_Init+0x608>
 8004886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488a:	f300 819b 	bgt.w	8004bc4 <wm8994_Init+0x6f4>
 800488e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004892:	d05a      	beq.n	800494a <wm8994_Init+0x47a>
 8004894:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004898:	f300 8194 	bgt.w	8004bc4 <wm8994_Init+0x6f4>
 800489c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a0:	f000 80c6 	beq.w	8004a30 <wm8994_Init+0x560>
 80048a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a8:	f040 818c 	bne.w	8004bc4 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 80048ac:	89fb      	ldrh	r3, [r7, #14]
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 80048b4:	2104      	movs	r1, #4
 80048b6:	4618      	mov	r0, r3
 80048b8:	f001 f924 	bl	8005b04 <CODEC_IO_Write>
 80048bc:	4603      	mov	r3, r0
 80048be:	461a      	mov	r2, r3
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 80048c6:	89fb      	ldrh	r3, [r7, #14]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	22db      	movs	r2, #219	; 0xdb
 80048cc:	f44f 618a 	mov.w	r1, #1104	; 0x450
 80048d0:	4618      	mov	r0, r3
 80048d2:	f001 f917 	bl	8005b04 <CODEC_IO_Write>
 80048d6:	4603      	mov	r3, r0
 80048d8:	461a      	mov	r2, r3
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	4413      	add	r3, r2
 80048de:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 80048e0:	89fb      	ldrh	r3, [r7, #14]
 80048e2:	b2db      	uxtb	r3, r3
 80048e4:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80048e8:	2102      	movs	r1, #2
 80048ea:	4618      	mov	r0, r3
 80048ec:	f001 f90a 	bl	8005b04 <CODEC_IO_Write>
 80048f0:	4603      	mov	r3, r0
 80048f2:	461a      	mov	r2, r3
 80048f4:	69fb      	ldr	r3, [r7, #28]
 80048f6:	4413      	add	r3, r2
 80048f8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 80048fa:	89fb      	ldrh	r3, [r7, #14]
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2202      	movs	r2, #2
 8004900:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8004904:	4618      	mov	r0, r3
 8004906:	f001 f8fd 	bl	8005b04 <CODEC_IO_Write>
 800490a:	4603      	mov	r3, r0
 800490c:	461a      	mov	r2, r3
 800490e:	69fb      	ldr	r3, [r7, #28]
 8004910:	4413      	add	r3, r2
 8004912:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8004914:	89fb      	ldrh	r3, [r7, #14]
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2202      	movs	r2, #2
 800491a:	f240 6109 	movw	r1, #1545	; 0x609
 800491e:	4618      	mov	r0, r3
 8004920:	f001 f8f0 	bl	8005b04 <CODEC_IO_Write>
 8004924:	4603      	mov	r3, r0
 8004926:	461a      	mov	r2, r3
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 800492e:	89fb      	ldrh	r3, [r7, #14]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	220e      	movs	r2, #14
 8004934:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004938:	4618      	mov	r0, r3
 800493a:	f001 f8e3 	bl	8005b04 <CODEC_IO_Write>
 800493e:	4603      	mov	r3, r0
 8004940:	461a      	mov	r2, r3
 8004942:	69fb      	ldr	r3, [r7, #28]
 8004944:	4413      	add	r3, r2
 8004946:	61fb      	str	r3, [r7, #28]
      break;
 8004948:	e143      	b.n	8004bd2 <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 800494a:	89fb      	ldrh	r3, [r7, #14]
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2211      	movs	r2, #17
 8004950:	2128      	movs	r1, #40	; 0x28
 8004952:	4618      	mov	r0, r3
 8004954:	f001 f8d6 	bl	8005b04 <CODEC_IO_Write>
 8004958:	4603      	mov	r3, r0
 800495a:	461a      	mov	r2, r3
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	4413      	add	r3, r2
 8004960:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 8004962:	89fb      	ldrh	r3, [r7, #14]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	2235      	movs	r2, #53	; 0x35
 8004968:	2129      	movs	r1, #41	; 0x29
 800496a:	4618      	mov	r0, r3
 800496c:	f001 f8ca 	bl	8005b04 <CODEC_IO_Write>
 8004970:	4603      	mov	r3, r0
 8004972:	461a      	mov	r2, r3
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	4413      	add	r3, r2
 8004978:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 800497a:	89fb      	ldrh	r3, [r7, #14]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2235      	movs	r2, #53	; 0x35
 8004980:	212a      	movs	r1, #42	; 0x2a
 8004982:	4618      	mov	r0, r3
 8004984:	f001 f8be 	bl	8005b04 <CODEC_IO_Write>
 8004988:	4603      	mov	r3, r0
 800498a:	461a      	mov	r2, r3
 800498c:	69fb      	ldr	r3, [r7, #28]
 800498e:	4413      	add	r3, r2
 8004990:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 8004992:	89fb      	ldrh	r3, [r7, #14]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	f240 3203 	movw	r2, #771	; 0x303
 800499a:	2104      	movs	r1, #4
 800499c:	4618      	mov	r0, r3
 800499e:	f001 f8b1 	bl	8005b04 <CODEC_IO_Write>
 80049a2:	4603      	mov	r3, r0
 80049a4:	461a      	mov	r2, r3
 80049a6:	69fb      	ldr	r3, [r7, #28]
 80049a8:	4413      	add	r3, r2
 80049aa:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80049ac:	89fb      	ldrh	r3, [r7, #14]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	22db      	movs	r2, #219	; 0xdb
 80049b2:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 f8a4 	bl	8005b04 <CODEC_IO_Write>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80049c6:	89fb      	ldrh	r3, [r7, #14]
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	f246 3250 	movw	r2, #25424	; 0x6350
 80049ce:	2102      	movs	r1, #2
 80049d0:	4618      	mov	r0, r3
 80049d2:	f001 f897 	bl	8005b04 <CODEC_IO_Write>
 80049d6:	4603      	mov	r3, r0
 80049d8:	461a      	mov	r2, r3
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4413      	add	r3, r2
 80049de:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80049e0:	89fb      	ldrh	r3, [r7, #14]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	2202      	movs	r2, #2
 80049e6:	f240 6106 	movw	r1, #1542	; 0x606
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 f88a 	bl	8005b04 <CODEC_IO_Write>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	4413      	add	r3, r2
 80049f8:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 80049fa:	89fb      	ldrh	r3, [r7, #14]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2202      	movs	r2, #2
 8004a00:	f240 6107 	movw	r1, #1543	; 0x607
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 f87d 	bl	8005b04 <CODEC_IO_Write>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004a14:	89fb      	ldrh	r3, [r7, #14]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	220d      	movs	r2, #13
 8004a1a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 f870 	bl	8005b04 <CODEC_IO_Write>
 8004a24:	4603      	mov	r3, r0
 8004a26:	461a      	mov	r2, r3
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	61fb      	str	r3, [r7, #28]
      break;
 8004a2e:	e0d0      	b.n	8004bd2 <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 8004a30:	89fb      	ldrh	r3, [r7, #14]
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	f44f 7243 	mov.w	r2, #780	; 0x30c
 8004a38:	2104      	movs	r1, #4
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f001 f862 	bl	8005b04 <CODEC_IO_Write>
 8004a40:	4603      	mov	r3, r0
 8004a42:	461a      	mov	r2, r3
 8004a44:	69fb      	ldr	r3, [r7, #28]
 8004a46:	4413      	add	r3, r2
 8004a48:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004a4a:	89fb      	ldrh	r3, [r7, #14]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	22db      	movs	r2, #219	; 0xdb
 8004a50:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004a54:	4618      	mov	r0, r3
 8004a56:	f001 f855 	bl	8005b04 <CODEC_IO_Write>
 8004a5a:	4603      	mov	r3, r0
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	69fb      	ldr	r3, [r7, #28]
 8004a60:	4413      	add	r3, r2
 8004a62:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8004a64:	89fb      	ldrh	r3, [r7, #14]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	f246 3250 	movw	r2, #25424	; 0x6350
 8004a6c:	2102      	movs	r1, #2
 8004a6e:	4618      	mov	r0, r3
 8004a70:	f001 f848 	bl	8005b04 <CODEC_IO_Write>
 8004a74:	4603      	mov	r3, r0
 8004a76:	461a      	mov	r2, r3
 8004a78:	69fb      	ldr	r3, [r7, #28]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004a7e:	89fb      	ldrh	r3, [r7, #14]
 8004a80:	b2db      	uxtb	r3, r3
 8004a82:	2202      	movs	r2, #2
 8004a84:	f240 6106 	movw	r1, #1542	; 0x606
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f001 f83b 	bl	8005b04 <CODEC_IO_Write>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	461a      	mov	r2, r3
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	4413      	add	r3, r2
 8004a96:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004a98:	89fb      	ldrh	r3, [r7, #14]
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2202      	movs	r2, #2
 8004a9e:	f240 6107 	movw	r1, #1543	; 0x607
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	f001 f82e 	bl	8005b04 <CODEC_IO_Write>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	461a      	mov	r2, r3
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	4413      	add	r3, r2
 8004ab0:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004ab2:	89fb      	ldrh	r3, [r7, #14]
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	220d      	movs	r2, #13
 8004ab8:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 f821 	bl	8005b04 <CODEC_IO_Write>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	69fb      	ldr	r3, [r7, #28]
 8004ac8:	4413      	add	r3, r2
 8004aca:	61fb      	str	r3, [r7, #28]
      break; 
 8004acc:	e081      	b.n	8004bd2 <wm8994_Init+0x702>
 8004ace:	bf00      	nop
 8004ad0:	200006f8 	.word	0x200006f8
 8004ad4:	200006fc 	.word	0x200006fc
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8004ad8:	89fb      	ldrh	r3, [r7, #14]
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	f640 723c 	movw	r2, #3900	; 0xf3c
 8004ae0:	2104      	movs	r1, #4
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f001 f80e 	bl	8005b04 <CODEC_IO_Write>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	461a      	mov	r2, r3
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	4413      	add	r3, r2
 8004af0:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8004af2:	89fb      	ldrh	r3, [r7, #14]
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	22db      	movs	r2, #219	; 0xdb
 8004af8:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8004afc:	4618      	mov	r0, r3
 8004afe:	f001 f801 	bl	8005b04 <CODEC_IO_Write>
 8004b02:	4603      	mov	r3, r0
 8004b04:	461a      	mov	r2, r3
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	4413      	add	r3, r2
 8004b0a:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004b0c:	89fb      	ldrh	r3, [r7, #14]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	22db      	movs	r2, #219	; 0xdb
 8004b12:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fff4 	bl	8005b04 <CODEC_IO_Write>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	461a      	mov	r2, r3
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	4413      	add	r3, r2
 8004b24:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8004b26:	89fb      	ldrh	r3, [r7, #14]
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8004b2e:	2102      	movs	r1, #2
 8004b30:	4618      	mov	r0, r3
 8004b32:	f000 ffe7 	bl	8005b04 <CODEC_IO_Write>
 8004b36:	4603      	mov	r3, r0
 8004b38:	461a      	mov	r2, r3
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004b40:	89fb      	ldrh	r3, [r7, #14]
 8004b42:	b2db      	uxtb	r3, r3
 8004b44:	2202      	movs	r2, #2
 8004b46:	f240 6106 	movw	r1, #1542	; 0x606
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f000 ffda 	bl	8005b04 <CODEC_IO_Write>
 8004b50:	4603      	mov	r3, r0
 8004b52:	461a      	mov	r2, r3
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	4413      	add	r3, r2
 8004b58:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004b5a:	89fb      	ldrh	r3, [r7, #14]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f240 6107 	movw	r1, #1543	; 0x607
 8004b64:	4618      	mov	r0, r3
 8004b66:	f000 ffcd 	bl	8005b04 <CODEC_IO_Write>
 8004b6a:	4603      	mov	r3, r0
 8004b6c:	461a      	mov	r2, r3
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	4413      	add	r3, r2
 8004b72:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004b74:	89fb      	ldrh	r3, [r7, #14]
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	2202      	movs	r2, #2
 8004b7a:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f000 ffc0 	bl	8005b04 <CODEC_IO_Write>
 8004b84:	4603      	mov	r3, r0
 8004b86:	461a      	mov	r2, r3
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8004b8e:	89fb      	ldrh	r3, [r7, #14]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2202      	movs	r2, #2
 8004b94:	f240 6109 	movw	r1, #1545	; 0x609
 8004b98:	4618      	mov	r0, r3
 8004b9a:	f000 ffb3 	bl	8005b04 <CODEC_IO_Write>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	4413      	add	r3, r2
 8004ba6:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004ba8:	89fb      	ldrh	r3, [r7, #14]
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	220d      	movs	r2, #13
 8004bae:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 ffa6 	bl	8005b04 <CODEC_IO_Write>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	461a      	mov	r2, r3
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	4413      	add	r3, r2
 8004bc0:	61fb      	str	r3, [r7, #28]
      break;    
 8004bc2:	e006      	b.n	8004bd2 <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	61fb      	str	r3, [r7, #28]
      break;
 8004bca:	e002      	b.n	8004bd2 <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8004bcc:	4ba4      	ldr	r3, [pc, #656]	; (8004e60 <wm8994_Init+0x990>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	4aa3      	ldr	r2, [pc, #652]	; (8004e64 <wm8994_Init+0x994>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d079      	beq.n	8004cce <wm8994_Init+0x7fe>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	4aa1      	ldr	r2, [pc, #644]	; (8004e64 <wm8994_Init+0x994>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	f200 80ad 	bhi.w	8004d3e <wm8994_Init+0x86e>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d061      	beq.n	8004cb2 <wm8994_Init+0x7e2>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	f200 80a2 	bhi.w	8004d3e <wm8994_Init+0x86e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004c00:	4293      	cmp	r3, r2
 8004c02:	f000 808e 	beq.w	8004d22 <wm8994_Init+0x852>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	f200 8096 	bhi.w	8004d3e <wm8994_Init+0x86e>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004c18:	d03d      	beq.n	8004c96 <wm8994_Init+0x7c6>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004c20:	f200 808d 	bhi.w	8004d3e <wm8994_Init+0x86e>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	f245 6222 	movw	r2, #22050	; 0x5622
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d06b      	beq.n	8004d06 <wm8994_Init+0x836>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f245 6222 	movw	r2, #22050	; 0x5622
 8004c34:	4293      	cmp	r3, r2
 8004c36:	f200 8082 	bhi.w	8004d3e <wm8994_Init+0x86e>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004c40:	d01b      	beq.n	8004c7a <wm8994_Init+0x7aa>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004c48:	d879      	bhi.n	8004d3e <wm8994_Init+0x86e>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004c50:	d005      	beq.n	8004c5e <wm8994_Init+0x78e>
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d046      	beq.n	8004cea <wm8994_Init+0x81a>
 8004c5c:	e06f      	b.n	8004d3e <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8004c5e:	89fb      	ldrh	r3, [r7, #14]
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2203      	movs	r2, #3
 8004c64:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f000 ff4b 	bl	8005b04 <CODEC_IO_Write>
 8004c6e:	4603      	mov	r3, r0
 8004c70:	461a      	mov	r2, r3
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	4413      	add	r3, r2
 8004c76:	61fb      	str	r3, [r7, #28]
    break;
 8004c78:	e06f      	b.n	8004d5a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8004c7a:	89fb      	ldrh	r3, [r7, #14]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	2233      	movs	r2, #51	; 0x33
 8004c80:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004c84:	4618      	mov	r0, r3
 8004c86:	f000 ff3d 	bl	8005b04 <CODEC_IO_Write>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	69fb      	ldr	r3, [r7, #28]
 8004c90:	4413      	add	r3, r2
 8004c92:	61fb      	str	r3, [r7, #28]
    break;
 8004c94:	e061      	b.n	8004d5a <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8004c96:	89fb      	ldrh	r3, [r7, #14]
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2263      	movs	r2, #99	; 0x63
 8004c9c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f000 ff2f 	bl	8005b04 <CODEC_IO_Write>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	461a      	mov	r2, r3
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	4413      	add	r3, r2
 8004cae:	61fb      	str	r3, [r7, #28]
    break;
 8004cb0:	e053      	b.n	8004d5a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004cb2:	89fb      	ldrh	r3, [r7, #14]
 8004cb4:	b2db      	uxtb	r3, r3
 8004cb6:	2283      	movs	r2, #131	; 0x83
 8004cb8:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f000 ff21 	bl	8005b04 <CODEC_IO_Write>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	4413      	add	r3, r2
 8004cca:	61fb      	str	r3, [r7, #28]
    break;
 8004ccc:	e045      	b.n	8004d5a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8004cce:	89fb      	ldrh	r3, [r7, #14]
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	22a3      	movs	r2, #163	; 0xa3
 8004cd4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f000 ff13 	bl	8005b04 <CODEC_IO_Write>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	61fb      	str	r3, [r7, #28]
    break;
 8004ce8:	e037      	b.n	8004d5a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004cea:	89fb      	ldrh	r3, [r7, #14]
 8004cec:	b2db      	uxtb	r3, r3
 8004cee:	2213      	movs	r2, #19
 8004cf0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	f000 ff05 	bl	8005b04 <CODEC_IO_Write>
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	69fb      	ldr	r3, [r7, #28]
 8004d00:	4413      	add	r3, r2
 8004d02:	61fb      	str	r3, [r7, #28]
    break;
 8004d04:	e029      	b.n	8004d5a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004d06:	89fb      	ldrh	r3, [r7, #14]
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	2243      	movs	r2, #67	; 0x43
 8004d0c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fef7 	bl	8005b04 <CODEC_IO_Write>
 8004d16:	4603      	mov	r3, r0
 8004d18:	461a      	mov	r2, r3
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	4413      	add	r3, r2
 8004d1e:	61fb      	str	r3, [r7, #28]
    break;
 8004d20:	e01b      	b.n	8004d5a <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8004d22:	89fb      	ldrh	r3, [r7, #14]
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2273      	movs	r2, #115	; 0x73
 8004d28:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f000 fee9 	bl	8005b04 <CODEC_IO_Write>
 8004d32:	4603      	mov	r3, r0
 8004d34:	461a      	mov	r2, r3
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	4413      	add	r3, r2
 8004d3a:	61fb      	str	r3, [r7, #28]
    break; 
 8004d3c:	e00d      	b.n	8004d5a <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004d3e:	89fb      	ldrh	r3, [r7, #14]
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2283      	movs	r2, #131	; 0x83
 8004d44:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004d48:	4618      	mov	r0, r3
 8004d4a:	f000 fedb 	bl	8005b04 <CODEC_IO_Write>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	461a      	mov	r2, r3
 8004d52:	69fb      	ldr	r3, [r7, #28]
 8004d54:	4413      	add	r3, r2
 8004d56:	61fb      	str	r3, [r7, #28]
    break; 
 8004d58:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004d5a:	8afb      	ldrh	r3, [r7, #22]
 8004d5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d60:	d10e      	bne.n	8004d80 <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8004d62:	89fb      	ldrh	r3, [r7, #14]
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	f244 0218 	movw	r2, #16408	; 0x4018
 8004d6a:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004d6e:	4618      	mov	r0, r3
 8004d70:	f000 fec8 	bl	8005b04 <CODEC_IO_Write>
 8004d74:	4603      	mov	r3, r0
 8004d76:	461a      	mov	r2, r3
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	61fb      	str	r3, [r7, #28]
 8004d7e:	e00d      	b.n	8004d9c <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8004d80:	89fb      	ldrh	r3, [r7, #14]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f244 0210 	movw	r2, #16400	; 0x4010
 8004d88:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	f000 feb9 	bl	8005b04 <CODEC_IO_Write>
 8004d92:	4603      	mov	r3, r0
 8004d94:	461a      	mov	r2, r3
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8004d9c:	89fb      	ldrh	r3, [r7, #14]
 8004d9e:	b2db      	uxtb	r3, r3
 8004da0:	2200      	movs	r2, #0
 8004da2:	f240 3102 	movw	r1, #770	; 0x302
 8004da6:	4618      	mov	r0, r3
 8004da8:	f000 feac 	bl	8005b04 <CODEC_IO_Write>
 8004dac:	4603      	mov	r3, r0
 8004dae:	461a      	mov	r2, r3
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8004db6:	89fb      	ldrh	r3, [r7, #14]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	220a      	movs	r2, #10
 8004dbc:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f000 fe9f 	bl	8005b04 <CODEC_IO_Write>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	461a      	mov	r2, r3
 8004dca:	69fb      	ldr	r3, [r7, #28]
 8004dcc:	4413      	add	r3, r2
 8004dce:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8004dd0:	89fb      	ldrh	r3, [r7, #14]
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f000 fe92 	bl	8005b04 <CODEC_IO_Write>
 8004de0:	4603      	mov	r3, r0
 8004de2:	461a      	mov	r2, r3
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	4413      	add	r3, r2
 8004de8:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8004dea:	8b3b      	ldrh	r3, [r7, #24]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	f000 817b 	beq.w	80050e8 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8004df2:	8b3b      	ldrh	r3, [r7, #24]
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d157      	bne.n	8004ea8 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8004df8:	89fb      	ldrh	r3, [r7, #14]
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e00:	212d      	movs	r1, #45	; 0x2d
 8004e02:	4618      	mov	r0, r3
 8004e04:	f000 fe7e 	bl	8005b04 <CODEC_IO_Write>
 8004e08:	4603      	mov	r3, r0
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	4413      	add	r3, r2
 8004e10:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8004e12:	89fb      	ldrh	r3, [r7, #14]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004e1a:	212e      	movs	r1, #46	; 0x2e
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f000 fe71 	bl	8005b04 <CODEC_IO_Write>
 8004e22:	4603      	mov	r3, r0
 8004e24:	461a      	mov	r2, r3
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8004e2c:	4b0e      	ldr	r3, [pc, #56]	; (8004e68 <wm8994_Init+0x998>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d01b      	beq.n	8004e6c <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8004e34:	89fb      	ldrh	r3, [r7, #14]
 8004e36:	b2db      	uxtb	r3, r3
 8004e38:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8004e3c:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004e40:	4618      	mov	r0, r3
 8004e42:	f000 fe5f 	bl	8005b04 <CODEC_IO_Write>
 8004e46:	4603      	mov	r3, r0
 8004e48:	461a      	mov	r2, r3
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8004e50:	4b05      	ldr	r3, [pc, #20]	; (8004e68 <wm8994_Init+0x998>)
 8004e52:	2200      	movs	r2, #0
 8004e54:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8004e56:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004e5a:	f7fd fac3 	bl	80023e4 <AUDIO_IO_Delay>
 8004e5e:	e016      	b.n	8004e8e <wm8994_Init+0x9be>
 8004e60:	200006fc 	.word	0x200006fc
 8004e64:	00017700 	.word	0x00017700
 8004e68:	20000074 	.word	0x20000074
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8004e6c:	89fb      	ldrh	r3, [r7, #14]
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	f248 1208 	movw	r2, #33032	; 0x8108
 8004e74:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fe43 	bl	8005b04 <CODEC_IO_Write>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	461a      	mov	r2, r3
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8004e88:	2032      	movs	r0, #50	; 0x32
 8004e8a:	f7fd faab 	bl	80023e4 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8004e8e:	89fb      	ldrh	r3, [r7, #14]
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	2200      	movs	r2, #0
 8004e94:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f000 fe33 	bl	8005b04 <CODEC_IO_Write>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	69fb      	ldr	r3, [r7, #28]
 8004ea4:	4413      	add	r3, r2
 8004ea6:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8004ea8:	89fb      	ldrh	r3, [r7, #14]
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004eb0:	2103      	movs	r1, #3
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fe26 	bl	8005b04 <CODEC_IO_Write>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	461a      	mov	r2, r3
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8004ec2:	89fb      	ldrh	r3, [r7, #14]
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	2122      	movs	r1, #34	; 0x22
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f000 fe1a 	bl	8005b04 <CODEC_IO_Write>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	4413      	add	r3, r2
 8004ed8:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8004eda:	89fb      	ldrh	r3, [r7, #14]
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2200      	movs	r2, #0
 8004ee0:	2123      	movs	r1, #35	; 0x23
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fe0e 	bl	8005b04 <CODEC_IO_Write>
 8004ee8:	4603      	mov	r3, r0
 8004eea:	461a      	mov	r2, r3
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	4413      	add	r3, r2
 8004ef0:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8004ef2:	89fb      	ldrh	r3, [r7, #14]
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004efa:	2136      	movs	r1, #54	; 0x36
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 fe01 	bl	8005b04 <CODEC_IO_Write>
 8004f02:	4603      	mov	r3, r0
 8004f04:	461a      	mov	r2, r3
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	4413      	add	r3, r2
 8004f0a:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8004f0c:	89fb      	ldrh	r3, [r7, #14]
 8004f0e:	b2db      	uxtb	r3, r3
 8004f10:	f243 0203 	movw	r2, #12291	; 0x3003
 8004f14:	2101      	movs	r1, #1
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fdf4 	bl	8005b04 <CODEC_IO_Write>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	461a      	mov	r2, r3
 8004f20:	69fb      	ldr	r3, [r7, #28]
 8004f22:	4413      	add	r3, r2
 8004f24:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004f26:	8afb      	ldrh	r3, [r7, #22]
 8004f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f2c:	d10d      	bne.n	8004f4a <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8004f2e:	89fb      	ldrh	r3, [r7, #14]
 8004f30:	b2db      	uxtb	r3, r3
 8004f32:	f240 2205 	movw	r2, #517	; 0x205
 8004f36:	2151      	movs	r1, #81	; 0x51
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f000 fde3 	bl	8005b04 <CODEC_IO_Write>
 8004f3e:	4603      	mov	r3, r0
 8004f40:	461a      	mov	r2, r3
 8004f42:	69fb      	ldr	r3, [r7, #28]
 8004f44:	4413      	add	r3, r2
 8004f46:	61fb      	str	r3, [r7, #28]
 8004f48:	e00b      	b.n	8004f62 <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8004f4a:	89fb      	ldrh	r3, [r7, #14]
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2205      	movs	r2, #5
 8004f50:	2151      	movs	r1, #81	; 0x51
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fdd6 	bl	8005b04 <CODEC_IO_Write>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	4413      	add	r3, r2
 8004f60:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8004f62:	8b7b      	ldrh	r3, [r7, #26]
 8004f64:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8004f68:	f043 0303 	orr.w	r3, r3, #3
 8004f6c:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004f6e:	89fb      	ldrh	r3, [r7, #14]
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	8b7a      	ldrh	r2, [r7, #26]
 8004f74:	2101      	movs	r1, #1
 8004f76:	4618      	mov	r0, r3
 8004f78:	f000 fdc4 	bl	8005b04 <CODEC_IO_Write>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	461a      	mov	r2, r3
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	4413      	add	r3, r2
 8004f84:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8004f86:	89fb      	ldrh	r3, [r7, #14]
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	2222      	movs	r2, #34	; 0x22
 8004f8c:	2160      	movs	r1, #96	; 0x60
 8004f8e:	4618      	mov	r0, r3
 8004f90:	f000 fdb8 	bl	8005b04 <CODEC_IO_Write>
 8004f94:	4603      	mov	r3, r0
 8004f96:	461a      	mov	r2, r3
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8004f9e:	89fb      	ldrh	r3, [r7, #14]
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	f649 7225 	movw	r2, #40741	; 0x9f25
 8004fa6:	214c      	movs	r1, #76	; 0x4c
 8004fa8:	4618      	mov	r0, r3
 8004faa:	f000 fdab 	bl	8005b04 <CODEC_IO_Write>
 8004fae:	4603      	mov	r3, r0
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	69fb      	ldr	r3, [r7, #28]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8004fb8:	200f      	movs	r0, #15
 8004fba:	f7fd fa13 	bl	80023e4 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8004fbe:	89fb      	ldrh	r3, [r7, #14]
 8004fc0:	b2db      	uxtb	r3, r3
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	212d      	movs	r1, #45	; 0x2d
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fd9c 	bl	8005b04 <CODEC_IO_Write>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	461a      	mov	r2, r3
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8004fd6:	89fb      	ldrh	r3, [r7, #14]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	2201      	movs	r2, #1
 8004fdc:	212e      	movs	r1, #46	; 0x2e
 8004fde:	4618      	mov	r0, r3
 8004fe0:	f000 fd90 	bl	8005b04 <CODEC_IO_Write>
 8004fe4:	4603      	mov	r3, r0
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4413      	add	r3, r2
 8004fec:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8004fee:	89fb      	ldrh	r3, [r7, #14]
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	f44f 724c 	mov.w	r2, #816	; 0x330
 8004ff6:	2103      	movs	r1, #3
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f000 fd83 	bl	8005b04 <CODEC_IO_Write>
 8004ffe:	4603      	mov	r3, r0
 8005000:	461a      	mov	r2, r3
 8005002:	69fb      	ldr	r3, [r7, #28]
 8005004:	4413      	add	r3, r2
 8005006:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8005008:	89fb      	ldrh	r3, [r7, #14]
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2233      	movs	r2, #51	; 0x33
 800500e:	2154      	movs	r1, #84	; 0x54
 8005010:	4618      	mov	r0, r3
 8005012:	f000 fd77 	bl	8005b04 <CODEC_IO_Write>
 8005016:	4603      	mov	r3, r0
 8005018:	461a      	mov	r2, r3
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8005020:	f240 1001 	movw	r0, #257	; 0x101
 8005024:	f7fd f9de 	bl	80023e4 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8005028:	89fb      	ldrh	r3, [r7, #14]
 800502a:	b2db      	uxtb	r3, r3
 800502c:	22ee      	movs	r2, #238	; 0xee
 800502e:	2160      	movs	r1, #96	; 0x60
 8005030:	4618      	mov	r0, r3
 8005032:	f000 fd67 	bl	8005b04 <CODEC_IO_Write>
 8005036:	4603      	mov	r3, r0
 8005038:	461a      	mov	r2, r3
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	4413      	add	r3, r2
 800503e:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8005040:	89fb      	ldrh	r3, [r7, #14]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	22c0      	movs	r2, #192	; 0xc0
 8005046:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fd5a 	bl	8005b04 <CODEC_IO_Write>
 8005050:	4603      	mov	r3, r0
 8005052:	461a      	mov	r2, r3
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	4413      	add	r3, r2
 8005058:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 800505a:	89fb      	ldrh	r3, [r7, #14]
 800505c:	b2db      	uxtb	r3, r3
 800505e:	22c0      	movs	r2, #192	; 0xc0
 8005060:	f240 6111 	movw	r1, #1553	; 0x611
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fd4d 	bl	8005b04 <CODEC_IO_Write>
 800506a:	4603      	mov	r3, r0
 800506c:	461a      	mov	r2, r3
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	4413      	add	r3, r2
 8005072:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005074:	89fb      	ldrh	r3, [r7, #14]
 8005076:	b2db      	uxtb	r3, r3
 8005078:	2210      	movs	r2, #16
 800507a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fd40 	bl	8005b04 <CODEC_IO_Write>
 8005084:	4603      	mov	r3, r0
 8005086:	461a      	mov	r2, r3
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 800508e:	89fb      	ldrh	r3, [r7, #14]
 8005090:	b2db      	uxtb	r3, r3
 8005092:	22c0      	movs	r2, #192	; 0xc0
 8005094:	f240 6112 	movw	r1, #1554	; 0x612
 8005098:	4618      	mov	r0, r3
 800509a:	f000 fd33 	bl	8005b04 <CODEC_IO_Write>
 800509e:	4603      	mov	r3, r0
 80050a0:	461a      	mov	r2, r3
 80050a2:	69fb      	ldr	r3, [r7, #28]
 80050a4:	4413      	add	r3, r2
 80050a6:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 80050a8:	89fb      	ldrh	r3, [r7, #14]
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	22c0      	movs	r2, #192	; 0xc0
 80050ae:	f240 6113 	movw	r1, #1555	; 0x613
 80050b2:	4618      	mov	r0, r3
 80050b4:	f000 fd26 	bl	8005b04 <CODEC_IO_Write>
 80050b8:	4603      	mov	r3, r0
 80050ba:	461a      	mov	r2, r3
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	4413      	add	r3, r2
 80050c0:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80050c2:	89fb      	ldrh	r3, [r7, #14]
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2210      	movs	r2, #16
 80050c8:	f240 4122 	movw	r1, #1058	; 0x422
 80050cc:	4618      	mov	r0, r3
 80050ce:	f000 fd19 	bl	8005b04 <CODEC_IO_Write>
 80050d2:	4603      	mov	r3, r0
 80050d4:	461a      	mov	r2, r3
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4413      	add	r3, r2
 80050da:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80050dc:	7afa      	ldrb	r2, [r7, #11]
 80050de:	89fb      	ldrh	r3, [r7, #14]
 80050e0:	4611      	mov	r1, r2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f000 f984 	bl	80053f0 <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 80050e8:	8afb      	ldrh	r3, [r7, #22]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	f000 80a6 	beq.w	800523c <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 80050f0:	8afb      	ldrh	r3, [r7, #22]
 80050f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050f6:	d003      	beq.n	8005100 <wm8994_Init+0xc30>
 80050f8:	8afb      	ldrh	r3, [r7, #22]
 80050fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80050fe:	d12b      	bne.n	8005158 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005100:	8b7b      	ldrh	r3, [r7, #26]
 8005102:	f043 0313 	orr.w	r3, r3, #19
 8005106:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005108:	89fb      	ldrh	r3, [r7, #14]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	8b7a      	ldrh	r2, [r7, #26]
 800510e:	2101      	movs	r1, #1
 8005110:	4618      	mov	r0, r3
 8005112:	f000 fcf7 	bl	8005b04 <CODEC_IO_Write>
 8005116:	4603      	mov	r3, r0
 8005118:	461a      	mov	r2, r3
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	4413      	add	r3, r2
 800511e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8005120:	89fb      	ldrh	r3, [r7, #14]
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2202      	movs	r2, #2
 8005126:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800512a:	4618      	mov	r0, r3
 800512c:	f000 fcea 	bl	8005b04 <CODEC_IO_Write>
 8005130:	4603      	mov	r3, r0
 8005132:	461a      	mov	r2, r3
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	4413      	add	r3, r2
 8005138:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 800513a:	89fb      	ldrh	r3, [r7, #14]
 800513c:	b2db      	uxtb	r3, r3
 800513e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8005142:	f240 4111 	movw	r1, #1041	; 0x411
 8005146:	4618      	mov	r0, r3
 8005148:	f000 fcdc 	bl	8005b04 <CODEC_IO_Write>
 800514c:	4603      	mov	r3, r0
 800514e:	461a      	mov	r2, r3
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	61fb      	str	r3, [r7, #28]
 8005156:	e06b      	b.n	8005230 <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8005158:	8afb      	ldrh	r3, [r7, #22]
 800515a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800515e:	d139      	bne.n	80051d4 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 8005160:	8b7b      	ldrh	r3, [r7, #26]
 8005162:	f043 0313 	orr.w	r3, r3, #19
 8005166:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005168:	89fb      	ldrh	r3, [r7, #14]
 800516a:	b2db      	uxtb	r3, r3
 800516c:	8b7a      	ldrh	r2, [r7, #26]
 800516e:	2101      	movs	r1, #1
 8005170:	4618      	mov	r0, r3
 8005172:	f000 fcc7 	bl	8005b04 <CODEC_IO_Write>
 8005176:	4603      	mov	r3, r0
 8005178:	461a      	mov	r2, r3
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 8005180:	89fb      	ldrh	r3, [r7, #14]
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2202      	movs	r2, #2
 8005186:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 800518a:	4618      	mov	r0, r3
 800518c:	f000 fcba 	bl	8005b04 <CODEC_IO_Write>
 8005190:	4603      	mov	r3, r0
 8005192:	461a      	mov	r2, r3
 8005194:	69fb      	ldr	r3, [r7, #28]
 8005196:	4413      	add	r3, r2
 8005198:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 800519a:	89fb      	ldrh	r3, [r7, #14]
 800519c:	b2db      	uxtb	r3, r3
 800519e:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80051a2:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80051a6:	4618      	mov	r0, r3
 80051a8:	f000 fcac 	bl	8005b04 <CODEC_IO_Write>
 80051ac:	4603      	mov	r3, r0
 80051ae:	461a      	mov	r2, r3
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	4413      	add	r3, r2
 80051b4:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 80051b6:	89fb      	ldrh	r3, [r7, #14]
 80051b8:	b2db      	uxtb	r3, r3
 80051ba:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80051be:	f240 4111 	movw	r1, #1041	; 0x411
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fc9e 	bl	8005b04 <CODEC_IO_Write>
 80051c8:	4603      	mov	r3, r0
 80051ca:	461a      	mov	r2, r3
 80051cc:	69fb      	ldr	r3, [r7, #28]
 80051ce:	4413      	add	r3, r2
 80051d0:	61fb      	str	r3, [r7, #28]
 80051d2:	e02d      	b.n	8005230 <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 80051d4:	8afb      	ldrh	r3, [r7, #22]
 80051d6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051da:	d003      	beq.n	80051e4 <wm8994_Init+0xd14>
 80051dc:	8afb      	ldrh	r3, [r7, #22]
 80051de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051e2:	d125      	bne.n	8005230 <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 80051e4:	89fb      	ldrh	r3, [r7, #14]
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	220b      	movs	r2, #11
 80051ea:	2118      	movs	r1, #24
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fc89 	bl	8005b04 <CODEC_IO_Write>
 80051f2:	4603      	mov	r3, r0
 80051f4:	461a      	mov	r2, r3
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	4413      	add	r3, r2
 80051fa:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 80051fc:	89fb      	ldrh	r3, [r7, #14]
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	220b      	movs	r2, #11
 8005202:	211a      	movs	r1, #26
 8005204:	4618      	mov	r0, r3
 8005206:	f000 fc7d 	bl	8005b04 <CODEC_IO_Write>
 800520a:	4603      	mov	r3, r0
 800520c:	461a      	mov	r2, r3
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	4413      	add	r3, r2
 8005212:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8005214:	89fb      	ldrh	r3, [r7, #14]
 8005216:	b2db      	uxtb	r3, r3
 8005218:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800521c:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005220:	4618      	mov	r0, r3
 8005222:	f000 fc6f 	bl	8005b04 <CODEC_IO_Write>
 8005226:	4603      	mov	r3, r0
 8005228:	461a      	mov	r2, r3
 800522a:	69fb      	ldr	r3, [r7, #28]
 800522c:	4413      	add	r3, r2
 800522e:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8005230:	7afa      	ldrb	r2, [r7, #11]
 8005232:	89fb      	ldrh	r3, [r7, #14]
 8005234:	4611      	mov	r1, r2
 8005236:	4618      	mov	r0, r3
 8005238:	f000 f8da 	bl	80053f0 <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 800523c:	69fb      	ldr	r3, [r7, #28]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3720      	adds	r7, #32
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop

08005248 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 800524c:	f7fd f86c 	bl	8002328 <AUDIO_IO_DeInit>
}
 8005250:	bf00      	nop
 8005252:	bd80      	pop	{r7, pc}

08005254 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	4603      	mov	r3, r0
 800525c:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 800525e:	f7fd f859 	bl	8002314 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 8005262:	88fb      	ldrh	r3, [r7, #6]
 8005264:	b2db      	uxtb	r3, r3
 8005266:	2100      	movs	r1, #0
 8005268:	4618      	mov	r0, r3
 800526a:	f7fd f88f 	bl	800238c <AUDIO_IO_Read>
 800526e:	4603      	mov	r3, r0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b084      	sub	sp, #16
 800527c:	af00      	add	r7, sp, #0
 800527e:	4603      	mov	r3, r0
 8005280:	6039      	str	r1, [r7, #0]
 8005282:	80fb      	strh	r3, [r7, #6]
 8005284:	4613      	mov	r3, r2
 8005286:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 800528c:	88fb      	ldrh	r3, [r7, #6]
 800528e:	2100      	movs	r1, #0
 8005290:	4618      	mov	r0, r3
 8005292:	f000 f9d1 	bl	8005638 <wm8994_SetMute>
 8005296:	4602      	mov	r2, r0
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	4413      	add	r3, r2
 800529c:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800529e:	68fb      	ldr	r3, [r7, #12]
}
 80052a0:	4618      	mov	r0, r3
 80052a2:	3710      	adds	r7, #16
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bd80      	pop	{r7, pc}

080052a8 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	4603      	mov	r3, r0
 80052b0:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80052b2:	2300      	movs	r3, #0
 80052b4:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80052b6:	88fb      	ldrh	r3, [r7, #6]
 80052b8:	2101      	movs	r1, #1
 80052ba:	4618      	mov	r0, r3
 80052bc:	f000 f9bc 	bl	8005638 <wm8994_SetMute>
 80052c0:	4602      	mov	r2, r0
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4413      	add	r3, r2
 80052c6:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 80052c8:	88fb      	ldrh	r3, [r7, #6]
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2201      	movs	r2, #1
 80052ce:	2102      	movs	r1, #2
 80052d0:	4618      	mov	r0, r3
 80052d2:	f000 fc17 	bl	8005b04 <CODEC_IO_Write>
 80052d6:	4603      	mov	r3, r0
 80052d8:	461a      	mov	r2, r3
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	4413      	add	r3, r2
 80052de:	60fb      	str	r3, [r7, #12]
 
  return counter;
 80052e0:	68fb      	ldr	r3, [r7, #12]
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b084      	sub	sp, #16
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	4603      	mov	r3, r0
 80052f2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	2100      	movs	r1, #0
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f99b 	bl	8005638 <wm8994_SetMute>
 8005302:	4602      	mov	r2, r0
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	4413      	add	r3, r2
 8005308:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800530a:	68fb      	ldr	r3, [r7, #12]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	6039      	str	r1, [r7, #0]
 800531e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005320:	2300      	movs	r3, #0
 8005322:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 8005324:	4b31      	ldr	r3, [pc, #196]	; (80053ec <wm8994_Stop+0xd8>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d05a      	beq.n	80053e2 <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 800532c:	88fb      	ldrh	r3, [r7, #6]
 800532e:	2101      	movs	r1, #1
 8005330:	4618      	mov	r0, r3
 8005332:	f000 f981 	bl	8005638 <wm8994_SetMute>
 8005336:	4602      	mov	r2, r0
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	4413      	add	r3, r2
 800533c:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	2b02      	cmp	r3, #2
 8005342:	d04e      	beq.n	80053e2 <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8005344:	88fb      	ldrh	r3, [r7, #6]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	f44f 7200 	mov.w	r2, #512	; 0x200
 800534c:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005350:	4618      	mov	r0, r3
 8005352:	f000 fbd7 	bl	8005b04 <CODEC_IO_Write>
 8005356:	4603      	mov	r3, r0
 8005358:	461a      	mov	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	4413      	add	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	b2db      	uxtb	r3, r3
 8005364:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005368:	f240 4122 	movw	r1, #1058	; 0x422
 800536c:	4618      	mov	r0, r3
 800536e:	f000 fbc9 	bl	8005b04 <CODEC_IO_Write>
 8005372:	4603      	mov	r3, r0
 8005374:	461a      	mov	r2, r3
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	4413      	add	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 800537c:	88fb      	ldrh	r3, [r7, #6]
 800537e:	b2db      	uxtb	r3, r3
 8005380:	2200      	movs	r2, #0
 8005382:	212d      	movs	r1, #45	; 0x2d
 8005384:	4618      	mov	r0, r3
 8005386:	f000 fbbd 	bl	8005b04 <CODEC_IO_Write>
 800538a:	4603      	mov	r3, r0
 800538c:	461a      	mov	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4413      	add	r3, r2
 8005392:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	b2db      	uxtb	r3, r3
 8005398:	2200      	movs	r2, #0
 800539a:	212e      	movs	r1, #46	; 0x2e
 800539c:	4618      	mov	r0, r3
 800539e:	f000 fbb1 	bl	8005b04 <CODEC_IO_Write>
 80053a2:	4603      	mov	r3, r0
 80053a4:	461a      	mov	r2, r3
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	b2db      	uxtb	r3, r3
 80053b0:	2200      	movs	r2, #0
 80053b2:	2105      	movs	r1, #5
 80053b4:	4618      	mov	r0, r3
 80053b6:	f000 fba5 	bl	8005b04 <CODEC_IO_Write>
 80053ba:	4603      	mov	r3, r0
 80053bc:	461a      	mov	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2200      	movs	r2, #0
 80053ca:	2100      	movs	r1, #0
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fb99 	bl	8005b04 <CODEC_IO_Write>
 80053d2:	4603      	mov	r3, r0
 80053d4:	461a      	mov	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	4413      	add	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 80053dc:	4b03      	ldr	r3, [pc, #12]	; (80053ec <wm8994_Stop+0xd8>)
 80053de:	2200      	movs	r2, #0
 80053e0:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 80053e2:	68fb      	ldr	r3, [r7, #12]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3710      	adds	r7, #16
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	200006f8 	.word	0x200006f8

080053f0 <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	4603      	mov	r3, r0
 80053f8:	460a      	mov	r2, r1
 80053fa:	80fb      	strh	r3, [r7, #6]
 80053fc:	4613      	mov	r3, r2
 80053fe:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 8005400:	2300      	movs	r3, #0
 8005402:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8005404:	797b      	ldrb	r3, [r7, #5]
 8005406:	2b64      	cmp	r3, #100	; 0x64
 8005408:	d80b      	bhi.n	8005422 <wm8994_SetVolume+0x32>
 800540a:	797a      	ldrb	r2, [r7, #5]
 800540c:	4613      	mov	r3, r2
 800540e:	019b      	lsls	r3, r3, #6
 8005410:	1a9b      	subs	r3, r3, r2
 8005412:	4a86      	ldr	r2, [pc, #536]	; (800562c <wm8994_SetVolume+0x23c>)
 8005414:	fb82 1203 	smull	r1, r2, r2, r3
 8005418:	1152      	asrs	r2, r2, #5
 800541a:	17db      	asrs	r3, r3, #31
 800541c:	1ad3      	subs	r3, r2, r3
 800541e:	b2db      	uxtb	r3, r3
 8005420:	e000      	b.n	8005424 <wm8994_SetVolume+0x34>
 8005422:	2364      	movs	r3, #100	; 0x64
 8005424:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 8005426:	4b82      	ldr	r3, [pc, #520]	; (8005630 <wm8994_SetVolume+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 809b 	beq.w	8005566 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 8005430:	7afb      	ldrb	r3, [r7, #11]
 8005432:	2b3e      	cmp	r3, #62	; 0x3e
 8005434:	d93d      	bls.n	80054b2 <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005436:	88fb      	ldrh	r3, [r7, #6]
 8005438:	2100      	movs	r1, #0
 800543a:	4618      	mov	r0, r3
 800543c:	f000 f8fc 	bl	8005638 <wm8994_SetMute>
 8005440:	4602      	mov	r2, r0
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	f240 127f 	movw	r2, #383	; 0x17f
 8005450:	211c      	movs	r1, #28
 8005452:	4618      	mov	r0, r3
 8005454:	f000 fb56 	bl	8005b04 <CODEC_IO_Write>
 8005458:	4603      	mov	r3, r0
 800545a:	461a      	mov	r2, r3
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4413      	add	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 8005462:	88fb      	ldrh	r3, [r7, #6]
 8005464:	b2db      	uxtb	r3, r3
 8005466:	f240 127f 	movw	r2, #383	; 0x17f
 800546a:	211d      	movs	r1, #29
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fb49 	bl	8005b04 <CODEC_IO_Write>
 8005472:	4603      	mov	r3, r0
 8005474:	461a      	mov	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	f240 127f 	movw	r2, #383	; 0x17f
 8005484:	2126      	movs	r1, #38	; 0x26
 8005486:	4618      	mov	r0, r3
 8005488:	f000 fb3c 	bl	8005b04 <CODEC_IO_Write>
 800548c:	4603      	mov	r3, r0
 800548e:	461a      	mov	r2, r3
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	4413      	add	r3, r2
 8005494:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	f240 127f 	movw	r2, #383	; 0x17f
 800549e:	2127      	movs	r1, #39	; 0x27
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 fb2f 	bl	8005b04 <CODEC_IO_Write>
 80054a6:	4603      	mov	r3, r0
 80054a8:	461a      	mov	r2, r3
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4413      	add	r3, r2
 80054ae:	60fb      	str	r3, [r7, #12]
 80054b0:	e059      	b.n	8005566 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 80054b2:	797b      	ldrb	r3, [r7, #5]
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d109      	bne.n	80054cc <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80054b8:	88fb      	ldrh	r3, [r7, #6]
 80054ba:	2101      	movs	r1, #1
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 f8bb 	bl	8005638 <wm8994_SetMute>
 80054c2:	4602      	mov	r2, r0
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	4413      	add	r3, r2
 80054c8:	60fb      	str	r3, [r7, #12]
 80054ca:	e04c      	b.n	8005566 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80054cc:	88fb      	ldrh	r3, [r7, #6]
 80054ce:	2100      	movs	r1, #0
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 f8b1 	bl	8005638 <wm8994_SetMute>
 80054d6:	4602      	mov	r2, r0
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	4413      	add	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 80054de:	88fb      	ldrh	r3, [r7, #6]
 80054e0:	b2d8      	uxtb	r0, r3
 80054e2:	7afb      	ldrb	r3, [r7, #11]
 80054e4:	b21b      	sxth	r3, r3
 80054e6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80054ea:	b21b      	sxth	r3, r3
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	461a      	mov	r2, r3
 80054f0:	211c      	movs	r1, #28
 80054f2:	f000 fb07 	bl	8005b04 <CODEC_IO_Write>
 80054f6:	4603      	mov	r3, r0
 80054f8:	461a      	mov	r2, r3
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 8005500:	88fb      	ldrh	r3, [r7, #6]
 8005502:	b2d8      	uxtb	r0, r3
 8005504:	7afb      	ldrb	r3, [r7, #11]
 8005506:	b21b      	sxth	r3, r3
 8005508:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800550c:	b21b      	sxth	r3, r3
 800550e:	b29b      	uxth	r3, r3
 8005510:	461a      	mov	r2, r3
 8005512:	211d      	movs	r1, #29
 8005514:	f000 faf6 	bl	8005b04 <CODEC_IO_Write>
 8005518:	4603      	mov	r3, r0
 800551a:	461a      	mov	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	4413      	add	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 8005522:	88fb      	ldrh	r3, [r7, #6]
 8005524:	b2d8      	uxtb	r0, r3
 8005526:	7afb      	ldrb	r3, [r7, #11]
 8005528:	b21b      	sxth	r3, r3
 800552a:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 800552e:	b21b      	sxth	r3, r3
 8005530:	b29b      	uxth	r3, r3
 8005532:	461a      	mov	r2, r3
 8005534:	2126      	movs	r1, #38	; 0x26
 8005536:	f000 fae5 	bl	8005b04 <CODEC_IO_Write>
 800553a:	4603      	mov	r3, r0
 800553c:	461a      	mov	r2, r3
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4413      	add	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	b2d8      	uxtb	r0, r3
 8005548:	7afb      	ldrb	r3, [r7, #11]
 800554a:	b21b      	sxth	r3, r3
 800554c:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005550:	b21b      	sxth	r3, r3
 8005552:	b29b      	uxth	r3, r3
 8005554:	461a      	mov	r2, r3
 8005556:	2127      	movs	r1, #39	; 0x27
 8005558:	f000 fad4 	bl	8005b04 <CODEC_IO_Write>
 800555c:	4603      	mov	r3, r0
 800555e:	461a      	mov	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	4413      	add	r3, r2
 8005564:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 8005566:	4b33      	ldr	r3, [pc, #204]	; (8005634 <wm8994_SetVolume+0x244>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d059      	beq.n	8005622 <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 800556e:	797b      	ldrb	r3, [r7, #5]
 8005570:	2b63      	cmp	r3, #99	; 0x63
 8005572:	d80c      	bhi.n	800558e <wm8994_SetVolume+0x19e>
 8005574:	797a      	ldrb	r2, [r7, #5]
 8005576:	4613      	mov	r3, r2
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4a2b      	ldr	r2, [pc, #172]	; (800562c <wm8994_SetVolume+0x23c>)
 8005580:	fb82 1203 	smull	r1, r2, r2, r3
 8005584:	1152      	asrs	r2, r2, #5
 8005586:	17db      	asrs	r3, r3, #31
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	b2db      	uxtb	r3, r3
 800558c:	e000      	b.n	8005590 <wm8994_SetVolume+0x1a0>
 800558e:	23ef      	movs	r3, #239	; 0xef
 8005590:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 8005592:	88fb      	ldrh	r3, [r7, #6]
 8005594:	b2d8      	uxtb	r0, r3
 8005596:	7afb      	ldrb	r3, [r7, #11]
 8005598:	b21b      	sxth	r3, r3
 800559a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800559e:	b21b      	sxth	r3, r3
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	461a      	mov	r2, r3
 80055a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055a8:	f000 faac 	bl	8005b04 <CODEC_IO_Write>
 80055ac:	4603      	mov	r3, r0
 80055ae:	461a      	mov	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	b2d8      	uxtb	r0, r3
 80055ba:	7afb      	ldrb	r3, [r7, #11]
 80055bc:	b21b      	sxth	r3, r3
 80055be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c2:	b21b      	sxth	r3, r3
 80055c4:	b29b      	uxth	r3, r3
 80055c6:	461a      	mov	r2, r3
 80055c8:	f240 4101 	movw	r1, #1025	; 0x401
 80055cc:	f000 fa9a 	bl	8005b04 <CODEC_IO_Write>
 80055d0:	4603      	mov	r3, r0
 80055d2:	461a      	mov	r2, r3
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	4413      	add	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	b2d8      	uxtb	r0, r3
 80055de:	7afb      	ldrb	r3, [r7, #11]
 80055e0:	b21b      	sxth	r3, r3
 80055e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055e6:	b21b      	sxth	r3, r3
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	f240 4104 	movw	r1, #1028	; 0x404
 80055f0:	f000 fa88 	bl	8005b04 <CODEC_IO_Write>
 80055f4:	4603      	mov	r3, r0
 80055f6:	461a      	mov	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	4413      	add	r3, r2
 80055fc:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 80055fe:	88fb      	ldrh	r3, [r7, #6]
 8005600:	b2d8      	uxtb	r0, r3
 8005602:	7afb      	ldrb	r3, [r7, #11]
 8005604:	b21b      	sxth	r3, r3
 8005606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800560a:	b21b      	sxth	r3, r3
 800560c:	b29b      	uxth	r3, r3
 800560e:	461a      	mov	r2, r3
 8005610:	f240 4105 	movw	r1, #1029	; 0x405
 8005614:	f000 fa76 	bl	8005b04 <CODEC_IO_Write>
 8005618:	4603      	mov	r3, r0
 800561a:	461a      	mov	r2, r3
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	4413      	add	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 8005622:	68fb      	ldr	r3, [r7, #12]
}
 8005624:	4618      	mov	r0, r3
 8005626:	3710      	adds	r7, #16
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	51eb851f 	.word	0x51eb851f
 8005630:	200006f8 	.word	0x200006f8
 8005634:	200006fc 	.word	0x200006fc

08005638 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b084      	sub	sp, #16
 800563c:	af00      	add	r7, sp, #0
 800563e:	4603      	mov	r3, r0
 8005640:	6039      	str	r1, [r7, #0]
 8005642:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 8005648:	4b21      	ldr	r3, [pc, #132]	; (80056d0 <wm8994_SetMute+0x98>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d039      	beq.n	80056c4 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	2b01      	cmp	r3, #1
 8005654:	d11c      	bne.n	8005690 <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 8005656:	88fb      	ldrh	r3, [r7, #6]
 8005658:	b2db      	uxtb	r3, r3
 800565a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800565e:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005662:	4618      	mov	r0, r3
 8005664:	f000 fa4e 	bl	8005b04 <CODEC_IO_Write>
 8005668:	4603      	mov	r3, r0
 800566a:	461a      	mov	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 8005672:	88fb      	ldrh	r3, [r7, #6]
 8005674:	b2db      	uxtb	r3, r3
 8005676:	f44f 7200 	mov.w	r2, #512	; 0x200
 800567a:	f240 4122 	movw	r1, #1058	; 0x422
 800567e:	4618      	mov	r0, r3
 8005680:	f000 fa40 	bl	8005b04 <CODEC_IO_Write>
 8005684:	4603      	mov	r3, r0
 8005686:	461a      	mov	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4413      	add	r3, r2
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	e019      	b.n	80056c4 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8005690:	88fb      	ldrh	r3, [r7, #6]
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2210      	movs	r2, #16
 8005696:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fa32 	bl	8005b04 <CODEC_IO_Write>
 80056a0:	4603      	mov	r3, r0
 80056a2:	461a      	mov	r2, r3
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 80056aa:	88fb      	ldrh	r3, [r7, #6]
 80056ac:	b2db      	uxtb	r3, r3
 80056ae:	2210      	movs	r2, #16
 80056b0:	f240 4122 	movw	r1, #1058	; 0x422
 80056b4:	4618      	mov	r0, r3
 80056b6:	f000 fa25 	bl	8005b04 <CODEC_IO_Write>
 80056ba:	4603      	mov	r3, r0
 80056bc:	461a      	mov	r2, r3
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4413      	add	r3, r2
 80056c2:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 80056c4:	68fb      	ldr	r3, [r7, #12]
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3710      	adds	r7, #16
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	200006f8 	.word	0x200006f8

080056d4 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b084      	sub	sp, #16
 80056d8:	af00      	add	r7, sp, #0
 80056da:	4603      	mov	r3, r0
 80056dc:	460a      	mov	r2, r1
 80056de:	80fb      	strh	r3, [r7, #6]
 80056e0:	4613      	mov	r3, r2
 80056e2:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 80056e8:	797b      	ldrb	r3, [r7, #5]
 80056ea:	2b03      	cmp	r3, #3
 80056ec:	f000 808c 	beq.w	8005808 <wm8994_SetOutputMode+0x134>
 80056f0:	2b03      	cmp	r3, #3
 80056f2:	f300 80cb 	bgt.w	800588c <wm8994_SetOutputMode+0x1b8>
 80056f6:	2b01      	cmp	r3, #1
 80056f8:	d002      	beq.n	8005700 <wm8994_SetOutputMode+0x2c>
 80056fa:	2b02      	cmp	r3, #2
 80056fc:	d042      	beq.n	8005784 <wm8994_SetOutputMode+0xb0>
 80056fe:	e0c5      	b.n	800588c <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8005700:	88fb      	ldrh	r3, [r7, #6]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	f640 420c 	movw	r2, #3084	; 0xc0c
 8005708:	2105      	movs	r1, #5
 800570a:	4618      	mov	r0, r3
 800570c:	f000 f9fa 	bl	8005b04 <CODEC_IO_Write>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2200      	movs	r2, #0
 8005720:	f240 6101 	movw	r1, #1537	; 0x601
 8005724:	4618      	mov	r0, r3
 8005726:	f000 f9ed 	bl	8005b04 <CODEC_IO_Write>
 800572a:	4603      	mov	r3, r0
 800572c:	461a      	mov	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4413      	add	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8005734:	88fb      	ldrh	r3, [r7, #6]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2200      	movs	r2, #0
 800573a:	f240 6102 	movw	r1, #1538	; 0x602
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f9e0 	bl	8005b04 <CODEC_IO_Write>
 8005744:	4603      	mov	r3, r0
 8005746:	461a      	mov	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2202      	movs	r2, #2
 8005754:	f240 6104 	movw	r1, #1540	; 0x604
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f9d3 	bl	8005b04 <CODEC_IO_Write>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2202      	movs	r2, #2
 800576e:	f240 6105 	movw	r1, #1541	; 0x605
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f9c6 	bl	8005b04 <CODEC_IO_Write>
 8005778:	4603      	mov	r3, r0
 800577a:	461a      	mov	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
    break;
 8005782:	e0c5      	b.n	8005910 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f240 3203 	movw	r2, #771	; 0x303
 800578c:	2105      	movs	r1, #5
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f9b8 	bl	8005b04 <CODEC_IO_Write>
 8005794:	4603      	mov	r3, r0
 8005796:	461a      	mov	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2201      	movs	r2, #1
 80057a4:	f240 6101 	movw	r1, #1537	; 0x601
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 f9ab 	bl	8005b04 <CODEC_IO_Write>
 80057ae:	4603      	mov	r3, r0
 80057b0:	461a      	mov	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2201      	movs	r2, #1
 80057be:	f240 6102 	movw	r1, #1538	; 0x602
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 f99e 	bl	8005b04 <CODEC_IO_Write>
 80057c8:	4603      	mov	r3, r0
 80057ca:	461a      	mov	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2200      	movs	r2, #0
 80057d8:	f240 6104 	movw	r1, #1540	; 0x604
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 f991 	bl	8005b04 <CODEC_IO_Write>
 80057e2:	4603      	mov	r3, r0
 80057e4:	461a      	mov	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80057ec:	88fb      	ldrh	r3, [r7, #6]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2200      	movs	r2, #0
 80057f2:	f240 6105 	movw	r1, #1541	; 0x605
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f984 	bl	8005b04 <CODEC_IO_Write>
 80057fc:	4603      	mov	r3, r0
 80057fe:	461a      	mov	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
    break;
 8005806:	e083      	b.n	8005910 <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8005810:	2105      	movs	r1, #5
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f976 	bl	8005b04 <CODEC_IO_Write>
 8005818:	4603      	mov	r3, r0
 800581a:	461a      	mov	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2201      	movs	r2, #1
 8005828:	f240 6101 	movw	r1, #1537	; 0x601
 800582c:	4618      	mov	r0, r3
 800582e:	f000 f969 	bl	8005b04 <CODEC_IO_Write>
 8005832:	4603      	mov	r3, r0
 8005834:	461a      	mov	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2201      	movs	r2, #1
 8005842:	f240 6102 	movw	r1, #1538	; 0x602
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f95c 	bl	8005b04 <CODEC_IO_Write>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2202      	movs	r2, #2
 800585c:	f240 6104 	movw	r1, #1540	; 0x604
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f94f 	bl	8005b04 <CODEC_IO_Write>
 8005866:	4603      	mov	r3, r0
 8005868:	461a      	mov	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2202      	movs	r2, #2
 8005876:	f240 6105 	movw	r1, #1541	; 0x605
 800587a:	4618      	mov	r0, r3
 800587c:	f000 f942 	bl	8005b04 <CODEC_IO_Write>
 8005880:	4603      	mov	r3, r0
 8005882:	461a      	mov	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
    break;
 800588a:	e041      	b.n	8005910 <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800588c:	88fb      	ldrh	r3, [r7, #6]
 800588e:	b2db      	uxtb	r3, r3
 8005890:	f240 3203 	movw	r2, #771	; 0x303
 8005894:	2105      	movs	r1, #5
 8005896:	4618      	mov	r0, r3
 8005898:	f000 f934 	bl	8005b04 <CODEC_IO_Write>
 800589c:	4603      	mov	r3, r0
 800589e:	461a      	mov	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	4413      	add	r3, r2
 80058a4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80058a6:	88fb      	ldrh	r3, [r7, #6]
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2201      	movs	r2, #1
 80058ac:	f240 6101 	movw	r1, #1537	; 0x601
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 f927 	bl	8005b04 <CODEC_IO_Write>
 80058b6:	4603      	mov	r3, r0
 80058b8:	461a      	mov	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4413      	add	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80058c0:	88fb      	ldrh	r3, [r7, #6]
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2201      	movs	r2, #1
 80058c6:	f240 6102 	movw	r1, #1538	; 0x602
 80058ca:	4618      	mov	r0, r3
 80058cc:	f000 f91a 	bl	8005b04 <CODEC_IO_Write>
 80058d0:	4603      	mov	r3, r0
 80058d2:	461a      	mov	r2, r3
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80058da:	88fb      	ldrh	r3, [r7, #6]
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2200      	movs	r2, #0
 80058e0:	f240 6104 	movw	r1, #1540	; 0x604
 80058e4:	4618      	mov	r0, r3
 80058e6:	f000 f90d 	bl	8005b04 <CODEC_IO_Write>
 80058ea:	4603      	mov	r3, r0
 80058ec:	461a      	mov	r2, r3
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	4413      	add	r3, r2
 80058f2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80058f4:	88fb      	ldrh	r3, [r7, #6]
 80058f6:	b2db      	uxtb	r3, r3
 80058f8:	2200      	movs	r2, #0
 80058fa:	f240 6105 	movw	r1, #1541	; 0x605
 80058fe:	4618      	mov	r0, r3
 8005900:	f000 f900 	bl	8005b04 <CODEC_IO_Write>
 8005904:	4603      	mov	r3, r0
 8005906:	461a      	mov	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4413      	add	r3, r2
 800590c:	60fb      	str	r3, [r7, #12]
    break;    
 800590e:	bf00      	nop
  }  
  return counter;
 8005910:	68fb      	ldr	r3, [r7, #12]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
	...

0800591c <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	4603      	mov	r3, r0
 8005924:	6039      	str	r1, [r7, #0]
 8005926:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005928:	2300      	movs	r3, #0
 800592a:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	4a64      	ldr	r2, [pc, #400]	; (8005ac0 <wm8994_SetFrequency+0x1a4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d079      	beq.n	8005a28 <wm8994_SetFrequency+0x10c>
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	4a62      	ldr	r2, [pc, #392]	; (8005ac0 <wm8994_SetFrequency+0x1a4>)
 8005938:	4293      	cmp	r3, r2
 800593a:	f200 80ad 	bhi.w	8005a98 <wm8994_SetFrequency+0x17c>
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8005944:	4293      	cmp	r3, r2
 8005946:	d061      	beq.n	8005a0c <wm8994_SetFrequency+0xf0>
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800594e:	4293      	cmp	r3, r2
 8005950:	f200 80a2 	bhi.w	8005a98 <wm8994_SetFrequency+0x17c>
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	f64a 4244 	movw	r2, #44100	; 0xac44
 800595a:	4293      	cmp	r3, r2
 800595c:	f000 808e 	beq.w	8005a7c <wm8994_SetFrequency+0x160>
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	f64a 4244 	movw	r2, #44100	; 0xac44
 8005966:	4293      	cmp	r3, r2
 8005968:	f200 8096 	bhi.w	8005a98 <wm8994_SetFrequency+0x17c>
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8005972:	d03d      	beq.n	80059f0 <wm8994_SetFrequency+0xd4>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 800597a:	f200 808d 	bhi.w	8005a98 <wm8994_SetFrequency+0x17c>
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	f245 6222 	movw	r2, #22050	; 0x5622
 8005984:	4293      	cmp	r3, r2
 8005986:	d06b      	beq.n	8005a60 <wm8994_SetFrequency+0x144>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	f245 6222 	movw	r2, #22050	; 0x5622
 800598e:	4293      	cmp	r3, r2
 8005990:	f200 8082 	bhi.w	8005a98 <wm8994_SetFrequency+0x17c>
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800599a:	d01b      	beq.n	80059d4 <wm8994_SetFrequency+0xb8>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 80059a2:	d879      	bhi.n	8005a98 <wm8994_SetFrequency+0x17c>
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 80059aa:	d005      	beq.n	80059b8 <wm8994_SetFrequency+0x9c>
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	f642 3211 	movw	r2, #11025	; 0x2b11
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d046      	beq.n	8005a44 <wm8994_SetFrequency+0x128>
 80059b6:	e06f      	b.n	8005a98 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 80059b8:	88fb      	ldrh	r3, [r7, #6]
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2203      	movs	r2, #3
 80059be:	f44f 7104 	mov.w	r1, #528	; 0x210
 80059c2:	4618      	mov	r0, r3
 80059c4:	f000 f89e 	bl	8005b04 <CODEC_IO_Write>
 80059c8:	4603      	mov	r3, r0
 80059ca:	461a      	mov	r2, r3
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	4413      	add	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
    break;
 80059d2:	e06f      	b.n	8005ab4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 80059d4:	88fb      	ldrh	r3, [r7, #6]
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2233      	movs	r2, #51	; 0x33
 80059da:	f44f 7104 	mov.w	r1, #528	; 0x210
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 f890 	bl	8005b04 <CODEC_IO_Write>
 80059e4:	4603      	mov	r3, r0
 80059e6:	461a      	mov	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	4413      	add	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
    break;
 80059ee:	e061      	b.n	8005ab4 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2263      	movs	r2, #99	; 0x63
 80059f6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80059fa:	4618      	mov	r0, r3
 80059fc:	f000 f882 	bl	8005b04 <CODEC_IO_Write>
 8005a00:	4603      	mov	r3, r0
 8005a02:	461a      	mov	r2, r3
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	4413      	add	r3, r2
 8005a08:	60fb      	str	r3, [r7, #12]
    break;
 8005a0a:	e053      	b.n	8005ab4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005a0c:	88fb      	ldrh	r3, [r7, #6]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	2283      	movs	r2, #131	; 0x83
 8005a12:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005a16:	4618      	mov	r0, r3
 8005a18:	f000 f874 	bl	8005b04 <CODEC_IO_Write>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	461a      	mov	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	60fb      	str	r3, [r7, #12]
    break;
 8005a26:	e045      	b.n	8005ab4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8005a28:	88fb      	ldrh	r3, [r7, #6]
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	22a3      	movs	r2, #163	; 0xa3
 8005a2e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005a32:	4618      	mov	r0, r3
 8005a34:	f000 f866 	bl	8005b04 <CODEC_IO_Write>
 8005a38:	4603      	mov	r3, r0
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	4413      	add	r3, r2
 8005a40:	60fb      	str	r3, [r7, #12]
    break;
 8005a42:	e037      	b.n	8005ab4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8005a44:	88fb      	ldrh	r3, [r7, #6]
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2213      	movs	r2, #19
 8005a4a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 f858 	bl	8005b04 <CODEC_IO_Write>
 8005a54:	4603      	mov	r3, r0
 8005a56:	461a      	mov	r2, r3
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	4413      	add	r3, r2
 8005a5c:	60fb      	str	r3, [r7, #12]
    break;
 8005a5e:	e029      	b.n	8005ab4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8005a60:	88fb      	ldrh	r3, [r7, #6]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2243      	movs	r2, #67	; 0x43
 8005a66:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f000 f84a 	bl	8005b04 <CODEC_IO_Write>
 8005a70:	4603      	mov	r3, r0
 8005a72:	461a      	mov	r2, r3
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	4413      	add	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]
    break;
 8005a7a:	e01b      	b.n	8005ab4 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	b2db      	uxtb	r3, r3
 8005a80:	2273      	movs	r2, #115	; 0x73
 8005a82:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 f83c 	bl	8005b04 <CODEC_IO_Write>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	461a      	mov	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	4413      	add	r3, r2
 8005a94:	60fb      	str	r3, [r7, #12]
    break; 
 8005a96:	e00d      	b.n	8005ab4 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005a98:	88fb      	ldrh	r3, [r7, #6]
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2283      	movs	r2, #131	; 0x83
 8005a9e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f000 f82e 	bl	8005b04 <CODEC_IO_Write>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	461a      	mov	r2, r3
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4413      	add	r3, r2
 8005ab0:	60fb      	str	r3, [r7, #12]
    break; 
 8005ab2:	bf00      	nop
  }
  return counter;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	00017700 	.word	0x00017700

08005ac4 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	4603      	mov	r3, r0
 8005acc:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8005ad2:	88fb      	ldrh	r3, [r7, #6]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	2100      	movs	r1, #0
 8005ada:	4618      	mov	r0, r3
 8005adc:	f000 f812 	bl	8005b04 <CODEC_IO_Write>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <wm8994_Reset+0x38>)
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8005aea:	4b05      	ldr	r3, [pc, #20]	; (8005b00 <wm8994_Reset+0x3c>)
 8005aec:	2200      	movs	r2, #0
 8005aee:	601a      	str	r2, [r3, #0]

  return counter;
 8005af0:	68fb      	ldr	r3, [r7, #12]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3710      	adds	r7, #16
 8005af6:	46bd      	mov	sp, r7
 8005af8:	bd80      	pop	{r7, pc}
 8005afa:	bf00      	nop
 8005afc:	200006f8 	.word	0x200006f8
 8005b00:	200006fc 	.word	0x200006fc

08005b04 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b084      	sub	sp, #16
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	71fb      	strb	r3, [r7, #7]
 8005b0e:	460b      	mov	r3, r1
 8005b10:	80bb      	strh	r3, [r7, #4]
 8005b12:	4613      	mov	r3, r2
 8005b14:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8005b1a:	887a      	ldrh	r2, [r7, #2]
 8005b1c:	88b9      	ldrh	r1, [r7, #4]
 8005b1e:	79fb      	ldrb	r3, [r7, #7]
 8005b20:	4618      	mov	r0, r3
 8005b22:	f7fc fc09 	bl	8002338 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	b2db      	uxtb	r3, r3
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005b38:	480d      	ldr	r0, [pc, #52]	; (8005b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005b3a:	490e      	ldr	r1, [pc, #56]	; (8005b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005b3c:	4a0e      	ldr	r2, [pc, #56]	; (8005b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005b40:	e002      	b.n	8005b48 <LoopCopyDataInit>

08005b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005b46:	3304      	adds	r3, #4

08005b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005b4c:	d3f9      	bcc.n	8005b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005b4e:	4a0b      	ldr	r2, [pc, #44]	; (8005b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005b50:	4c0b      	ldr	r4, [pc, #44]	; (8005b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005b54:	e001      	b.n	8005b5a <LoopFillZerobss>

08005b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005b58:	3204      	adds	r2, #4

08005b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005b5c:	d3fb      	bcc.n	8005b56 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005b5e:	f7fe fca5 	bl	80044ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005b62:	f00d fc87 	bl	8013474 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005b66:	f7fb f9f5 	bl	8000f54 <main>
  bx  lr    
 8005b6a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005b6c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005b74:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8005b78:	08015f18 	.word	0x08015f18
  ldr r2, =_sbss
 8005b7c:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8005b80:	2000978c 	.word	0x2000978c

08005b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b84:	e7fe      	b.n	8005b84 <ADC_IRQHandler>
	...

08005b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8005b8c:	4b08      	ldr	r3, [pc, #32]	; (8005bb0 <HAL_Init+0x28>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a07      	ldr	r2, [pc, #28]	; (8005bb0 <HAL_Init+0x28>)
 8005b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b96:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b98:	2003      	movs	r0, #3
 8005b9a:	f000 f8fc 	bl	8005d96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	f7fe fb9a 	bl	80042d8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005ba4:	f7fd ff6a 	bl	8003a7c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	40023c00 	.word	0x40023c00

08005bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005bb8:	4b06      	ldr	r3, [pc, #24]	; (8005bd4 <HAL_IncTick+0x20>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	461a      	mov	r2, r3
 8005bbe:	4b06      	ldr	r3, [pc, #24]	; (8005bd8 <HAL_IncTick+0x24>)
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	4a04      	ldr	r2, [pc, #16]	; (8005bd8 <HAL_IncTick+0x24>)
 8005bc6:	6013      	str	r3, [r2, #0]
}
 8005bc8:	bf00      	nop
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd0:	4770      	bx	lr
 8005bd2:	bf00      	nop
 8005bd4:	2000007c 	.word	0x2000007c
 8005bd8:	200092cc 	.word	0x200092cc

08005bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	af00      	add	r7, sp, #0
  return uwTick;
 8005be0:	4b03      	ldr	r3, [pc, #12]	; (8005bf0 <HAL_GetTick+0x14>)
 8005be2:	681b      	ldr	r3, [r3, #0]
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
 8005bee:	bf00      	nop
 8005bf0:	200092cc 	.word	0x200092cc

08005bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005bfc:	f7ff ffee 	bl	8005bdc <HAL_GetTick>
 8005c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c0c:	d005      	beq.n	8005c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005c0e:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <HAL_Delay+0x44>)
 8005c10:	781b      	ldrb	r3, [r3, #0]
 8005c12:	461a      	mov	r2, r3
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005c1a:	bf00      	nop
 8005c1c:	f7ff ffde 	bl	8005bdc <HAL_GetTick>
 8005c20:	4602      	mov	r2, r0
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	429a      	cmp	r2, r3
 8005c2a:	d8f7      	bhi.n	8005c1c <HAL_Delay+0x28>
  {
  }
}
 8005c2c:	bf00      	nop
 8005c2e:	bf00      	nop
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
 8005c36:	bf00      	nop
 8005c38:	2000007c 	.word	0x2000007c

08005c3c <__NVIC_SetPriorityGrouping>:
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b085      	sub	sp, #20
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f003 0307 	and.w	r3, r3, #7
 8005c4a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005c4c:	4b0b      	ldr	r3, [pc, #44]	; (8005c7c <__NVIC_SetPriorityGrouping+0x40>)
 8005c4e:	68db      	ldr	r3, [r3, #12]
 8005c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005c52:	68ba      	ldr	r2, [r7, #8]
 8005c54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005c58:	4013      	ands	r3, r2
 8005c5a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005c60:	68bb      	ldr	r3, [r7, #8]
 8005c62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005c64:	4b06      	ldr	r3, [pc, #24]	; (8005c80 <__NVIC_SetPriorityGrouping+0x44>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005c6a:	4a04      	ldr	r2, [pc, #16]	; (8005c7c <__NVIC_SetPriorityGrouping+0x40>)
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	60d3      	str	r3, [r2, #12]
}
 8005c70:	bf00      	nop
 8005c72:	3714      	adds	r7, #20
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	e000ed00 	.word	0xe000ed00
 8005c80:	05fa0000 	.word	0x05fa0000

08005c84 <__NVIC_GetPriorityGrouping>:
{
 8005c84:	b480      	push	{r7}
 8005c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c88:	4b04      	ldr	r3, [pc, #16]	; (8005c9c <__NVIC_GetPriorityGrouping+0x18>)
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	0a1b      	lsrs	r3, r3, #8
 8005c8e:	f003 0307 	and.w	r3, r3, #7
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr
 8005c9c:	e000ed00 	.word	0xe000ed00

08005ca0 <__NVIC_EnableIRQ>:
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b083      	sub	sp, #12
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	4603      	mov	r3, r0
 8005ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	db0b      	blt.n	8005cca <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005cb2:	79fb      	ldrb	r3, [r7, #7]
 8005cb4:	f003 021f 	and.w	r2, r3, #31
 8005cb8:	4907      	ldr	r1, [pc, #28]	; (8005cd8 <__NVIC_EnableIRQ+0x38>)
 8005cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cbe:	095b      	lsrs	r3, r3, #5
 8005cc0:	2001      	movs	r0, #1
 8005cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8005cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	e000e100 	.word	0xe000e100

08005cdc <__NVIC_SetPriority>:
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b083      	sub	sp, #12
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	6039      	str	r1, [r7, #0]
 8005ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	db0a      	blt.n	8005d06 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	490c      	ldr	r1, [pc, #48]	; (8005d28 <__NVIC_SetPriority+0x4c>)
 8005cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005cfa:	0112      	lsls	r2, r2, #4
 8005cfc:	b2d2      	uxtb	r2, r2
 8005cfe:	440b      	add	r3, r1
 8005d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005d04:	e00a      	b.n	8005d1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	b2da      	uxtb	r2, r3
 8005d0a:	4908      	ldr	r1, [pc, #32]	; (8005d2c <__NVIC_SetPriority+0x50>)
 8005d0c:	79fb      	ldrb	r3, [r7, #7]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	3b04      	subs	r3, #4
 8005d14:	0112      	lsls	r2, r2, #4
 8005d16:	b2d2      	uxtb	r2, r2
 8005d18:	440b      	add	r3, r1
 8005d1a:	761a      	strb	r2, [r3, #24]
}
 8005d1c:	bf00      	nop
 8005d1e:	370c      	adds	r7, #12
 8005d20:	46bd      	mov	sp, r7
 8005d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d26:	4770      	bx	lr
 8005d28:	e000e100 	.word	0xe000e100
 8005d2c:	e000ed00 	.word	0xe000ed00

08005d30 <NVIC_EncodePriority>:
{
 8005d30:	b480      	push	{r7}
 8005d32:	b089      	sub	sp, #36	; 0x24
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f003 0307 	and.w	r3, r3, #7
 8005d42:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005d44:	69fb      	ldr	r3, [r7, #28]
 8005d46:	f1c3 0307 	rsb	r3, r3, #7
 8005d4a:	2b04      	cmp	r3, #4
 8005d4c:	bf28      	it	cs
 8005d4e:	2304      	movcs	r3, #4
 8005d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005d52:	69fb      	ldr	r3, [r7, #28]
 8005d54:	3304      	adds	r3, #4
 8005d56:	2b06      	cmp	r3, #6
 8005d58:	d902      	bls.n	8005d60 <NVIC_EncodePriority+0x30>
 8005d5a:	69fb      	ldr	r3, [r7, #28]
 8005d5c:	3b03      	subs	r3, #3
 8005d5e:	e000      	b.n	8005d62 <NVIC_EncodePriority+0x32>
 8005d60:	2300      	movs	r3, #0
 8005d62:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d64:	f04f 32ff 	mov.w	r2, #4294967295
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	43da      	mvns	r2, r3
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	401a      	ands	r2, r3
 8005d74:	697b      	ldr	r3, [r7, #20]
 8005d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005d78:	f04f 31ff 	mov.w	r1, #4294967295
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8005d82:	43d9      	mvns	r1, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d88:	4313      	orrs	r3, r2
}
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	3724      	adds	r7, #36	; 0x24
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d96:	b580      	push	{r7, lr}
 8005d98:	b082      	sub	sp, #8
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f7ff ff4c 	bl	8005c3c <__NVIC_SetPriorityGrouping>
}
 8005da4:	bf00      	nop
 8005da6:	3708      	adds	r7, #8
 8005da8:	46bd      	mov	sp, r7
 8005daa:	bd80      	pop	{r7, pc}

08005dac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b086      	sub	sp, #24
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	4603      	mov	r3, r0
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
 8005db8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005dbe:	f7ff ff61 	bl	8005c84 <__NVIC_GetPriorityGrouping>
 8005dc2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	68b9      	ldr	r1, [r7, #8]
 8005dc8:	6978      	ldr	r0, [r7, #20]
 8005dca:	f7ff ffb1 	bl	8005d30 <NVIC_EncodePriority>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005dd4:	4611      	mov	r1, r2
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f7ff ff80 	bl	8005cdc <__NVIC_SetPriority>
}
 8005ddc:	bf00      	nop
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}

08005de4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7ff ff54 	bl	8005ca0 <__NVIC_EnableIRQ>
}
 8005df8:	bf00      	nop
 8005dfa:	3708      	adds	r7, #8
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b086      	sub	sp, #24
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005e08:	2300      	movs	r3, #0
 8005e0a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005e0c:	f7ff fee6 	bl	8005bdc <HAL_GetTick>
 8005e10:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e099      	b.n	8005f50 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2202      	movs	r2, #2
 8005e28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681a      	ldr	r2, [r3, #0]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	f022 0201 	bic.w	r2, r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e3c:	e00f      	b.n	8005e5e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e3e:	f7ff fecd 	bl	8005bdc <HAL_GetTick>
 8005e42:	4602      	mov	r2, r0
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	1ad3      	subs	r3, r2, r3
 8005e48:	2b05      	cmp	r3, #5
 8005e4a:	d908      	bls.n	8005e5e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2220      	movs	r2, #32
 8005e50:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2203      	movs	r2, #3
 8005e56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e078      	b.n	8005f50 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1e8      	bne.n	8005e3e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	4b38      	ldr	r3, [pc, #224]	; (8005f58 <HAL_DMA_Init+0x158>)
 8005e78:	4013      	ands	r3, r2
 8005e7a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	691b      	ldr	r3, [r3, #16]
 8005e90:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e96:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ea2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	2b04      	cmp	r3, #4
 8005eb6:	d107      	bne.n	8005ec8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	697a      	ldr	r2, [r7, #20]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	697a      	ldr	r2, [r7, #20]
 8005ece:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	695b      	ldr	r3, [r3, #20]
 8005ed6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	f023 0307 	bic.w	r3, r3, #7
 8005ede:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ee4:	697a      	ldr	r2, [r7, #20]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	2b04      	cmp	r3, #4
 8005ef0:	d117      	bne.n	8005f22 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ef6:	697a      	ldr	r2, [r7, #20]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00e      	beq.n	8005f22 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f000 fb03 	bl	8006510 <DMA_CheckFifoParam>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d008      	beq.n	8005f22 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2240      	movs	r2, #64	; 0x40
 8005f14:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005f1e:	2301      	movs	r3, #1
 8005f20:	e016      	b.n	8005f50 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f000 faba 	bl	80064a4 <DMA_CalcBaseAndBitshift>
 8005f30:	4603      	mov	r3, r0
 8005f32:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f38:	223f      	movs	r2, #63	; 0x3f
 8005f3a:	409a      	lsls	r2, r3
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2200      	movs	r2, #0
 8005f44:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3718      	adds	r7, #24
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}
 8005f58:	f010803f 	.word	0xf010803f

08005f5c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b084      	sub	sp, #16
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e050      	b.n	8006010 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d101      	bne.n	8005f7e <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005f7a:	2302      	movs	r3, #2
 8005f7c:	e048      	b.n	8006010 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f022 0201 	bic.w	r2, r2, #1
 8005f8c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2200      	movs	r2, #0
 8005fac:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2221      	movs	r2, #33	; 0x21
 8005fbc:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005fbe:	6878      	ldr	r0, [r7, #4]
 8005fc0:	f000 fa70 	bl	80064a4 <DMA_CalcBaseAndBitshift>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fcc:	223f      	movs	r2, #63	; 0x3f
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	2200      	movs	r2, #0
 8006002:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800600e:	2300      	movs	r3, #0
}
 8006010:	4618      	mov	r0, r3
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006018:	b580      	push	{r7, lr}
 800601a:	b086      	sub	sp, #24
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	60b9      	str	r1, [r7, #8]
 8006022:	607a      	str	r2, [r7, #4]
 8006024:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006026:	2300      	movs	r3, #0
 8006028:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800602e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006036:	2b01      	cmp	r3, #1
 8006038:	d101      	bne.n	800603e <HAL_DMA_Start_IT+0x26>
 800603a:	2302      	movs	r3, #2
 800603c:	e048      	b.n	80060d0 <HAL_DMA_Start_IT+0xb8>
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800604c:	b2db      	uxtb	r3, r3
 800604e:	2b01      	cmp	r3, #1
 8006050:	d137      	bne.n	80060c2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2202      	movs	r2, #2
 8006056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	68b9      	ldr	r1, [r7, #8]
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 f9ee 	bl	8006448 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	223f      	movs	r2, #63	; 0x3f
 8006072:	409a      	lsls	r2, r3
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0216 	orr.w	r2, r2, #22
 8006086:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695a      	ldr	r2, [r3, #20]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006096:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609c:	2b00      	cmp	r3, #0
 800609e:	d007      	beq.n	80060b0 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f042 0208 	orr.w	r2, r2, #8
 80060ae:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	681a      	ldr	r2, [r3, #0]
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	e005      	b.n	80060ce <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	2200      	movs	r2, #0
 80060c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80060ca:	2302      	movs	r3, #2
 80060cc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80060ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	2b02      	cmp	r3, #2
 80060ea:	d004      	beq.n	80060f6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2280      	movs	r2, #128	; 0x80
 80060f0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	e00c      	b.n	8006110 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2205      	movs	r2, #5
 80060fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f022 0201 	bic.w	r2, r2, #1
 800610c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b086      	sub	sp, #24
 8006120:	af00      	add	r7, sp, #0
 8006122:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8006124:	2300      	movs	r3, #0
 8006126:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8006128:	4b92      	ldr	r3, [pc, #584]	; (8006374 <HAL_DMA_IRQHandler+0x258>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a92      	ldr	r2, [pc, #584]	; (8006378 <HAL_DMA_IRQHandler+0x25c>)
 800612e:	fba2 2303 	umull	r2, r3, r2, r3
 8006132:	0a9b      	lsrs	r3, r3, #10
 8006134:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800613a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006146:	2208      	movs	r2, #8
 8006148:	409a      	lsls	r2, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4013      	ands	r3, r2
 800614e:	2b00      	cmp	r3, #0
 8006150:	d01a      	beq.n	8006188 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0304 	and.w	r3, r3, #4
 800615c:	2b00      	cmp	r3, #0
 800615e:	d013      	beq.n	8006188 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f022 0204 	bic.w	r2, r2, #4
 800616e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006174:	2208      	movs	r2, #8
 8006176:	409a      	lsls	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006180:	f043 0201 	orr.w	r2, r3, #1
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800618c:	2201      	movs	r2, #1
 800618e:	409a      	lsls	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4013      	ands	r3, r2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d012      	beq.n	80061be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695b      	ldr	r3, [r3, #20]
 800619e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d00b      	beq.n	80061be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061aa:	2201      	movs	r2, #1
 80061ac:	409a      	lsls	r2, r3
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061b6:	f043 0202 	orr.w	r2, r3, #2
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c2:	2204      	movs	r2, #4
 80061c4:	409a      	lsls	r2, r3
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	4013      	ands	r3, r2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d012      	beq.n	80061f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0302 	and.w	r3, r3, #2
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00b      	beq.n	80061f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061e0:	2204      	movs	r2, #4
 80061e2:	409a      	lsls	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061ec:	f043 0204 	orr.w	r2, r3, #4
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061f8:	2210      	movs	r2, #16
 80061fa:	409a      	lsls	r2, r3
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4013      	ands	r3, r2
 8006200:	2b00      	cmp	r3, #0
 8006202:	d043      	beq.n	800628c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f003 0308 	and.w	r3, r3, #8
 800620e:	2b00      	cmp	r3, #0
 8006210:	d03c      	beq.n	800628c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006216:	2210      	movs	r2, #16
 8006218:	409a      	lsls	r2, r3
 800621a:	693b      	ldr	r3, [r7, #16]
 800621c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d018      	beq.n	800625e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006236:	2b00      	cmp	r3, #0
 8006238:	d108      	bne.n	800624c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	2b00      	cmp	r3, #0
 8006240:	d024      	beq.n	800628c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	4798      	blx	r3
 800624a:	e01f      	b.n	800628c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006250:	2b00      	cmp	r3, #0
 8006252:	d01b      	beq.n	800628c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006258:	6878      	ldr	r0, [r7, #4]
 800625a:	4798      	blx	r3
 800625c:	e016      	b.n	800628c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006268:	2b00      	cmp	r3, #0
 800626a:	d107      	bne.n	800627c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f022 0208 	bic.w	r2, r2, #8
 800627a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d003      	beq.n	800628c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006290:	2220      	movs	r2, #32
 8006292:	409a      	lsls	r2, r3
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	4013      	ands	r3, r2
 8006298:	2b00      	cmp	r3, #0
 800629a:	f000 808e 	beq.w	80063ba <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0310 	and.w	r3, r3, #16
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	f000 8086 	beq.w	80063ba <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062b2:	2220      	movs	r2, #32
 80062b4:	409a      	lsls	r2, r3
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80062c0:	b2db      	uxtb	r3, r3
 80062c2:	2b05      	cmp	r3, #5
 80062c4:	d136      	bne.n	8006334 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	f022 0216 	bic.w	r2, r2, #22
 80062d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d103      	bne.n	80062f6 <HAL_DMA_IRQHandler+0x1da>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d007      	beq.n	8006306 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0208 	bic.w	r2, r2, #8
 8006304:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800630a:	223f      	movs	r2, #63	; 0x3f
 800630c:	409a      	lsls	r2, r3
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2201      	movs	r2, #1
 800631e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006326:	2b00      	cmp	r3, #0
 8006328:	d07d      	beq.n	8006426 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	4798      	blx	r3
        }
        return;
 8006332:	e078      	b.n	8006426 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01c      	beq.n	800637c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d108      	bne.n	8006362 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006354:	2b00      	cmp	r3, #0
 8006356:	d030      	beq.n	80063ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	4798      	blx	r3
 8006360:	e02b      	b.n	80063ba <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006366:	2b00      	cmp	r3, #0
 8006368:	d027      	beq.n	80063ba <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	4798      	blx	r3
 8006372:	e022      	b.n	80063ba <HAL_DMA_IRQHandler+0x29e>
 8006374:	20000040 	.word	0x20000040
 8006378:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10f      	bne.n	80063aa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0210 	bic.w	r2, r2, #16
 8006398:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2200      	movs	r2, #0
 800639e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2201      	movs	r2, #1
 80063a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d003      	beq.n	80063ba <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d032      	beq.n	8006428 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c6:	f003 0301 	and.w	r3, r3, #1
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d022      	beq.n	8006414 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2205      	movs	r2, #5
 80063d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f022 0201 	bic.w	r2, r2, #1
 80063e4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	3301      	adds	r3, #1
 80063ea:	60bb      	str	r3, [r7, #8]
 80063ec:	697a      	ldr	r2, [r7, #20]
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d307      	bcc.n	8006402 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	f003 0301 	and.w	r3, r3, #1
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d1f2      	bne.n	80063e6 <HAL_DMA_IRQHandler+0x2ca>
 8006400:	e000      	b.n	8006404 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8006402:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	2201      	movs	r2, #1
 8006410:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	4798      	blx	r3
 8006424:	e000      	b.n	8006428 <HAL_DMA_IRQHandler+0x30c>
        return;
 8006426:	bf00      	nop
    }
  }
}
 8006428:	3718      	adds	r7, #24
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop

08006430 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 800643c:	4618      	mov	r0, r3
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
 8006454:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006464:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	683a      	ldr	r2, [r7, #0]
 800646c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	689b      	ldr	r3, [r3, #8]
 8006472:	2b40      	cmp	r3, #64	; 0x40
 8006474:	d108      	bne.n	8006488 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68ba      	ldr	r2, [r7, #8]
 8006484:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006486:	e007      	b.n	8006498 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	60da      	str	r2, [r3, #12]
}
 8006498:	bf00      	nop
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	b2db      	uxtb	r3, r3
 80064b2:	3b10      	subs	r3, #16
 80064b4:	4a13      	ldr	r2, [pc, #76]	; (8006504 <DMA_CalcBaseAndBitshift+0x60>)
 80064b6:	fba2 2303 	umull	r2, r3, r2, r3
 80064ba:	091b      	lsrs	r3, r3, #4
 80064bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80064be:	4a12      	ldr	r2, [pc, #72]	; (8006508 <DMA_CalcBaseAndBitshift+0x64>)
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	4413      	add	r3, r2
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d908      	bls.n	80064e4 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	461a      	mov	r2, r3
 80064d8:	4b0c      	ldr	r3, [pc, #48]	; (800650c <DMA_CalcBaseAndBitshift+0x68>)
 80064da:	4013      	ands	r3, r2
 80064dc:	1d1a      	adds	r2, r3, #4
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	659a      	str	r2, [r3, #88]	; 0x58
 80064e2:	e006      	b.n	80064f2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	461a      	mov	r2, r3
 80064ea:	4b08      	ldr	r3, [pc, #32]	; (800650c <DMA_CalcBaseAndBitshift+0x68>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	687a      	ldr	r2, [r7, #4]
 80064f0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80064f6:	4618      	mov	r0, r3
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006500:	4770      	bx	lr
 8006502:	bf00      	nop
 8006504:	aaaaaaab 	.word	0xaaaaaaab
 8006508:	08015e18 	.word	0x08015e18
 800650c:	fffffc00 	.word	0xfffffc00

08006510 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006518:	2300      	movs	r3, #0
 800651a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006520:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	699b      	ldr	r3, [r3, #24]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d11f      	bne.n	800656a <DMA_CheckFifoParam+0x5a>
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	2b03      	cmp	r3, #3
 800652e:	d856      	bhi.n	80065de <DMA_CheckFifoParam+0xce>
 8006530:	a201      	add	r2, pc, #4	; (adr r2, 8006538 <DMA_CheckFifoParam+0x28>)
 8006532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006536:	bf00      	nop
 8006538:	08006549 	.word	0x08006549
 800653c:	0800655b 	.word	0x0800655b
 8006540:	08006549 	.word	0x08006549
 8006544:	080065df 	.word	0x080065df
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d046      	beq.n	80065e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006558:	e043      	b.n	80065e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800655e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006562:	d140      	bne.n	80065e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006568:	e03d      	b.n	80065e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006572:	d121      	bne.n	80065b8 <DMA_CheckFifoParam+0xa8>
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	2b03      	cmp	r3, #3
 8006578:	d837      	bhi.n	80065ea <DMA_CheckFifoParam+0xda>
 800657a:	a201      	add	r2, pc, #4	; (adr r2, 8006580 <DMA_CheckFifoParam+0x70>)
 800657c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006580:	08006591 	.word	0x08006591
 8006584:	08006597 	.word	0x08006597
 8006588:	08006591 	.word	0x08006591
 800658c:	080065a9 	.word	0x080065a9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	73fb      	strb	r3, [r7, #15]
      break;
 8006594:	e030      	b.n	80065f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d025      	beq.n	80065ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80065a6:	e022      	b.n	80065ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80065b0:	d11f      	bne.n	80065f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80065b6:	e01c      	b.n	80065f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2b02      	cmp	r3, #2
 80065bc:	d903      	bls.n	80065c6 <DMA_CheckFifoParam+0xb6>
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2b03      	cmp	r3, #3
 80065c2:	d003      	beq.n	80065cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80065c4:	e018      	b.n	80065f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80065c6:	2301      	movs	r3, #1
 80065c8:	73fb      	strb	r3, [r7, #15]
      break;
 80065ca:	e015      	b.n	80065f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d00e      	beq.n	80065f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80065d8:	2301      	movs	r3, #1
 80065da:	73fb      	strb	r3, [r7, #15]
      break;
 80065dc:	e00b      	b.n	80065f6 <DMA_CheckFifoParam+0xe6>
      break;
 80065de:	bf00      	nop
 80065e0:	e00a      	b.n	80065f8 <DMA_CheckFifoParam+0xe8>
      break;
 80065e2:	bf00      	nop
 80065e4:	e008      	b.n	80065f8 <DMA_CheckFifoParam+0xe8>
      break;
 80065e6:	bf00      	nop
 80065e8:	e006      	b.n	80065f8 <DMA_CheckFifoParam+0xe8>
      break;
 80065ea:	bf00      	nop
 80065ec:	e004      	b.n	80065f8 <DMA_CheckFifoParam+0xe8>
      break;
 80065ee:	bf00      	nop
 80065f0:	e002      	b.n	80065f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80065f2:	bf00      	nop
 80065f4:	e000      	b.n	80065f8 <DMA_CheckFifoParam+0xe8>
      break;
 80065f6:	bf00      	nop
    }
  } 
  
  return status; 
 80065f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop

08006608 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b082      	sub	sp, #8
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d101      	bne.n	800661a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006616:	2301      	movs	r3, #1
 8006618:	e039      	b.n	800668e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006620:	b2db      	uxtb	r3, r3
 8006622:	2b00      	cmp	r3, #0
 8006624:	d106      	bne.n	8006634 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f7fd fa4c 	bl	8003acc <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2202      	movs	r2, #2
 8006638:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006658:	f023 0107 	bic.w	r1, r3, #7
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	430a      	orrs	r2, r1
 8006666:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800666e:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <HAL_DMA2D_Init+0x90>)
 8006670:	4013      	ands	r3, r2
 8006672:	687a      	ldr	r2, [r7, #4]
 8006674:	68d1      	ldr	r1, [r2, #12]
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	430b      	orrs	r3, r1
 800667c:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2201      	movs	r2, #1
 8006688:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	4618      	mov	r0, r3
 8006690:	3708      	adds	r7, #8
 8006692:	46bd      	mov	sp, r7
 8006694:	bd80      	pop	{r7, pc}
 8006696:	bf00      	nop
 8006698:	ffffc000 	.word	0xffffc000

0800669c <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b086      	sub	sp, #24
 80066a0:	af02      	add	r7, sp, #8
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]
 80066a8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d101      	bne.n	80066b8 <HAL_DMA2D_Start+0x1c>
 80066b4:	2302      	movs	r3, #2
 80066b6:	e018      	b.n	80066ea <HAL_DMA2D_Start+0x4e>
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2201      	movs	r2, #1
 80066bc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2202      	movs	r2, #2
 80066c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80066c8:	69bb      	ldr	r3, [r7, #24]
 80066ca:	9300      	str	r3, [sp, #0]
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	687a      	ldr	r2, [r7, #4]
 80066d0:	68b9      	ldr	r1, [r7, #8]
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 f988 	bl	80069e8 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0201 	orr.w	r2, r2, #1
 80066e6:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3710      	adds	r7, #16
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b086      	sub	sp, #24
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	6078      	str	r0, [r7, #4]
 80066fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0301 	and.w	r3, r3, #1
 800670a:	2b00      	cmp	r3, #0
 800670c:	d056      	beq.n	80067bc <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800670e:	f7ff fa65 	bl	8005bdc <HAL_GetTick>
 8006712:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006714:	e04b      	b.n	80067ae <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006724:	2b00      	cmp	r3, #0
 8006726:	d023      	beq.n	8006770 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f003 0320 	and.w	r3, r3, #32
 800672e:	2b00      	cmp	r3, #0
 8006730:	d005      	beq.n	800673e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006736:	f043 0202 	orr.w	r2, r3, #2
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	f003 0301 	and.w	r3, r3, #1
 8006744:	2b00      	cmp	r3, #0
 8006746:	d005      	beq.n	8006754 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800674c:	f043 0201 	orr.w	r2, r3, #1
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2221      	movs	r2, #33	; 0x21
 800675a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	2204      	movs	r2, #4
 8006760:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0a5      	b.n	80068bc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006776:	d01a      	beq.n	80067ae <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006778:	f7ff fa30 	bl	8005bdc <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	429a      	cmp	r2, r3
 8006786:	d302      	bcc.n	800678e <HAL_DMA2D_PollForTransfer+0x9c>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10f      	bne.n	80067ae <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006792:	f043 0220 	orr.w	r2, r3, #32
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2203      	movs	r2, #3
 800679e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80067aa:	2303      	movs	r3, #3
 80067ac:	e086      	b.n	80068bc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	f003 0302 	and.w	r3, r3, #2
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d0ac      	beq.n	8006716 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	69db      	ldr	r3, [r3, #28]
 80067c2:	f003 0320 	and.w	r3, r3, #32
 80067c6:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067ce:	f003 0320 	and.w	r3, r3, #32
 80067d2:	693a      	ldr	r2, [r7, #16]
 80067d4:	4313      	orrs	r3, r2
 80067d6:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d061      	beq.n	80068a2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80067de:	f7ff f9fd 	bl	8005bdc <HAL_GetTick>
 80067e2:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80067e4:	e056      	b.n	8006894 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f003 0329 	and.w	r3, r3, #41	; 0x29
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d02e      	beq.n	8006856 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f003 0308 	and.w	r3, r3, #8
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006806:	f043 0204 	orr.w	r2, r3, #4
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	f003 0320 	and.w	r3, r3, #32
 8006814:	2b00      	cmp	r3, #0
 8006816:	d005      	beq.n	8006824 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681c:	f043 0202 	orr.w	r2, r3, #2
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006832:	f043 0201 	orr.w	r2, r3, #1
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2229      	movs	r2, #41	; 0x29
 8006840:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2204      	movs	r2, #4
 8006846:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006852:	2301      	movs	r3, #1
 8006854:	e032      	b.n	80068bc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800685c:	d01a      	beq.n	8006894 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800685e:	f7ff f9bd 	bl	8005bdc <HAL_GetTick>
 8006862:	4602      	mov	r2, r0
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	1ad3      	subs	r3, r2, r3
 8006868:	683a      	ldr	r2, [r7, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	d302      	bcc.n	8006874 <HAL_DMA2D_PollForTransfer+0x182>
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d10f      	bne.n	8006894 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006878:	f043 0220 	orr.w	r2, r3, #32
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2203      	movs	r2, #3
 8006884:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2200      	movs	r2, #0
 800688c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	e013      	b.n	80068bc <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f003 0310 	and.w	r3, r3, #16
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d0a1      	beq.n	80067e6 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2212      	movs	r2, #18
 80068a8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2201      	movs	r2, #1
 80068ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80068ba:	2300      	movs	r3, #0
}
 80068bc:	4618      	mov	r0, r3
 80068be:	3718      	adds	r7, #24
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	685b      	ldr	r3, [r3, #4]
 80068d2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80068dc:	2b01      	cmp	r3, #1
 80068de:	d101      	bne.n	80068e4 <HAL_DMA2D_ConfigLayer+0x20>
 80068e0:	2302      	movs	r3, #2
 80068e2:	e079      	b.n	80069d8 <HAL_DMA2D_ConfigLayer+0x114>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2201      	movs	r2, #1
 80068e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	011b      	lsls	r3, r3, #4
 80068f8:	3318      	adds	r3, #24
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	4413      	add	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006900:	693b      	ldr	r3, [r7, #16]
 8006902:	685a      	ldr	r2, [r3, #4]
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	689b      	ldr	r3, [r3, #8]
 8006908:	041b      	lsls	r3, r3, #16
 800690a:	4313      	orrs	r3, r2
 800690c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800690e:	4b35      	ldr	r3, [pc, #212]	; (80069e4 <HAL_DMA2D_ConfigLayer+0x120>)
 8006910:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	2b0a      	cmp	r3, #10
 8006918:	d003      	beq.n	8006922 <HAL_DMA2D_ConfigLayer+0x5e>
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	2b09      	cmp	r3, #9
 8006920:	d107      	bne.n	8006932 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800692a:	697a      	ldr	r2, [r7, #20]
 800692c:	4313      	orrs	r3, r2
 800692e:	617b      	str	r3, [r7, #20]
 8006930:	e005      	b.n	800693e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	68db      	ldr	r3, [r3, #12]
 8006936:	061b      	lsls	r3, r3, #24
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	4313      	orrs	r3, r2
 800693c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d120      	bne.n	8006986 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	43db      	mvns	r3, r3
 800694e:	ea02 0103 	and.w	r1, r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	430a      	orrs	r2, r1
 800695a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	693a      	ldr	r2, [r7, #16]
 8006962:	6812      	ldr	r2, [r2, #0]
 8006964:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	2b0a      	cmp	r3, #10
 800696c:	d003      	beq.n	8006976 <HAL_DMA2D_ConfigLayer+0xb2>
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	685b      	ldr	r3, [r3, #4]
 8006972:	2b09      	cmp	r3, #9
 8006974:	d127      	bne.n	80069c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	68da      	ldr	r2, [r3, #12]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006982:	629a      	str	r2, [r3, #40]	; 0x28
 8006984:	e01f      	b.n	80069c6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	69da      	ldr	r2, [r3, #28]
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	43db      	mvns	r3, r3
 8006990:	ea02 0103 	and.w	r1, r2, r3
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	697a      	ldr	r2, [r7, #20]
 800699a:	430a      	orrs	r2, r1
 800699c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	693a      	ldr	r2, [r7, #16]
 80069a4:	6812      	ldr	r2, [r2, #0]
 80069a6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	685b      	ldr	r3, [r3, #4]
 80069ac:	2b0a      	cmp	r3, #10
 80069ae:	d003      	beq.n	80069b8 <HAL_DMA2D_ConfigLayer+0xf4>
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	685b      	ldr	r3, [r3, #4]
 80069b4:	2b09      	cmp	r3, #9
 80069b6:	d106      	bne.n	80069c6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	68da      	ldr	r2, [r3, #12]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80069c4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	371c      	adds	r7, #28
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr
 80069e4:	ff03000f 	.word	0xff03000f

080069e8 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 80069e8:	b480      	push	{r7}
 80069ea:	b08b      	sub	sp, #44	; 0x2c
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
 80069f4:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fc:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	041a      	lsls	r2, r3, #16
 8006a04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a06:	431a      	orrs	r2, r3
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	687a      	ldr	r2, [r7, #4]
 8006a16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	685b      	ldr	r3, [r3, #4]
 8006a1c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006a20:	d174      	bne.n	8006b0c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006a28:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006a2a:	68bb      	ldr	r3, [r7, #8]
 8006a2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006a30:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006a38:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	b2db      	uxtb	r3, r3
 8006a3e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d108      	bne.n	8006a5a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8006a48:	69ba      	ldr	r2, [r7, #24]
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	6a3b      	ldr	r3, [r7, #32]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	697a      	ldr	r2, [r7, #20]
 8006a54:	4313      	orrs	r3, r2
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
 8006a58:	e053      	b.n	8006b02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	2b01      	cmp	r3, #1
 8006a60:	d106      	bne.n	8006a70 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006a62:	69ba      	ldr	r2, [r7, #24]
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	697a      	ldr	r2, [r7, #20]
 8006a6a:	4313      	orrs	r3, r2
 8006a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a6e:	e048      	b.n	8006b02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	2b02      	cmp	r3, #2
 8006a76:	d111      	bne.n	8006a9c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	0cdb      	lsrs	r3, r3, #19
 8006a7c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	0a9b      	lsrs	r3, r3, #10
 8006a82:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	08db      	lsrs	r3, r3, #3
 8006a88:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006a8a:	69bb      	ldr	r3, [r7, #24]
 8006a8c:	015a      	lsls	r2, r3, #5
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	02db      	lsls	r3, r3, #11
 8006a92:	4313      	orrs	r3, r2
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	4313      	orrs	r3, r2
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
 8006a9a:	e032      	b.n	8006b02 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	689b      	ldr	r3, [r3, #8]
 8006aa0:	2b03      	cmp	r3, #3
 8006aa2:	d117      	bne.n	8006ad4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006aa4:	6a3b      	ldr	r3, [r7, #32]
 8006aa6:	0fdb      	lsrs	r3, r3, #31
 8006aa8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	0cdb      	lsrs	r3, r3, #19
 8006aae:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	0adb      	lsrs	r3, r3, #11
 8006ab4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	08db      	lsrs	r3, r3, #3
 8006aba:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	015a      	lsls	r2, r3, #5
 8006ac0:	69fb      	ldr	r3, [r7, #28]
 8006ac2:	029b      	lsls	r3, r3, #10
 8006ac4:	431a      	orrs	r2, r3
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	03db      	lsls	r3, r3, #15
 8006aca:	4313      	orrs	r3, r2
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad2:	e016      	b.n	8006b02 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	0f1b      	lsrs	r3, r3, #28
 8006ad8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	0d1b      	lsrs	r3, r3, #20
 8006ade:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006ae0:	69bb      	ldr	r3, [r7, #24]
 8006ae2:	0b1b      	lsrs	r3, r3, #12
 8006ae4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	091b      	lsrs	r3, r3, #4
 8006aea:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	011a      	lsls	r2, r3, #4
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	021b      	lsls	r3, r3, #8
 8006af4:	431a      	orrs	r2, r3
 8006af6:	6a3b      	ldr	r3, [r7, #32]
 8006af8:	031b      	lsls	r3, r3, #12
 8006afa:	4313      	orrs	r3, r2
 8006afc:	697a      	ldr	r2, [r7, #20]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b08:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006b0a:	e003      	b.n	8006b14 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68ba      	ldr	r2, [r7, #8]
 8006b12:	60da      	str	r2, [r3, #12]
}
 8006b14:	bf00      	nop
 8006b16:	372c      	adds	r7, #44	; 0x2c
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b089      	sub	sp, #36	; 0x24
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
 8006b28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006b2e:	2300      	movs	r3, #0
 8006b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006b32:	2300      	movs	r3, #0
 8006b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006b36:	2300      	movs	r3, #0
 8006b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	e175      	b.n	8006e2c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006b40:	2201      	movs	r2, #1
 8006b42:	69fb      	ldr	r3, [r7, #28]
 8006b44:	fa02 f303 	lsl.w	r3, r2, r3
 8006b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	4013      	ands	r3, r2
 8006b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006b54:	693a      	ldr	r2, [r7, #16]
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	f040 8164 	bne.w	8006e26 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	d00b      	beq.n	8006b7e <HAL_GPIO_Init+0x5e>
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d007      	beq.n	8006b7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006b72:	2b11      	cmp	r3, #17
 8006b74:	d003      	beq.n	8006b7e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	2b12      	cmp	r3, #18
 8006b7c:	d130      	bne.n	8006be0 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	2203      	movs	r2, #3
 8006b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b8e:	43db      	mvns	r3, r3
 8006b90:	69ba      	ldr	r2, [r7, #24]
 8006b92:	4013      	ands	r3, r2
 8006b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	68da      	ldr	r2, [r3, #12]
 8006b9a:	69fb      	ldr	r3, [r7, #28]
 8006b9c:	005b      	lsls	r3, r3, #1
 8006b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba2:	69ba      	ldr	r2, [r7, #24]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	69ba      	ldr	r2, [r7, #24]
 8006bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006bb4:	2201      	movs	r2, #1
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8006bbc:	43db      	mvns	r3, r3
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	4013      	ands	r3, r2
 8006bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	091b      	lsrs	r3, r3, #4
 8006bca:	f003 0201 	and.w	r2, r3, #1
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd4:	69ba      	ldr	r2, [r7, #24]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	69ba      	ldr	r2, [r7, #24]
 8006bde:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	005b      	lsls	r3, r3, #1
 8006bea:	2203      	movs	r2, #3
 8006bec:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf0:	43db      	mvns	r3, r3
 8006bf2:	69ba      	ldr	r2, [r7, #24]
 8006bf4:	4013      	ands	r3, r2
 8006bf6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689a      	ldr	r2, [r3, #8]
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	005b      	lsls	r3, r3, #1
 8006c00:	fa02 f303 	lsl.w	r3, r2, r3
 8006c04:	69ba      	ldr	r2, [r7, #24]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d003      	beq.n	8006c20 <HAL_GPIO_Init+0x100>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	2b12      	cmp	r3, #18
 8006c1e:	d123      	bne.n	8006c68 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006c20:	69fb      	ldr	r3, [r7, #28]
 8006c22:	08da      	lsrs	r2, r3, #3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	3208      	adds	r2, #8
 8006c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	220f      	movs	r2, #15
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	43db      	mvns	r3, r3
 8006c3e:	69ba      	ldr	r2, [r7, #24]
 8006c40:	4013      	ands	r3, r2
 8006c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	691a      	ldr	r2, [r3, #16]
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	f003 0307 	and.w	r3, r3, #7
 8006c4e:	009b      	lsls	r3, r3, #2
 8006c50:	fa02 f303 	lsl.w	r3, r2, r3
 8006c54:	69ba      	ldr	r2, [r7, #24]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006c5a:	69fb      	ldr	r3, [r7, #28]
 8006c5c:	08da      	lsrs	r2, r3, #3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	3208      	adds	r2, #8
 8006c62:	69b9      	ldr	r1, [r7, #24]
 8006c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006c6e:	69fb      	ldr	r3, [r7, #28]
 8006c70:	005b      	lsls	r3, r3, #1
 8006c72:	2203      	movs	r2, #3
 8006c74:	fa02 f303 	lsl.w	r3, r2, r3
 8006c78:	43db      	mvns	r3, r3
 8006c7a:	69ba      	ldr	r2, [r7, #24]
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f003 0203 	and.w	r2, r3, #3
 8006c88:	69fb      	ldr	r3, [r7, #28]
 8006c8a:	005b      	lsls	r3, r3, #1
 8006c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8006c90:	69ba      	ldr	r2, [r7, #24]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	69ba      	ldr	r2, [r7, #24]
 8006c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 80be 	beq.w	8006e26 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006caa:	4b66      	ldr	r3, [pc, #408]	; (8006e44 <HAL_GPIO_Init+0x324>)
 8006cac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cae:	4a65      	ldr	r2, [pc, #404]	; (8006e44 <HAL_GPIO_Init+0x324>)
 8006cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006cb4:	6453      	str	r3, [r2, #68]	; 0x44
 8006cb6:	4b63      	ldr	r3, [pc, #396]	; (8006e44 <HAL_GPIO_Init+0x324>)
 8006cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006cbe:	60fb      	str	r3, [r7, #12]
 8006cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006cc2:	4a61      	ldr	r2, [pc, #388]	; (8006e48 <HAL_GPIO_Init+0x328>)
 8006cc4:	69fb      	ldr	r3, [r7, #28]
 8006cc6:	089b      	lsrs	r3, r3, #2
 8006cc8:	3302      	adds	r3, #2
 8006cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006cd0:	69fb      	ldr	r3, [r7, #28]
 8006cd2:	f003 0303 	and.w	r3, r3, #3
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	220f      	movs	r2, #15
 8006cda:	fa02 f303 	lsl.w	r3, r2, r3
 8006cde:	43db      	mvns	r3, r3
 8006ce0:	69ba      	ldr	r2, [r7, #24]
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	4a58      	ldr	r2, [pc, #352]	; (8006e4c <HAL_GPIO_Init+0x32c>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d037      	beq.n	8006d5e <HAL_GPIO_Init+0x23e>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	4a57      	ldr	r2, [pc, #348]	; (8006e50 <HAL_GPIO_Init+0x330>)
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d031      	beq.n	8006d5a <HAL_GPIO_Init+0x23a>
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4a56      	ldr	r2, [pc, #344]	; (8006e54 <HAL_GPIO_Init+0x334>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d02b      	beq.n	8006d56 <HAL_GPIO_Init+0x236>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	4a55      	ldr	r2, [pc, #340]	; (8006e58 <HAL_GPIO_Init+0x338>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d025      	beq.n	8006d52 <HAL_GPIO_Init+0x232>
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4a54      	ldr	r2, [pc, #336]	; (8006e5c <HAL_GPIO_Init+0x33c>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d01f      	beq.n	8006d4e <HAL_GPIO_Init+0x22e>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	4a53      	ldr	r2, [pc, #332]	; (8006e60 <HAL_GPIO_Init+0x340>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d019      	beq.n	8006d4a <HAL_GPIO_Init+0x22a>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	4a52      	ldr	r2, [pc, #328]	; (8006e64 <HAL_GPIO_Init+0x344>)
 8006d1a:	4293      	cmp	r3, r2
 8006d1c:	d013      	beq.n	8006d46 <HAL_GPIO_Init+0x226>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	4a51      	ldr	r2, [pc, #324]	; (8006e68 <HAL_GPIO_Init+0x348>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d00d      	beq.n	8006d42 <HAL_GPIO_Init+0x222>
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	4a50      	ldr	r2, [pc, #320]	; (8006e6c <HAL_GPIO_Init+0x34c>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d007      	beq.n	8006d3e <HAL_GPIO_Init+0x21e>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	4a4f      	ldr	r2, [pc, #316]	; (8006e70 <HAL_GPIO_Init+0x350>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d101      	bne.n	8006d3a <HAL_GPIO_Init+0x21a>
 8006d36:	2309      	movs	r3, #9
 8006d38:	e012      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d3a:	230a      	movs	r3, #10
 8006d3c:	e010      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d3e:	2308      	movs	r3, #8
 8006d40:	e00e      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d42:	2307      	movs	r3, #7
 8006d44:	e00c      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d46:	2306      	movs	r3, #6
 8006d48:	e00a      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d4a:	2305      	movs	r3, #5
 8006d4c:	e008      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d4e:	2304      	movs	r3, #4
 8006d50:	e006      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d52:	2303      	movs	r3, #3
 8006d54:	e004      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d56:	2302      	movs	r3, #2
 8006d58:	e002      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e000      	b.n	8006d60 <HAL_GPIO_Init+0x240>
 8006d5e:	2300      	movs	r3, #0
 8006d60:	69fa      	ldr	r2, [r7, #28]
 8006d62:	f002 0203 	and.w	r2, r2, #3
 8006d66:	0092      	lsls	r2, r2, #2
 8006d68:	4093      	lsls	r3, r2
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	4313      	orrs	r3, r2
 8006d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006d70:	4935      	ldr	r1, [pc, #212]	; (8006e48 <HAL_GPIO_Init+0x328>)
 8006d72:	69fb      	ldr	r3, [r7, #28]
 8006d74:	089b      	lsrs	r3, r3, #2
 8006d76:	3302      	adds	r3, #2
 8006d78:	69ba      	ldr	r2, [r7, #24]
 8006d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006d7e:	4b3d      	ldr	r3, [pc, #244]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	43db      	mvns	r3, r3
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	4013      	ands	r3, r2
 8006d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006d8e:	683b      	ldr	r3, [r7, #0]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d003      	beq.n	8006da2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006d9a:	69ba      	ldr	r2, [r7, #24]
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006da2:	4a34      	ldr	r2, [pc, #208]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006da8:	4b32      	ldr	r3, [pc, #200]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006daa:	685b      	ldr	r3, [r3, #4]
 8006dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	43db      	mvns	r3, r3
 8006db2:	69ba      	ldr	r2, [r7, #24]
 8006db4:	4013      	ands	r3, r2
 8006db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d003      	beq.n	8006dcc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	4313      	orrs	r3, r2
 8006dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006dcc:	4a29      	ldr	r2, [pc, #164]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006dd2:	4b28      	ldr	r3, [pc, #160]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006dd4:	689b      	ldr	r3, [r3, #8]
 8006dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	43db      	mvns	r3, r3
 8006ddc:	69ba      	ldr	r2, [r7, #24]
 8006dde:	4013      	ands	r3, r2
 8006de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006de2:	683b      	ldr	r3, [r7, #0]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006dee:	69ba      	ldr	r2, [r7, #24]
 8006df0:	693b      	ldr	r3, [r7, #16]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006df6:	4a1f      	ldr	r2, [pc, #124]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006dfc:	4b1d      	ldr	r3, [pc, #116]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006dfe:	68db      	ldr	r3, [r3, #12]
 8006e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	43db      	mvns	r3, r3
 8006e06:	69ba      	ldr	r2, [r7, #24]
 8006e08:	4013      	ands	r3, r2
 8006e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	685b      	ldr	r3, [r3, #4]
 8006e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d003      	beq.n	8006e20 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006e18:	69ba      	ldr	r2, [r7, #24]
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	4313      	orrs	r3, r2
 8006e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006e20:	4a14      	ldr	r2, [pc, #80]	; (8006e74 <HAL_GPIO_Init+0x354>)
 8006e22:	69bb      	ldr	r3, [r7, #24]
 8006e24:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	3301      	adds	r3, #1
 8006e2a:	61fb      	str	r3, [r7, #28]
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	2b0f      	cmp	r3, #15
 8006e30:	f67f ae86 	bls.w	8006b40 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006e34:	bf00      	nop
 8006e36:	bf00      	nop
 8006e38:	3724      	adds	r7, #36	; 0x24
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	40023800 	.word	0x40023800
 8006e48:	40013800 	.word	0x40013800
 8006e4c:	40020000 	.word	0x40020000
 8006e50:	40020400 	.word	0x40020400
 8006e54:	40020800 	.word	0x40020800
 8006e58:	40020c00 	.word	0x40020c00
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	40021400 	.word	0x40021400
 8006e64:	40021800 	.word	0x40021800
 8006e68:	40021c00 	.word	0x40021c00
 8006e6c:	40022000 	.word	0x40022000
 8006e70:	40022400 	.word	0x40022400
 8006e74:	40013c00 	.word	0x40013c00

08006e78 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006e78:	b480      	push	{r7}
 8006e7a:	b087      	sub	sp, #28
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006e82:	2300      	movs	r3, #0
 8006e84:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e8e:	2300      	movs	r3, #0
 8006e90:	617b      	str	r3, [r7, #20]
 8006e92:	e0d9      	b.n	8007048 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e94:	2201      	movs	r2, #1
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9c:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006e9e:	683a      	ldr	r2, [r7, #0]
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	4013      	ands	r3, r2
 8006ea4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006ea6:	68fa      	ldr	r2, [r7, #12]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	f040 80c9 	bne.w	8007042 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006eb0:	4a6b      	ldr	r2, [pc, #428]	; (8007060 <HAL_GPIO_DeInit+0x1e8>)
 8006eb2:	697b      	ldr	r3, [r7, #20]
 8006eb4:	089b      	lsrs	r3, r3, #2
 8006eb6:	3302      	adds	r3, #2
 8006eb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006ebc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	f003 0303 	and.w	r3, r3, #3
 8006ec4:	009b      	lsls	r3, r3, #2
 8006ec6:	220f      	movs	r2, #15
 8006ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8006ecc:	68ba      	ldr	r2, [r7, #8]
 8006ece:	4013      	ands	r3, r2
 8006ed0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a63      	ldr	r2, [pc, #396]	; (8007064 <HAL_GPIO_DeInit+0x1ec>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d037      	beq.n	8006f4a <HAL_GPIO_DeInit+0xd2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a62      	ldr	r2, [pc, #392]	; (8007068 <HAL_GPIO_DeInit+0x1f0>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d031      	beq.n	8006f46 <HAL_GPIO_DeInit+0xce>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a61      	ldr	r2, [pc, #388]	; (800706c <HAL_GPIO_DeInit+0x1f4>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d02b      	beq.n	8006f42 <HAL_GPIO_DeInit+0xca>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a60      	ldr	r2, [pc, #384]	; (8007070 <HAL_GPIO_DeInit+0x1f8>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d025      	beq.n	8006f3e <HAL_GPIO_DeInit+0xc6>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a5f      	ldr	r2, [pc, #380]	; (8007074 <HAL_GPIO_DeInit+0x1fc>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d01f      	beq.n	8006f3a <HAL_GPIO_DeInit+0xc2>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a5e      	ldr	r2, [pc, #376]	; (8007078 <HAL_GPIO_DeInit+0x200>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d019      	beq.n	8006f36 <HAL_GPIO_DeInit+0xbe>
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	4a5d      	ldr	r2, [pc, #372]	; (800707c <HAL_GPIO_DeInit+0x204>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d013      	beq.n	8006f32 <HAL_GPIO_DeInit+0xba>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	4a5c      	ldr	r2, [pc, #368]	; (8007080 <HAL_GPIO_DeInit+0x208>)
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d00d      	beq.n	8006f2e <HAL_GPIO_DeInit+0xb6>
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a5b      	ldr	r2, [pc, #364]	; (8007084 <HAL_GPIO_DeInit+0x20c>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d007      	beq.n	8006f2a <HAL_GPIO_DeInit+0xb2>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a5a      	ldr	r2, [pc, #360]	; (8007088 <HAL_GPIO_DeInit+0x210>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d101      	bne.n	8006f26 <HAL_GPIO_DeInit+0xae>
 8006f22:	2309      	movs	r3, #9
 8006f24:	e012      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f26:	230a      	movs	r3, #10
 8006f28:	e010      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	e00e      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f2e:	2307      	movs	r3, #7
 8006f30:	e00c      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f32:	2306      	movs	r3, #6
 8006f34:	e00a      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f36:	2305      	movs	r3, #5
 8006f38:	e008      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f3a:	2304      	movs	r3, #4
 8006f3c:	e006      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f3e:	2303      	movs	r3, #3
 8006f40:	e004      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f42:	2302      	movs	r3, #2
 8006f44:	e002      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f46:	2301      	movs	r3, #1
 8006f48:	e000      	b.n	8006f4c <HAL_GPIO_DeInit+0xd4>
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	697a      	ldr	r2, [r7, #20]
 8006f4e:	f002 0203 	and.w	r2, r2, #3
 8006f52:	0092      	lsls	r2, r2, #2
 8006f54:	4093      	lsls	r3, r2
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d132      	bne.n	8006fc2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006f5c:	4b4b      	ldr	r3, [pc, #300]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	43db      	mvns	r3, r3
 8006f64:	4949      	ldr	r1, [pc, #292]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f66:	4013      	ands	r3, r2
 8006f68:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006f6a:	4b48      	ldr	r3, [pc, #288]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f6c:	685a      	ldr	r2, [r3, #4]
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	43db      	mvns	r3, r3
 8006f72:	4946      	ldr	r1, [pc, #280]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f74:	4013      	ands	r3, r2
 8006f76:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006f78:	4b44      	ldr	r3, [pc, #272]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f7a:	689a      	ldr	r2, [r3, #8]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	43db      	mvns	r3, r3
 8006f80:	4942      	ldr	r1, [pc, #264]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f82:	4013      	ands	r3, r2
 8006f84:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006f86:	4b41      	ldr	r3, [pc, #260]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f88:	68da      	ldr	r2, [r3, #12]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	493f      	ldr	r1, [pc, #252]	; (800708c <HAL_GPIO_DeInit+0x214>)
 8006f90:	4013      	ands	r3, r2
 8006f92:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	f003 0303 	and.w	r3, r3, #3
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	220f      	movs	r2, #15
 8006f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8006fa2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006fa4:	4a2e      	ldr	r2, [pc, #184]	; (8007060 <HAL_GPIO_DeInit+0x1e8>)
 8006fa6:	697b      	ldr	r3, [r7, #20]
 8006fa8:	089b      	lsrs	r3, r3, #2
 8006faa:	3302      	adds	r3, #2
 8006fac:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006fb0:	68bb      	ldr	r3, [r7, #8]
 8006fb2:	43da      	mvns	r2, r3
 8006fb4:	482a      	ldr	r0, [pc, #168]	; (8007060 <HAL_GPIO_DeInit+0x1e8>)
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	089b      	lsrs	r3, r3, #2
 8006fba:	400a      	ands	r2, r1
 8006fbc:	3302      	adds	r3, #2
 8006fbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	697b      	ldr	r3, [r7, #20]
 8006fc8:	005b      	lsls	r3, r3, #1
 8006fca:	2103      	movs	r1, #3
 8006fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd0:	43db      	mvns	r3, r3
 8006fd2:	401a      	ands	r2, r3
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	08da      	lsrs	r2, r3, #3
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3208      	adds	r2, #8
 8006fe0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	220f      	movs	r2, #15
 8006fee:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff2:	43db      	mvns	r3, r3
 8006ff4:	697a      	ldr	r2, [r7, #20]
 8006ff6:	08d2      	lsrs	r2, r2, #3
 8006ff8:	4019      	ands	r1, r3
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	3208      	adds	r2, #8
 8006ffe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68da      	ldr	r2, [r3, #12]
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	005b      	lsls	r3, r3, #1
 800700a:	2103      	movs	r1, #3
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	43db      	mvns	r3, r3
 8007012:	401a      	ands	r2, r3
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	685a      	ldr	r2, [r3, #4]
 800701c:	2101      	movs	r1, #1
 800701e:	697b      	ldr	r3, [r7, #20]
 8007020:	fa01 f303 	lsl.w	r3, r1, r3
 8007024:	43db      	mvns	r3, r3
 8007026:	401a      	ands	r2, r3
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	697b      	ldr	r3, [r7, #20]
 8007032:	005b      	lsls	r3, r3, #1
 8007034:	2103      	movs	r1, #3
 8007036:	fa01 f303 	lsl.w	r3, r1, r3
 800703a:	43db      	mvns	r3, r3
 800703c:	401a      	ands	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	3301      	adds	r3, #1
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2b0f      	cmp	r3, #15
 800704c:	f67f af22 	bls.w	8006e94 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8007050:	bf00      	nop
 8007052:	bf00      	nop
 8007054:	371c      	adds	r7, #28
 8007056:	46bd      	mov	sp, r7
 8007058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	40013800 	.word	0x40013800
 8007064:	40020000 	.word	0x40020000
 8007068:	40020400 	.word	0x40020400
 800706c:	40020800 	.word	0x40020800
 8007070:	40020c00 	.word	0x40020c00
 8007074:	40021000 	.word	0x40021000
 8007078:	40021400 	.word	0x40021400
 800707c:	40021800 	.word	0x40021800
 8007080:	40021c00 	.word	0x40021c00
 8007084:	40022000 	.word	0x40022000
 8007088:	40022400 	.word	0x40022400
 800708c:	40013c00 	.word	0x40013c00

08007090 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	460b      	mov	r3, r1
 800709a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	691a      	ldr	r2, [r3, #16]
 80070a0:	887b      	ldrh	r3, [r7, #2]
 80070a2:	4013      	ands	r3, r2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d002      	beq.n	80070ae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80070a8:	2301      	movs	r3, #1
 80070aa:	73fb      	strb	r3, [r7, #15]
 80070ac:	e001      	b.n	80070b2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80070ae:	2300      	movs	r3, #0
 80070b0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80070b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	807b      	strh	r3, [r7, #2]
 80070cc:	4613      	mov	r3, r2
 80070ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80070d0:	787b      	ldrb	r3, [r7, #1]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d003      	beq.n	80070de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80070d6:	887a      	ldrh	r2, [r7, #2]
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80070dc:	e003      	b.n	80070e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80070de:	887b      	ldrh	r3, [r7, #2]
 80070e0:	041a      	lsls	r2, r3, #16
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	619a      	str	r2, [r3, #24]
}
 80070e6:	bf00      	nop
 80070e8:	370c      	adds	r7, #12
 80070ea:	46bd      	mov	sp, r7
 80070ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f0:	4770      	bx	lr
	...

080070f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d101      	bne.n	8007106 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007102:	2301      	movs	r3, #1
 8007104:	e07f      	b.n	8007206 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800710c:	b2db      	uxtb	r3, r3
 800710e:	2b00      	cmp	r3, #0
 8007110:	d106      	bne.n	8007120 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f8a9 	bl	8007272 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	2224      	movs	r2, #36	; 0x24
 8007124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0201 	bic.w	r2, r2, #1
 8007136:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	685a      	ldr	r2, [r3, #4]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007144:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007154:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d107      	bne.n	800716e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	689a      	ldr	r2, [r3, #8]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800716a:	609a      	str	r2, [r3, #8]
 800716c:	e006      	b.n	800717c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	689a      	ldr	r2, [r3, #8]
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800717a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	2b02      	cmp	r3, #2
 8007182:	d104      	bne.n	800718e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800718c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	6859      	ldr	r1, [r3, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	4b1d      	ldr	r3, [pc, #116]	; (8007210 <HAL_I2C_Init+0x11c>)
 800719a:	430b      	orrs	r3, r1
 800719c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	68da      	ldr	r2, [r3, #12]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80071ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691a      	ldr	r2, [r3, #16]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	695b      	ldr	r3, [r3, #20]
 80071b6:	ea42 0103 	orr.w	r1, r2, r3
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	699b      	ldr	r3, [r3, #24]
 80071be:	021a      	lsls	r2, r3, #8
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	430a      	orrs	r2, r1
 80071c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	69d9      	ldr	r1, [r3, #28]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6a1a      	ldr	r2, [r3, #32]
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	430a      	orrs	r2, r1
 80071d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f042 0201 	orr.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2200      	movs	r2, #0
 80071ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2220      	movs	r2, #32
 80071f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2200      	movs	r2, #0
 80071fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007204:	2300      	movs	r3, #0
}
 8007206:	4618      	mov	r0, r3
 8007208:	3708      	adds	r7, #8
 800720a:	46bd      	mov	sp, r7
 800720c:	bd80      	pop	{r7, pc}
 800720e:	bf00      	nop
 8007210:	02008000 	.word	0x02008000

08007214 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b082      	sub	sp, #8
 8007218:	af00      	add	r7, sp, #0
 800721a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d101      	bne.n	8007226 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	e021      	b.n	800726a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	2224      	movs	r2, #36	; 0x24
 800722a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f022 0201 	bic.w	r2, r2, #1
 800723c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 f821 	bl	8007286 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	2200      	movs	r2, #0
 8007256:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2200      	movs	r2, #0
 8007264:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 8007272:	b480      	push	{r7}
 8007274:	b083      	sub	sp, #12
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800727a:	bf00      	nop
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr

08007286 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800728e:	bf00      	nop
 8007290:	370c      	adds	r7, #12
 8007292:	46bd      	mov	sp, r7
 8007294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007298:	4770      	bx	lr
	...

0800729c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b088      	sub	sp, #32
 80072a0:	af02      	add	r7, sp, #8
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	4608      	mov	r0, r1
 80072a6:	4611      	mov	r1, r2
 80072a8:	461a      	mov	r2, r3
 80072aa:	4603      	mov	r3, r0
 80072ac:	817b      	strh	r3, [r7, #10]
 80072ae:	460b      	mov	r3, r1
 80072b0:	813b      	strh	r3, [r7, #8]
 80072b2:	4613      	mov	r3, r2
 80072b4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b20      	cmp	r3, #32
 80072c0:	f040 80f9 	bne.w	80074b6 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80072c4:	6a3b      	ldr	r3, [r7, #32]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d002      	beq.n	80072d0 <HAL_I2C_Mem_Write+0x34>
 80072ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d105      	bne.n	80072dc <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072d6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e0ed      	b.n	80074b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072e2:	2b01      	cmp	r3, #1
 80072e4:	d101      	bne.n	80072ea <HAL_I2C_Mem_Write+0x4e>
 80072e6:	2302      	movs	r3, #2
 80072e8:	e0e6      	b.n	80074b8 <HAL_I2C_Mem_Write+0x21c>
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2201      	movs	r2, #1
 80072ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80072f2:	f7fe fc73 	bl	8005bdc <HAL_GetTick>
 80072f6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	2319      	movs	r3, #25
 80072fe:	2201      	movs	r2, #1
 8007300:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 fad1 	bl	80078ac <I2C_WaitOnFlagUntilTimeout>
 800730a:	4603      	mov	r3, r0
 800730c:	2b00      	cmp	r3, #0
 800730e:	d001      	beq.n	8007314 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e0d1      	b.n	80074b8 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2221      	movs	r2, #33	; 0x21
 8007318:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2240      	movs	r2, #64	; 0x40
 8007320:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	6a3a      	ldr	r2, [r7, #32]
 800732e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007334:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800733c:	88f8      	ldrh	r0, [r7, #6]
 800733e:	893a      	ldrh	r2, [r7, #8]
 8007340:	8979      	ldrh	r1, [r7, #10]
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	9301      	str	r3, [sp, #4]
 8007346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007348:	9300      	str	r3, [sp, #0]
 800734a:	4603      	mov	r3, r0
 800734c:	68f8      	ldr	r0, [r7, #12]
 800734e:	f000 f9e1 	bl	8007714 <I2C_RequestMemoryWrite>
 8007352:	4603      	mov	r3, r0
 8007354:	2b00      	cmp	r3, #0
 8007356:	d005      	beq.n	8007364 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e0a9      	b.n	80074b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007368:	b29b      	uxth	r3, r3
 800736a:	2bff      	cmp	r3, #255	; 0xff
 800736c:	d90e      	bls.n	800738c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	22ff      	movs	r2, #255	; 0xff
 8007372:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007378:	b2da      	uxtb	r2, r3
 800737a:	8979      	ldrh	r1, [r7, #10]
 800737c:	2300      	movs	r3, #0
 800737e:	9300      	str	r3, [sp, #0]
 8007380:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007384:	68f8      	ldr	r0, [r7, #12]
 8007386:	f000 fbb3 	bl	8007af0 <I2C_TransferConfig>
 800738a:	e00f      	b.n	80073ac <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007390:	b29a      	uxth	r2, r3
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800739a:	b2da      	uxtb	r2, r3
 800739c:	8979      	ldrh	r1, [r7, #10]
 800739e:	2300      	movs	r3, #0
 80073a0:	9300      	str	r3, [sp, #0]
 80073a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073a6:	68f8      	ldr	r0, [r7, #12]
 80073a8:	f000 fba2 	bl	8007af0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073ac:	697a      	ldr	r2, [r7, #20]
 80073ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073b0:	68f8      	ldr	r0, [r7, #12]
 80073b2:	f000 fabb 	bl	800792c <I2C_WaitOnTXISFlagUntilTimeout>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e07b      	b.n	80074b8 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073c4:	781a      	ldrb	r2, [r3, #0]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073da:	b29b      	uxth	r3, r3
 80073dc:	3b01      	subs	r3, #1
 80073de:	b29a      	uxth	r2, r3
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073e8:	3b01      	subs	r3, #1
 80073ea:	b29a      	uxth	r2, r3
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f4:	b29b      	uxth	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d034      	beq.n	8007464 <HAL_I2C_Mem_Write+0x1c8>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d130      	bne.n	8007464 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	9300      	str	r3, [sp, #0]
 8007406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007408:	2200      	movs	r2, #0
 800740a:	2180      	movs	r1, #128	; 0x80
 800740c:	68f8      	ldr	r0, [r7, #12]
 800740e:	f000 fa4d 	bl	80078ac <I2C_WaitOnFlagUntilTimeout>
 8007412:	4603      	mov	r3, r0
 8007414:	2b00      	cmp	r3, #0
 8007416:	d001      	beq.n	800741c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007418:	2301      	movs	r3, #1
 800741a:	e04d      	b.n	80074b8 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007420:	b29b      	uxth	r3, r3
 8007422:	2bff      	cmp	r3, #255	; 0xff
 8007424:	d90e      	bls.n	8007444 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	22ff      	movs	r2, #255	; 0xff
 800742a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007430:	b2da      	uxtb	r2, r3
 8007432:	8979      	ldrh	r1, [r7, #10]
 8007434:	2300      	movs	r3, #0
 8007436:	9300      	str	r3, [sp, #0]
 8007438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800743c:	68f8      	ldr	r0, [r7, #12]
 800743e:	f000 fb57 	bl	8007af0 <I2C_TransferConfig>
 8007442:	e00f      	b.n	8007464 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007448:	b29a      	uxth	r2, r3
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007452:	b2da      	uxtb	r2, r3
 8007454:	8979      	ldrh	r1, [r7, #10]
 8007456:	2300      	movs	r3, #0
 8007458:	9300      	str	r3, [sp, #0]
 800745a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800745e:	68f8      	ldr	r0, [r7, #12]
 8007460:	f000 fb46 	bl	8007af0 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007468:	b29b      	uxth	r3, r3
 800746a:	2b00      	cmp	r3, #0
 800746c:	d19e      	bne.n	80073ac <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800746e:	697a      	ldr	r2, [r7, #20]
 8007470:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 fa9a 	bl	80079ac <I2C_WaitOnSTOPFlagUntilTimeout>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d001      	beq.n	8007482 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e01a      	b.n	80074b8 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2220      	movs	r2, #32
 8007488:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6859      	ldr	r1, [r3, #4]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	4b0a      	ldr	r3, [pc, #40]	; (80074c0 <HAL_I2C_Mem_Write+0x224>)
 8007496:	400b      	ands	r3, r1
 8007498:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2220      	movs	r2, #32
 800749e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2200      	movs	r2, #0
 80074a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2200      	movs	r2, #0
 80074ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	e000      	b.n	80074b8 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80074b6:	2302      	movs	r3, #2
  }
}
 80074b8:	4618      	mov	r0, r3
 80074ba:	3718      	adds	r7, #24
 80074bc:	46bd      	mov	sp, r7
 80074be:	bd80      	pop	{r7, pc}
 80074c0:	fe00e800 	.word	0xfe00e800

080074c4 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b088      	sub	sp, #32
 80074c8:	af02      	add	r7, sp, #8
 80074ca:	60f8      	str	r0, [r7, #12]
 80074cc:	4608      	mov	r0, r1
 80074ce:	4611      	mov	r1, r2
 80074d0:	461a      	mov	r2, r3
 80074d2:	4603      	mov	r3, r0
 80074d4:	817b      	strh	r3, [r7, #10]
 80074d6:	460b      	mov	r3, r1
 80074d8:	813b      	strh	r3, [r7, #8]
 80074da:	4613      	mov	r3, r2
 80074dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074e4:	b2db      	uxtb	r3, r3
 80074e6:	2b20      	cmp	r3, #32
 80074e8:	f040 80fd 	bne.w	80076e6 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <HAL_I2C_Mem_Read+0x34>
 80074f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d105      	bne.n	8007504 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074fe:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007500:	2301      	movs	r3, #1
 8007502:	e0f1      	b.n	80076e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800750a:	2b01      	cmp	r3, #1
 800750c:	d101      	bne.n	8007512 <HAL_I2C_Mem_Read+0x4e>
 800750e:	2302      	movs	r3, #2
 8007510:	e0ea      	b.n	80076e8 <HAL_I2C_Mem_Read+0x224>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2201      	movs	r2, #1
 8007516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800751a:	f7fe fb5f 	bl	8005bdc <HAL_GetTick>
 800751e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	2319      	movs	r3, #25
 8007526:	2201      	movs	r2, #1
 8007528:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800752c:	68f8      	ldr	r0, [r7, #12]
 800752e:	f000 f9bd 	bl	80078ac <I2C_WaitOnFlagUntilTimeout>
 8007532:	4603      	mov	r3, r0
 8007534:	2b00      	cmp	r3, #0
 8007536:	d001      	beq.n	800753c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	e0d5      	b.n	80076e8 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	2222      	movs	r2, #34	; 0x22
 8007540:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	2240      	movs	r2, #64	; 0x40
 8007548:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	6a3a      	ldr	r2, [r7, #32]
 8007556:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800755c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	2200      	movs	r2, #0
 8007562:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007564:	88f8      	ldrh	r0, [r7, #6]
 8007566:	893a      	ldrh	r2, [r7, #8]
 8007568:	8979      	ldrh	r1, [r7, #10]
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	9301      	str	r3, [sp, #4]
 800756e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007570:	9300      	str	r3, [sp, #0]
 8007572:	4603      	mov	r3, r0
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	f000 f921 	bl	80077bc <I2C_RequestMemoryRead>
 800757a:	4603      	mov	r3, r0
 800757c:	2b00      	cmp	r3, #0
 800757e:	d005      	beq.n	800758c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007588:	2301      	movs	r3, #1
 800758a:	e0ad      	b.n	80076e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007590:	b29b      	uxth	r3, r3
 8007592:	2bff      	cmp	r3, #255	; 0xff
 8007594:	d90e      	bls.n	80075b4 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	22ff      	movs	r2, #255	; 0xff
 800759a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	8979      	ldrh	r1, [r7, #10]
 80075a4:	4b52      	ldr	r3, [pc, #328]	; (80076f0 <HAL_I2C_Mem_Read+0x22c>)
 80075a6:	9300      	str	r3, [sp, #0]
 80075a8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f000 fa9f 	bl	8007af0 <I2C_TransferConfig>
 80075b2:	e00f      	b.n	80075d4 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075b8:	b29a      	uxth	r2, r3
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	8979      	ldrh	r1, [r7, #10]
 80075c6:	4b4a      	ldr	r3, [pc, #296]	; (80076f0 <HAL_I2C_Mem_Read+0x22c>)
 80075c8:	9300      	str	r3, [sp, #0]
 80075ca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80075ce:	68f8      	ldr	r0, [r7, #12]
 80075d0:	f000 fa8e 	bl	8007af0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	9300      	str	r3, [sp, #0]
 80075d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075da:	2200      	movs	r2, #0
 80075dc:	2104      	movs	r1, #4
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f000 f964 	bl	80078ac <I2C_WaitOnFlagUntilTimeout>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80075ea:	2301      	movs	r3, #1
 80075ec:	e07c      	b.n	80076e8 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075f8:	b2d2      	uxtb	r2, r2
 80075fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007600:	1c5a      	adds	r2, r3, #1
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007616:	b29b      	uxth	r3, r3
 8007618:	3b01      	subs	r3, #1
 800761a:	b29a      	uxth	r2, r3
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007624:	b29b      	uxth	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d034      	beq.n	8007694 <HAL_I2C_Mem_Read+0x1d0>
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800762e:	2b00      	cmp	r3, #0
 8007630:	d130      	bne.n	8007694 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	9300      	str	r3, [sp, #0]
 8007636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007638:	2200      	movs	r2, #0
 800763a:	2180      	movs	r1, #128	; 0x80
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 f935 	bl	80078ac <I2C_WaitOnFlagUntilTimeout>
 8007642:	4603      	mov	r3, r0
 8007644:	2b00      	cmp	r3, #0
 8007646:	d001      	beq.n	800764c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007648:	2301      	movs	r3, #1
 800764a:	e04d      	b.n	80076e8 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007650:	b29b      	uxth	r3, r3
 8007652:	2bff      	cmp	r3, #255	; 0xff
 8007654:	d90e      	bls.n	8007674 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	22ff      	movs	r2, #255	; 0xff
 800765a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007660:	b2da      	uxtb	r2, r3
 8007662:	8979      	ldrh	r1, [r7, #10]
 8007664:	2300      	movs	r3, #0
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 fa3f 	bl	8007af0 <I2C_TransferConfig>
 8007672:	e00f      	b.n	8007694 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007682:	b2da      	uxtb	r2, r3
 8007684:	8979      	ldrh	r1, [r7, #10]
 8007686:	2300      	movs	r3, #0
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 fa2e 	bl	8007af0 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007698:	b29b      	uxth	r3, r3
 800769a:	2b00      	cmp	r3, #0
 800769c:	d19a      	bne.n	80075d4 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800769e:	697a      	ldr	r2, [r7, #20]
 80076a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 f982 	bl	80079ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d001      	beq.n	80076b2 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e01a      	b.n	80076e8 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	2220      	movs	r2, #32
 80076b8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	6859      	ldr	r1, [r3, #4]
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681a      	ldr	r2, [r3, #0]
 80076c4:	4b0b      	ldr	r3, [pc, #44]	; (80076f4 <HAL_I2C_Mem_Read+0x230>)
 80076c6:	400b      	ands	r3, r1
 80076c8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	2220      	movs	r2, #32
 80076ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076e2:	2300      	movs	r3, #0
 80076e4:	e000      	b.n	80076e8 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80076e6:	2302      	movs	r3, #2
  }
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3718      	adds	r7, #24
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}
 80076f0:	80002400 	.word	0x80002400
 80076f4:	fe00e800 	.word	0xfe00e800

080076f8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007706:	b2db      	uxtb	r3, r3
}
 8007708:	4618      	mov	r0, r3
 800770a:	370c      	adds	r7, #12
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af02      	add	r7, sp, #8
 800771a:	60f8      	str	r0, [r7, #12]
 800771c:	4608      	mov	r0, r1
 800771e:	4611      	mov	r1, r2
 8007720:	461a      	mov	r2, r3
 8007722:	4603      	mov	r3, r0
 8007724:	817b      	strh	r3, [r7, #10]
 8007726:	460b      	mov	r3, r1
 8007728:	813b      	strh	r3, [r7, #8]
 800772a:	4613      	mov	r3, r2
 800772c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800772e:	88fb      	ldrh	r3, [r7, #6]
 8007730:	b2da      	uxtb	r2, r3
 8007732:	8979      	ldrh	r1, [r7, #10]
 8007734:	4b20      	ldr	r3, [pc, #128]	; (80077b8 <I2C_RequestMemoryWrite+0xa4>)
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800773c:	68f8      	ldr	r0, [r7, #12]
 800773e:	f000 f9d7 	bl	8007af0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007742:	69fa      	ldr	r2, [r7, #28]
 8007744:	69b9      	ldr	r1, [r7, #24]
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 f8f0 	bl	800792c <I2C_WaitOnTXISFlagUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e02c      	b.n	80077b0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007756:	88fb      	ldrh	r3, [r7, #6]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d105      	bne.n	8007768 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800775c:	893b      	ldrh	r3, [r7, #8]
 800775e:	b2da      	uxtb	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	629a      	str	r2, [r3, #40]	; 0x28
 8007766:	e015      	b.n	8007794 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007768:	893b      	ldrh	r3, [r7, #8]
 800776a:	0a1b      	lsrs	r3, r3, #8
 800776c:	b29b      	uxth	r3, r3
 800776e:	b2da      	uxtb	r2, r3
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007776:	69fa      	ldr	r2, [r7, #28]
 8007778:	69b9      	ldr	r1, [r7, #24]
 800777a:	68f8      	ldr	r0, [r7, #12]
 800777c:	f000 f8d6 	bl	800792c <I2C_WaitOnTXISFlagUntilTimeout>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d001      	beq.n	800778a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e012      	b.n	80077b0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800778a:	893b      	ldrh	r3, [r7, #8]
 800778c:	b2da      	uxtb	r2, r3
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007794:	69fb      	ldr	r3, [r7, #28]
 8007796:	9300      	str	r3, [sp, #0]
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	2200      	movs	r2, #0
 800779c:	2180      	movs	r1, #128	; 0x80
 800779e:	68f8      	ldr	r0, [r7, #12]
 80077a0:	f000 f884 	bl	80078ac <I2C_WaitOnFlagUntilTimeout>
 80077a4:	4603      	mov	r3, r0
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d001      	beq.n	80077ae <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e000      	b.n	80077b0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	80002000 	.word	0x80002000

080077bc <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b086      	sub	sp, #24
 80077c0:	af02      	add	r7, sp, #8
 80077c2:	60f8      	str	r0, [r7, #12]
 80077c4:	4608      	mov	r0, r1
 80077c6:	4611      	mov	r1, r2
 80077c8:	461a      	mov	r2, r3
 80077ca:	4603      	mov	r3, r0
 80077cc:	817b      	strh	r3, [r7, #10]
 80077ce:	460b      	mov	r3, r1
 80077d0:	813b      	strh	r3, [r7, #8]
 80077d2:	4613      	mov	r3, r2
 80077d4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80077d6:	88fb      	ldrh	r3, [r7, #6]
 80077d8:	b2da      	uxtb	r2, r3
 80077da:	8979      	ldrh	r1, [r7, #10]
 80077dc:	4b20      	ldr	r3, [pc, #128]	; (8007860 <I2C_RequestMemoryRead+0xa4>)
 80077de:	9300      	str	r3, [sp, #0]
 80077e0:	2300      	movs	r3, #0
 80077e2:	68f8      	ldr	r0, [r7, #12]
 80077e4:	f000 f984 	bl	8007af0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80077e8:	69fa      	ldr	r2, [r7, #28]
 80077ea:	69b9      	ldr	r1, [r7, #24]
 80077ec:	68f8      	ldr	r0, [r7, #12]
 80077ee:	f000 f89d 	bl	800792c <I2C_WaitOnTXISFlagUntilTimeout>
 80077f2:	4603      	mov	r3, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e02c      	b.n	8007856 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80077fc:	88fb      	ldrh	r3, [r7, #6]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d105      	bne.n	800780e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007802:	893b      	ldrh	r3, [r7, #8]
 8007804:	b2da      	uxtb	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	629a      	str	r2, [r3, #40]	; 0x28
 800780c:	e015      	b.n	800783a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800780e:	893b      	ldrh	r3, [r7, #8]
 8007810:	0a1b      	lsrs	r3, r3, #8
 8007812:	b29b      	uxth	r3, r3
 8007814:	b2da      	uxtb	r2, r3
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800781c:	69fa      	ldr	r2, [r7, #28]
 800781e:	69b9      	ldr	r1, [r7, #24]
 8007820:	68f8      	ldr	r0, [r7, #12]
 8007822:	f000 f883 	bl	800792c <I2C_WaitOnTXISFlagUntilTimeout>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d001      	beq.n	8007830 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e012      	b.n	8007856 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007830:	893b      	ldrh	r3, [r7, #8]
 8007832:	b2da      	uxtb	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800783a:	69fb      	ldr	r3, [r7, #28]
 800783c:	9300      	str	r3, [sp, #0]
 800783e:	69bb      	ldr	r3, [r7, #24]
 8007840:	2200      	movs	r2, #0
 8007842:	2140      	movs	r1, #64	; 0x40
 8007844:	68f8      	ldr	r0, [r7, #12]
 8007846:	f000 f831 	bl	80078ac <I2C_WaitOnFlagUntilTimeout>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e000      	b.n	8007856 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007854:	2300      	movs	r3, #0
}
 8007856:	4618      	mov	r0, r3
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	80002000 	.word	0x80002000

08007864 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007864:	b480      	push	{r7}
 8007866:	b083      	sub	sp, #12
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b02      	cmp	r3, #2
 8007878:	d103      	bne.n	8007882 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2200      	movs	r2, #0
 8007880:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	699b      	ldr	r3, [r3, #24]
 8007888:	f003 0301 	and.w	r3, r3, #1
 800788c:	2b01      	cmp	r3, #1
 800788e:	d007      	beq.n	80078a0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	699a      	ldr	r2, [r3, #24]
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	f042 0201 	orr.w	r2, r2, #1
 800789e:	619a      	str	r2, [r3, #24]
  }
}
 80078a0:	bf00      	nop
 80078a2:	370c      	adds	r7, #12
 80078a4:	46bd      	mov	sp, r7
 80078a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078aa:	4770      	bx	lr

080078ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	603b      	str	r3, [r7, #0]
 80078b8:	4613      	mov	r3, r2
 80078ba:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80078bc:	e022      	b.n	8007904 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078c4:	d01e      	beq.n	8007904 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078c6:	f7fe f989 	bl	8005bdc <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	69bb      	ldr	r3, [r7, #24]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	683a      	ldr	r2, [r7, #0]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d302      	bcc.n	80078dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80078d6:	683b      	ldr	r3, [r7, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d113      	bne.n	8007904 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e0:	f043 0220 	orr.w	r2, r3, #32
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2200      	movs	r2, #0
 80078f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2200      	movs	r2, #0
 80078fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007900:	2301      	movs	r3, #1
 8007902:	e00f      	b.n	8007924 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	699a      	ldr	r2, [r3, #24]
 800790a:	68bb      	ldr	r3, [r7, #8]
 800790c:	4013      	ands	r3, r2
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	429a      	cmp	r2, r3
 8007912:	bf0c      	ite	eq
 8007914:	2301      	moveq	r3, #1
 8007916:	2300      	movne	r3, #0
 8007918:	b2db      	uxtb	r3, r3
 800791a:	461a      	mov	r2, r3
 800791c:	79fb      	ldrb	r3, [r7, #7]
 800791e:	429a      	cmp	r2, r3
 8007920:	d0cd      	beq.n	80078be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007922:	2300      	movs	r3, #0
}
 8007924:	4618      	mov	r0, r3
 8007926:	3710      	adds	r7, #16
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b084      	sub	sp, #16
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007938:	e02c      	b.n	8007994 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800793a:	687a      	ldr	r2, [r7, #4]
 800793c:	68b9      	ldr	r1, [r7, #8]
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f000 f870 	bl	8007a24 <I2C_IsAcknowledgeFailed>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e02a      	b.n	80079a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007954:	d01e      	beq.n	8007994 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007956:	f7fe f941 	bl	8005bdc <HAL_GetTick>
 800795a:	4602      	mov	r2, r0
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	1ad3      	subs	r3, r2, r3
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	429a      	cmp	r2, r3
 8007964:	d302      	bcc.n	800796c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d113      	bne.n	8007994 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007970:	f043 0220 	orr.w	r2, r3, #32
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2220      	movs	r2, #32
 800797c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2200      	movs	r2, #0
 800798c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007990:	2301      	movs	r3, #1
 8007992:	e007      	b.n	80079a4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	699b      	ldr	r3, [r3, #24]
 800799a:	f003 0302 	and.w	r3, r3, #2
 800799e:	2b02      	cmp	r3, #2
 80079a0:	d1cb      	bne.n	800793a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80079a2:	2300      	movs	r3, #0
}
 80079a4:	4618      	mov	r0, r3
 80079a6:	3710      	adds	r7, #16
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	60f8      	str	r0, [r7, #12]
 80079b4:	60b9      	str	r1, [r7, #8]
 80079b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079b8:	e028      	b.n	8007a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80079ba:	687a      	ldr	r2, [r7, #4]
 80079bc:	68b9      	ldr	r1, [r7, #8]
 80079be:	68f8      	ldr	r0, [r7, #12]
 80079c0:	f000 f830 	bl	8007a24 <I2C_IsAcknowledgeFailed>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e026      	b.n	8007a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079ce:	f7fe f905 	bl	8005bdc <HAL_GetTick>
 80079d2:	4602      	mov	r2, r0
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	1ad3      	subs	r3, r2, r3
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	429a      	cmp	r2, r3
 80079dc:	d302      	bcc.n	80079e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d113      	bne.n	8007a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079e8:	f043 0220 	orr.w	r2, r3, #32
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	2220      	movs	r2, #32
 80079f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e007      	b.n	8007a1c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	699b      	ldr	r3, [r3, #24]
 8007a12:	f003 0320 	and.w	r3, r3, #32
 8007a16:	2b20      	cmp	r3, #32
 8007a18:	d1cf      	bne.n	80079ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	3710      	adds	r7, #16
 8007a20:	46bd      	mov	sp, r7
 8007a22:	bd80      	pop	{r7, pc}

08007a24 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	b084      	sub	sp, #16
 8007a28:	af00      	add	r7, sp, #0
 8007a2a:	60f8      	str	r0, [r7, #12]
 8007a2c:	60b9      	str	r1, [r7, #8]
 8007a2e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	699b      	ldr	r3, [r3, #24]
 8007a36:	f003 0310 	and.w	r3, r3, #16
 8007a3a:	2b10      	cmp	r3, #16
 8007a3c:	d151      	bne.n	8007ae2 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a3e:	e022      	b.n	8007a86 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a46:	d01e      	beq.n	8007a86 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a48:	f7fe f8c8 	bl	8005bdc <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	68ba      	ldr	r2, [r7, #8]
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d302      	bcc.n	8007a5e <I2C_IsAcknowledgeFailed+0x3a>
 8007a58:	68bb      	ldr	r3, [r7, #8]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d113      	bne.n	8007a86 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a62:	f043 0220 	orr.w	r2, r3, #32
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2220      	movs	r2, #32
 8007a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	2200      	movs	r2, #0
 8007a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007a82:	2301      	movs	r3, #1
 8007a84:	e02e      	b.n	8007ae4 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	f003 0320 	and.w	r3, r3, #32
 8007a90:	2b20      	cmp	r3, #32
 8007a92:	d1d5      	bne.n	8007a40 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2210      	movs	r2, #16
 8007a9a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2220      	movs	r2, #32
 8007aa2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f7ff fedd 	bl	8007864 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	6859      	ldr	r1, [r3, #4]
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	4b0d      	ldr	r3, [pc, #52]	; (8007aec <I2C_IsAcknowledgeFailed+0xc8>)
 8007ab6:	400b      	ands	r3, r1
 8007ab8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007abe:	f043 0204 	orr.w	r2, r3, #4
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2220      	movs	r2, #32
 8007aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e000      	b.n	8007ae4 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007ae2:	2300      	movs	r3, #0
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	fe00e800 	.word	0xfe00e800

08007af0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007af0:	b480      	push	{r7}
 8007af2:	b085      	sub	sp, #20
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	60f8      	str	r0, [r7, #12]
 8007af8:	607b      	str	r3, [r7, #4]
 8007afa:	460b      	mov	r3, r1
 8007afc:	817b      	strh	r3, [r7, #10]
 8007afe:	4613      	mov	r3, r2
 8007b00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685a      	ldr	r2, [r3, #4]
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	0d5b      	lsrs	r3, r3, #21
 8007b0c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007b10:	4b0d      	ldr	r3, [pc, #52]	; (8007b48 <I2C_TransferConfig+0x58>)
 8007b12:	430b      	orrs	r3, r1
 8007b14:	43db      	mvns	r3, r3
 8007b16:	ea02 0103 	and.w	r1, r2, r3
 8007b1a:	897b      	ldrh	r3, [r7, #10]
 8007b1c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007b20:	7a7b      	ldrb	r3, [r7, #9]
 8007b22:	041b      	lsls	r3, r3, #16
 8007b24:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007b28:	431a      	orrs	r2, r3
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	431a      	orrs	r2, r3
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	431a      	orrs	r2, r3
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	430a      	orrs	r2, r1
 8007b38:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007b3a:	bf00      	nop
 8007b3c:	3714      	adds	r7, #20
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b44:	4770      	bx	lr
 8007b46:	bf00      	nop
 8007b48:	03ff63ff 	.word	0x03ff63ff

08007b4c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007b4c:	b580      	push	{r7, lr}
 8007b4e:	b084      	sub	sp, #16
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d101      	bne.n	8007b5e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	e0bf      	b.n	8007cde <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007b64:	b2db      	uxtb	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d106      	bne.n	8007b78 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7fb ffca 	bl	8003b0c <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2202      	movs	r2, #2
 8007b7c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	699a      	ldr	r2, [r3, #24]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007b8e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	6999      	ldr	r1, [r3, #24]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	685a      	ldr	r2, [r3, #4]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007ba4:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	691b      	ldr	r3, [r3, #16]
 8007baa:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	430a      	orrs	r2, r1
 8007bb2:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	6899      	ldr	r1, [r3, #8]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	4b4a      	ldr	r3, [pc, #296]	; (8007ce8 <HAL_LTDC_Init+0x19c>)
 8007bc0:	400b      	ands	r3, r1
 8007bc2:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	695b      	ldr	r3, [r3, #20]
 8007bc8:	041b      	lsls	r3, r3, #16
 8007bca:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	6899      	ldr	r1, [r3, #8]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	699a      	ldr	r2, [r3, #24]
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	431a      	orrs	r2, r3
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	430a      	orrs	r2, r1
 8007be0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	68d9      	ldr	r1, [r3, #12]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	4b3e      	ldr	r3, [pc, #248]	; (8007ce8 <HAL_LTDC_Init+0x19c>)
 8007bee:	400b      	ands	r3, r1
 8007bf0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	69db      	ldr	r3, [r3, #28]
 8007bf6:	041b      	lsls	r3, r3, #16
 8007bf8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	68d9      	ldr	r1, [r3, #12]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	6a1a      	ldr	r2, [r3, #32]
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	431a      	orrs	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	430a      	orrs	r2, r1
 8007c0e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6919      	ldr	r1, [r3, #16]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681a      	ldr	r2, [r3, #0]
 8007c1a:	4b33      	ldr	r3, [pc, #204]	; (8007ce8 <HAL_LTDC_Init+0x19c>)
 8007c1c:	400b      	ands	r3, r1
 8007c1e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	041b      	lsls	r3, r3, #16
 8007c26:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6919      	ldr	r1, [r3, #16]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	431a      	orrs	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	430a      	orrs	r2, r1
 8007c3c:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	6959      	ldr	r1, [r3, #20]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	4b27      	ldr	r3, [pc, #156]	; (8007ce8 <HAL_LTDC_Init+0x19c>)
 8007c4a:	400b      	ands	r3, r1
 8007c4c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c52:	041b      	lsls	r3, r3, #16
 8007c54:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	6959      	ldr	r1, [r3, #20]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	431a      	orrs	r2, r3
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c72:	021b      	lsls	r3, r3, #8
 8007c74:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007c7c:	041b      	lsls	r3, r3, #16
 8007c7e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c96:	68ba      	ldr	r2, [r7, #8]
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007ca2:	431a      	orrs	r2, r3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	430a      	orrs	r2, r1
 8007caa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f042 0206 	orr.w	r2, r2, #6
 8007cba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699a      	ldr	r2, [r3, #24]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f042 0201 	orr.w	r2, r2, #1
 8007cca:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	2201      	movs	r2, #1
 8007cd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3710      	adds	r7, #16
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
 8007ce6:	bf00      	nop
 8007ce8:	f000f800 	.word	0xf000f800

08007cec <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007cec:	b580      	push	{r7, lr}
 8007cee:	b084      	sub	sp, #16
 8007cf0:	af00      	add	r7, sp, #0
 8007cf2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d02:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f003 0304 	and.w	r3, r3, #4
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d023      	beq.n	8007d56 <HAL_LTDC_IRQHandler+0x6a>
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	f003 0304 	and.w	r3, r3, #4
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d01e      	beq.n	8007d56 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f022 0204 	bic.w	r2, r2, #4
 8007d26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2204      	movs	r2, #4
 8007d2e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d36:	f043 0201 	orr.w	r2, r3, #1
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	2204      	movs	r2, #4
 8007d44:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f000 f86f 	bl	8007e34 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	f003 0302 	and.w	r3, r3, #2
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d023      	beq.n	8007da8 <HAL_LTDC_IRQHandler+0xbc>
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f003 0302 	and.w	r3, r3, #2
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d01e      	beq.n	8007da8 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	f022 0202 	bic.w	r2, r2, #2
 8007d78:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	2202      	movs	r2, #2
 8007d80:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d88:	f043 0202 	orr.w	r2, r3, #2
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2204      	movs	r2, #4
 8007d96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f846 	bl	8007e34 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007da8:	68fb      	ldr	r3, [r7, #12]
 8007daa:	f003 0301 	and.w	r3, r3, #1
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d01b      	beq.n	8007dea <HAL_LTDC_IRQHandler+0xfe>
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f003 0301 	and.w	r3, r3, #1
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d016      	beq.n	8007dea <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f022 0201 	bic.w	r2, r2, #1
 8007dca:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007de4:	6878      	ldr	r0, [r7, #4]
 8007de6:	f000 f82f 	bl	8007e48 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	f003 0308 	and.w	r3, r3, #8
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d01b      	beq.n	8007e2c <HAL_LTDC_IRQHandler+0x140>
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	f003 0308 	and.w	r3, r3, #8
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d016      	beq.n	8007e2c <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f022 0208 	bic.w	r2, r2, #8
 8007e0c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	2208      	movs	r2, #8
 8007e14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f818 	bl	8007e5c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007e2c:	bf00      	nop
 8007e2e:	3710      	adds	r7, #16
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007e34:	b480      	push	{r7}
 8007e36:	b083      	sub	sp, #12
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007e3c:	bf00      	nop
 8007e3e:	370c      	adds	r7, #12
 8007e40:	46bd      	mov	sp, r7
 8007e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e46:	4770      	bx	lr

08007e48 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007e48:	b480      	push	{r7}
 8007e4a:	b083      	sub	sp, #12
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007e50:	bf00      	nop
 8007e52:	370c      	adds	r7, #12
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007e5c:	b480      	push	{r7}
 8007e5e:	b083      	sub	sp, #12
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007e64:	bf00      	nop
 8007e66:	370c      	adds	r7, #12
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6e:	4770      	bx	lr

08007e70 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007e70:	b5b0      	push	{r4, r5, r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d101      	bne.n	8007e8a <HAL_LTDC_ConfigLayer+0x1a>
 8007e86:	2302      	movs	r3, #2
 8007e88:	e02c      	b.n	8007ee4 <HAL_LTDC_ConfigLayer+0x74>
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	2202      	movs	r2, #2
 8007e96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007e9a:	68fa      	ldr	r2, [r7, #12]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2134      	movs	r1, #52	; 0x34
 8007ea0:	fb01 f303 	mul.w	r3, r1, r3
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	4614      	mov	r4, r2
 8007eae:	461d      	mov	r5, r3
 8007eb0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eb2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eb6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007eb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007eba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007ec0:	687a      	ldr	r2, [r7, #4]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	68f8      	ldr	r0, [r7, #12]
 8007ec6:	f000 f81f 	bl	8007f08 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	2201      	movs	r2, #1
 8007ed6:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2200      	movs	r2, #0
 8007ede:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	3710      	adds	r7, #16
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	bdb0      	pop	{r4, r5, r7, pc}

08007eec <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b083      	sub	sp, #12
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007efa:	b2db      	uxtb	r3, r3
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	370c      	adds	r7, #12
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b089      	sub	sp, #36	; 0x24
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	60f8      	str	r0, [r7, #12]
 8007f10:	60b9      	str	r1, [r7, #8]
 8007f12:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	685a      	ldr	r2, [r3, #4]
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	0c1b      	lsrs	r3, r3, #16
 8007f20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f24:	4413      	add	r3, r2
 8007f26:	041b      	lsls	r3, r3, #16
 8007f28:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	01db      	lsls	r3, r3, #7
 8007f34:	4413      	add	r3, r2
 8007f36:	3384      	adds	r3, #132	; 0x84
 8007f38:	685b      	ldr	r3, [r3, #4]
 8007f3a:	68fa      	ldr	r2, [r7, #12]
 8007f3c:	6812      	ldr	r2, [r2, #0]
 8007f3e:	4611      	mov	r1, r2
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	01d2      	lsls	r2, r2, #7
 8007f44:	440a      	add	r2, r1
 8007f46:	3284      	adds	r2, #132	; 0x84
 8007f48:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007f4c:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	681a      	ldr	r2, [r3, #0]
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	68db      	ldr	r3, [r3, #12]
 8007f58:	0c1b      	lsrs	r3, r3, #16
 8007f5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f5e:	4413      	add	r3, r2
 8007f60:	1c5a      	adds	r2, r3, #1
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	4619      	mov	r1, r3
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	01db      	lsls	r3, r3, #7
 8007f6c:	440b      	add	r3, r1
 8007f6e:	3384      	adds	r3, #132	; 0x84
 8007f70:	4619      	mov	r1, r3
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	4313      	orrs	r3, r2
 8007f76:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	68da      	ldr	r2, [r3, #12]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f86:	4413      	add	r3, r2
 8007f88:	041b      	lsls	r3, r3, #16
 8007f8a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	461a      	mov	r2, r3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	01db      	lsls	r3, r3, #7
 8007f96:	4413      	add	r3, r2
 8007f98:	3384      	adds	r3, #132	; 0x84
 8007f9a:	689b      	ldr	r3, [r3, #8]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	6812      	ldr	r2, [r2, #0]
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	01d2      	lsls	r2, r2, #7
 8007fa6:	440a      	add	r2, r1
 8007fa8:	3284      	adds	r2, #132	; 0x84
 8007faa:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007fae:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	689a      	ldr	r2, [r3, #8]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	68db      	ldr	r3, [r3, #12]
 8007fba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fbe:	4413      	add	r3, r2
 8007fc0:	1c5a      	adds	r2, r3, #1
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4619      	mov	r1, r3
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	01db      	lsls	r3, r3, #7
 8007fcc:	440b      	add	r3, r1
 8007fce:	3384      	adds	r3, #132	; 0x84
 8007fd0:	4619      	mov	r1, r3
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	461a      	mov	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	01db      	lsls	r3, r3, #7
 8007fe2:	4413      	add	r3, r2
 8007fe4:	3384      	adds	r3, #132	; 0x84
 8007fe6:	691b      	ldr	r3, [r3, #16]
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	6812      	ldr	r2, [r2, #0]
 8007fec:	4611      	mov	r1, r2
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	01d2      	lsls	r2, r2, #7
 8007ff2:	440a      	add	r2, r1
 8007ff4:	3284      	adds	r2, #132	; 0x84
 8007ff6:	f023 0307 	bic.w	r3, r3, #7
 8007ffa:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	01db      	lsls	r3, r3, #7
 8008006:	4413      	add	r3, r2
 8008008:	3384      	adds	r3, #132	; 0x84
 800800a:	461a      	mov	r2, r3
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	691b      	ldr	r3, [r3, #16]
 8008010:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008012:	68bb      	ldr	r3, [r7, #8]
 8008014:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008018:	021b      	lsls	r3, r3, #8
 800801a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008022:	041b      	lsls	r3, r3, #16
 8008024:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	699b      	ldr	r3, [r3, #24]
 800802a:	061b      	lsls	r3, r3, #24
 800802c:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	01db      	lsls	r3, r3, #7
 8008038:	4413      	add	r3, r2
 800803a:	3384      	adds	r3, #132	; 0x84
 800803c:	699b      	ldr	r3, [r3, #24]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	01db      	lsls	r3, r3, #7
 8008048:	4413      	add	r3, r2
 800804a:	3384      	adds	r3, #132	; 0x84
 800804c:	461a      	mov	r2, r3
 800804e:	2300      	movs	r3, #0
 8008050:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008058:	461a      	mov	r2, r3
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	431a      	orrs	r2, r3
 800805e:	69bb      	ldr	r3, [r7, #24]
 8008060:	431a      	orrs	r2, r3
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4619      	mov	r1, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	01db      	lsls	r3, r3, #7
 800806c:	440b      	add	r3, r1
 800806e:	3384      	adds	r3, #132	; 0x84
 8008070:	4619      	mov	r1, r3
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	4313      	orrs	r3, r2
 8008076:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	461a      	mov	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	01db      	lsls	r3, r3, #7
 8008082:	4413      	add	r3, r2
 8008084:	3384      	adds	r3, #132	; 0x84
 8008086:	695b      	ldr	r3, [r3, #20]
 8008088:	68fa      	ldr	r2, [r7, #12]
 800808a:	6812      	ldr	r2, [r2, #0]
 800808c:	4611      	mov	r1, r2
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	01d2      	lsls	r2, r2, #7
 8008092:	440a      	add	r2, r1
 8008094:	3284      	adds	r2, #132	; 0x84
 8008096:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800809a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	461a      	mov	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	01db      	lsls	r3, r3, #7
 80080a6:	4413      	add	r3, r2
 80080a8:	3384      	adds	r3, #132	; 0x84
 80080aa:	461a      	mov	r2, r3
 80080ac:	68bb      	ldr	r3, [r7, #8]
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	461a      	mov	r2, r3
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	01db      	lsls	r3, r3, #7
 80080bc:	4413      	add	r3, r2
 80080be:	3384      	adds	r3, #132	; 0x84
 80080c0:	69da      	ldr	r2, [r3, #28]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	4619      	mov	r1, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	01db      	lsls	r3, r3, #7
 80080cc:	440b      	add	r3, r1
 80080ce:	3384      	adds	r3, #132	; 0x84
 80080d0:	4619      	mov	r1, r3
 80080d2:	4b58      	ldr	r3, [pc, #352]	; (8008234 <LTDC_SetConfig+0x32c>)
 80080d4:	4013      	ands	r3, r2
 80080d6:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80080d8:	68bb      	ldr	r3, [r7, #8]
 80080da:	69da      	ldr	r2, [r3, #28]
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	6a1b      	ldr	r3, [r3, #32]
 80080e0:	68f9      	ldr	r1, [r7, #12]
 80080e2:	6809      	ldr	r1, [r1, #0]
 80080e4:	4608      	mov	r0, r1
 80080e6:	6879      	ldr	r1, [r7, #4]
 80080e8:	01c9      	lsls	r1, r1, #7
 80080ea:	4401      	add	r1, r0
 80080ec:	3184      	adds	r1, #132	; 0x84
 80080ee:	4313      	orrs	r3, r2
 80080f0:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	461a      	mov	r2, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	01db      	lsls	r3, r3, #7
 80080fc:	4413      	add	r3, r2
 80080fe:	3384      	adds	r3, #132	; 0x84
 8008100:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	461a      	mov	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	01db      	lsls	r3, r3, #7
 800810c:	4413      	add	r3, r2
 800810e:	3384      	adds	r3, #132	; 0x84
 8008110:	461a      	mov	r2, r3
 8008112:	2300      	movs	r3, #0
 8008114:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	461a      	mov	r2, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	01db      	lsls	r3, r3, #7
 8008120:	4413      	add	r3, r2
 8008122:	3384      	adds	r3, #132	; 0x84
 8008124:	461a      	mov	r2, r3
 8008126:	68bb      	ldr	r3, [r7, #8]
 8008128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812a:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	691b      	ldr	r3, [r3, #16]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d102      	bne.n	800813a <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008134:	2304      	movs	r3, #4
 8008136:	61fb      	str	r3, [r7, #28]
 8008138:	e01b      	b.n	8008172 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800813a:	68bb      	ldr	r3, [r7, #8]
 800813c:	691b      	ldr	r3, [r3, #16]
 800813e:	2b01      	cmp	r3, #1
 8008140:	d102      	bne.n	8008148 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008142:	2303      	movs	r3, #3
 8008144:	61fb      	str	r3, [r7, #28]
 8008146:	e014      	b.n	8008172 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	691b      	ldr	r3, [r3, #16]
 800814c:	2b04      	cmp	r3, #4
 800814e:	d00b      	beq.n	8008168 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008154:	2b02      	cmp	r3, #2
 8008156:	d007      	beq.n	8008168 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800815c:	2b03      	cmp	r3, #3
 800815e:	d003      	beq.n	8008168 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008164:	2b07      	cmp	r3, #7
 8008166:	d102      	bne.n	800816e <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 8008168:	2302      	movs	r3, #2
 800816a:	61fb      	str	r3, [r7, #28]
 800816c:	e001      	b.n	8008172 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 800816e:	2301      	movs	r3, #1
 8008170:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	461a      	mov	r2, r3
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	01db      	lsls	r3, r3, #7
 800817c:	4413      	add	r3, r2
 800817e:	3384      	adds	r3, #132	; 0x84
 8008180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	6812      	ldr	r2, [r2, #0]
 8008186:	4611      	mov	r1, r2
 8008188:	687a      	ldr	r2, [r7, #4]
 800818a:	01d2      	lsls	r2, r2, #7
 800818c:	440a      	add	r2, r1
 800818e:	3284      	adds	r2, #132	; 0x84
 8008190:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008194:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800819a:	69fa      	ldr	r2, [r7, #28]
 800819c:	fb02 f303 	mul.w	r3, r2, r3
 80081a0:	041a      	lsls	r2, r3, #16
 80081a2:	68bb      	ldr	r3, [r7, #8]
 80081a4:	6859      	ldr	r1, [r3, #4]
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	1acb      	subs	r3, r1, r3
 80081ac:	69f9      	ldr	r1, [r7, #28]
 80081ae:	fb01 f303 	mul.w	r3, r1, r3
 80081b2:	3303      	adds	r3, #3
 80081b4:	68f9      	ldr	r1, [r7, #12]
 80081b6:	6809      	ldr	r1, [r1, #0]
 80081b8:	4608      	mov	r0, r1
 80081ba:	6879      	ldr	r1, [r7, #4]
 80081bc:	01c9      	lsls	r1, r1, #7
 80081be:	4401      	add	r1, r0
 80081c0:	3184      	adds	r1, #132	; 0x84
 80081c2:	4313      	orrs	r3, r2
 80081c4:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	461a      	mov	r2, r3
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	01db      	lsls	r3, r3, #7
 80081d0:	4413      	add	r3, r2
 80081d2:	3384      	adds	r3, #132	; 0x84
 80081d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4619      	mov	r1, r3
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	01db      	lsls	r3, r3, #7
 80081e0:	440b      	add	r3, r1
 80081e2:	3384      	adds	r3, #132	; 0x84
 80081e4:	4619      	mov	r1, r3
 80081e6:	4b14      	ldr	r3, [pc, #80]	; (8008238 <LTDC_SetConfig+0x330>)
 80081e8:	4013      	ands	r3, r2
 80081ea:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	461a      	mov	r2, r3
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	01db      	lsls	r3, r3, #7
 80081f6:	4413      	add	r3, r2
 80081f8:	3384      	adds	r3, #132	; 0x84
 80081fa:	461a      	mov	r2, r3
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008200:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	461a      	mov	r2, r3
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	01db      	lsls	r3, r3, #7
 800820c:	4413      	add	r3, r2
 800820e:	3384      	adds	r3, #132	; 0x84
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	68fa      	ldr	r2, [r7, #12]
 8008214:	6812      	ldr	r2, [r2, #0]
 8008216:	4611      	mov	r1, r2
 8008218:	687a      	ldr	r2, [r7, #4]
 800821a:	01d2      	lsls	r2, r2, #7
 800821c:	440a      	add	r2, r1
 800821e:	3284      	adds	r2, #132	; 0x84
 8008220:	f043 0301 	orr.w	r3, r3, #1
 8008224:	6013      	str	r3, [r2, #0]
}
 8008226:	bf00      	nop
 8008228:	3724      	adds	r7, #36	; 0x24
 800822a:	46bd      	mov	sp, r7
 800822c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008230:	4770      	bx	lr
 8008232:	bf00      	nop
 8008234:	fffff8f8 	.word	0xfffff8f8
 8008238:	fffff800 	.word	0xfffff800

0800823c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800823c:	b480      	push	{r7}
 800823e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008240:	4b05      	ldr	r3, [pc, #20]	; (8008258 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a04      	ldr	r2, [pc, #16]	; (8008258 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800824a:	6013      	str	r3, [r2, #0]
}
 800824c:	bf00      	nop
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr
 8008256:	bf00      	nop
 8008258:	40007000 	.word	0x40007000

0800825c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b082      	sub	sp, #8
 8008260:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008262:	2300      	movs	r3, #0
 8008264:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008266:	4b23      	ldr	r3, [pc, #140]	; (80082f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800826a:	4a22      	ldr	r2, [pc, #136]	; (80082f4 <HAL_PWREx_EnableOverDrive+0x98>)
 800826c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008270:	6413      	str	r3, [r2, #64]	; 0x40
 8008272:	4b20      	ldr	r3, [pc, #128]	; (80082f4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800827a:	603b      	str	r3, [r7, #0]
 800827c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800827e:	4b1e      	ldr	r3, [pc, #120]	; (80082f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a1d      	ldr	r2, [pc, #116]	; (80082f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008288:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800828a:	f7fd fca7 	bl	8005bdc <HAL_GetTick>
 800828e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008290:	e009      	b.n	80082a6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008292:	f7fd fca3 	bl	8005bdc <HAL_GetTick>
 8008296:	4602      	mov	r2, r0
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	1ad3      	subs	r3, r2, r3
 800829c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082a0:	d901      	bls.n	80082a6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e022      	b.n	80082ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80082a6:	4b14      	ldr	r3, [pc, #80]	; (80082f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082a8:	685b      	ldr	r3, [r3, #4]
 80082aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082b2:	d1ee      	bne.n	8008292 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80082b4:	4b10      	ldr	r3, [pc, #64]	; (80082f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a0f      	ldr	r2, [pc, #60]	; (80082f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082be:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80082c0:	f7fd fc8c 	bl	8005bdc <HAL_GetTick>
 80082c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80082c6:	e009      	b.n	80082dc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80082c8:	f7fd fc88 	bl	8005bdc <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80082d6:	d901      	bls.n	80082dc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e007      	b.n	80082ec <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80082dc:	4b06      	ldr	r3, [pc, #24]	; (80082f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80082de:	685b      	ldr	r3, [r3, #4]
 80082e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80082e8:	d1ee      	bne.n	80082c8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80082ea:	2300      	movs	r3, #0
}
 80082ec:	4618      	mov	r0, r3
 80082ee:	3708      	adds	r7, #8
 80082f0:	46bd      	mov	sp, r7
 80082f2:	bd80      	pop	{r7, pc}
 80082f4:	40023800 	.word	0x40023800
 80082f8:	40007000 	.word	0x40007000

080082fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b086      	sub	sp, #24
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008304:	2300      	movs	r3, #0
 8008306:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d101      	bne.n	8008312 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800830e:	2301      	movs	r3, #1
 8008310:	e291      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f003 0301 	and.w	r3, r3, #1
 800831a:	2b00      	cmp	r3, #0
 800831c:	f000 8087 	beq.w	800842e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008320:	4b96      	ldr	r3, [pc, #600]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008322:	689b      	ldr	r3, [r3, #8]
 8008324:	f003 030c 	and.w	r3, r3, #12
 8008328:	2b04      	cmp	r3, #4
 800832a:	d00c      	beq.n	8008346 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800832c:	4b93      	ldr	r3, [pc, #588]	; (800857c <HAL_RCC_OscConfig+0x280>)
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f003 030c 	and.w	r3, r3, #12
 8008334:	2b08      	cmp	r3, #8
 8008336:	d112      	bne.n	800835e <HAL_RCC_OscConfig+0x62>
 8008338:	4b90      	ldr	r3, [pc, #576]	; (800857c <HAL_RCC_OscConfig+0x280>)
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008340:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008344:	d10b      	bne.n	800835e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008346:	4b8d      	ldr	r3, [pc, #564]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800834e:	2b00      	cmp	r3, #0
 8008350:	d06c      	beq.n	800842c <HAL_RCC_OscConfig+0x130>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	685b      	ldr	r3, [r3, #4]
 8008356:	2b00      	cmp	r3, #0
 8008358:	d168      	bne.n	800842c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800835a:	2301      	movs	r3, #1
 800835c:	e26b      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008366:	d106      	bne.n	8008376 <HAL_RCC_OscConfig+0x7a>
 8008368:	4b84      	ldr	r3, [pc, #528]	; (800857c <HAL_RCC_OscConfig+0x280>)
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	4a83      	ldr	r2, [pc, #524]	; (800857c <HAL_RCC_OscConfig+0x280>)
 800836e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	e02e      	b.n	80083d4 <HAL_RCC_OscConfig+0xd8>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d10c      	bne.n	8008398 <HAL_RCC_OscConfig+0x9c>
 800837e:	4b7f      	ldr	r3, [pc, #508]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	4a7e      	ldr	r2, [pc, #504]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008388:	6013      	str	r3, [r2, #0]
 800838a:	4b7c      	ldr	r3, [pc, #496]	; (800857c <HAL_RCC_OscConfig+0x280>)
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a7b      	ldr	r2, [pc, #492]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008390:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008394:	6013      	str	r3, [r2, #0]
 8008396:	e01d      	b.n	80083d4 <HAL_RCC_OscConfig+0xd8>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083a0:	d10c      	bne.n	80083bc <HAL_RCC_OscConfig+0xc0>
 80083a2:	4b76      	ldr	r3, [pc, #472]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a75      	ldr	r2, [pc, #468]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80083a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80083ac:	6013      	str	r3, [r2, #0]
 80083ae:	4b73      	ldr	r3, [pc, #460]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	4a72      	ldr	r2, [pc, #456]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80083b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083b8:	6013      	str	r3, [r2, #0]
 80083ba:	e00b      	b.n	80083d4 <HAL_RCC_OscConfig+0xd8>
 80083bc:	4b6f      	ldr	r3, [pc, #444]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a6e      	ldr	r2, [pc, #440]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80083c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80083c6:	6013      	str	r3, [r2, #0]
 80083c8:	4b6c      	ldr	r3, [pc, #432]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a6b      	ldr	r2, [pc, #428]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80083ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80083d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d013      	beq.n	8008404 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80083dc:	f7fd fbfe 	bl	8005bdc <HAL_GetTick>
 80083e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083e2:	e008      	b.n	80083f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80083e4:	f7fd fbfa 	bl	8005bdc <HAL_GetTick>
 80083e8:	4602      	mov	r2, r0
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	1ad3      	subs	r3, r2, r3
 80083ee:	2b64      	cmp	r3, #100	; 0x64
 80083f0:	d901      	bls.n	80083f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80083f2:	2303      	movs	r3, #3
 80083f4:	e21f      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80083f6:	4b61      	ldr	r3, [pc, #388]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d0f0      	beq.n	80083e4 <HAL_RCC_OscConfig+0xe8>
 8008402:	e014      	b.n	800842e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008404:	f7fd fbea 	bl	8005bdc <HAL_GetTick>
 8008408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800840a:	e008      	b.n	800841e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800840c:	f7fd fbe6 	bl	8005bdc <HAL_GetTick>
 8008410:	4602      	mov	r2, r0
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	1ad3      	subs	r3, r2, r3
 8008416:	2b64      	cmp	r3, #100	; 0x64
 8008418:	d901      	bls.n	800841e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800841a:	2303      	movs	r3, #3
 800841c:	e20b      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800841e:	4b57      	ldr	r3, [pc, #348]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008426:	2b00      	cmp	r3, #0
 8008428:	d1f0      	bne.n	800840c <HAL_RCC_OscConfig+0x110>
 800842a:	e000      	b.n	800842e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800842c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f003 0302 	and.w	r3, r3, #2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d069      	beq.n	800850e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800843a:	4b50      	ldr	r3, [pc, #320]	; (800857c <HAL_RCC_OscConfig+0x280>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f003 030c 	and.w	r3, r3, #12
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00b      	beq.n	800845e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008446:	4b4d      	ldr	r3, [pc, #308]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008448:	689b      	ldr	r3, [r3, #8]
 800844a:	f003 030c 	and.w	r3, r3, #12
 800844e:	2b08      	cmp	r3, #8
 8008450:	d11c      	bne.n	800848c <HAL_RCC_OscConfig+0x190>
 8008452:	4b4a      	ldr	r3, [pc, #296]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800845a:	2b00      	cmp	r3, #0
 800845c:	d116      	bne.n	800848c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800845e:	4b47      	ldr	r3, [pc, #284]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f003 0302 	and.w	r3, r3, #2
 8008466:	2b00      	cmp	r3, #0
 8008468:	d005      	beq.n	8008476 <HAL_RCC_OscConfig+0x17a>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	68db      	ldr	r3, [r3, #12]
 800846e:	2b01      	cmp	r3, #1
 8008470:	d001      	beq.n	8008476 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e1df      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008476:	4b41      	ldr	r3, [pc, #260]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	691b      	ldr	r3, [r3, #16]
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	493d      	ldr	r1, [pc, #244]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008486:	4313      	orrs	r3, r2
 8008488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800848a:	e040      	b.n	800850e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d023      	beq.n	80084dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008494:	4b39      	ldr	r3, [pc, #228]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a38      	ldr	r2, [pc, #224]	; (800857c <HAL_RCC_OscConfig+0x280>)
 800849a:	f043 0301 	orr.w	r3, r3, #1
 800849e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084a0:	f7fd fb9c 	bl	8005bdc <HAL_GetTick>
 80084a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084a6:	e008      	b.n	80084ba <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084a8:	f7fd fb98 	bl	8005bdc <HAL_GetTick>
 80084ac:	4602      	mov	r2, r0
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	1ad3      	subs	r3, r2, r3
 80084b2:	2b02      	cmp	r3, #2
 80084b4:	d901      	bls.n	80084ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80084b6:	2303      	movs	r3, #3
 80084b8:	e1bd      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80084ba:	4b30      	ldr	r3, [pc, #192]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0f0      	beq.n	80084a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084c6:	4b2d      	ldr	r3, [pc, #180]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	691b      	ldr	r3, [r3, #16]
 80084d2:	00db      	lsls	r3, r3, #3
 80084d4:	4929      	ldr	r1, [pc, #164]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80084d6:	4313      	orrs	r3, r2
 80084d8:	600b      	str	r3, [r1, #0]
 80084da:	e018      	b.n	800850e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80084dc:	4b27      	ldr	r3, [pc, #156]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a26      	ldr	r2, [pc, #152]	; (800857c <HAL_RCC_OscConfig+0x280>)
 80084e2:	f023 0301 	bic.w	r3, r3, #1
 80084e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80084e8:	f7fd fb78 	bl	8005bdc <HAL_GetTick>
 80084ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80084ee:	e008      	b.n	8008502 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80084f0:	f7fd fb74 	bl	8005bdc <HAL_GetTick>
 80084f4:	4602      	mov	r2, r0
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	1ad3      	subs	r3, r2, r3
 80084fa:	2b02      	cmp	r3, #2
 80084fc:	d901      	bls.n	8008502 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80084fe:	2303      	movs	r3, #3
 8008500:	e199      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008502:	4b1e      	ldr	r3, [pc, #120]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	f003 0302 	and.w	r3, r3, #2
 800850a:	2b00      	cmp	r3, #0
 800850c:	d1f0      	bne.n	80084f0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f003 0308 	and.w	r3, r3, #8
 8008516:	2b00      	cmp	r3, #0
 8008518:	d038      	beq.n	800858c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d019      	beq.n	8008556 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008522:	4b16      	ldr	r3, [pc, #88]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008524:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008526:	4a15      	ldr	r2, [pc, #84]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008528:	f043 0301 	orr.w	r3, r3, #1
 800852c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800852e:	f7fd fb55 	bl	8005bdc <HAL_GetTick>
 8008532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008534:	e008      	b.n	8008548 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008536:	f7fd fb51 	bl	8005bdc <HAL_GetTick>
 800853a:	4602      	mov	r2, r0
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	1ad3      	subs	r3, r2, r3
 8008540:	2b02      	cmp	r3, #2
 8008542:	d901      	bls.n	8008548 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008544:	2303      	movs	r3, #3
 8008546:	e176      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008548:	4b0c      	ldr	r3, [pc, #48]	; (800857c <HAL_RCC_OscConfig+0x280>)
 800854a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0f0      	beq.n	8008536 <HAL_RCC_OscConfig+0x23a>
 8008554:	e01a      	b.n	800858c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008556:	4b09      	ldr	r3, [pc, #36]	; (800857c <HAL_RCC_OscConfig+0x280>)
 8008558:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800855a:	4a08      	ldr	r2, [pc, #32]	; (800857c <HAL_RCC_OscConfig+0x280>)
 800855c:	f023 0301 	bic.w	r3, r3, #1
 8008560:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008562:	f7fd fb3b 	bl	8005bdc <HAL_GetTick>
 8008566:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008568:	e00a      	b.n	8008580 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800856a:	f7fd fb37 	bl	8005bdc <HAL_GetTick>
 800856e:	4602      	mov	r2, r0
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	1ad3      	subs	r3, r2, r3
 8008574:	2b02      	cmp	r3, #2
 8008576:	d903      	bls.n	8008580 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008578:	2303      	movs	r3, #3
 800857a:	e15c      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
 800857c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008580:	4b91      	ldr	r3, [pc, #580]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1ee      	bne.n	800856a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f003 0304 	and.w	r3, r3, #4
 8008594:	2b00      	cmp	r3, #0
 8008596:	f000 80a4 	beq.w	80086e2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800859a:	4b8b      	ldr	r3, [pc, #556]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 800859c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800859e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d10d      	bne.n	80085c2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80085a6:	4b88      	ldr	r3, [pc, #544]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 80085a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085aa:	4a87      	ldr	r2, [pc, #540]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 80085ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80085b0:	6413      	str	r3, [r2, #64]	; 0x40
 80085b2:	4b85      	ldr	r3, [pc, #532]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 80085b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80085ba:	60bb      	str	r3, [r7, #8]
 80085bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80085be:	2301      	movs	r3, #1
 80085c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085c2:	4b82      	ldr	r3, [pc, #520]	; (80087cc <HAL_RCC_OscConfig+0x4d0>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d118      	bne.n	8008600 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80085ce:	4b7f      	ldr	r3, [pc, #508]	; (80087cc <HAL_RCC_OscConfig+0x4d0>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a7e      	ldr	r2, [pc, #504]	; (80087cc <HAL_RCC_OscConfig+0x4d0>)
 80085d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80085da:	f7fd faff 	bl	8005bdc <HAL_GetTick>
 80085de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085e0:	e008      	b.n	80085f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80085e2:	f7fd fafb 	bl	8005bdc <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	2b64      	cmp	r3, #100	; 0x64
 80085ee:	d901      	bls.n	80085f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e120      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80085f4:	4b75      	ldr	r3, [pc, #468]	; (80087cc <HAL_RCC_OscConfig+0x4d0>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d0f0      	beq.n	80085e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	2b01      	cmp	r3, #1
 8008606:	d106      	bne.n	8008616 <HAL_RCC_OscConfig+0x31a>
 8008608:	4b6f      	ldr	r3, [pc, #444]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 800860a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860c:	4a6e      	ldr	r2, [pc, #440]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 800860e:	f043 0301 	orr.w	r3, r3, #1
 8008612:	6713      	str	r3, [r2, #112]	; 0x70
 8008614:	e02d      	b.n	8008672 <HAL_RCC_OscConfig+0x376>
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	689b      	ldr	r3, [r3, #8]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10c      	bne.n	8008638 <HAL_RCC_OscConfig+0x33c>
 800861e:	4b6a      	ldr	r3, [pc, #424]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008622:	4a69      	ldr	r2, [pc, #420]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008624:	f023 0301 	bic.w	r3, r3, #1
 8008628:	6713      	str	r3, [r2, #112]	; 0x70
 800862a:	4b67      	ldr	r3, [pc, #412]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 800862c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800862e:	4a66      	ldr	r2, [pc, #408]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008630:	f023 0304 	bic.w	r3, r3, #4
 8008634:	6713      	str	r3, [r2, #112]	; 0x70
 8008636:	e01c      	b.n	8008672 <HAL_RCC_OscConfig+0x376>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	689b      	ldr	r3, [r3, #8]
 800863c:	2b05      	cmp	r3, #5
 800863e:	d10c      	bne.n	800865a <HAL_RCC_OscConfig+0x35e>
 8008640:	4b61      	ldr	r3, [pc, #388]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008644:	4a60      	ldr	r2, [pc, #384]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008646:	f043 0304 	orr.w	r3, r3, #4
 800864a:	6713      	str	r3, [r2, #112]	; 0x70
 800864c:	4b5e      	ldr	r3, [pc, #376]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 800864e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008650:	4a5d      	ldr	r2, [pc, #372]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008652:	f043 0301 	orr.w	r3, r3, #1
 8008656:	6713      	str	r3, [r2, #112]	; 0x70
 8008658:	e00b      	b.n	8008672 <HAL_RCC_OscConfig+0x376>
 800865a:	4b5b      	ldr	r3, [pc, #364]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 800865c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800865e:	4a5a      	ldr	r2, [pc, #360]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008660:	f023 0301 	bic.w	r3, r3, #1
 8008664:	6713      	str	r3, [r2, #112]	; 0x70
 8008666:	4b58      	ldr	r3, [pc, #352]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800866a:	4a57      	ldr	r2, [pc, #348]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 800866c:	f023 0304 	bic.w	r3, r3, #4
 8008670:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	2b00      	cmp	r3, #0
 8008678:	d015      	beq.n	80086a6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800867a:	f7fd faaf 	bl	8005bdc <HAL_GetTick>
 800867e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008680:	e00a      	b.n	8008698 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008682:	f7fd faab 	bl	8005bdc <HAL_GetTick>
 8008686:	4602      	mov	r2, r0
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	1ad3      	subs	r3, r2, r3
 800868c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008690:	4293      	cmp	r3, r2
 8008692:	d901      	bls.n	8008698 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008694:	2303      	movs	r3, #3
 8008696:	e0ce      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008698:	4b4b      	ldr	r3, [pc, #300]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 800869a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800869c:	f003 0302 	and.w	r3, r3, #2
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0ee      	beq.n	8008682 <HAL_RCC_OscConfig+0x386>
 80086a4:	e014      	b.n	80086d0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086a6:	f7fd fa99 	bl	8005bdc <HAL_GetTick>
 80086aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086ac:	e00a      	b.n	80086c4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086ae:	f7fd fa95 	bl	8005bdc <HAL_GetTick>
 80086b2:	4602      	mov	r2, r0
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	1ad3      	subs	r3, r2, r3
 80086b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80086bc:	4293      	cmp	r3, r2
 80086be:	d901      	bls.n	80086c4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80086c0:	2303      	movs	r3, #3
 80086c2:	e0b8      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80086c4:	4b40      	ldr	r3, [pc, #256]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 80086c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086c8:	f003 0302 	and.w	r3, r3, #2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d1ee      	bne.n	80086ae <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80086d0:	7dfb      	ldrb	r3, [r7, #23]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d105      	bne.n	80086e2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80086d6:	4b3c      	ldr	r3, [pc, #240]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 80086d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086da:	4a3b      	ldr	r2, [pc, #236]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 80086dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086e0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	699b      	ldr	r3, [r3, #24]
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	f000 80a4 	beq.w	8008834 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80086ec:	4b36      	ldr	r3, [pc, #216]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 80086ee:	689b      	ldr	r3, [r3, #8]
 80086f0:	f003 030c 	and.w	r3, r3, #12
 80086f4:	2b08      	cmp	r3, #8
 80086f6:	d06b      	beq.n	80087d0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d149      	bne.n	8008794 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008700:	4b31      	ldr	r3, [pc, #196]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a30      	ldr	r2, [pc, #192]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800870a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800870c:	f7fd fa66 	bl	8005bdc <HAL_GetTick>
 8008710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008712:	e008      	b.n	8008726 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008714:	f7fd fa62 	bl	8005bdc <HAL_GetTick>
 8008718:	4602      	mov	r2, r0
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	1ad3      	subs	r3, r2, r3
 800871e:	2b02      	cmp	r3, #2
 8008720:	d901      	bls.n	8008726 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008722:	2303      	movs	r3, #3
 8008724:	e087      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008726:	4b28      	ldr	r3, [pc, #160]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800872e:	2b00      	cmp	r3, #0
 8008730:	d1f0      	bne.n	8008714 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	69da      	ldr	r2, [r3, #28]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a1b      	ldr	r3, [r3, #32]
 800873a:	431a      	orrs	r2, r3
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008740:	019b      	lsls	r3, r3, #6
 8008742:	431a      	orrs	r2, r3
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008748:	085b      	lsrs	r3, r3, #1
 800874a:	3b01      	subs	r3, #1
 800874c:	041b      	lsls	r3, r3, #16
 800874e:	431a      	orrs	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008754:	061b      	lsls	r3, r3, #24
 8008756:	4313      	orrs	r3, r2
 8008758:	4a1b      	ldr	r2, [pc, #108]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 800875a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800875e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008760:	4b19      	ldr	r3, [pc, #100]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	4a18      	ldr	r2, [pc, #96]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008766:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800876a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800876c:	f7fd fa36 	bl	8005bdc <HAL_GetTick>
 8008770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008772:	e008      	b.n	8008786 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008774:	f7fd fa32 	bl	8005bdc <HAL_GetTick>
 8008778:	4602      	mov	r2, r0
 800877a:	693b      	ldr	r3, [r7, #16]
 800877c:	1ad3      	subs	r3, r2, r3
 800877e:	2b02      	cmp	r3, #2
 8008780:	d901      	bls.n	8008786 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e057      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008786:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800878e:	2b00      	cmp	r3, #0
 8008790:	d0f0      	beq.n	8008774 <HAL_RCC_OscConfig+0x478>
 8008792:	e04f      	b.n	8008834 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008794:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a0b      	ldr	r2, [pc, #44]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 800879a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800879e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a0:	f7fd fa1c 	bl	8005bdc <HAL_GetTick>
 80087a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087a6:	e008      	b.n	80087ba <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80087a8:	f7fd fa18 	bl	8005bdc <HAL_GetTick>
 80087ac:	4602      	mov	r2, r0
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	1ad3      	subs	r3, r2, r3
 80087b2:	2b02      	cmp	r3, #2
 80087b4:	d901      	bls.n	80087ba <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80087b6:	2303      	movs	r3, #3
 80087b8:	e03d      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80087ba:	4b03      	ldr	r3, [pc, #12]	; (80087c8 <HAL_RCC_OscConfig+0x4cc>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1f0      	bne.n	80087a8 <HAL_RCC_OscConfig+0x4ac>
 80087c6:	e035      	b.n	8008834 <HAL_RCC_OscConfig+0x538>
 80087c8:	40023800 	.word	0x40023800
 80087cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80087d0:	4b1b      	ldr	r3, [pc, #108]	; (8008840 <HAL_RCC_OscConfig+0x544>)
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d028      	beq.n	8008830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d121      	bne.n	8008830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d11a      	bne.n	8008830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008800:	4013      	ands	r3, r2
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008806:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008808:	4293      	cmp	r3, r2
 800880a:	d111      	bne.n	8008830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008816:	085b      	lsrs	r3, r3, #1
 8008818:	3b01      	subs	r3, #1
 800881a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800881c:	429a      	cmp	r2, r3
 800881e:	d107      	bne.n	8008830 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800882a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800882c:	429a      	cmp	r2, r3
 800882e:	d001      	beq.n	8008834 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008830:	2301      	movs	r3, #1
 8008832:	e000      	b.n	8008836 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008834:	2300      	movs	r3, #0
}
 8008836:	4618      	mov	r0, r3
 8008838:	3718      	adds	r7, #24
 800883a:	46bd      	mov	sp, r7
 800883c:	bd80      	pop	{r7, pc}
 800883e:	bf00      	nop
 8008840:	40023800 	.word	0x40023800

08008844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800884e:	2300      	movs	r3, #0
 8008850:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d101      	bne.n	800885c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e0d0      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800885c:	4b6a      	ldr	r3, [pc, #424]	; (8008a08 <HAL_RCC_ClockConfig+0x1c4>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	683a      	ldr	r2, [r7, #0]
 8008866:	429a      	cmp	r2, r3
 8008868:	d910      	bls.n	800888c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800886a:	4b67      	ldr	r3, [pc, #412]	; (8008a08 <HAL_RCC_ClockConfig+0x1c4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f023 020f 	bic.w	r2, r3, #15
 8008872:	4965      	ldr	r1, [pc, #404]	; (8008a08 <HAL_RCC_ClockConfig+0x1c4>)
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	4313      	orrs	r3, r2
 8008878:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800887a:	4b63      	ldr	r3, [pc, #396]	; (8008a08 <HAL_RCC_ClockConfig+0x1c4>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f003 030f 	and.w	r3, r3, #15
 8008882:	683a      	ldr	r2, [r7, #0]
 8008884:	429a      	cmp	r2, r3
 8008886:	d001      	beq.n	800888c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008888:	2301      	movs	r3, #1
 800888a:	e0b8      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f003 0302 	and.w	r3, r3, #2
 8008894:	2b00      	cmp	r3, #0
 8008896:	d020      	beq.n	80088da <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	f003 0304 	and.w	r3, r3, #4
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d005      	beq.n	80088b0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80088a4:	4b59      	ldr	r3, [pc, #356]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	4a58      	ldr	r2, [pc, #352]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 80088aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80088ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	f003 0308 	and.w	r3, r3, #8
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d005      	beq.n	80088c8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80088bc:	4b53      	ldr	r3, [pc, #332]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 80088be:	689b      	ldr	r3, [r3, #8]
 80088c0:	4a52      	ldr	r2, [pc, #328]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 80088c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80088c6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80088c8:	4b50      	ldr	r3, [pc, #320]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 80088ca:	689b      	ldr	r3, [r3, #8]
 80088cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	494d      	ldr	r1, [pc, #308]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 80088d6:	4313      	orrs	r3, r2
 80088d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f003 0301 	and.w	r3, r3, #1
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d040      	beq.n	8008968 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	685b      	ldr	r3, [r3, #4]
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d107      	bne.n	80088fe <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80088ee:	4b47      	ldr	r3, [pc, #284]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d115      	bne.n	8008926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80088fa:	2301      	movs	r3, #1
 80088fc:	e07f      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	2b02      	cmp	r3, #2
 8008904:	d107      	bne.n	8008916 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008906:	4b41      	ldr	r3, [pc, #260]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800890e:	2b00      	cmp	r3, #0
 8008910:	d109      	bne.n	8008926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008912:	2301      	movs	r3, #1
 8008914:	e073      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008916:	4b3d      	ldr	r3, [pc, #244]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f003 0302 	and.w	r3, r3, #2
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e06b      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008926:	4b39      	ldr	r3, [pc, #228]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f023 0203 	bic.w	r2, r3, #3
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685b      	ldr	r3, [r3, #4]
 8008932:	4936      	ldr	r1, [pc, #216]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 8008934:	4313      	orrs	r3, r2
 8008936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008938:	f7fd f950 	bl	8005bdc <HAL_GetTick>
 800893c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800893e:	e00a      	b.n	8008956 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008940:	f7fd f94c 	bl	8005bdc <HAL_GetTick>
 8008944:	4602      	mov	r2, r0
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	f241 3288 	movw	r2, #5000	; 0x1388
 800894e:	4293      	cmp	r3, r2
 8008950:	d901      	bls.n	8008956 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008952:	2303      	movs	r3, #3
 8008954:	e053      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008956:	4b2d      	ldr	r3, [pc, #180]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 8008958:	689b      	ldr	r3, [r3, #8]
 800895a:	f003 020c 	and.w	r2, r3, #12
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	429a      	cmp	r2, r3
 8008966:	d1eb      	bne.n	8008940 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008968:	4b27      	ldr	r3, [pc, #156]	; (8008a08 <HAL_RCC_ClockConfig+0x1c4>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 030f 	and.w	r3, r3, #15
 8008970:	683a      	ldr	r2, [r7, #0]
 8008972:	429a      	cmp	r2, r3
 8008974:	d210      	bcs.n	8008998 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008976:	4b24      	ldr	r3, [pc, #144]	; (8008a08 <HAL_RCC_ClockConfig+0x1c4>)
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f023 020f 	bic.w	r2, r3, #15
 800897e:	4922      	ldr	r1, [pc, #136]	; (8008a08 <HAL_RCC_ClockConfig+0x1c4>)
 8008980:	683b      	ldr	r3, [r7, #0]
 8008982:	4313      	orrs	r3, r2
 8008984:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008986:	4b20      	ldr	r3, [pc, #128]	; (8008a08 <HAL_RCC_ClockConfig+0x1c4>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f003 030f 	and.w	r3, r3, #15
 800898e:	683a      	ldr	r2, [r7, #0]
 8008990:	429a      	cmp	r2, r3
 8008992:	d001      	beq.n	8008998 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008994:	2301      	movs	r3, #1
 8008996:	e032      	b.n	80089fe <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	f003 0304 	and.w	r3, r3, #4
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d008      	beq.n	80089b6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80089a4:	4b19      	ldr	r3, [pc, #100]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 80089a6:	689b      	ldr	r3, [r3, #8]
 80089a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	68db      	ldr	r3, [r3, #12]
 80089b0:	4916      	ldr	r1, [pc, #88]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 80089b2:	4313      	orrs	r3, r2
 80089b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	f003 0308 	and.w	r3, r3, #8
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d009      	beq.n	80089d6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80089c2:	4b12      	ldr	r3, [pc, #72]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 80089c4:	689b      	ldr	r3, [r3, #8]
 80089c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	691b      	ldr	r3, [r3, #16]
 80089ce:	00db      	lsls	r3, r3, #3
 80089d0:	490e      	ldr	r1, [pc, #56]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 80089d2:	4313      	orrs	r3, r2
 80089d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80089d6:	f000 f821 	bl	8008a1c <HAL_RCC_GetSysClockFreq>
 80089da:	4602      	mov	r2, r0
 80089dc:	4b0b      	ldr	r3, [pc, #44]	; (8008a0c <HAL_RCC_ClockConfig+0x1c8>)
 80089de:	689b      	ldr	r3, [r3, #8]
 80089e0:	091b      	lsrs	r3, r3, #4
 80089e2:	f003 030f 	and.w	r3, r3, #15
 80089e6:	490a      	ldr	r1, [pc, #40]	; (8008a10 <HAL_RCC_ClockConfig+0x1cc>)
 80089e8:	5ccb      	ldrb	r3, [r1, r3]
 80089ea:	fa22 f303 	lsr.w	r3, r2, r3
 80089ee:	4a09      	ldr	r2, [pc, #36]	; (8008a14 <HAL_RCC_ClockConfig+0x1d0>)
 80089f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80089f2:	4b09      	ldr	r3, [pc, #36]	; (8008a18 <HAL_RCC_ClockConfig+0x1d4>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4618      	mov	r0, r3
 80089f8:	f7fb fc6e 	bl	80042d8 <HAL_InitTick>

  return HAL_OK;
 80089fc:	2300      	movs	r3, #0
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
 8008a06:	bf00      	nop
 8008a08:	40023c00 	.word	0x40023c00
 8008a0c:	40023800 	.word	0x40023800
 8008a10:	08015e00 	.word	0x08015e00
 8008a14:	20000040 	.word	0x20000040
 8008a18:	20000078 	.word	0x20000078

08008a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008a1c:	b5b0      	push	{r4, r5, r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008a22:	2100      	movs	r1, #0
 8008a24:	6079      	str	r1, [r7, #4]
 8008a26:	2100      	movs	r1, #0
 8008a28:	60f9      	str	r1, [r7, #12]
 8008a2a:	2100      	movs	r1, #0
 8008a2c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008a2e:	2100      	movs	r1, #0
 8008a30:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008a32:	4952      	ldr	r1, [pc, #328]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8008a34:	6889      	ldr	r1, [r1, #8]
 8008a36:	f001 010c 	and.w	r1, r1, #12
 8008a3a:	2908      	cmp	r1, #8
 8008a3c:	d00d      	beq.n	8008a5a <HAL_RCC_GetSysClockFreq+0x3e>
 8008a3e:	2908      	cmp	r1, #8
 8008a40:	f200 8094 	bhi.w	8008b6c <HAL_RCC_GetSysClockFreq+0x150>
 8008a44:	2900      	cmp	r1, #0
 8008a46:	d002      	beq.n	8008a4e <HAL_RCC_GetSysClockFreq+0x32>
 8008a48:	2904      	cmp	r1, #4
 8008a4a:	d003      	beq.n	8008a54 <HAL_RCC_GetSysClockFreq+0x38>
 8008a4c:	e08e      	b.n	8008b6c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008a4e:	4b4c      	ldr	r3, [pc, #304]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x164>)
 8008a50:	60bb      	str	r3, [r7, #8]
      break;
 8008a52:	e08e      	b.n	8008b72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008a54:	4b4b      	ldr	r3, [pc, #300]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x168>)
 8008a56:	60bb      	str	r3, [r7, #8]
      break;
 8008a58:	e08b      	b.n	8008b72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008a5a:	4948      	ldr	r1, [pc, #288]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8008a5c:	6849      	ldr	r1, [r1, #4]
 8008a5e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008a62:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008a64:	4945      	ldr	r1, [pc, #276]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8008a66:	6849      	ldr	r1, [r1, #4]
 8008a68:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008a6c:	2900      	cmp	r1, #0
 8008a6e:	d024      	beq.n	8008aba <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a70:	4942      	ldr	r1, [pc, #264]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8008a72:	6849      	ldr	r1, [r1, #4]
 8008a74:	0989      	lsrs	r1, r1, #6
 8008a76:	4608      	mov	r0, r1
 8008a78:	f04f 0100 	mov.w	r1, #0
 8008a7c:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008a80:	f04f 0500 	mov.w	r5, #0
 8008a84:	ea00 0204 	and.w	r2, r0, r4
 8008a88:	ea01 0305 	and.w	r3, r1, r5
 8008a8c:	493d      	ldr	r1, [pc, #244]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x168>)
 8008a8e:	fb01 f003 	mul.w	r0, r1, r3
 8008a92:	2100      	movs	r1, #0
 8008a94:	fb01 f102 	mul.w	r1, r1, r2
 8008a98:	1844      	adds	r4, r0, r1
 8008a9a:	493a      	ldr	r1, [pc, #232]	; (8008b84 <HAL_RCC_GetSysClockFreq+0x168>)
 8008a9c:	fba2 0101 	umull	r0, r1, r2, r1
 8008aa0:	1863      	adds	r3, r4, r1
 8008aa2:	4619      	mov	r1, r3
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	f04f 0300 	mov.w	r3, #0
 8008aac:	f7f7 fc08 	bl	80002c0 <__aeabi_uldivmod>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4613      	mov	r3, r2
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	e04a      	b.n	8008b50 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008aba:	4b30      	ldr	r3, [pc, #192]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	099b      	lsrs	r3, r3, #6
 8008ac0:	461a      	mov	r2, r3
 8008ac2:	f04f 0300 	mov.w	r3, #0
 8008ac6:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008aca:	f04f 0100 	mov.w	r1, #0
 8008ace:	ea02 0400 	and.w	r4, r2, r0
 8008ad2:	ea03 0501 	and.w	r5, r3, r1
 8008ad6:	4620      	mov	r0, r4
 8008ad8:	4629      	mov	r1, r5
 8008ada:	f04f 0200 	mov.w	r2, #0
 8008ade:	f04f 0300 	mov.w	r3, #0
 8008ae2:	014b      	lsls	r3, r1, #5
 8008ae4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008ae8:	0142      	lsls	r2, r0, #5
 8008aea:	4610      	mov	r0, r2
 8008aec:	4619      	mov	r1, r3
 8008aee:	1b00      	subs	r0, r0, r4
 8008af0:	eb61 0105 	sbc.w	r1, r1, r5
 8008af4:	f04f 0200 	mov.w	r2, #0
 8008af8:	f04f 0300 	mov.w	r3, #0
 8008afc:	018b      	lsls	r3, r1, #6
 8008afe:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008b02:	0182      	lsls	r2, r0, #6
 8008b04:	1a12      	subs	r2, r2, r0
 8008b06:	eb63 0301 	sbc.w	r3, r3, r1
 8008b0a:	f04f 0000 	mov.w	r0, #0
 8008b0e:	f04f 0100 	mov.w	r1, #0
 8008b12:	00d9      	lsls	r1, r3, #3
 8008b14:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008b18:	00d0      	lsls	r0, r2, #3
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	460b      	mov	r3, r1
 8008b1e:	1912      	adds	r2, r2, r4
 8008b20:	eb45 0303 	adc.w	r3, r5, r3
 8008b24:	f04f 0000 	mov.w	r0, #0
 8008b28:	f04f 0100 	mov.w	r1, #0
 8008b2c:	0299      	lsls	r1, r3, #10
 8008b2e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008b32:	0290      	lsls	r0, r2, #10
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	4610      	mov	r0, r2
 8008b3a:	4619      	mov	r1, r3
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	461a      	mov	r2, r3
 8008b40:	f04f 0300 	mov.w	r3, #0
 8008b44:	f7f7 fbbc 	bl	80002c0 <__aeabi_uldivmod>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	460b      	mov	r3, r1
 8008b4c:	4613      	mov	r3, r2
 8008b4e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008b50:	4b0a      	ldr	r3, [pc, #40]	; (8008b7c <HAL_RCC_GetSysClockFreq+0x160>)
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	0c1b      	lsrs	r3, r3, #16
 8008b56:	f003 0303 	and.w	r3, r3, #3
 8008b5a:	3301      	adds	r3, #1
 8008b5c:	005b      	lsls	r3, r3, #1
 8008b5e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008b60:	68fa      	ldr	r2, [r7, #12]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b68:	60bb      	str	r3, [r7, #8]
      break;
 8008b6a:	e002      	b.n	8008b72 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008b6c:	4b04      	ldr	r3, [pc, #16]	; (8008b80 <HAL_RCC_GetSysClockFreq+0x164>)
 8008b6e:	60bb      	str	r3, [r7, #8]
      break;
 8008b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008b72:	68bb      	ldr	r3, [r7, #8]
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3710      	adds	r7, #16
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bdb0      	pop	{r4, r5, r7, pc}
 8008b7c:	40023800 	.word	0x40023800
 8008b80:	00f42400 	.word	0x00f42400
 8008b84:	017d7840 	.word	0x017d7840

08008b88 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b8c:	4b03      	ldr	r3, [pc, #12]	; (8008b9c <HAL_RCC_GetHCLKFreq+0x14>)
 8008b8e:	681b      	ldr	r3, [r3, #0]
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	20000040 	.word	0x20000040

08008ba0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008ba4:	f7ff fff0 	bl	8008b88 <HAL_RCC_GetHCLKFreq>
 8008ba8:	4602      	mov	r2, r0
 8008baa:	4b05      	ldr	r3, [pc, #20]	; (8008bc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008bac:	689b      	ldr	r3, [r3, #8]
 8008bae:	0a9b      	lsrs	r3, r3, #10
 8008bb0:	f003 0307 	and.w	r3, r3, #7
 8008bb4:	4903      	ldr	r1, [pc, #12]	; (8008bc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008bb6:	5ccb      	ldrb	r3, [r1, r3]
 8008bb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	40023800 	.word	0x40023800
 8008bc4:	08015e10 	.word	0x08015e10

08008bc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008bcc:	f7ff ffdc 	bl	8008b88 <HAL_RCC_GetHCLKFreq>
 8008bd0:	4602      	mov	r2, r0
 8008bd2:	4b05      	ldr	r3, [pc, #20]	; (8008be8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	0b5b      	lsrs	r3, r3, #13
 8008bd8:	f003 0307 	and.w	r3, r3, #7
 8008bdc:	4903      	ldr	r1, [pc, #12]	; (8008bec <HAL_RCC_GetPCLK2Freq+0x24>)
 8008bde:	5ccb      	ldrb	r3, [r1, r3]
 8008be0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008be4:	4618      	mov	r0, r3
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	40023800 	.word	0x40023800
 8008bec:	08015e10 	.word	0x08015e10

08008bf0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	220f      	movs	r2, #15
 8008bfe:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008c00:	4b12      	ldr	r3, [pc, #72]	; (8008c4c <HAL_RCC_GetClockConfig+0x5c>)
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	f003 0203 	and.w	r2, r3, #3
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008c0c:	4b0f      	ldr	r3, [pc, #60]	; (8008c4c <HAL_RCC_GetClockConfig+0x5c>)
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008c18:	4b0c      	ldr	r3, [pc, #48]	; (8008c4c <HAL_RCC_GetClockConfig+0x5c>)
 8008c1a:	689b      	ldr	r3, [r3, #8]
 8008c1c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008c24:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <HAL_RCC_GetClockConfig+0x5c>)
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	08db      	lsrs	r3, r3, #3
 8008c2a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008c32:	4b07      	ldr	r3, [pc, #28]	; (8008c50 <HAL_RCC_GetClockConfig+0x60>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f003 020f 	and.w	r2, r3, #15
 8008c3a:	683b      	ldr	r3, [r7, #0]
 8008c3c:	601a      	str	r2, [r3, #0]
}
 8008c3e:	bf00      	nop
 8008c40:	370c      	adds	r7, #12
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	40023800 	.word	0x40023800
 8008c50:	40023c00 	.word	0x40023c00

08008c54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008c54:	b580      	push	{r7, lr}
 8008c56:	b088      	sub	sp, #32
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008c64:	2300      	movs	r3, #0
 8008c66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008c68:	2300      	movs	r3, #0
 8008c6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	f003 0301 	and.w	r3, r3, #1
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d012      	beq.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008c7c:	4b69      	ldr	r3, [pc, #420]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c7e:	689b      	ldr	r3, [r3, #8]
 8008c80:	4a68      	ldr	r2, [pc, #416]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c82:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c86:	6093      	str	r3, [r2, #8]
 8008c88:	4b66      	ldr	r3, [pc, #408]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c8a:	689a      	ldr	r2, [r3, #8]
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c90:	4964      	ldr	r1, [pc, #400]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c92:	4313      	orrs	r3, r2
 8008c94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d101      	bne.n	8008ca2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d017      	beq.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008cae:	4b5d      	ldr	r3, [pc, #372]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cb0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cb4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cbc:	4959      	ldr	r1, [pc, #356]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008ccc:	d101      	bne.n	8008cd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008cce:	2301      	movs	r3, #1
 8008cd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d101      	bne.n	8008cde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d017      	beq.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008cea:	4b4e      	ldr	r3, [pc, #312]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008cf0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf8:	494a      	ldr	r1, [pc, #296]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cfa:	4313      	orrs	r3, r2
 8008cfc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d04:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d08:	d101      	bne.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008d0a:	2301      	movs	r3, #1
 8008d0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d101      	bne.n	8008d1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008d16:	2301      	movs	r3, #1
 8008d18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d001      	beq.n	8008d2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008d26:	2301      	movs	r3, #1
 8008d28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f003 0320 	and.w	r3, r3, #32
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	f000 808b 	beq.w	8008e4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008d38:	4b3a      	ldr	r3, [pc, #232]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d3c:	4a39      	ldr	r2, [pc, #228]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d42:	6413      	str	r3, [r2, #64]	; 0x40
 8008d44:	4b37      	ldr	r3, [pc, #220]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d4c:	60bb      	str	r3, [r7, #8]
 8008d4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d50:	4b35      	ldr	r3, [pc, #212]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a34      	ldr	r2, [pc, #208]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d5c:	f7fc ff3e 	bl	8005bdc <HAL_GetTick>
 8008d60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008d62:	e008      	b.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d64:	f7fc ff3a 	bl	8005bdc <HAL_GetTick>
 8008d68:	4602      	mov	r2, r0
 8008d6a:	697b      	ldr	r3, [r7, #20]
 8008d6c:	1ad3      	subs	r3, r2, r3
 8008d6e:	2b64      	cmp	r3, #100	; 0x64
 8008d70:	d901      	bls.n	8008d76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008d72:	2303      	movs	r3, #3
 8008d74:	e357      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008d76:	4b2c      	ldr	r3, [pc, #176]	; (8008e28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d0f0      	beq.n	8008d64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008d82:	4b28      	ldr	r3, [pc, #160]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d035      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d9a:	693a      	ldr	r2, [r7, #16]
 8008d9c:	429a      	cmp	r2, r3
 8008d9e:	d02e      	beq.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008da0:	4b20      	ldr	r3, [pc, #128]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008da8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008daa:	4b1e      	ldr	r3, [pc, #120]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dae:	4a1d      	ldr	r2, [pc, #116]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008db0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008db4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008db6:	4b1b      	ldr	r3, [pc, #108]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dba:	4a1a      	ldr	r2, [pc, #104]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dc0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008dc2:	4a18      	ldr	r2, [pc, #96]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008dc8:	4b16      	ldr	r3, [pc, #88]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dcc:	f003 0301 	and.w	r3, r3, #1
 8008dd0:	2b01      	cmp	r3, #1
 8008dd2:	d114      	bne.n	8008dfe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd4:	f7fc ff02 	bl	8005bdc <HAL_GetTick>
 8008dd8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008dda:	e00a      	b.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ddc:	f7fc fefe 	bl	8005bdc <HAL_GetTick>
 8008de0:	4602      	mov	r2, r0
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	1ad3      	subs	r3, r2, r3
 8008de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dea:	4293      	cmp	r3, r2
 8008dec:	d901      	bls.n	8008df2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008dee:	2303      	movs	r3, #3
 8008df0:	e319      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008df2:	4b0c      	ldr	r3, [pc, #48]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008df4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008df6:	f003 0302 	and.w	r3, r3, #2
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d0ee      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e06:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e0a:	d111      	bne.n	8008e30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008e0c:	4b05      	ldr	r3, [pc, #20]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e0e:	689b      	ldr	r3, [r3, #8]
 8008e10:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008e18:	4b04      	ldr	r3, [pc, #16]	; (8008e2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008e1a:	400b      	ands	r3, r1
 8008e1c:	4901      	ldr	r1, [pc, #4]	; (8008e24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	608b      	str	r3, [r1, #8]
 8008e22:	e00b      	b.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008e24:	40023800 	.word	0x40023800
 8008e28:	40007000 	.word	0x40007000
 8008e2c:	0ffffcff 	.word	0x0ffffcff
 8008e30:	4bb1      	ldr	r3, [pc, #708]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e32:	689b      	ldr	r3, [r3, #8]
 8008e34:	4ab0      	ldr	r2, [pc, #704]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e36:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008e3a:	6093      	str	r3, [r2, #8]
 8008e3c:	4bae      	ldr	r3, [pc, #696]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e3e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e48:	49ab      	ldr	r1, [pc, #684]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e4a:	4313      	orrs	r3, r2
 8008e4c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0310 	and.w	r3, r3, #16
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d010      	beq.n	8008e7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008e5a:	4ba7      	ldr	r3, [pc, #668]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008e60:	4aa5      	ldr	r2, [pc, #660]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e66:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008e6a:	4ba3      	ldr	r3, [pc, #652]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e74:	49a0      	ldr	r1, [pc, #640]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d00a      	beq.n	8008e9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e88:	4b9b      	ldr	r3, [pc, #620]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e8e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e96:	4998      	ldr	r1, [pc, #608]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e98:	4313      	orrs	r3, r2
 8008e9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d00a      	beq.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008eaa:	4b93      	ldr	r3, [pc, #588]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008eac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eb0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008eb8:	498f      	ldr	r1, [pc, #572]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d00a      	beq.n	8008ee2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ecc:	4b8a      	ldr	r3, [pc, #552]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008eda:	4987      	ldr	r1, [pc, #540]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008edc:	4313      	orrs	r3, r2
 8008ede:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d00a      	beq.n	8008f04 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008eee:	4b82      	ldr	r3, [pc, #520]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ef4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008efc:	497e      	ldr	r1, [pc, #504]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d00a      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008f10:	4b79      	ldr	r3, [pc, #484]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f16:	f023 0203 	bic.w	r2, r3, #3
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f1e:	4976      	ldr	r1, [pc, #472]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f20:	4313      	orrs	r3, r2
 8008f22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d00a      	beq.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f32:	4b71      	ldr	r3, [pc, #452]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f38:	f023 020c 	bic.w	r2, r3, #12
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f40:	496d      	ldr	r1, [pc, #436]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d00a      	beq.n	8008f6a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f54:	4b68      	ldr	r3, [pc, #416]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f5a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f62:	4965      	ldr	r1, [pc, #404]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f64:	4313      	orrs	r3, r2
 8008f66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00a      	beq.n	8008f8c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008f76:	4b60      	ldr	r3, [pc, #384]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f7c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f84:	495c      	ldr	r1, [pc, #368]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f86:	4313      	orrs	r3, r2
 8008f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d00a      	beq.n	8008fae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f98:	4b57      	ldr	r3, [pc, #348]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f9e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fa6:	4954      	ldr	r1, [pc, #336]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00a      	beq.n	8008fd0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008fba:	4b4f      	ldr	r3, [pc, #316]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008fc8:	494b      	ldr	r1, [pc, #300]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fca:	4313      	orrs	r3, r2
 8008fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d00a      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008fdc:	4b46      	ldr	r3, [pc, #280]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fe2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fea:	4943      	ldr	r1, [pc, #268]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fec:	4313      	orrs	r3, r2
 8008fee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008ffe:	4b3e      	ldr	r3, [pc, #248]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009004:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800900c:	493a      	ldr	r1, [pc, #232]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800900e:	4313      	orrs	r3, r2
 8009010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00a      	beq.n	8009036 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009020:	4b35      	ldr	r3, [pc, #212]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009026:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800902e:	4932      	ldr	r1, [pc, #200]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009030:	4313      	orrs	r3, r2
 8009032:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800903e:	2b00      	cmp	r3, #0
 8009040:	d011      	beq.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009042:	4b2d      	ldr	r3, [pc, #180]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009048:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009050:	4929      	ldr	r1, [pc, #164]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009052:	4313      	orrs	r3, r2
 8009054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800905c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009060:	d101      	bne.n	8009066 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009062:	2301      	movs	r3, #1
 8009064:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0308 	and.w	r3, r3, #8
 800906e:	2b00      	cmp	r3, #0
 8009070:	d001      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009072:	2301      	movs	r3, #1
 8009074:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00a      	beq.n	8009098 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009082:	4b1d      	ldr	r3, [pc, #116]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009088:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009090:	4919      	ldr	r1, [pc, #100]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009092:	4313      	orrs	r3, r2
 8009094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d00b      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80090a4:	4b14      	ldr	r3, [pc, #80]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80090a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80090b4:	4910      	ldr	r1, [pc, #64]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80090b6:	4313      	orrs	r3, r2
 80090b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80090bc:	69fb      	ldr	r3, [r7, #28]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d006      	beq.n	80090d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	f000 80d9 	beq.w	8009282 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80090d0:	4b09      	ldr	r3, [pc, #36]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4a08      	ldr	r2, [pc, #32]	; (80090f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80090d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80090da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80090dc:	f7fc fd7e 	bl	8005bdc <HAL_GetTick>
 80090e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090e2:	e00b      	b.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80090e4:	f7fc fd7a 	bl	8005bdc <HAL_GetTick>
 80090e8:	4602      	mov	r2, r0
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	1ad3      	subs	r3, r2, r3
 80090ee:	2b64      	cmp	r3, #100	; 0x64
 80090f0:	d904      	bls.n	80090fc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80090f2:	2303      	movs	r3, #3
 80090f4:	e197      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80090f6:	bf00      	nop
 80090f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80090fc:	4b6c      	ldr	r3, [pc, #432]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009104:	2b00      	cmp	r3, #0
 8009106:	d1ed      	bne.n	80090e4 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	f003 0301 	and.w	r3, r3, #1
 8009110:	2b00      	cmp	r3, #0
 8009112:	d021      	beq.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009118:	2b00      	cmp	r3, #0
 800911a:	d11d      	bne.n	8009158 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800911c:	4b64      	ldr	r3, [pc, #400]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800911e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009122:	0c1b      	lsrs	r3, r3, #16
 8009124:	f003 0303 	and.w	r3, r3, #3
 8009128:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800912a:	4b61      	ldr	r3, [pc, #388]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800912c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009130:	0e1b      	lsrs	r3, r3, #24
 8009132:	f003 030f 	and.w	r3, r3, #15
 8009136:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	019a      	lsls	r2, r3, #6
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	041b      	lsls	r3, r3, #16
 8009142:	431a      	orrs	r2, r3
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	061b      	lsls	r3, r3, #24
 8009148:	431a      	orrs	r2, r3
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	689b      	ldr	r3, [r3, #8]
 800914e:	071b      	lsls	r3, r3, #28
 8009150:	4957      	ldr	r1, [pc, #348]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009152:	4313      	orrs	r3, r2
 8009154:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009160:	2b00      	cmp	r3, #0
 8009162:	d004      	beq.n	800916e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009168:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800916c:	d00a      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009176:	2b00      	cmp	r3, #0
 8009178:	d02e      	beq.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009182:	d129      	bne.n	80091d8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009184:	4b4a      	ldr	r3, [pc, #296]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800918a:	0c1b      	lsrs	r3, r3, #16
 800918c:	f003 0303 	and.w	r3, r3, #3
 8009190:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009192:	4b47      	ldr	r3, [pc, #284]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009198:	0f1b      	lsrs	r3, r3, #28
 800919a:	f003 0307 	and.w	r3, r3, #7
 800919e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	685b      	ldr	r3, [r3, #4]
 80091a4:	019a      	lsls	r2, r3, #6
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	041b      	lsls	r3, r3, #16
 80091aa:	431a      	orrs	r2, r3
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	68db      	ldr	r3, [r3, #12]
 80091b0:	061b      	lsls	r3, r3, #24
 80091b2:	431a      	orrs	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	071b      	lsls	r3, r3, #28
 80091b8:	493d      	ldr	r1, [pc, #244]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80091c0:	4b3b      	ldr	r3, [pc, #236]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091c6:	f023 021f 	bic.w	r2, r3, #31
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091ce:	3b01      	subs	r3, #1
 80091d0:	4937      	ldr	r1, [pc, #220]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091d2:	4313      	orrs	r3, r2
 80091d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d01d      	beq.n	8009220 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80091e4:	4b32      	ldr	r3, [pc, #200]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091ea:	0e1b      	lsrs	r3, r3, #24
 80091ec:	f003 030f 	and.w	r3, r3, #15
 80091f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80091f2:	4b2f      	ldr	r3, [pc, #188]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091f8:	0f1b      	lsrs	r3, r3, #28
 80091fa:	f003 0307 	and.w	r3, r3, #7
 80091fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	685b      	ldr	r3, [r3, #4]
 8009204:	019a      	lsls	r2, r3, #6
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	041b      	lsls	r3, r3, #16
 800920c:	431a      	orrs	r2, r3
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	061b      	lsls	r3, r3, #24
 8009212:	431a      	orrs	r2, r3
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	071b      	lsls	r3, r3, #28
 8009218:	4925      	ldr	r1, [pc, #148]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800921a:	4313      	orrs	r3, r2
 800921c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009228:	2b00      	cmp	r3, #0
 800922a:	d011      	beq.n	8009250 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	019a      	lsls	r2, r3, #6
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	041b      	lsls	r3, r3, #16
 8009238:	431a      	orrs	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	68db      	ldr	r3, [r3, #12]
 800923e:	061b      	lsls	r3, r3, #24
 8009240:	431a      	orrs	r2, r3
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	071b      	lsls	r3, r3, #28
 8009248:	4919      	ldr	r1, [pc, #100]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800924a:	4313      	orrs	r3, r2
 800924c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009250:	4b17      	ldr	r3, [pc, #92]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	4a16      	ldr	r2, [pc, #88]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009256:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800925a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800925c:	f7fc fcbe 	bl	8005bdc <HAL_GetTick>
 8009260:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009262:	e008      	b.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009264:	f7fc fcba 	bl	8005bdc <HAL_GetTick>
 8009268:	4602      	mov	r2, r0
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	1ad3      	subs	r3, r2, r3
 800926e:	2b64      	cmp	r3, #100	; 0x64
 8009270:	d901      	bls.n	8009276 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009272:	2303      	movs	r3, #3
 8009274:	e0d7      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009276:	4b0e      	ldr	r3, [pc, #56]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d0f0      	beq.n	8009264 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009282:	69bb      	ldr	r3, [r7, #24]
 8009284:	2b01      	cmp	r3, #1
 8009286:	f040 80cd 	bne.w	8009424 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800928a:	4b09      	ldr	r3, [pc, #36]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a08      	ldr	r2, [pc, #32]	; (80092b0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009290:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009294:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009296:	f7fc fca1 	bl	8005bdc <HAL_GetTick>
 800929a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800929c:	e00a      	b.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800929e:	f7fc fc9d 	bl	8005bdc <HAL_GetTick>
 80092a2:	4602      	mov	r2, r0
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	1ad3      	subs	r3, r2, r3
 80092a8:	2b64      	cmp	r3, #100	; 0x64
 80092aa:	d903      	bls.n	80092b4 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092ac:	2303      	movs	r3, #3
 80092ae:	e0ba      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80092b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80092b4:	4b5e      	ldr	r3, [pc, #376]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80092bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80092c0:	d0ed      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d003      	beq.n	80092d6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d009      	beq.n	80092ea <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d02e      	beq.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d12a      	bne.n	8009340 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80092ea:	4b51      	ldr	r3, [pc, #324]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092f0:	0c1b      	lsrs	r3, r3, #16
 80092f2:	f003 0303 	and.w	r3, r3, #3
 80092f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80092f8:	4b4d      	ldr	r3, [pc, #308]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092fe:	0f1b      	lsrs	r3, r3, #28
 8009300:	f003 0307 	and.w	r3, r3, #7
 8009304:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	695b      	ldr	r3, [r3, #20]
 800930a:	019a      	lsls	r2, r3, #6
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	041b      	lsls	r3, r3, #16
 8009310:	431a      	orrs	r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	699b      	ldr	r3, [r3, #24]
 8009316:	061b      	lsls	r3, r3, #24
 8009318:	431a      	orrs	r2, r3
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	071b      	lsls	r3, r3, #28
 800931e:	4944      	ldr	r1, [pc, #272]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009320:	4313      	orrs	r3, r2
 8009322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009326:	4b42      	ldr	r3, [pc, #264]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800932c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009334:	3b01      	subs	r3, #1
 8009336:	021b      	lsls	r3, r3, #8
 8009338:	493d      	ldr	r1, [pc, #244]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800933a:	4313      	orrs	r3, r2
 800933c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009348:	2b00      	cmp	r3, #0
 800934a:	d022      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009354:	d11d      	bne.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009356:	4b36      	ldr	r3, [pc, #216]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800935c:	0e1b      	lsrs	r3, r3, #24
 800935e:	f003 030f 	and.w	r3, r3, #15
 8009362:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009364:	4b32      	ldr	r3, [pc, #200]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800936a:	0f1b      	lsrs	r3, r3, #28
 800936c:	f003 0307 	and.w	r3, r3, #7
 8009370:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	695b      	ldr	r3, [r3, #20]
 8009376:	019a      	lsls	r2, r3, #6
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	041b      	lsls	r3, r3, #16
 800937e:	431a      	orrs	r2, r3
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	061b      	lsls	r3, r3, #24
 8009384:	431a      	orrs	r2, r3
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	071b      	lsls	r3, r3, #28
 800938a:	4929      	ldr	r1, [pc, #164]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800938c:	4313      	orrs	r3, r2
 800938e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 0308 	and.w	r3, r3, #8
 800939a:	2b00      	cmp	r3, #0
 800939c:	d028      	beq.n	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800939e:	4b24      	ldr	r3, [pc, #144]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093a4:	0e1b      	lsrs	r3, r3, #24
 80093a6:	f003 030f 	and.w	r3, r3, #15
 80093aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80093ac:	4b20      	ldr	r3, [pc, #128]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b2:	0c1b      	lsrs	r3, r3, #16
 80093b4:	f003 0303 	and.w	r3, r3, #3
 80093b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	695b      	ldr	r3, [r3, #20]
 80093be:	019a      	lsls	r2, r3, #6
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	041b      	lsls	r3, r3, #16
 80093c4:	431a      	orrs	r2, r3
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	061b      	lsls	r3, r3, #24
 80093ca:	431a      	orrs	r2, r3
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	69db      	ldr	r3, [r3, #28]
 80093d0:	071b      	lsls	r3, r3, #28
 80093d2:	4917      	ldr	r1, [pc, #92]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093d4:	4313      	orrs	r3, r2
 80093d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80093da:	4b15      	ldr	r3, [pc, #84]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e8:	4911      	ldr	r1, [pc, #68]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80093f0:	4b0f      	ldr	r3, [pc, #60]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	4a0e      	ldr	r2, [pc, #56]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80093f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80093fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80093fc:	f7fc fbee 	bl	8005bdc <HAL_GetTick>
 8009400:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009402:	e008      	b.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009404:	f7fc fbea 	bl	8005bdc <HAL_GetTick>
 8009408:	4602      	mov	r2, r0
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	2b64      	cmp	r3, #100	; 0x64
 8009410:	d901      	bls.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009412:	2303      	movs	r3, #3
 8009414:	e007      	b.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009416:	4b06      	ldr	r3, [pc, #24]	; (8009430 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800941e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009422:	d1ef      	bne.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009424:	2300      	movs	r3, #0
}
 8009426:	4618      	mov	r0, r3
 8009428:	3720      	adds	r7, #32
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}
 800942e:	bf00      	nop
 8009430:	40023800 	.word	0x40023800

08009434 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009434:	b480      	push	{r7}
 8009436:	b085      	sub	sp, #20
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 800943c:	2300      	movs	r3, #0
 800943e:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	4a80      	ldr	r2, [pc, #512]	; (8009644 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 8009444:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 8009446:	4b80      	ldr	r3, [pc, #512]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009448:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800944c:	099b      	lsrs	r3, r3, #6
 800944e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009456:	4b7c      	ldr	r3, [pc, #496]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009458:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800945c:	0c1b      	lsrs	r3, r3, #16
 800945e:	f003 0203 	and.w	r2, r3, #3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009466:	4b78      	ldr	r3, [pc, #480]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800946c:	0e1b      	lsrs	r3, r3, #24
 800946e:	f003 020f 	and.w	r2, r3, #15
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009476:	4b74      	ldr	r3, [pc, #464]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800947c:	0f1b      	lsrs	r3, r3, #28
 800947e:	f003 0207 	and.w	r2, r3, #7
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8009486:	4b70      	ldr	r3, [pc, #448]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800948c:	099b      	lsrs	r3, r3, #6
 800948e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009496:	4b6c      	ldr	r3, [pc, #432]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800949c:	0c1b      	lsrs	r3, r3, #16
 800949e:	f003 0203 	and.w	r2, r3, #3
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80094a6:	4b68      	ldr	r3, [pc, #416]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80094a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094ac:	0e1b      	lsrs	r3, r3, #24
 80094ae:	f003 020f 	and.w	r2, r3, #15
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80094b6:	4b64      	ldr	r3, [pc, #400]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80094b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094bc:	0f1b      	lsrs	r3, r3, #28
 80094be:	f003 0207 	and.w	r2, r3, #7
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 80094c6:	4b60      	ldr	r3, [pc, #384]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80094c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094cc:	f003 021f 	and.w	r2, r3, #31
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 80094d4:	4b5c      	ldr	r3, [pc, #368]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80094d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094da:	0a1b      	lsrs	r3, r3, #8
 80094dc:	f003 021f 	and.w	r2, r3, #31
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 80094e4:	4b58      	ldr	r3, [pc, #352]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80094e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094ea:	0c1b      	lsrs	r3, r3, #16
 80094ec:	f003 0203 	and.w	r2, r3, #3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 80094f4:	4b54      	ldr	r3, [pc, #336]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80094f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80094fa:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 8009502:	4b51      	ldr	r3, [pc, #324]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009508:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 8009510:	4b4d      	ldr	r3, [pc, #308]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009512:	689b      	ldr	r3, [r3, #8]
 8009514:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 800951c:	4b4a      	ldr	r3, [pc, #296]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800951e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009522:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 800952a:	4b47      	ldr	r3, [pc, #284]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800952c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009530:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 8009538:	4b43      	ldr	r3, [pc, #268]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800953a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800953e:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 8009546:	4b40      	ldr	r3, [pc, #256]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800954c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 8009554:	4b3c      	ldr	r3, [pc, #240]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800955a:	f003 0203 	and.w	r2, r3, #3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 8009562:	4b39      	ldr	r3, [pc, #228]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009568:	f003 020c 	and.w	r2, r3, #12
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 8009570:	4b35      	ldr	r3, [pc, #212]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009572:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009576:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 800957e:	4b32      	ldr	r3, [pc, #200]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009580:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009584:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 800958c:	4b2e      	ldr	r3, [pc, #184]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800958e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009592:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 800959a:	4b2b      	ldr	r3, [pc, #172]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800959c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095a0:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 80095a8:	4b27      	ldr	r3, [pc, #156]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80095aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ae:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 80095b6:	4b24      	ldr	r3, [pc, #144]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80095b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095bc:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 80095c4:	4b20      	ldr	r3, [pc, #128]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80095c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ca:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 80095d2:	4b1d      	ldr	r3, [pc, #116]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80095d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095d8:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 80095e0:	4b19      	ldr	r3, [pc, #100]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80095e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095e6:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 80095ee:	4b16      	ldr	r3, [pc, #88]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80095f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095f4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 80095fe:	4b12      	ldr	r3, [pc, #72]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009600:	689b      	ldr	r3, [r3, #8]
 8009602:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009606:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8009608:	4b0f      	ldr	r3, [pc, #60]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800960a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800960c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	431a      	orrs	r2, r3
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8009618:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800961a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800961e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d103      	bne.n	800962e <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800962c:	e003      	b.n	8009636 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009634:	639a      	str	r2, [r3, #56]	; 0x38
}
 8009636:	bf00      	nop
 8009638:	3714      	adds	r7, #20
 800963a:	46bd      	mov	sp, r7
 800963c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009640:	4770      	bx	lr
 8009642:	bf00      	nop
 8009644:	00fffff1 	.word	0x00fffff1
 8009648:	40023800 	.word	0x40023800

0800964c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800964c:	b480      	push	{r7}
 800964e:	b087      	sub	sp, #28
 8009650:	af00      	add	r7, sp, #0
 8009652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 8009658:	2300      	movs	r3, #0
 800965a:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 800965c:	2300      	movs	r3, #0
 800965e:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800966a:	f040 808c 	bne.w	8009786 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 800966e:	4b95      	ldr	r3, [pc, #596]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009674:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800967c:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009684:	d07c      	beq.n	8009780 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800968c:	d87d      	bhi.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800968e:	68bb      	ldr	r3, [r7, #8]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d004      	beq.n	800969e <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009694:	68bb      	ldr	r3, [r7, #8]
 8009696:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800969a:	d039      	beq.n	8009710 <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 800969c:	e075      	b.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800969e:	4b89      	ldr	r3, [pc, #548]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80096a0:	685b      	ldr	r3, [r3, #4]
 80096a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d108      	bne.n	80096bc <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80096aa:	4b86      	ldr	r3, [pc, #536]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096b2:	4a85      	ldr	r2, [pc, #532]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80096b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b8:	613b      	str	r3, [r7, #16]
 80096ba:	e007      	b.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80096bc:	4b81      	ldr	r3, [pc, #516]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80096be:	685b      	ldr	r3, [r3, #4]
 80096c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096c4:	4a81      	ldr	r2, [pc, #516]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80096c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80096ca:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80096cc:	4b7d      	ldr	r3, [pc, #500]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80096ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d2:	0e1b      	lsrs	r3, r3, #24
 80096d4:	f003 030f 	and.w	r3, r3, #15
 80096d8:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 80096da:	4b7a      	ldr	r3, [pc, #488]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80096dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096e0:	099b      	lsrs	r3, r3, #6
 80096e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	fb02 f203 	mul.w	r2, r2, r3
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80096f2:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 80096f4:	4b73      	ldr	r3, [pc, #460]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80096f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096fa:	0a1b      	lsrs	r3, r3, #8
 80096fc:	f003 031f 	and.w	r3, r3, #31
 8009700:	3301      	adds	r3, #1
 8009702:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009704:	697a      	ldr	r2, [r7, #20]
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	fbb2 f3f3 	udiv	r3, r2, r3
 800970c:	617b      	str	r3, [r7, #20]
        break;
 800970e:	e03d      	b.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009710:	4b6c      	ldr	r3, [pc, #432]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009718:	2b00      	cmp	r3, #0
 800971a:	d108      	bne.n	800972e <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800971c:	4b69      	ldr	r3, [pc, #420]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800971e:	685b      	ldr	r3, [r3, #4]
 8009720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009724:	4a68      	ldr	r2, [pc, #416]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009726:	fbb2 f3f3 	udiv	r3, r2, r3
 800972a:	613b      	str	r3, [r7, #16]
 800972c:	e007      	b.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800972e:	4b65      	ldr	r3, [pc, #404]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009730:	685b      	ldr	r3, [r3, #4]
 8009732:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009736:	4a65      	ldr	r2, [pc, #404]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009738:	fbb2 f3f3 	udiv	r3, r2, r3
 800973c:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 800973e:	4b61      	ldr	r3, [pc, #388]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009740:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009744:	0e1b      	lsrs	r3, r3, #24
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 800974c:	4b5d      	ldr	r3, [pc, #372]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800974e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009752:	099b      	lsrs	r3, r3, #6
 8009754:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009758:	693a      	ldr	r2, [r7, #16]
 800975a:	fb02 f203 	mul.w	r2, r2, r3
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	fbb2 f3f3 	udiv	r3, r2, r3
 8009764:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 8009766:	4b57      	ldr	r3, [pc, #348]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800976c:	f003 031f 	and.w	r3, r3, #31
 8009770:	3301      	adds	r3, #1
 8009772:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	fbb2 f3f3 	udiv	r3, r2, r3
 800977c:	617b      	str	r3, [r7, #20]
        break;
 800977e:	e005      	b.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009780:	4b53      	ldr	r3, [pc, #332]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009782:	617b      	str	r3, [r7, #20]
        break;
 8009784:	e002      	b.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8009786:	bf00      	nop
 8009788:	e000      	b.n	800978c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 800978a:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009792:	f040 808c 	bne.w	80098ae <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009796:	4b4b      	ldr	r3, [pc, #300]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009798:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800979c:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80097a4:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097ac:	d07c      	beq.n	80098a8 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097b4:	d87d      	bhi.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 80097b6:	68bb      	ldr	r3, [r7, #8]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d004      	beq.n	80097c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097c2:	d039      	beq.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 80097c4:	e075      	b.n	80098b2 <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80097c6:	4b3f      	ldr	r3, [pc, #252]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097c8:	685b      	ldr	r3, [r3, #4]
 80097ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d108      	bne.n	80097e4 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80097d2:	4b3c      	ldr	r3, [pc, #240]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097da:	4a3b      	ldr	r2, [pc, #236]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80097dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e0:	613b      	str	r3, [r7, #16]
 80097e2:	e007      	b.n	80097f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80097e4:	4b37      	ldr	r3, [pc, #220]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097e6:	685b      	ldr	r3, [r3, #4]
 80097e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097ec:	4a37      	ldr	r2, [pc, #220]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80097ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f2:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 80097f4:	4b33      	ldr	r3, [pc, #204]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097fa:	0e1b      	lsrs	r3, r3, #24
 80097fc:	f003 030f 	and.w	r3, r3, #15
 8009800:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009802:	4b30      	ldr	r3, [pc, #192]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009808:	099b      	lsrs	r3, r3, #6
 800980a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800980e:	693a      	ldr	r2, [r7, #16]
 8009810:	fb02 f203 	mul.w	r2, r2, r3
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	fbb2 f3f3 	udiv	r3, r2, r3
 800981a:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 800981c:	4b29      	ldr	r3, [pc, #164]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800981e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009822:	0a1b      	lsrs	r3, r3, #8
 8009824:	f003 031f 	and.w	r3, r3, #31
 8009828:	3301      	adds	r3, #1
 800982a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800982c:	697a      	ldr	r2, [r7, #20]
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	fbb2 f3f3 	udiv	r3, r2, r3
 8009834:	617b      	str	r3, [r7, #20]
        break;
 8009836:	e03d      	b.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009838:	4b22      	ldr	r3, [pc, #136]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800983a:	685b      	ldr	r3, [r3, #4]
 800983c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009840:	2b00      	cmp	r3, #0
 8009842:	d108      	bne.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009844:	4b1f      	ldr	r3, [pc, #124]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800984c:	4a1e      	ldr	r2, [pc, #120]	; (80098c8 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 800984e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009852:	613b      	str	r3, [r7, #16]
 8009854:	e007      	b.n	8009866 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009856:	4b1b      	ldr	r3, [pc, #108]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800985e:	4a1b      	ldr	r2, [pc, #108]	; (80098cc <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009860:	fbb2 f3f3 	udiv	r3, r2, r3
 8009864:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 8009866:	4b17      	ldr	r3, [pc, #92]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800986c:	0e1b      	lsrs	r3, r3, #24
 800986e:	f003 030f 	and.w	r3, r3, #15
 8009872:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 8009874:	4b13      	ldr	r3, [pc, #76]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009876:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800987a:	099b      	lsrs	r3, r3, #6
 800987c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009880:	693a      	ldr	r2, [r7, #16]
 8009882:	fb02 f203 	mul.w	r2, r2, r3
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	fbb2 f3f3 	udiv	r3, r2, r3
 800988c:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800988e:	4b0d      	ldr	r3, [pc, #52]	; (80098c4 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009890:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009894:	f003 031f 	and.w	r3, r3, #31
 8009898:	3301      	adds	r3, #1
 800989a:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 800989c:	697a      	ldr	r2, [r7, #20]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80098a4:	617b      	str	r3, [r7, #20]
        break;
 80098a6:	e005      	b.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 80098a8:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80098aa:	617b      	str	r3, [r7, #20]
        break;
 80098ac:	e002      	b.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 80098ae:	bf00      	nop
 80098b0:	e000      	b.n	80098b4 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 80098b2:	bf00      	nop

  return frequency;
 80098b4:	697b      	ldr	r3, [r7, #20]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	371c      	adds	r7, #28
 80098ba:	46bd      	mov	sp, r7
 80098bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c0:	4770      	bx	lr
 80098c2:	bf00      	nop
 80098c4:	40023800 	.word	0x40023800
 80098c8:	00f42400 	.word	0x00f42400
 80098cc:	017d7840 	.word	0x017d7840
 80098d0:	00bb8000 	.word	0x00bb8000

080098d4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b088      	sub	sp, #32
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 80098dc:	2300      	movs	r3, #0
 80098de:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 80098e4:	2300      	movs	r3, #0
 80098e6:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d101      	bne.n	80098f2 <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 80098ee:	2301      	movs	r3, #1
 80098f0:	e156      	b.n	8009ba0 <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 80098f8:	b2db      	uxtb	r3, r3
 80098fa:	2b00      	cmp	r3, #0
 80098fc:	d106      	bne.n	800990c <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	2200      	movs	r2, #0
 8009902:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009906:	6878      	ldr	r0, [r7, #4]
 8009908:	f7fa fbae 	bl	8004068 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	2202      	movs	r2, #2
 8009910:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009914:	6878      	ldr	r0, [r7, #4]
 8009916:	f000 fb13 	bl	8009f40 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	68db      	ldr	r3, [r3, #12]
 800991e:	2b02      	cmp	r3, #2
 8009920:	d00c      	beq.n	800993c <HAL_SAI_Init+0x68>
 8009922:	2b02      	cmp	r3, #2
 8009924:	d80d      	bhi.n	8009942 <HAL_SAI_Init+0x6e>
 8009926:	2b00      	cmp	r3, #0
 8009928:	d002      	beq.n	8009930 <HAL_SAI_Init+0x5c>
 800992a:	2b01      	cmp	r3, #1
 800992c:	d003      	beq.n	8009936 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 800992e:	e008      	b.n	8009942 <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 8009930:	2300      	movs	r3, #0
 8009932:	61fb      	str	r3, [r7, #28]
      break;
 8009934:	e006      	b.n	8009944 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8009936:	2310      	movs	r3, #16
 8009938:	61fb      	str	r3, [r7, #28]
      break;
 800993a:	e003      	b.n	8009944 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800993c:	2320      	movs	r3, #32
 800993e:	61fb      	str	r3, [r7, #28]
      break;
 8009940:	e000      	b.n	8009944 <HAL_SAI_Init+0x70>
      break;
 8009942:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	2b03      	cmp	r3, #3
 800994a:	d81e      	bhi.n	800998a <HAL_SAI_Init+0xb6>
 800994c:	a201      	add	r2, pc, #4	; (adr r2, 8009954 <HAL_SAI_Init+0x80>)
 800994e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009952:	bf00      	nop
 8009954:	08009965 	.word	0x08009965
 8009958:	0800996b 	.word	0x0800996b
 800995c:	08009973 	.word	0x08009973
 8009960:	0800997b 	.word	0x0800997b
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 8009964:	2300      	movs	r3, #0
 8009966:	617b      	str	r3, [r7, #20]
    }
    break;
 8009968:	e010      	b.n	800998c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800996a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800996e:	617b      	str	r3, [r7, #20]
    }
    break;
 8009970:	e00c      	b.n	800998c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009976:	617b      	str	r3, [r7, #20]
    }
    break;
 8009978:	e008      	b.n	800998c <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800997a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800997e:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8009980:	69fb      	ldr	r3, [r7, #28]
 8009982:	f043 0301 	orr.w	r3, r3, #1
 8009986:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009988:	e000      	b.n	800998c <HAL_SAI_Init+0xb8>
    default:
      break;
 800998a:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	4a85      	ldr	r2, [pc, #532]	; (8009ba8 <HAL_SAI_Init+0x2d4>)
 8009992:	4293      	cmp	r3, r2
 8009994:	d004      	beq.n	80099a0 <HAL_SAI_Init+0xcc>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a84      	ldr	r2, [pc, #528]	; (8009bac <HAL_SAI_Init+0x2d8>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d103      	bne.n	80099a8 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 80099a0:	4a83      	ldr	r2, [pc, #524]	; (8009bb0 <HAL_SAI_Init+0x2dc>)
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	6013      	str	r3, [r2, #0]
 80099a6:	e002      	b.n	80099ae <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80099a8:	4a82      	ldr	r2, [pc, #520]	; (8009bb4 <HAL_SAI_Init+0x2e0>)
 80099aa:	69fb      	ldr	r3, [r7, #28]
 80099ac:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	69db      	ldr	r3, [r3, #28]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d04c      	beq.n	8009a50 <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 80099b6:	2300      	movs	r3, #0
 80099b8:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a7a      	ldr	r2, [pc, #488]	; (8009ba8 <HAL_SAI_Init+0x2d4>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d004      	beq.n	80099ce <HAL_SAI_Init+0xfa>
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a78      	ldr	r2, [pc, #480]	; (8009bac <HAL_SAI_Init+0x2d8>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d104      	bne.n	80099d8 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 80099ce:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80099d2:	f7ff fe3b 	bl	800964c <HAL_RCCEx_GetPeriphCLKFreq>
 80099d6:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a76      	ldr	r2, [pc, #472]	; (8009bb8 <HAL_SAI_Init+0x2e4>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d004      	beq.n	80099ec <HAL_SAI_Init+0x118>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a75      	ldr	r2, [pc, #468]	; (8009bbc <HAL_SAI_Init+0x2e8>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d104      	bne.n	80099f6 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80099ec:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80099f0:	f7ff fe2c 	bl	800964c <HAL_RCCEx_GetPeriphCLKFreq>
 80099f4:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	4613      	mov	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	005b      	lsls	r3, r3, #1
 8009a00:	461a      	mov	r2, r3
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	69db      	ldr	r3, [r3, #28]
 8009a06:	025b      	lsls	r3, r3, #9
 8009a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a0c:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	4a6b      	ldr	r2, [pc, #428]	; (8009bc0 <HAL_SAI_Init+0x2ec>)
 8009a12:	fba2 2303 	umull	r2, r3, r2, r3
 8009a16:	08da      	lsrs	r2, r3, #3
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009a1c:	68f9      	ldr	r1, [r7, #12]
 8009a1e:	4b68      	ldr	r3, [pc, #416]	; (8009bc0 <HAL_SAI_Init+0x2ec>)
 8009a20:	fba3 2301 	umull	r2, r3, r3, r1
 8009a24:	08da      	lsrs	r2, r3, #3
 8009a26:	4613      	mov	r3, r2
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4413      	add	r3, r2
 8009a2c:	005b      	lsls	r3, r3, #1
 8009a2e:	1aca      	subs	r2, r1, r3
 8009a30:	2a08      	cmp	r2, #8
 8009a32:	d904      	bls.n	8009a3e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6a1b      	ldr	r3, [r3, #32]
 8009a38:	1c5a      	adds	r2, r3, #1
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a42:	2b04      	cmp	r3, #4
 8009a44:	d104      	bne.n	8009a50 <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	6a1b      	ldr	r3, [r3, #32]
 8009a4a:	085a      	lsrs	r2, r3, #1
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	685b      	ldr	r3, [r3, #4]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d003      	beq.n	8009a60 <HAL_SAI_Init+0x18c>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	2b02      	cmp	r3, #2
 8009a5e:	d109      	bne.n	8009a74 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d101      	bne.n	8009a6c <HAL_SAI_Init+0x198>
 8009a68:	2300      	movs	r3, #0
 8009a6a:	e001      	b.n	8009a70 <HAL_SAI_Init+0x19c>
 8009a6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a70:	61bb      	str	r3, [r7, #24]
 8009a72:	e008      	b.n	8009a86 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d102      	bne.n	8009a82 <HAL_SAI_Init+0x1ae>
 8009a7c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009a80:	e000      	b.n	8009a84 <HAL_SAI_Init+0x1b0>
 8009a82:	2300      	movs	r3, #0
 8009a84:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6819      	ldr	r1, [r3, #0]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	4b4c      	ldr	r3, [pc, #304]	; (8009bc4 <HAL_SAI_Init+0x2f0>)
 8009a92:	400b      	ands	r3, r1
 8009a94:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6819      	ldr	r1, [r3, #0]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	685a      	ldr	r2, [r3, #4]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009aa4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009aaa:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ab0:	431a      	orrs	r2, r3
 8009ab2:	69bb      	ldr	r3, [r7, #24]
 8009ab4:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8009abe:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	691b      	ldr	r3, [r3, #16]
 8009ac4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009aca:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	6a1b      	ldr	r3, [r3, #32]
 8009ad0:	051b      	lsls	r3, r3, #20
 8009ad2:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	430a      	orrs	r2, r1
 8009ada:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	6859      	ldr	r1, [r3, #4]
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681a      	ldr	r2, [r3, #0]
 8009ae6:	4b38      	ldr	r3, [pc, #224]	; (8009bc8 <HAL_SAI_Init+0x2f4>)
 8009ae8:	400b      	ands	r3, r1
 8009aea:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	6859      	ldr	r1, [r3, #4]
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	699a      	ldr	r2, [r3, #24]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009afa:	431a      	orrs	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b00:	431a      	orrs	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	6899      	ldr	r1, [r3, #8]
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681a      	ldr	r2, [r3, #0]
 8009b14:	4b2d      	ldr	r3, [pc, #180]	; (8009bcc <HAL_SAI_Init+0x2f8>)
 8009b16:	400b      	ands	r3, r1
 8009b18:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	6899      	ldr	r1, [r3, #8]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b24:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009b2a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8009b30:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8009b36:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009b40:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	430a      	orrs	r2, r1
 8009b48:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	68d9      	ldr	r1, [r3, #12]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681a      	ldr	r2, [r3, #0]
 8009b54:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009b58:	400b      	ands	r3, r1
 8009b5a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	68d9      	ldr	r1, [r3, #12]
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b6a:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009b70:	041b      	lsls	r3, r3, #16
 8009b72:	431a      	orrs	r2, r3
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b78:	3b01      	subs	r3, #1
 8009b7a:	021b      	lsls	r3, r3, #8
 8009b7c:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	430a      	orrs	r2, r1
 8009b84:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2200      	movs	r2, #0
 8009b9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b9e:	2300      	movs	r3, #0
}
 8009ba0:	4618      	mov	r0, r3
 8009ba2:	3720      	adds	r7, #32
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	40015804 	.word	0x40015804
 8009bac:	40015824 	.word	0x40015824
 8009bb0:	40015800 	.word	0x40015800
 8009bb4:	40015c00 	.word	0x40015c00
 8009bb8:	40015c04 	.word	0x40015c04
 8009bbc:	40015c24 	.word	0x40015c24
 8009bc0:	cccccccd 	.word	0xcccccccd
 8009bc4:	ff05c010 	.word	0xff05c010
 8009bc8:	ffff1ff0 	.word	0xffff1ff0
 8009bcc:	fff88000 	.word	0xfff88000

08009bd0 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b082      	sub	sp, #8
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e027      	b.n	8009c32 <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2202      	movs	r2, #2
 8009be6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8009bfa:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8009bfc:	6878      	ldr	r0, [r7, #4]
 8009bfe:	f000 f99f 	bl	8009f40 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	685a      	ldr	r2, [r3, #4]
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	f042 0208 	orr.w	r2, r2, #8
 8009c10:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8009c12:	6878      	ldr	r0, [r7, #4]
 8009c14:	f7fa fb06 	bl	8004224 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009c30:	2300      	movs	r3, #0
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	3708      	adds	r7, #8
 8009c36:	46bd      	mov	sp, r7
 8009c38:	bd80      	pop	{r7, pc}
	...

08009c3c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009c3c:	b580      	push	{r7, lr}
 8009c3e:	b086      	sub	sp, #24
 8009c40:	af00      	add	r7, sp, #0
 8009c42:	60f8      	str	r0, [r7, #12]
 8009c44:	60b9      	str	r1, [r7, #8]
 8009c46:	4613      	mov	r3, r2
 8009c48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009c4a:	f7fb ffc7 	bl	8005bdc <HAL_GetTick>
 8009c4e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d002      	beq.n	8009c5c <HAL_SAI_Transmit_DMA+0x20>
 8009c56:	88fb      	ldrh	r3, [r7, #6]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d101      	bne.n	8009c60 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e093      	b.n	8009d88 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009c66:	b2db      	uxtb	r3, r3
 8009c68:	2b01      	cmp	r3, #1
 8009c6a:	f040 808c 	bne.w	8009d86 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d101      	bne.n	8009c7c <HAL_SAI_Transmit_DMA+0x40>
 8009c78:	2302      	movs	r3, #2
 8009c7a:	e085      	b.n	8009d88 <HAL_SAI_Transmit_DMA+0x14c>
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	2201      	movs	r2, #1
 8009c80:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	88fa      	ldrh	r2, [r7, #6]
 8009c8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	88fa      	ldrh	r2, [r7, #6]
 8009c96:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2212      	movs	r2, #18
 8009ca6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cae:	4a38      	ldr	r2, [pc, #224]	; (8009d90 <HAL_SAI_Transmit_DMA+0x154>)
 8009cb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cb6:	4a37      	ldr	r2, [pc, #220]	; (8009d94 <HAL_SAI_Transmit_DMA+0x158>)
 8009cb8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cbe:	4a36      	ldr	r2, [pc, #216]	; (8009d98 <HAL_SAI_Transmit_DMA+0x15c>)
 8009cc0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cd2:	4619      	mov	r1, r3
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	331c      	adds	r3, #28
 8009cda:	461a      	mov	r2, r3
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009ce2:	f7fc f999 	bl	8006018 <HAL_DMA_Start_IT>
 8009ce6:	4603      	mov	r3, r0
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d005      	beq.n	8009cf8 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2200      	movs	r2, #0
 8009cf0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8009cf4:	2301      	movs	r3, #1
 8009cf6:	e047      	b.n	8009d88 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	68f8      	ldr	r0, [r7, #12]
 8009cfc:	f000 f8ea 	bl	8009ed4 <SAI_InterruptFlag>
 8009d00:	4601      	mov	r1, r0
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	691a      	ldr	r2, [r3, #16]
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	430a      	orrs	r2, r1
 8009d0e:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009d1e:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009d20:	e015      	b.n	8009d4e <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8009d22:	f7fb ff5b 	bl	8005bdc <HAL_GetTick>
 8009d26:	4602      	mov	r2, r0
 8009d28:	697b      	ldr	r3, [r7, #20]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009d30:	d90d      	bls.n	8009d4e <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d38:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009d4a:	2303      	movs	r3, #3
 8009d4c:	e01c      	b.n	8009d88 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	695b      	ldr	r3, [r3, #20]
 8009d54:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d0e2      	beq.n	8009d22 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d107      	bne.n	8009d7a <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	681a      	ldr	r2, [r3, #0]
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009d78:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009d7a:	68fb      	ldr	r3, [r7, #12]
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009d82:	2300      	movs	r3, #0
 8009d84:	e000      	b.n	8009d88 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8009d86:	2302      	movs	r3, #2
  }
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3718      	adds	r7, #24
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}
 8009d90:	0800a011 	.word	0x0800a011
 8009d94:	08009fb1 	.word	0x08009fb1
 8009d98:	0800a0a9 	.word	0x0800a0a9

08009d9c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	60f8      	str	r0, [r7, #12]
 8009da4:	60b9      	str	r1, [r7, #8]
 8009da6:	4613      	mov	r3, r2
 8009da8:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8009daa:	68bb      	ldr	r3, [r7, #8]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d002      	beq.n	8009db6 <HAL_SAI_Receive_DMA+0x1a>
 8009db0:	88fb      	ldrh	r3, [r7, #6]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	e074      	b.n	8009ea4 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009dc0:	b2db      	uxtb	r3, r3
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d16d      	bne.n	8009ea2 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	d101      	bne.n	8009dd4 <HAL_SAI_Receive_DMA+0x38>
 8009dd0:	2302      	movs	r3, #2
 8009dd2:	e067      	b.n	8009ea4 <HAL_SAI_Receive_DMA+0x108>
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	2201      	movs	r2, #1
 8009dd8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	88fa      	ldrh	r2, [r7, #6]
 8009de6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	88fa      	ldrh	r2, [r7, #6]
 8009dee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	2200      	movs	r2, #0
 8009df6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	2222      	movs	r2, #34	; 0x22
 8009dfe:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e06:	4a29      	ldr	r2, [pc, #164]	; (8009eac <HAL_SAI_Receive_DMA+0x110>)
 8009e08:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e0e:	4a28      	ldr	r2, [pc, #160]	; (8009eb0 <HAL_SAI_Receive_DMA+0x114>)
 8009e10:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e16:	4a27      	ldr	r2, [pc, #156]	; (8009eb4 <HAL_SAI_Receive_DMA+0x118>)
 8009e18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009e1e:	2200      	movs	r2, #0
 8009e20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	331c      	adds	r3, #28
 8009e2c:	4619      	mov	r1, r3
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009e32:	461a      	mov	r2, r3
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009e3a:	f7fc f8ed 	bl	8006018 <HAL_DMA_Start_IT>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d005      	beq.n	8009e50 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e029      	b.n	8009ea4 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009e50:	2100      	movs	r1, #0
 8009e52:	68f8      	ldr	r0, [r7, #12]
 8009e54:	f000 f83e 	bl	8009ed4 <SAI_InterruptFlag>
 8009e58:	4601      	mov	r1, r0
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	691a      	ldr	r2, [r3, #16]
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	430a      	orrs	r2, r1
 8009e66:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	681a      	ldr	r2, [r3, #0]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009e76:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d107      	bne.n	8009e96 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009e94:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009e9e:	2300      	movs	r3, #0
 8009ea0:	e000      	b.n	8009ea4 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8009ea2:	2302      	movs	r3, #2
  }
}
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	3710      	adds	r7, #16
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	bd80      	pop	{r7, pc}
 8009eac:	0800a08d 	.word	0x0800a08d
 8009eb0:	0800a02d 	.word	0x0800a02d
 8009eb4:	0800a0a9 	.word	0x0800a0a9

08009eb8 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b083      	sub	sp, #12
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009ec6:	b2db      	uxtb	r3, r3
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8009ed4:	b480      	push	{r7}
 8009ed6:	b085      	sub	sp, #20
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8009ee2:	683b      	ldr	r3, [r7, #0]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	d103      	bne.n	8009ef0 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	f043 0308 	orr.w	r3, r3, #8
 8009eee:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ef4:	2b08      	cmp	r3, #8
 8009ef6:	d10b      	bne.n	8009f10 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009efc:	2b03      	cmp	r3, #3
 8009efe:	d003      	beq.n	8009f08 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	2b01      	cmp	r3, #1
 8009f06:	d103      	bne.n	8009f10 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	f043 0310 	orr.w	r3, r3, #16
 8009f0e:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	2b03      	cmp	r3, #3
 8009f16:	d003      	beq.n	8009f20 <SAI_InterruptFlag+0x4c>
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	685b      	ldr	r3, [r3, #4]
 8009f1c:	2b02      	cmp	r3, #2
 8009f1e:	d104      	bne.n	8009f2a <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009f26:	60fb      	str	r3, [r7, #12]
 8009f28:	e003      	b.n	8009f32 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	f043 0304 	orr.w	r3, r3, #4
 8009f30:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8009f32:	68fb      	ldr	r3, [r7, #12]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009f40:	b480      	push	{r7}
 8009f42:	b085      	sub	sp, #20
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009f48:	4b17      	ldr	r3, [pc, #92]	; (8009fa8 <SAI_Disable+0x68>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a17      	ldr	r2, [pc, #92]	; (8009fac <SAI_Disable+0x6c>)
 8009f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8009f52:	0b1b      	lsrs	r3, r3, #12
 8009f54:	009b      	lsls	r3, r3, #2
 8009f56:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009f58:	2300      	movs	r3, #0
 8009f5a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	681a      	ldr	r2, [r3, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009f6a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	1e5a      	subs	r2, r3, #1
 8009f70:	60fa      	str	r2, [r7, #12]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d10a      	bne.n	8009f8c <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009f7c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8009f86:	2303      	movs	r3, #3
 8009f88:	72fb      	strb	r3, [r7, #11]
      break;
 8009f8a:	e006      	b.n	8009f9a <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d1e8      	bne.n	8009f6c <SAI_Disable+0x2c>

  return status;
 8009f9a:	7afb      	ldrb	r3, [r7, #11]
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3714      	adds	r7, #20
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa6:	4770      	bx	lr
 8009fa8:	20000040 	.word	0x20000040
 8009fac:	95cbec1b 	.word	0x95cbec1b

08009fb0 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b084      	sub	sp, #16
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbc:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	69db      	ldr	r3, [r3, #28]
 8009fc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fc6:	d01c      	beq.n	800a002 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	2200      	movs	r2, #0
 8009fcc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681a      	ldr	r2, [r3, #0]
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009fde:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009fe0:	2100      	movs	r1, #0
 8009fe2:	68f8      	ldr	r0, [r7, #12]
 8009fe4:	f7ff ff76 	bl	8009ed4 <SAI_InterruptFlag>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	43d9      	mvns	r1, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	691a      	ldr	r2, [r3, #16]
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	400a      	ands	r2, r1
 8009ff8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f7f8 fa92 	bl	800252c <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a008:	bf00      	nop
 800a00a:	3710      	adds	r7, #16
 800a00c:	46bd      	mov	sp, r7
 800a00e:	bd80      	pop	{r7, pc}

0800a010 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b084      	sub	sp, #16
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a01c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 800a01e:	68f8      	ldr	r0, [r7, #12]
 800a020:	f7f8 fa8e 	bl	8002540 <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a024:	bf00      	nop
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b084      	sub	sp, #16
 800a030:	af00      	add	r7, sp, #0
 800a032:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a038:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	69db      	ldr	r3, [r3, #28]
 800a03e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a042:	d01c      	beq.n	800a07e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	681a      	ldr	r2, [r3, #0]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a052:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	2200      	movs	r2, #0
 800a058:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 800a05c:	2100      	movs	r1, #0
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f7ff ff38 	bl	8009ed4 <SAI_InterruptFlag>
 800a064:	4603      	mov	r3, r0
 800a066:	43d9      	mvns	r1, r3
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	691a      	ldr	r2, [r3, #16]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	400a      	ands	r2, r1
 800a074:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 800a07e:	68f8      	ldr	r0, [r7, #12]
 800a080:	f7f8 fc84 	bl	800298c <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a084:	bf00      	nop
 800a086:	3710      	adds	r7, #16
 800a088:	46bd      	mov	sp, r7
 800a08a:	bd80      	pop	{r7, pc}

0800a08c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b084      	sub	sp, #16
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a098:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800a09a:	68f8      	ldr	r0, [r7, #12]
 800a09c:	f7f8 fc80 	bl	80029a0 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a0a0:	bf00      	nop
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b084      	sub	sp, #16
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0b4:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a0bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a0ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0cc:	2b01      	cmp	r3, #1
 800a0ce:	d004      	beq.n	800a0da <SAI_DMAError+0x32>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d112      	bne.n	800a100 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	681a      	ldr	r2, [r3, #0]
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a0e8:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	f7ff ff28 	bl	8009f40 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	2201      	movs	r2, #1
 800a0f4:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800a100:	68f8      	ldr	r0, [r7, #12]
 800a102:	f7f8 fa27 	bl	8002554 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a106:	bf00      	nop
 800a108:	3710      	adds	r7, #16
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b082      	sub	sp, #8
 800a112:	af00      	add	r7, sp, #0
 800a114:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	e022      	b.n	800a166 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a126:	b2db      	uxtb	r3, r3
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d105      	bne.n	800a138 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	2200      	movs	r2, #0
 800a130:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a132:	6878      	ldr	r0, [r7, #4]
 800a134:	f7f9 fdb2 	bl	8003c9c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2203      	movs	r2, #3
 800a13c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a140:	6878      	ldr	r0, [r7, #4]
 800a142:	f000 f815 	bl	800a170 <HAL_SD_InitCard>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a14c:	2301      	movs	r3, #1
 800a14e:	e00a      	b.n	800a166 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2200      	movs	r2, #0
 800a154:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2200      	movs	r2, #0
 800a15a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	2201      	movs	r2, #1
 800a160:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a164:	2300      	movs	r3, #0
}
 800a166:	4618      	mov	r0, r3
 800a168:	3708      	adds	r7, #8
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}
	...

0800a170 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a170:	b5b0      	push	{r4, r5, r7, lr}
 800a172:	b08e      	sub	sp, #56	; 0x38
 800a174:	af04      	add	r7, sp, #16
 800a176:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a178:	2300      	movs	r3, #0
 800a17a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a17c:	2300      	movs	r3, #0
 800a17e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a180:	2300      	movs	r3, #0
 800a182:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a184:	2300      	movs	r3, #0
 800a186:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a188:	2300      	movs	r3, #0
 800a18a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a18c:	2376      	movs	r3, #118	; 0x76
 800a18e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681d      	ldr	r5, [r3, #0]
 800a194:	466c      	mov	r4, sp
 800a196:	f107 0314 	add.w	r3, r7, #20
 800a19a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a19e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a1a2:	f107 0308 	add.w	r3, r7, #8
 800a1a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a1a8:	4628      	mov	r0, r5
 800a1aa:	f002 fb63 	bl	800c874 <SDMMC_Init>
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a1b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d001      	beq.n	800a1c0 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	e056      	b.n	800a26e <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	685a      	ldr	r2, [r3, #4]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1ce:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f002 fb97 	bl	800c908 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	685a      	ldr	r2, [r3, #4]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1e8:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a1ea:	6878      	ldr	r0, [r7, #4]
 800a1ec:	f000 fff2 	bl	800b1d4 <SD_PowerON>
 800a1f0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1f2:	6a3b      	ldr	r3, [r7, #32]
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d00b      	beq.n	800a210 <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	431a      	orrs	r2, r3
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a20c:	2301      	movs	r3, #1
 800a20e:	e02e      	b.n	800a26e <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 ff13 	bl	800b03c <SD_InitCard>
 800a216:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a218:	6a3b      	ldr	r3, [r7, #32]
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d00b      	beq.n	800a236 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2201      	movs	r2, #1
 800a222:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	431a      	orrs	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e01b      	b.n	800a26e <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a23e:	4618      	mov	r0, r3
 800a240:	f002 fbf6 	bl	800ca30 <SDMMC_CmdBlockLength>
 800a244:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a246:	6a3b      	ldr	r3, [r7, #32]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00f      	beq.n	800a26c <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a09      	ldr	r2, [pc, #36]	; (800a278 <HAL_SD_InitCard+0x108>)
 800a252:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a258:	6a3b      	ldr	r3, [r7, #32]
 800a25a:	431a      	orrs	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2201      	movs	r2, #1
 800a264:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e000      	b.n	800a26e <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800a26c:	2300      	movs	r3, #0
}
 800a26e:	4618      	mov	r0, r3
 800a270:	3728      	adds	r7, #40	; 0x28
 800a272:	46bd      	mov	sp, r7
 800a274:	bdb0      	pop	{r4, r5, r7, pc}
 800a276:	bf00      	nop
 800a278:	004005ff 	.word	0x004005ff

0800a27c <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a27c:	b580      	push	{r7, lr}
 800a27e:	b08c      	sub	sp, #48	; 0x30
 800a280:	af00      	add	r7, sp, #0
 800a282:	60f8      	str	r0, [r7, #12]
 800a284:	60b9      	str	r1, [r7, #8]
 800a286:	607a      	str	r2, [r7, #4]
 800a288:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a28e:	68bb      	ldr	r3, [r7, #8]
 800a290:	2b00      	cmp	r3, #0
 800a292:	d107      	bne.n	800a2a4 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a298:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e0c3      	b.n	800a42c <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	2b01      	cmp	r3, #1
 800a2ae:	f040 80bc 	bne.w	800a42a <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	2200      	movs	r2, #0
 800a2b6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a2b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2ba:	683b      	ldr	r3, [r7, #0]
 800a2bc:	441a      	add	r2, r3
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2c2:	429a      	cmp	r2, r3
 800a2c4:	d907      	bls.n	800a2d6 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2ca:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a2d2:	2301      	movs	r3, #1
 800a2d4:	e0aa      	b.n	800a42c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	2203      	movs	r2, #3
 800a2da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	681b      	ldr	r3, [r3, #0]
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a2f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2fa:	4a4e      	ldr	r2, [pc, #312]	; (800a434 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a2fc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a302:	4a4d      	ldr	r2, [pc, #308]	; (800a438 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a304:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a30a:	2200      	movs	r2, #0
 800a30c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a312:	2200      	movs	r2, #0
 800a314:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a326:	689a      	ldr	r2, [r3, #8]
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	430a      	orrs	r2, r1
 800a330:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	3380      	adds	r3, #128	; 0x80
 800a33c:	4619      	mov	r1, r3
 800a33e:	68ba      	ldr	r2, [r7, #8]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	025b      	lsls	r3, r3, #9
 800a344:	089b      	lsrs	r3, r3, #2
 800a346:	f7fb fe67 	bl	8006018 <HAL_DMA_Start_IT>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d017      	beq.n	800a380 <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a35e:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	4a35      	ldr	r2, [pc, #212]	; (800a43c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a366:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a36c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	2201      	movs	r2, #1
 800a378:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a37c:	2301      	movs	r3, #1
 800a37e:	e055      	b.n	800a42c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	f042 0208 	orr.w	r2, r2, #8
 800a38e:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a394:	2b01      	cmp	r3, #1
 800a396:	d002      	beq.n	800a39e <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a39a:	025b      	lsls	r3, r3, #9
 800a39c:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a39e:	f04f 33ff 	mov.w	r3, #4294967295
 800a3a2:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a3a4:	683b      	ldr	r3, [r7, #0]
 800a3a6:	025b      	lsls	r3, r3, #9
 800a3a8:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a3aa:	2390      	movs	r3, #144	; 0x90
 800a3ac:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a3ae:	2302      	movs	r3, #2
 800a3b0:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a3b6:	2301      	movs	r3, #1
 800a3b8:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	681b      	ldr	r3, [r3, #0]
 800a3be:	f107 0210 	add.w	r2, r7, #16
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	4618      	mov	r0, r3
 800a3c6:	f002 fb07 	bl	800c9d8 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	2b01      	cmp	r3, #1
 800a3ce:	d90a      	bls.n	800a3e6 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	2282      	movs	r2, #130	; 0x82
 800a3d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3dc:	4618      	mov	r0, r3
 800a3de:	f002 fb6b 	bl	800cab8 <SDMMC_CmdReadMultiBlock>
 800a3e2:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a3e4:	e009      	b.n	800a3fa <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2281      	movs	r2, #129	; 0x81
 800a3ea:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f002 fb3e 	bl	800ca74 <SDMMC_CmdReadSingleBlock>
 800a3f8:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d012      	beq.n	800a426 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	4a0d      	ldr	r2, [pc, #52]	; (800a43c <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a406:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a40e:	431a      	orrs	r2, r3
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	2201      	movs	r2, #1
 800a418:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	2200      	movs	r2, #0
 800a420:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a422:	2301      	movs	r3, #1
 800a424:	e002      	b.n	800a42c <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a426:	2300      	movs	r3, #0
 800a428:	e000      	b.n	800a42c <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a42a:	2302      	movs	r3, #2
  }
}
 800a42c:	4618      	mov	r0, r3
 800a42e:	3730      	adds	r7, #48	; 0x30
 800a430:	46bd      	mov	sp, r7
 800a432:	bd80      	pop	{r7, pc}
 800a434:	0800ae4b 	.word	0x0800ae4b
 800a438:	0800aebd 	.word	0x0800aebd
 800a43c:	004005ff 	.word	0x004005ff

0800a440 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a440:	b580      	push	{r7, lr}
 800a442:	b08c      	sub	sp, #48	; 0x30
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	607a      	str	r2, [r7, #4]
 800a44c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a452:	68bb      	ldr	r3, [r7, #8]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d107      	bne.n	800a468 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a45c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a464:	2301      	movs	r3, #1
 800a466:	e0c6      	b.n	800a5f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a46e:	b2db      	uxtb	r3, r3
 800a470:	2b01      	cmp	r3, #1
 800a472:	f040 80bf 	bne.w	800a5f4 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	2200      	movs	r2, #0
 800a47a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a47c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	441a      	add	r2, r3
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a486:	429a      	cmp	r2, r3
 800a488:	d907      	bls.n	800a49a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a48e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a496:	2301      	movs	r3, #1
 800a498:	e0ad      	b.n	800a5f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2203      	movs	r2, #3
 800a49e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	2200      	movs	r2, #0
 800a4a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f042 021a 	orr.w	r2, r2, #26
 800a4b8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4be:	4a50      	ldr	r2, [pc, #320]	; (800a600 <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a4c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4c6:	4a4f      	ldr	r2, [pc, #316]	; (800a604 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a4c8:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a4d6:	2b01      	cmp	r3, #1
 800a4d8:	d002      	beq.n	800a4e0 <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4dc:	025b      	lsls	r3, r3, #9
 800a4de:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d90a      	bls.n	800a4fc <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	22a0      	movs	r2, #160	; 0xa0
 800a4ea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	f002 fb24 	bl	800cb40 <SDMMC_CmdWriteMultiBlock>
 800a4f8:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a4fa:	e009      	b.n	800a510 <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	2290      	movs	r2, #144	; 0x90
 800a500:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a508:	4618      	mov	r0, r3
 800a50a:	f002 faf7 	bl	800cafc <SDMMC_CmdWriteSingleBlock>
 800a50e:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a512:	2b00      	cmp	r3, #0
 800a514:	d012      	beq.n	800a53c <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	4a3b      	ldr	r2, [pc, #236]	; (800a608 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a51c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a524:	431a      	orrs	r2, r3
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	2200      	movs	r2, #0
 800a536:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a538:	2301      	movs	r3, #1
 800a53a:	e05c      	b.n	800a5f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	f042 0208 	orr.w	r2, r2, #8
 800a54a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a550:	2240      	movs	r2, #64	; 0x40
 800a552:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a564:	689a      	ldr	r2, [r3, #8]
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	430a      	orrs	r2, r1
 800a56e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a574:	68b9      	ldr	r1, [r7, #8]
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	3380      	adds	r3, #128	; 0x80
 800a57c:	461a      	mov	r2, r3
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	025b      	lsls	r3, r3, #9
 800a582:	089b      	lsrs	r3, r3, #2
 800a584:	f7fb fd48 	bl	8006018 <HAL_DMA_Start_IT>
 800a588:	4603      	mov	r3, r0
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d01a      	beq.n	800a5c4 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f022 021a 	bic.w	r2, r2, #26
 800a59c:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a19      	ldr	r2, [pc, #100]	; (800a608 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a5a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5aa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e018      	b.n	800a5f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c8:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	025b      	lsls	r3, r3, #9
 800a5ce:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a5d0:	2390      	movs	r3, #144	; 0x90
 800a5d2:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a5d8:	2300      	movs	r3, #0
 800a5da:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f107 0210 	add.w	r2, r7, #16
 800a5e8:	4611      	mov	r1, r2
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	f002 f9f4 	bl	800c9d8 <SDMMC_ConfigData>

      return HAL_OK;
 800a5f0:	2300      	movs	r3, #0
 800a5f2:	e000      	b.n	800a5f6 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a5f4:	2302      	movs	r3, #2
  }
}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3730      	adds	r7, #48	; 0x30
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
 800a5fe:	bf00      	nop
 800a600:	0800ae21 	.word	0x0800ae21
 800a604:	0800aebd 	.word	0x0800aebd
 800a608:	004005ff 	.word	0x004005ff

0800a60c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a618:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a624:	2b00      	cmp	r3, #0
 800a626:	d008      	beq.n	800a63a <HAL_SD_IRQHandler+0x2e>
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f003 0308 	and.w	r3, r3, #8
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d003      	beq.n	800a63a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a632:	6878      	ldr	r0, [r7, #4]
 800a634:	f000 ffed 	bl	800b612 <SD_Read_IT>
 800a638:	e153      	b.n	800a8e2 <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a644:	2b00      	cmp	r3, #0
 800a646:	f000 808d 	beq.w	800a764 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a652:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681a      	ldr	r2, [r3, #0]
 800a65e:	4ba3      	ldr	r3, [pc, #652]	; (800a8ec <HAL_SD_IRQHandler+0x2e0>)
 800a660:	400b      	ands	r3, r1
 800a662:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f022 0201 	bic.w	r2, r2, #1
 800a672:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f003 0308 	and.w	r3, r3, #8
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d039      	beq.n	800a6f2 <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f003 0302 	and.w	r3, r3, #2
 800a684:	2b00      	cmp	r3, #0
 800a686:	d104      	bne.n	800a692 <HAL_SD_IRQHandler+0x86>
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f003 0320 	and.w	r3, r3, #32
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d011      	beq.n	800a6b6 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	4618      	mov	r0, r3
 800a698:	f002 fa74 	bl	800cb84 <SDMMC_CmdStopTransfer>
 800a69c:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d008      	beq.n	800a6b6 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6a8:	68bb      	ldr	r3, [r7, #8]
 800a6aa:	431a      	orrs	r2, r3
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 f921 	bl	800a8f8 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	f240 523a 	movw	r2, #1338	; 0x53a
 800a6be:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f003 0301 	and.w	r3, r3, #1
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d104      	bne.n	800a6e2 <HAL_SD_IRQHandler+0xd6>
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f003 0302 	and.w	r3, r3, #2
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d003      	beq.n	800a6ea <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a6e2:	6878      	ldr	r0, [r7, #4]
 800a6e4:	f002 fee4 	bl	800d4b0 <HAL_SD_RxCpltCallback>
 800a6e8:	e0fb      	b.n	800a8e2 <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f002 fed6 	bl	800d49c <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a6f0:	e0f7      	b.n	800a8e2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	f000 80f2 	beq.w	800a8e2 <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	f003 0320 	and.w	r3, r3, #32
 800a704:	2b00      	cmp	r3, #0
 800a706:	d011      	beq.n	800a72c <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4618      	mov	r0, r3
 800a70e:	f002 fa39 	bl	800cb84 <SDMMC_CmdStopTransfer>
 800a712:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a714:	68bb      	ldr	r3, [r7, #8]
 800a716:	2b00      	cmp	r3, #0
 800a718:	d008      	beq.n	800a72c <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	431a      	orrs	r2, r3
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a726:	6878      	ldr	r0, [r7, #4]
 800a728:	f000 f8e6 	bl	800a8f8 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f003 0301 	and.w	r3, r3, #1
 800a732:	2b00      	cmp	r3, #0
 800a734:	f040 80d5 	bne.w	800a8e2 <HAL_SD_IRQHandler+0x2d6>
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	f003 0302 	and.w	r3, r3, #2
 800a73e:	2b00      	cmp	r3, #0
 800a740:	f040 80cf 	bne.w	800a8e2 <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f022 0208 	bic.w	r2, r2, #8
 800a752:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f002 fe9d 	bl	800d49c <HAL_SD_TxCpltCallback>
}
 800a762:	e0be      	b.n	800a8e2 <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a76a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d008      	beq.n	800a784 <HAL_SD_IRQHandler+0x178>
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f003 0308 	and.w	r3, r3, #8
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d003      	beq.n	800a784 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800a77c:	6878      	ldr	r0, [r7, #4]
 800a77e:	f000 ff99 	bl	800b6b4 <SD_Write_IT>
 800a782:	e0ae      	b.n	800a8e2 <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78a:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 80a7 	beq.w	800a8e2 <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a79a:	f003 0302 	and.w	r3, r3, #2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d005      	beq.n	800a7ae <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a6:	f043 0202 	orr.w	r2, r3, #2
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b4:	f003 0308 	and.w	r3, r3, #8
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d005      	beq.n	800a7c8 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7c0:	f043 0208 	orr.w	r2, r3, #8
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7ce:	f003 0320 	and.w	r3, r3, #32
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	d005      	beq.n	800a7e2 <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7da:	f043 0220 	orr.w	r2, r3, #32
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7e8:	f003 0310 	and.w	r3, r3, #16
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d005      	beq.n	800a7fc <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7f4:	f043 0210 	orr.w	r2, r3, #16
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	f240 523a 	movw	r2, #1338	; 0x53a
 800a804:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a814:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	4618      	mov	r0, r3
 800a81c:	f002 f9b2 	bl	800cb84 <SDMMC_CmdStopTransfer>
 800a820:	4602      	mov	r2, r0
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a826:	431a      	orrs	r2, r3
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f003 0308 	and.w	r3, r3, #8
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00a      	beq.n	800a84c <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	2201      	movs	r2, #1
 800a83a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	2200      	movs	r2, #0
 800a842:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a844:	6878      	ldr	r0, [r7, #4]
 800a846:	f000 f857 	bl	800a8f8 <HAL_SD_ErrorCallback>
}
 800a84a:	e04a      	b.n	800a8e2 <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a852:	2b00      	cmp	r3, #0
 800a854:	d045      	beq.n	800a8e2 <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	f003 0310 	and.w	r3, r3, #16
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d104      	bne.n	800a86a <HAL_SD_IRQHandler+0x25e>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	f003 0320 	and.w	r3, r3, #32
 800a866:	2b00      	cmp	r3, #0
 800a868:	d011      	beq.n	800a88e <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a86e:	4a20      	ldr	r2, [pc, #128]	; (800a8f0 <HAL_SD_IRQHandler+0x2e4>)
 800a870:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a876:	4618      	mov	r0, r3
 800a878:	f7fb fc2e 	bl	80060d8 <HAL_DMA_Abort_IT>
 800a87c:	4603      	mov	r3, r0
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d02f      	beq.n	800a8e2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a886:	4618      	mov	r0, r3
 800a888:	f000 fb6a 	bl	800af60 <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a88c:	e029      	b.n	800a8e2 <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	f003 0301 	and.w	r3, r3, #1
 800a894:	2b00      	cmp	r3, #0
 800a896:	d104      	bne.n	800a8a2 <HAL_SD_IRQHandler+0x296>
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	f003 0302 	and.w	r3, r3, #2
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d011      	beq.n	800a8c6 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8a6:	4a13      	ldr	r2, [pc, #76]	; (800a8f4 <HAL_SD_IRQHandler+0x2e8>)
 800a8a8:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7fb fc12 	bl	80060d8 <HAL_DMA_Abort_IT>
 800a8b4:	4603      	mov	r3, r0
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d013      	beq.n	800a8e2 <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 fb85 	bl	800afce <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a8c4:	e00d      	b.n	800a8e2 <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2201      	movs	r2, #1
 800a8d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2200      	movs	r2, #0
 800a8d8:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a8da:	6878      	ldr	r0, [r7, #4]
 800a8dc:	f002 fdd4 	bl	800d488 <HAL_SD_AbortCallback>
}
 800a8e0:	e7ff      	b.n	800a8e2 <HAL_SD_IRQHandler+0x2d6>
 800a8e2:	bf00      	nop
 800a8e4:	3710      	adds	r7, #16
 800a8e6:	46bd      	mov	sp, r7
 800a8e8:	bd80      	pop	{r7, pc}
 800a8ea:	bf00      	nop
 800a8ec:	ffff3ec5 	.word	0xffff3ec5
 800a8f0:	0800af61 	.word	0x0800af61
 800a8f4:	0800afcf 	.word	0x0800afcf

0800a8f8 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a8f8:	b480      	push	{r7}
 800a8fa:	b083      	sub	sp, #12
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a900:	bf00      	nop
 800a902:	370c      	adds	r7, #12
 800a904:	46bd      	mov	sp, r7
 800a906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a90a:	4770      	bx	lr

0800a90c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
 800a914:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a91a:	0f9b      	lsrs	r3, r3, #30
 800a91c:	b2da      	uxtb	r2, r3
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a926:	0e9b      	lsrs	r3, r3, #26
 800a928:	b2db      	uxtb	r3, r3
 800a92a:	f003 030f 	and.w	r3, r3, #15
 800a92e:	b2da      	uxtb	r2, r3
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a938:	0e1b      	lsrs	r3, r3, #24
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	f003 0303 	and.w	r3, r3, #3
 800a940:	b2da      	uxtb	r2, r3
 800a942:	683b      	ldr	r3, [r7, #0]
 800a944:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a94a:	0c1b      	lsrs	r3, r3, #16
 800a94c:	b2da      	uxtb	r2, r3
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a956:	0a1b      	lsrs	r3, r3, #8
 800a958:	b2da      	uxtb	r2, r3
 800a95a:	683b      	ldr	r3, [r7, #0]
 800a95c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a962:	b2da      	uxtb	r2, r3
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a96c:	0d1b      	lsrs	r3, r3, #20
 800a96e:	b29a      	uxth	r2, r3
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a978:	0c1b      	lsrs	r3, r3, #16
 800a97a:	b2db      	uxtb	r3, r3
 800a97c:	f003 030f 	and.w	r3, r3, #15
 800a980:	b2da      	uxtb	r2, r3
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a98a:	0bdb      	lsrs	r3, r3, #15
 800a98c:	b2db      	uxtb	r3, r3
 800a98e:	f003 0301 	and.w	r3, r3, #1
 800a992:	b2da      	uxtb	r2, r3
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a99c:	0b9b      	lsrs	r3, r3, #14
 800a99e:	b2db      	uxtb	r3, r3
 800a9a0:	f003 0301 	and.w	r3, r3, #1
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9ae:	0b5b      	lsrs	r3, r3, #13
 800a9b0:	b2db      	uxtb	r3, r3
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	b2da      	uxtb	r2, r3
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9c0:	0b1b      	lsrs	r3, r3, #12
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	f003 0301 	and.w	r3, r3, #1
 800a9c8:	b2da      	uxtb	r2, r3
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d163      	bne.n	800aaa4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a9e0:	009a      	lsls	r2, r3, #2
 800a9e2:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a9e6:	4013      	ands	r3, r2
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a9ec:	0f92      	lsrs	r2, r2, #30
 800a9ee:	431a      	orrs	r2, r3
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9f8:	0edb      	lsrs	r3, r3, #27
 800a9fa:	b2db      	uxtb	r3, r3
 800a9fc:	f003 0307 	and.w	r3, r3, #7
 800aa00:	b2da      	uxtb	r2, r3
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa0a:	0e1b      	lsrs	r3, r3, #24
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	f003 0307 	and.w	r3, r3, #7
 800aa12:	b2da      	uxtb	r2, r3
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa1c:	0d5b      	lsrs	r3, r3, #21
 800aa1e:	b2db      	uxtb	r3, r3
 800aa20:	f003 0307 	and.w	r3, r3, #7
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa2e:	0c9b      	lsrs	r3, r3, #18
 800aa30:	b2db      	uxtb	r3, r3
 800aa32:	f003 0307 	and.w	r3, r3, #7
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	683b      	ldr	r3, [r7, #0]
 800aa3a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa40:	0bdb      	lsrs	r3, r3, #15
 800aa42:	b2db      	uxtb	r3, r3
 800aa44:	f003 0307 	and.w	r3, r3, #7
 800aa48:	b2da      	uxtb	r2, r3
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	691b      	ldr	r3, [r3, #16]
 800aa52:	1c5a      	adds	r2, r3, #1
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	7e1b      	ldrb	r3, [r3, #24]
 800aa5c:	b2db      	uxtb	r3, r3
 800aa5e:	f003 0307 	and.w	r3, r3, #7
 800aa62:	3302      	adds	r3, #2
 800aa64:	2201      	movs	r2, #1
 800aa66:	fa02 f303 	lsl.w	r3, r2, r3
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800aa6e:	fb02 f203 	mul.w	r2, r2, r3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800aa76:	683b      	ldr	r3, [r7, #0]
 800aa78:	7a1b      	ldrb	r3, [r3, #8]
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	f003 030f 	and.w	r3, r3, #15
 800aa80:	2201      	movs	r2, #1
 800aa82:	409a      	lsls	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa8c:	687a      	ldr	r2, [r7, #4]
 800aa8e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800aa90:	0a52      	lsrs	r2, r2, #9
 800aa92:	fb02 f203 	mul.w	r2, r2, r3
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aaa0:	661a      	str	r2, [r3, #96]	; 0x60
 800aaa2:	e031      	b.n	800ab08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaa8:	2b01      	cmp	r3, #1
 800aaaa:	d11d      	bne.n	800aae8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aab0:	041b      	lsls	r3, r3, #16
 800aab2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaba:	0c1b      	lsrs	r3, r3, #16
 800aabc:	431a      	orrs	r2, r3
 800aabe:	683b      	ldr	r3, [r7, #0]
 800aac0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aac2:	683b      	ldr	r3, [r7, #0]
 800aac4:	691b      	ldr	r3, [r3, #16]
 800aac6:	3301      	adds	r3, #1
 800aac8:	029a      	lsls	r2, r3, #10
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aadc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	661a      	str	r2, [r3, #96]	; 0x60
 800aae6:	e00f      	b.n	800ab08 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a58      	ldr	r2, [pc, #352]	; (800ac50 <HAL_SD_GetCardCSD+0x344>)
 800aaee:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaf4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	2201      	movs	r2, #1
 800ab00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800ab04:	2301      	movs	r3, #1
 800ab06:	e09d      	b.n	800ac44 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab0c:	0b9b      	lsrs	r3, r3, #14
 800ab0e:	b2db      	uxtb	r3, r3
 800ab10:	f003 0301 	and.w	r3, r3, #1
 800ab14:	b2da      	uxtb	r2, r3
 800ab16:	683b      	ldr	r3, [r7, #0]
 800ab18:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab1e:	09db      	lsrs	r3, r3, #7
 800ab20:	b2db      	uxtb	r3, r3
 800ab22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	683b      	ldr	r3, [r7, #0]
 800ab2a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab40:	0fdb      	lsrs	r3, r3, #31
 800ab42:	b2da      	uxtb	r2, r3
 800ab44:	683b      	ldr	r3, [r7, #0]
 800ab46:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800ab48:	687b      	ldr	r3, [r7, #4]
 800ab4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab4c:	0f5b      	lsrs	r3, r3, #29
 800ab4e:	b2db      	uxtb	r3, r3
 800ab50:	f003 0303 	and.w	r3, r3, #3
 800ab54:	b2da      	uxtb	r2, r3
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab5e:	0e9b      	lsrs	r3, r3, #26
 800ab60:	b2db      	uxtb	r3, r3
 800ab62:	f003 0307 	and.w	r3, r3, #7
 800ab66:	b2da      	uxtb	r2, r3
 800ab68:	683b      	ldr	r3, [r7, #0]
 800ab6a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab70:	0d9b      	lsrs	r3, r3, #22
 800ab72:	b2db      	uxtb	r3, r3
 800ab74:	f003 030f 	and.w	r3, r3, #15
 800ab78:	b2da      	uxtb	r2, r3
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab82:	0d5b      	lsrs	r3, r3, #21
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	b2da      	uxtb	r2, r3
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	2200      	movs	r2, #0
 800ab96:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab9e:	0c1b      	lsrs	r3, r3, #16
 800aba0:	b2db      	uxtb	r3, r3
 800aba2:	f003 0301 	and.w	r3, r3, #1
 800aba6:	b2da      	uxtb	r2, r3
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abb2:	0bdb      	lsrs	r3, r3, #15
 800abb4:	b2db      	uxtb	r3, r3
 800abb6:	f003 0301 	and.w	r3, r3, #1
 800abba:	b2da      	uxtb	r2, r3
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abc6:	0b9b      	lsrs	r3, r3, #14
 800abc8:	b2db      	uxtb	r3, r3
 800abca:	f003 0301 	and.w	r3, r3, #1
 800abce:	b2da      	uxtb	r2, r3
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abda:	0b5b      	lsrs	r3, r3, #13
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	f003 0301 	and.w	r3, r3, #1
 800abe2:	b2da      	uxtb	r2, r3
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800abee:	0b1b      	lsrs	r3, r3, #12
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac02:	0a9b      	lsrs	r3, r3, #10
 800ac04:	b2db      	uxtb	r3, r3
 800ac06:	f003 0303 	and.w	r3, r3, #3
 800ac0a:	b2da      	uxtb	r2, r3
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac16:	0a1b      	lsrs	r3, r3, #8
 800ac18:	b2db      	uxtb	r3, r3
 800ac1a:	f003 0303 	and.w	r3, r3, #3
 800ac1e:	b2da      	uxtb	r2, r3
 800ac20:	683b      	ldr	r3, [r7, #0]
 800ac22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ac2a:	085b      	lsrs	r3, r3, #1
 800ac2c:	b2db      	uxtb	r3, r3
 800ac2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac32:	b2da      	uxtb	r2, r3
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800ac3a:	683b      	ldr	r3, [r7, #0]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800ac42:	2300      	movs	r3, #0
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	370c      	adds	r7, #12
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac4e:	4770      	bx	lr
 800ac50:	004005ff 	.word	0x004005ff

0800ac54 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ac7a:	683b      	ldr	r3, [r7, #0]
 800ac7c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac8a:	683b      	ldr	r3, [r7, #0]
 800ac8c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800acac:	b5b0      	push	{r4, r5, r7, lr}
 800acae:	b08e      	sub	sp, #56	; 0x38
 800acb0:	af04      	add	r7, sp, #16
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2203      	movs	r2, #3
 800acc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acc8:	2b03      	cmp	r3, #3
 800acca:	d02e      	beq.n	800ad2a <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800acd2:	d106      	bne.n	800ace2 <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acd8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	639a      	str	r2, [r3, #56]	; 0x38
 800ace0:	e029      	b.n	800ad36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ace8:	d10a      	bne.n	800ad00 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800acea:	6878      	ldr	r0, [r7, #4]
 800acec:	f000 fb28 	bl	800b340 <SD_WideBus_Enable>
 800acf0:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acf6:	6a3b      	ldr	r3, [r7, #32]
 800acf8:	431a      	orrs	r2, r3
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	639a      	str	r2, [r3, #56]	; 0x38
 800acfe:	e01a      	b.n	800ad36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d10a      	bne.n	800ad1c <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fb65 	bl	800b3d6 <SD_WideBus_Disable>
 800ad0c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad12:	6a3b      	ldr	r3, [r7, #32]
 800ad14:	431a      	orrs	r2, r3
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	639a      	str	r2, [r3, #56]	; 0x38
 800ad1a:	e00c      	b.n	800ad36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad20:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	639a      	str	r2, [r3, #56]	; 0x38
 800ad28:	e005      	b.n	800ad36 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d00b      	beq.n	800ad56 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a26      	ldr	r2, [pc, #152]	; (800addc <HAL_SD_ConfigWideBusOperation+0x130>)
 800ad44:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ad54:	e01f      	b.n	800ad96 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	685b      	ldr	r3, [r3, #4]
 800ad5a:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	695b      	ldr	r3, [r3, #20]
 800ad70:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	699b      	ldr	r3, [r3, #24]
 800ad76:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681d      	ldr	r5, [r3, #0]
 800ad7c:	466c      	mov	r4, sp
 800ad7e:	f107 0314 	add.w	r3, r7, #20
 800ad82:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad86:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad8a:	f107 0308 	add.w	r3, r7, #8
 800ad8e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad90:	4628      	mov	r0, r5
 800ad92:	f001 fd6f 	bl	800c874 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad9e:	4618      	mov	r0, r3
 800ada0:	f001 fe46 	bl	800ca30 <SDMMC_CmdBlockLength>
 800ada4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ada6:	6a3b      	ldr	r3, [r7, #32]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d00c      	beq.n	800adc6 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	4a0a      	ldr	r2, [pc, #40]	; (800addc <HAL_SD_ConfigWideBusOperation+0x130>)
 800adb2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adb8:	6a3b      	ldr	r3, [r7, #32]
 800adba:	431a      	orrs	r2, r3
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2201      	movs	r2, #1
 800adca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800adce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800add2:	4618      	mov	r0, r3
 800add4:	3728      	adds	r7, #40	; 0x28
 800add6:	46bd      	mov	sp, r7
 800add8:	bdb0      	pop	{r4, r5, r7, pc}
 800adda:	bf00      	nop
 800addc:	004005ff 	.word	0x004005ff

0800ade0 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ade8:	2300      	movs	r3, #0
 800adea:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800adec:	f107 030c 	add.w	r3, r7, #12
 800adf0:	4619      	mov	r1, r3
 800adf2:	6878      	ldr	r0, [r7, #4]
 800adf4:	f000 fa7c 	bl	800b2f0 <SD_SendStatus>
 800adf8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d005      	beq.n	800ae0c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	431a      	orrs	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	0a5b      	lsrs	r3, r3, #9
 800ae10:	f003 030f 	and.w	r3, r3, #15
 800ae14:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ae16:	693b      	ldr	r3, [r7, #16]
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3718      	adds	r7, #24
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	bd80      	pop	{r7, pc}

0800ae20 <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ae20:	b480      	push	{r7}
 800ae22:	b085      	sub	sp, #20
 800ae24:	af00      	add	r7, sp, #0
 800ae26:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae2c:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ae3c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800ae3e:	bf00      	nop
 800ae40:	3714      	adds	r7, #20
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ae4a:	b580      	push	{r7, lr}
 800ae4c:	b084      	sub	sp, #16
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae56:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae5c:	2b82      	cmp	r3, #130	; 0x82
 800ae5e:	d111      	bne.n	800ae84 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	4618      	mov	r0, r3
 800ae66:	f001 fe8d 	bl	800cb84 <SDMMC_CmdStopTransfer>
 800ae6a:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d008      	beq.n	800ae84 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	431a      	orrs	r2, r3
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f7ff fd3a 	bl	800a8f8 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f022 0208 	bic.w	r2, r2, #8
 800ae92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	681b      	ldr	r3, [r3, #0]
 800ae98:	f240 523a 	movw	r2, #1338	; 0x53a
 800ae9c:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2201      	movs	r2, #1
 800aea2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2200      	movs	r2, #0
 800aeaa:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800aeac:	68f8      	ldr	r0, [r7, #12]
 800aeae:	f002 faff 	bl	800d4b0 <HAL_SD_RxCpltCallback>
#endif
}
 800aeb2:	bf00      	nop
 800aeb4:	3710      	adds	r7, #16
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}
	...

0800aebc <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800aebc:	b580      	push	{r7, lr}
 800aebe:	b086      	sub	sp, #24
 800aec0:	af00      	add	r7, sp, #0
 800aec2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec8:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f7fb fab0 	bl	8006430 <HAL_DMA_GetError>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b02      	cmp	r3, #2
 800aed4:	d03e      	beq.n	800af54 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aeda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aedc:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800aede:	697b      	ldr	r3, [r7, #20]
 800aee0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee4:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800aee6:	693b      	ldr	r3, [r7, #16]
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d002      	beq.n	800aef2 <SD_DMAError+0x36>
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2b01      	cmp	r3, #1
 800aef0:	d12d      	bne.n	800af4e <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	4a19      	ldr	r2, [pc, #100]	; (800af5c <SD_DMAError+0xa0>)
 800aef8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800aefa:	697b      	ldr	r3, [r7, #20]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af00:	697b      	ldr	r3, [r7, #20]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800af08:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800af0a:	697b      	ldr	r3, [r7, #20]
 800af0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af12:	697b      	ldr	r3, [r7, #20]
 800af14:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800af16:	6978      	ldr	r0, [r7, #20]
 800af18:	f7ff ff62 	bl	800ade0 <HAL_SD_GetCardState>
 800af1c:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800af1e:	68bb      	ldr	r3, [r7, #8]
 800af20:	2b06      	cmp	r3, #6
 800af22:	d002      	beq.n	800af2a <SD_DMAError+0x6e>
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	2b05      	cmp	r3, #5
 800af28:	d10a      	bne.n	800af40 <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af2a:	697b      	ldr	r3, [r7, #20]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	4618      	mov	r0, r3
 800af30:	f001 fe28 	bl	800cb84 <SDMMC_CmdStopTransfer>
 800af34:	4602      	mov	r2, r0
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af3a:	431a      	orrs	r2, r3
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800af48:	697b      	ldr	r3, [r7, #20]
 800af4a:	2200      	movs	r2, #0
 800af4c:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800af4e:	6978      	ldr	r0, [r7, #20]
 800af50:	f7ff fcd2 	bl	800a8f8 <HAL_SD_ErrorCallback>
#endif
  }
}
 800af54:	bf00      	nop
 800af56:	3718      	adds	r7, #24
 800af58:	46bd      	mov	sp, r7
 800af5a:	bd80      	pop	{r7, pc}
 800af5c:	004005ff 	.word	0x004005ff

0800af60 <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af6c:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	f240 523a 	movw	r2, #1338	; 0x53a
 800af76:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800af78:	68f8      	ldr	r0, [r7, #12]
 800af7a:	f7ff ff31 	bl	800ade0 <HAL_SD_GetCardState>
 800af7e:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	2201      	movs	r2, #1
 800af84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800af8e:	68bb      	ldr	r3, [r7, #8]
 800af90:	2b06      	cmp	r3, #6
 800af92:	d002      	beq.n	800af9a <SD_DMATxAbort+0x3a>
 800af94:	68bb      	ldr	r3, [r7, #8]
 800af96:	2b05      	cmp	r3, #5
 800af98:	d10a      	bne.n	800afb0 <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	4618      	mov	r0, r3
 800afa0:	f001 fdf0 	bl	800cb84 <SDMMC_CmdStopTransfer>
 800afa4:	4602      	mov	r2, r0
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afaa:	431a      	orrs	r2, r3
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d103      	bne.n	800afc0 <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800afb8:	68f8      	ldr	r0, [r7, #12]
 800afba:	f002 fa65 	bl	800d488 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800afbe:	e002      	b.n	800afc6 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800afc0:	68f8      	ldr	r0, [r7, #12]
 800afc2:	f7ff fc99 	bl	800a8f8 <HAL_SD_ErrorCallback>
}
 800afc6:	bf00      	nop
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}

0800afce <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800afce:	b580      	push	{r7, lr}
 800afd0:	b084      	sub	sp, #16
 800afd2:	af00      	add	r7, sp, #0
 800afd4:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afda:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	f240 523a 	movw	r2, #1338	; 0x53a
 800afe4:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800afe6:	68f8      	ldr	r0, [r7, #12]
 800afe8:	f7ff fefa 	bl	800ade0 <HAL_SD_GetCardState>
 800afec:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	2200      	movs	r2, #0
 800affa:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	2b06      	cmp	r3, #6
 800b000:	d002      	beq.n	800b008 <SD_DMARxAbort+0x3a>
 800b002:	68bb      	ldr	r3, [r7, #8]
 800b004:	2b05      	cmp	r3, #5
 800b006:	d10a      	bne.n	800b01e <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	4618      	mov	r0, r3
 800b00e:	f001 fdb9 	bl	800cb84 <SDMMC_CmdStopTransfer>
 800b012:	4602      	mov	r2, r0
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b018:	431a      	orrs	r2, r3
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b022:	2b00      	cmp	r3, #0
 800b024:	d103      	bne.n	800b02e <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800b026:	68f8      	ldr	r0, [r7, #12]
 800b028:	f002 fa2e 	bl	800d488 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800b02c:	e002      	b.n	800b034 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800b02e:	68f8      	ldr	r0, [r7, #12]
 800b030:	f7ff fc62 	bl	800a8f8 <HAL_SD_ErrorCallback>
}
 800b034:	bf00      	nop
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800b03c:	b5b0      	push	{r4, r5, r7, lr}
 800b03e:	b094      	sub	sp, #80	; 0x50
 800b040:	af04      	add	r7, sp, #16
 800b042:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800b044:	2301      	movs	r3, #1
 800b046:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f001 fc6a 	bl	800c926 <SDMMC_GetPowerState>
 800b052:	4603      	mov	r3, r0
 800b054:	2b00      	cmp	r3, #0
 800b056:	d102      	bne.n	800b05e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b058:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800b05c:	e0b6      	b.n	800b1cc <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b062:	2b03      	cmp	r3, #3
 800b064:	d02f      	beq.n	800b0c6 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4618      	mov	r0, r3
 800b06c:	f001 fe95 	bl	800cd9a <SDMMC_CmdSendCID>
 800b070:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b074:	2b00      	cmp	r3, #0
 800b076:	d001      	beq.n	800b07c <SD_InitCard+0x40>
    {
      return errorstate;
 800b078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b07a:	e0a7      	b.n	800b1cc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	2100      	movs	r1, #0
 800b082:	4618      	mov	r0, r3
 800b084:	f001 fc95 	bl	800c9b2 <SDMMC_GetResponse>
 800b088:	4602      	mov	r2, r0
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	2104      	movs	r1, #4
 800b094:	4618      	mov	r0, r3
 800b096:	f001 fc8c 	bl	800c9b2 <SDMMC_GetResponse>
 800b09a:	4602      	mov	r2, r0
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	2108      	movs	r1, #8
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f001 fc83 	bl	800c9b2 <SDMMC_GetResponse>
 800b0ac:	4602      	mov	r2, r0
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	210c      	movs	r1, #12
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f001 fc7a 	bl	800c9b2 <SDMMC_GetResponse>
 800b0be:	4602      	mov	r2, r0
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ca:	2b03      	cmp	r3, #3
 800b0cc:	d00d      	beq.n	800b0ea <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f107 020e 	add.w	r2, r7, #14
 800b0d6:	4611      	mov	r1, r2
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f001 fe9b 	bl	800ce14 <SDMMC_CmdSetRelAdd>
 800b0de:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d001      	beq.n	800b0ea <SD_InitCard+0xae>
    {
      return errorstate;
 800b0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b0e8:	e070      	b.n	800b1cc <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0ee:	2b03      	cmp	r3, #3
 800b0f0:	d036      	beq.n	800b160 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b0f2:	89fb      	ldrh	r3, [r7, #14]
 800b0f4:	461a      	mov	r2, r3
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b102:	041b      	lsls	r3, r3, #16
 800b104:	4619      	mov	r1, r3
 800b106:	4610      	mov	r0, r2
 800b108:	f001 fe65 	bl	800cdd6 <SDMMC_CmdSendCSD>
 800b10c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b110:	2b00      	cmp	r3, #0
 800b112:	d001      	beq.n	800b118 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b116:	e059      	b.n	800b1cc <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	2100      	movs	r1, #0
 800b11e:	4618      	mov	r0, r3
 800b120:	f001 fc47 	bl	800c9b2 <SDMMC_GetResponse>
 800b124:	4602      	mov	r2, r0
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	2104      	movs	r1, #4
 800b130:	4618      	mov	r0, r3
 800b132:	f001 fc3e 	bl	800c9b2 <SDMMC_GetResponse>
 800b136:	4602      	mov	r2, r0
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	2108      	movs	r1, #8
 800b142:	4618      	mov	r0, r3
 800b144:	f001 fc35 	bl	800c9b2 <SDMMC_GetResponse>
 800b148:	4602      	mov	r2, r0
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	210c      	movs	r1, #12
 800b154:	4618      	mov	r0, r3
 800b156:	f001 fc2c 	bl	800c9b2 <SDMMC_GetResponse>
 800b15a:	4602      	mov	r2, r0
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	2104      	movs	r1, #4
 800b166:	4618      	mov	r0, r3
 800b168:	f001 fc23 	bl	800c9b2 <SDMMC_GetResponse>
 800b16c:	4603      	mov	r3, r0
 800b16e:	0d1a      	lsrs	r2, r3, #20
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b174:	f107 0310 	add.w	r3, r7, #16
 800b178:	4619      	mov	r1, r3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f7ff fbc6 	bl	800a90c <HAL_SD_GetCardCSD>
 800b180:	4603      	mov	r3, r0
 800b182:	2b00      	cmp	r3, #0
 800b184:	d002      	beq.n	800b18c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b186:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b18a:	e01f      	b.n	800b1cc <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	6819      	ldr	r1, [r3, #0]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b194:	041b      	lsls	r3, r3, #16
 800b196:	461a      	mov	r2, r3
 800b198:	f04f 0300 	mov.w	r3, #0
 800b19c:	4608      	mov	r0, r1
 800b19e:	f001 fd13 	bl	800cbc8 <SDMMC_CmdSelDesel>
 800b1a2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d001      	beq.n	800b1ae <SD_InitCard+0x172>
  {
    return errorstate;
 800b1aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b1ac:	e00e      	b.n	800b1cc <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681d      	ldr	r5, [r3, #0]
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	466c      	mov	r4, sp
 800b1b6:	f103 0210 	add.w	r2, r3, #16
 800b1ba:	ca07      	ldmia	r2, {r0, r1, r2}
 800b1bc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	f001 fb55 	bl	800c874 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b1ca:	2300      	movs	r3, #0
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3740      	adds	r7, #64	; 0x40
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bdb0      	pop	{r4, r5, r7, pc}

0800b1d4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b086      	sub	sp, #24
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b1dc:	2300      	movs	r3, #0
 800b1de:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	617b      	str	r3, [r7, #20]
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f001 fd0e 	bl	800cc0e <SDMMC_CmdGoIdleState>
 800b1f2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <SD_PowerON+0x2a>
  {
    return errorstate;
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	e072      	b.n	800b2e4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	4618      	mov	r0, r3
 800b204:	f001 fd21 	bl	800cc4a <SDMMC_CmdOperCond>
 800b208:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d00d      	beq.n	800b22c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2200      	movs	r2, #0
 800b214:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	4618      	mov	r0, r3
 800b21c:	f001 fcf7 	bl	800cc0e <SDMMC_CmdGoIdleState>
 800b220:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b222:	68fb      	ldr	r3, [r7, #12]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d004      	beq.n	800b232 <SD_PowerON+0x5e>
    {
      return errorstate;
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	e05b      	b.n	800b2e4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2201      	movs	r2, #1
 800b230:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b236:	2b01      	cmp	r3, #1
 800b238:	d137      	bne.n	800b2aa <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	2100      	movs	r1, #0
 800b240:	4618      	mov	r0, r3
 800b242:	f001 fd21 	bl	800cc88 <SDMMC_CmdAppCommand>
 800b246:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d02d      	beq.n	800b2aa <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b24e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b252:	e047      	b.n	800b2e4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	681b      	ldr	r3, [r3, #0]
 800b258:	2100      	movs	r1, #0
 800b25a:	4618      	mov	r0, r3
 800b25c:	f001 fd14 	bl	800cc88 <SDMMC_CmdAppCommand>
 800b260:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d001      	beq.n	800b26c <SD_PowerON+0x98>
    {
      return errorstate;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	e03b      	b.n	800b2e4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	491e      	ldr	r1, [pc, #120]	; (800b2ec <SD_PowerON+0x118>)
 800b272:	4618      	mov	r0, r3
 800b274:	f001 fd2a 	bl	800cccc <SDMMC_CmdAppOperCommand>
 800b278:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d002      	beq.n	800b286 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b280:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b284:	e02e      	b.n	800b2e4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	2100      	movs	r1, #0
 800b28c:	4618      	mov	r0, r3
 800b28e:	f001 fb90 	bl	800c9b2 <SDMMC_GetResponse>
 800b292:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b294:	697b      	ldr	r3, [r7, #20]
 800b296:	0fdb      	lsrs	r3, r3, #31
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d101      	bne.n	800b2a0 <SD_PowerON+0xcc>
 800b29c:	2301      	movs	r3, #1
 800b29e:	e000      	b.n	800b2a2 <SD_PowerON+0xce>
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	613b      	str	r3, [r7, #16]

    count++;
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	3301      	adds	r3, #1
 800b2a8:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b2b0:	4293      	cmp	r3, r2
 800b2b2:	d802      	bhi.n	800b2ba <SD_PowerON+0xe6>
 800b2b4:	693b      	ldr	r3, [r7, #16]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d0cc      	beq.n	800b254 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	d902      	bls.n	800b2ca <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b2c4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b2c8:	e00c      	b.n	800b2e4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d003      	beq.n	800b2dc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	645a      	str	r2, [r3, #68]	; 0x44
 800b2da:	e002      	b.n	800b2e2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3718      	adds	r7, #24
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	bd80      	pop	{r7, pc}
 800b2ec:	c1100000 	.word	0xc1100000

0800b2f0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b084      	sub	sp, #16
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b2fa:	683b      	ldr	r3, [r7, #0]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d102      	bne.n	800b306 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b304:	e018      	b.n	800b338 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681a      	ldr	r2, [r3, #0]
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b30e:	041b      	lsls	r3, r3, #16
 800b310:	4619      	mov	r1, r3
 800b312:	4610      	mov	r0, r2
 800b314:	f001 fd9f 	bl	800ce56 <SDMMC_CmdSendStatus>
 800b318:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d001      	beq.n	800b324 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	e009      	b.n	800b338 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	2100      	movs	r1, #0
 800b32a:	4618      	mov	r0, r3
 800b32c:	f001 fb41 	bl	800c9b2 <SDMMC_GetResponse>
 800b330:	4602      	mov	r2, r0
 800b332:	683b      	ldr	r3, [r7, #0]
 800b334:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b336:	2300      	movs	r3, #0
}
 800b338:	4618      	mov	r0, r3
 800b33a:	3710      	adds	r7, #16
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b348:	2300      	movs	r3, #0
 800b34a:	60fb      	str	r3, [r7, #12]
 800b34c:	2300      	movs	r3, #0
 800b34e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	2100      	movs	r1, #0
 800b356:	4618      	mov	r0, r3
 800b358:	f001 fb2b 	bl	800c9b2 <SDMMC_GetResponse>
 800b35c:	4603      	mov	r3, r0
 800b35e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b362:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b366:	d102      	bne.n	800b36e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b368:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b36c:	e02f      	b.n	800b3ce <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b36e:	f107 030c 	add.w	r3, r7, #12
 800b372:	4619      	mov	r1, r3
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f879 	bl	800b46c <SD_FindSCR>
 800b37a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d001      	beq.n	800b386 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b382:	697b      	ldr	r3, [r7, #20]
 800b384:	e023      	b.n	800b3ce <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d01c      	beq.n	800b3ca <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681a      	ldr	r2, [r3, #0]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b398:	041b      	lsls	r3, r3, #16
 800b39a:	4619      	mov	r1, r3
 800b39c:	4610      	mov	r0, r2
 800b39e:	f001 fc73 	bl	800cc88 <SDMMC_CmdAppCommand>
 800b3a2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d001      	beq.n	800b3ae <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	e00f      	b.n	800b3ce <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	2102      	movs	r1, #2
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	f001 fcad 	bl	800cd14 <SDMMC_CmdBusWidth>
 800b3ba:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d001      	beq.n	800b3c6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b3c2:	697b      	ldr	r3, [r7, #20]
 800b3c4:	e003      	b.n	800b3ce <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	e001      	b.n	800b3ce <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b3ca:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	3718      	adds	r7, #24
 800b3d2:	46bd      	mov	sp, r7
 800b3d4:	bd80      	pop	{r7, pc}

0800b3d6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b086      	sub	sp, #24
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b3de:	2300      	movs	r3, #0
 800b3e0:	60fb      	str	r3, [r7, #12]
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	2100      	movs	r1, #0
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	f001 fae0 	bl	800c9b2 <SDMMC_GetResponse>
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b3fc:	d102      	bne.n	800b404 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b3fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b402:	e02f      	b.n	800b464 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b404:	f107 030c 	add.w	r3, r7, #12
 800b408:	4619      	mov	r1, r3
 800b40a:	6878      	ldr	r0, [r7, #4]
 800b40c:	f000 f82e 	bl	800b46c <SD_FindSCR>
 800b410:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b412:	697b      	ldr	r3, [r7, #20]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d001      	beq.n	800b41c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	e023      	b.n	800b464 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b422:	2b00      	cmp	r3, #0
 800b424:	d01c      	beq.n	800b460 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681a      	ldr	r2, [r3, #0]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b42e:	041b      	lsls	r3, r3, #16
 800b430:	4619      	mov	r1, r3
 800b432:	4610      	mov	r0, r2
 800b434:	f001 fc28 	bl	800cc88 <SDMMC_CmdAppCommand>
 800b438:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b43a:	697b      	ldr	r3, [r7, #20]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d001      	beq.n	800b444 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b440:	697b      	ldr	r3, [r7, #20]
 800b442:	e00f      	b.n	800b464 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	2100      	movs	r1, #0
 800b44a:	4618      	mov	r0, r3
 800b44c:	f001 fc62 	bl	800cd14 <SDMMC_CmdBusWidth>
 800b450:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b452:	697b      	ldr	r3, [r7, #20]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d001      	beq.n	800b45c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b458:	697b      	ldr	r3, [r7, #20]
 800b45a:	e003      	b.n	800b464 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b45c:	2300      	movs	r3, #0
 800b45e:	e001      	b.n	800b464 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b460:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b464:	4618      	mov	r0, r3
 800b466:	3718      	adds	r7, #24
 800b468:	46bd      	mov	sp, r7
 800b46a:	bd80      	pop	{r7, pc}

0800b46c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b46c:	b590      	push	{r4, r7, lr}
 800b46e:	b08f      	sub	sp, #60	; 0x3c
 800b470:	af00      	add	r7, sp, #0
 800b472:	6078      	str	r0, [r7, #4]
 800b474:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b476:	f7fa fbb1 	bl	8005bdc <HAL_GetTick>
 800b47a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b47c:	2300      	movs	r3, #0
 800b47e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b480:	2300      	movs	r3, #0
 800b482:	60bb      	str	r3, [r7, #8]
 800b484:	2300      	movs	r3, #0
 800b486:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	2108      	movs	r1, #8
 800b492:	4618      	mov	r0, r3
 800b494:	f001 facc 	bl	800ca30 <SDMMC_CmdBlockLength>
 800b498:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b49a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d001      	beq.n	800b4a4 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b4a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4a2:	e0b2      	b.n	800b60a <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	681a      	ldr	r2, [r3, #0]
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4ac:	041b      	lsls	r3, r3, #16
 800b4ae:	4619      	mov	r1, r3
 800b4b0:	4610      	mov	r0, r2
 800b4b2:	f001 fbe9 	bl	800cc88 <SDMMC_CmdAppCommand>
 800b4b6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d001      	beq.n	800b4c2 <SD_FindSCR+0x56>
  {
    return errorstate;
 800b4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4c0:	e0a3      	b.n	800b60a <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b4c2:	f04f 33ff 	mov.w	r3, #4294967295
 800b4c6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b4c8:	2308      	movs	r3, #8
 800b4ca:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b4cc:	2330      	movs	r3, #48	; 0x30
 800b4ce:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b4d0:	2302      	movs	r3, #2
 800b4d2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b4d4:	2300      	movs	r3, #0
 800b4d6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b4d8:	2301      	movs	r3, #1
 800b4da:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f107 0210 	add.w	r2, r7, #16
 800b4e4:	4611      	mov	r1, r2
 800b4e6:	4618      	mov	r0, r3
 800b4e8:	f001 fa76 	bl	800c9d8 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	f001 fc31 	bl	800cd58 <SDMMC_CmdSendSCR>
 800b4f6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b4f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d02a      	beq.n	800b554 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b4fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b500:	e083      	b.n	800b60a <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d00f      	beq.n	800b530 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6819      	ldr	r1, [r3, #0]
 800b514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b516:	009b      	lsls	r3, r3, #2
 800b518:	f107 0208 	add.w	r2, r7, #8
 800b51c:	18d4      	adds	r4, r2, r3
 800b51e:	4608      	mov	r0, r1
 800b520:	f001 f9d4 	bl	800c8cc <SDMMC_ReadFIFO>
 800b524:	4603      	mov	r3, r0
 800b526:	6023      	str	r3, [r4, #0]
      index++;
 800b528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b52a:	3301      	adds	r3, #1
 800b52c:	637b      	str	r3, [r7, #52]	; 0x34
 800b52e:	e006      	b.n	800b53e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b536:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d012      	beq.n	800b564 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b53e:	f7fa fb4d 	bl	8005bdc <HAL_GetTick>
 800b542:	4602      	mov	r2, r0
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	1ad3      	subs	r3, r2, r3
 800b548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b54c:	d102      	bne.n	800b554 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b54e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b552:	e05a      	b.n	800b60a <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b55a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d0cf      	beq.n	800b502 <SD_FindSCR+0x96>
 800b562:	e000      	b.n	800b566 <SD_FindSCR+0xfa>
      break;
 800b564:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b56c:	f003 0308 	and.w	r3, r3, #8
 800b570:	2b00      	cmp	r3, #0
 800b572:	d005      	beq.n	800b580 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	2208      	movs	r2, #8
 800b57a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b57c:	2308      	movs	r3, #8
 800b57e:	e044      	b.n	800b60a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b586:	f003 0302 	and.w	r3, r3, #2
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d005      	beq.n	800b59a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	2202      	movs	r2, #2
 800b594:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b596:	2302      	movs	r3, #2
 800b598:	e037      	b.n	800b60a <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5a0:	f003 0320 	and.w	r3, r3, #32
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d005      	beq.n	800b5b4 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2220      	movs	r2, #32
 800b5ae:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b5b0:	2320      	movs	r3, #32
 800b5b2:	e02a      	b.n	800b60a <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	681b      	ldr	r3, [r3, #0]
 800b5b8:	f240 523a 	movw	r2, #1338	; 0x53a
 800b5bc:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	061a      	lsls	r2, r3, #24
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	021b      	lsls	r3, r3, #8
 800b5c6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b5ca:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	0a1b      	lsrs	r3, r3, #8
 800b5d0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b5d4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b5d6:	68fb      	ldr	r3, [r7, #12]
 800b5d8:	0e1b      	lsrs	r3, r3, #24
 800b5da:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5de:	601a      	str	r2, [r3, #0]
    scr++;
 800b5e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5e2:	3304      	adds	r3, #4
 800b5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	061a      	lsls	r2, r3, #24
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	021b      	lsls	r3, r3, #8
 800b5ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b5f2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	0a1b      	lsrs	r3, r3, #8
 800b5f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b5fc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	0e1b      	lsrs	r3, r3, #24
 800b602:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b606:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b608:	2300      	movs	r3, #0
}
 800b60a:	4618      	mov	r0, r3
 800b60c:	373c      	adds	r7, #60	; 0x3c
 800b60e:	46bd      	mov	sp, r7
 800b610:	bd90      	pop	{r4, r7, pc}

0800b612 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b612:	b580      	push	{r7, lr}
 800b614:	b086      	sub	sp, #24
 800b616:	af00      	add	r7, sp, #0
 800b618:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61e:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b624:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d03f      	beq.n	800b6ac <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b62c:	2300      	movs	r3, #0
 800b62e:	617b      	str	r3, [r7, #20]
 800b630:	e033      	b.n	800b69a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4618      	mov	r0, r3
 800b638:	f001 f948 	bl	800c8cc <SDMMC_ReadFIFO>
 800b63c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b63e:	68bb      	ldr	r3, [r7, #8]
 800b640:	b2da      	uxtb	r2, r3
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b646:	68fb      	ldr	r3, [r7, #12]
 800b648:	3301      	adds	r3, #1
 800b64a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b64c:	693b      	ldr	r3, [r7, #16]
 800b64e:	3b01      	subs	r3, #1
 800b650:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	0a1b      	lsrs	r3, r3, #8
 800b656:	b2da      	uxtb	r2, r3
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b65c:	68fb      	ldr	r3, [r7, #12]
 800b65e:	3301      	adds	r3, #1
 800b660:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b662:	693b      	ldr	r3, [r7, #16]
 800b664:	3b01      	subs	r3, #1
 800b666:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	0c1b      	lsrs	r3, r3, #16
 800b66c:	b2da      	uxtb	r2, r3
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	3301      	adds	r3, #1
 800b676:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b678:	693b      	ldr	r3, [r7, #16]
 800b67a:	3b01      	subs	r3, #1
 800b67c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	0e1b      	lsrs	r3, r3, #24
 800b682:	b2da      	uxtb	r2, r3
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	3301      	adds	r3, #1
 800b68c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	3b01      	subs	r3, #1
 800b692:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b694:	697b      	ldr	r3, [r7, #20]
 800b696:	3301      	adds	r3, #1
 800b698:	617b      	str	r3, [r7, #20]
 800b69a:	697b      	ldr	r3, [r7, #20]
 800b69c:	2b07      	cmp	r3, #7
 800b69e:	d9c8      	bls.n	800b632 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	68fa      	ldr	r2, [r7, #12]
 800b6a4:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	693a      	ldr	r2, [r7, #16]
 800b6aa:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b6ac:	bf00      	nop
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}

0800b6b4 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b6b4:	b580      	push	{r7, lr}
 800b6b6:	b086      	sub	sp, #24
 800b6b8:	af00      	add	r7, sp, #0
 800b6ba:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	6a1b      	ldr	r3, [r3, #32]
 800b6c0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6c6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d043      	beq.n	800b756 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	617b      	str	r3, [r7, #20]
 800b6d2:	e037      	b.n	800b744 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b6da:	68fb      	ldr	r3, [r7, #12]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b6e0:	693b      	ldr	r3, [r7, #16]
 800b6e2:	3b01      	subs	r3, #1
 800b6e4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	021a      	lsls	r2, r3, #8
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b6f8:	693b      	ldr	r3, [r7, #16]
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	781b      	ldrb	r3, [r3, #0]
 800b702:	041a      	lsls	r2, r3, #16
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	4313      	orrs	r3, r2
 800b708:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	3301      	adds	r3, #1
 800b70e:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	3b01      	subs	r3, #1
 800b714:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	781b      	ldrb	r3, [r3, #0]
 800b71a:	061a      	lsls	r2, r3, #24
 800b71c:	68bb      	ldr	r3, [r7, #8]
 800b71e:	4313      	orrs	r3, r2
 800b720:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	3301      	adds	r3, #1
 800b726:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	3b01      	subs	r3, #1
 800b72c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f107 0208 	add.w	r2, r7, #8
 800b736:	4611      	mov	r1, r2
 800b738:	4618      	mov	r0, r3
 800b73a:	f001 f8d4 	bl	800c8e6 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b73e:	697b      	ldr	r3, [r7, #20]
 800b740:	3301      	adds	r3, #1
 800b742:	617b      	str	r3, [r7, #20]
 800b744:	697b      	ldr	r3, [r7, #20]
 800b746:	2b07      	cmp	r3, #7
 800b748:	d9c4      	bls.n	800b6d4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	68fa      	ldr	r2, [r7, #12]
 800b74e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	693a      	ldr	r2, [r7, #16]
 800b754:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b756:	bf00      	nop
 800b758:	3718      	adds	r7, #24
 800b75a:	46bd      	mov	sp, r7
 800b75c:	bd80      	pop	{r7, pc}

0800b75e <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800b75e:	b580      	push	{r7, lr}
 800b760:	b082      	sub	sp, #8
 800b762:	af00      	add	r7, sp, #0
 800b764:	6078      	str	r0, [r7, #4]
 800b766:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d101      	bne.n	800b772 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b76e:	2301      	movs	r3, #1
 800b770:	e025      	b.n	800b7be <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b778:	b2db      	uxtb	r3, r3
 800b77a:	2b00      	cmp	r3, #0
 800b77c:	d106      	bne.n	800b78c <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	2200      	movs	r2, #0
 800b782:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7f8 fc64 	bl	8004054 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	2202      	movs	r2, #2
 800b790:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	681a      	ldr	r2, [r3, #0]
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	3304      	adds	r3, #4
 800b79c:	4619      	mov	r1, r3
 800b79e:	4610      	mov	r0, r2
 800b7a0:	f000 ff3e 	bl	800c620 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6818      	ldr	r0, [r3, #0]
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	461a      	mov	r2, r3
 800b7ae:	6839      	ldr	r1, [r7, #0]
 800b7b0:	f000 ffa8 	bl	800c704 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	2201      	movs	r2, #1
 800b7b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800b7bc:	2300      	movs	r3, #0
}
 800b7be:	4618      	mov	r0, r3
 800b7c0:	3708      	adds	r7, #8
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}

0800b7c6 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b7c6:	b580      	push	{r7, lr}
 800b7c8:	b084      	sub	sp, #16
 800b7ca:	af00      	add	r7, sp, #0
 800b7cc:	60f8      	str	r0, [r7, #12]
 800b7ce:	60b9      	str	r1, [r7, #8]
 800b7d0:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b7d8:	b2db      	uxtb	r3, r3
 800b7da:	2b02      	cmp	r3, #2
 800b7dc:	d101      	bne.n	800b7e2 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800b7de:	2302      	movs	r3, #2
 800b7e0:	e018      	b.n	800b814 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2202      	movs	r2, #2
 800b7e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	68b9      	ldr	r1, [r7, #8]
 800b7f2:	4618      	mov	r0, r3
 800b7f4:	f001 f806 	bl	800c804 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	2b02      	cmp	r3, #2
 800b7fe:	d104      	bne.n	800b80a <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	2205      	movs	r2, #5
 800b804:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800b808:	e003      	b.n	800b812 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	2201      	movs	r2, #1
 800b80e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800b812:	2300      	movs	r3, #0
}
 800b814:	4618      	mov	r0, r3
 800b816:	3710      	adds	r7, #16
 800b818:	46bd      	mov	sp, r7
 800b81a:	bd80      	pop	{r7, pc}

0800b81c <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b082      	sub	sp, #8
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b82c:	b2db      	uxtb	r3, r3
 800b82e:	2b02      	cmp	r3, #2
 800b830:	d101      	bne.n	800b836 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b832:	2302      	movs	r3, #2
 800b834:	e00e      	b.n	800b854 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	2202      	movs	r2, #2
 800b83a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	6839      	ldr	r1, [r7, #0]
 800b844:	4618      	mov	r0, r3
 800b846:	f001 f801 	bl	800c84c <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	2201      	movs	r2, #1
 800b84e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800b852:	2300      	movs	r3, #0
}
 800b854:	4618      	mov	r0, r3
 800b856:	3708      	adds	r7, #8
 800b858:	46bd      	mov	sp, r7
 800b85a:	bd80      	pop	{r7, pc}

0800b85c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b082      	sub	sp, #8
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d101      	bne.n	800b86e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b86a:	2301      	movs	r3, #1
 800b86c:	e049      	b.n	800b902 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b874:	b2db      	uxtb	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d106      	bne.n	800b888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	2200      	movs	r2, #0
 800b87e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	f000 f841 	bl	800b90a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2202      	movs	r2, #2
 800b88c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681a      	ldr	r2, [r3, #0]
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	3304      	adds	r3, #4
 800b898:	4619      	mov	r1, r3
 800b89a:	4610      	mov	r0, r2
 800b89c:	f000 fa00 	bl	800bca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2201      	movs	r2, #1
 800b8cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	2201      	movs	r2, #1
 800b8d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2201      	movs	r2, #1
 800b8dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	2201      	movs	r2, #1
 800b8e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2201      	movs	r2, #1
 800b8ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2201      	movs	r2, #1
 800b8f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2201      	movs	r2, #1
 800b8fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b900:	2300      	movs	r3, #0
}
 800b902:	4618      	mov	r0, r3
 800b904:	3708      	adds	r7, #8
 800b906:	46bd      	mov	sp, r7
 800b908:	bd80      	pop	{r7, pc}

0800b90a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b90a:	b480      	push	{r7}
 800b90c:	b083      	sub	sp, #12
 800b90e:	af00      	add	r7, sp, #0
 800b910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b912:	bf00      	nop
 800b914:	370c      	adds	r7, #12
 800b916:	46bd      	mov	sp, r7
 800b918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b91c:	4770      	bx	lr
	...

0800b920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b92e:	b2db      	uxtb	r3, r3
 800b930:	2b01      	cmp	r3, #1
 800b932:	d001      	beq.n	800b938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b934:	2301      	movs	r3, #1
 800b936:	e054      	b.n	800b9e2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2202      	movs	r2, #2
 800b93c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	68da      	ldr	r2, [r3, #12]
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	681b      	ldr	r3, [r3, #0]
 800b94a:	f042 0201 	orr.w	r2, r2, #1
 800b94e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	4a26      	ldr	r2, [pc, #152]	; (800b9f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800b956:	4293      	cmp	r3, r2
 800b958:	d022      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x80>
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b962:	d01d      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x80>
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	4a22      	ldr	r2, [pc, #136]	; (800b9f4 <HAL_TIM_Base_Start_IT+0xd4>)
 800b96a:	4293      	cmp	r3, r2
 800b96c:	d018      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x80>
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	4a21      	ldr	r2, [pc, #132]	; (800b9f8 <HAL_TIM_Base_Start_IT+0xd8>)
 800b974:	4293      	cmp	r3, r2
 800b976:	d013      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x80>
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	4a1f      	ldr	r2, [pc, #124]	; (800b9fc <HAL_TIM_Base_Start_IT+0xdc>)
 800b97e:	4293      	cmp	r3, r2
 800b980:	d00e      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x80>
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a1e      	ldr	r2, [pc, #120]	; (800ba00 <HAL_TIM_Base_Start_IT+0xe0>)
 800b988:	4293      	cmp	r3, r2
 800b98a:	d009      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x80>
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	4a1c      	ldr	r2, [pc, #112]	; (800ba04 <HAL_TIM_Base_Start_IT+0xe4>)
 800b992:	4293      	cmp	r3, r2
 800b994:	d004      	beq.n	800b9a0 <HAL_TIM_Base_Start_IT+0x80>
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	4a1b      	ldr	r2, [pc, #108]	; (800ba08 <HAL_TIM_Base_Start_IT+0xe8>)
 800b99c:	4293      	cmp	r3, r2
 800b99e:	d115      	bne.n	800b9cc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	681b      	ldr	r3, [r3, #0]
 800b9a4:	689a      	ldr	r2, [r3, #8]
 800b9a6:	4b19      	ldr	r3, [pc, #100]	; (800ba0c <HAL_TIM_Base_Start_IT+0xec>)
 800b9a8:	4013      	ands	r3, r2
 800b9aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	2b06      	cmp	r3, #6
 800b9b0:	d015      	beq.n	800b9de <HAL_TIM_Base_Start_IT+0xbe>
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b9b8:	d011      	beq.n	800b9de <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681a      	ldr	r2, [r3, #0]
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	f042 0201 	orr.w	r2, r2, #1
 800b9c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9ca:	e008      	b.n	800b9de <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	681a      	ldr	r2, [r3, #0]
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f042 0201 	orr.w	r2, r2, #1
 800b9da:	601a      	str	r2, [r3, #0]
 800b9dc:	e000      	b.n	800b9e0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b9de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3714      	adds	r7, #20
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ec:	4770      	bx	lr
 800b9ee:	bf00      	nop
 800b9f0:	40010000 	.word	0x40010000
 800b9f4:	40000400 	.word	0x40000400
 800b9f8:	40000800 	.word	0x40000800
 800b9fc:	40000c00 	.word	0x40000c00
 800ba00:	40010400 	.word	0x40010400
 800ba04:	40014000 	.word	0x40014000
 800ba08:	40001800 	.word	0x40001800
 800ba0c:	00010007 	.word	0x00010007

0800ba10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	691b      	ldr	r3, [r3, #16]
 800ba1e:	f003 0302 	and.w	r3, r3, #2
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d122      	bne.n	800ba6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	68db      	ldr	r3, [r3, #12]
 800ba2c:	f003 0302 	and.w	r3, r3, #2
 800ba30:	2b02      	cmp	r3, #2
 800ba32:	d11b      	bne.n	800ba6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	f06f 0202 	mvn.w	r2, #2
 800ba3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2201      	movs	r2, #1
 800ba42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	699b      	ldr	r3, [r3, #24]
 800ba4a:	f003 0303 	and.w	r3, r3, #3
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d003      	beq.n	800ba5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ba52:	6878      	ldr	r0, [r7, #4]
 800ba54:	f000 f905 	bl	800bc62 <HAL_TIM_IC_CaptureCallback>
 800ba58:	e005      	b.n	800ba66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba5a:	6878      	ldr	r0, [r7, #4]
 800ba5c:	f000 f8f7 	bl	800bc4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba60:	6878      	ldr	r0, [r7, #4]
 800ba62:	f000 f908 	bl	800bc76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	691b      	ldr	r3, [r3, #16]
 800ba72:	f003 0304 	and.w	r3, r3, #4
 800ba76:	2b04      	cmp	r3, #4
 800ba78:	d122      	bne.n	800bac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	68db      	ldr	r3, [r3, #12]
 800ba80:	f003 0304 	and.w	r3, r3, #4
 800ba84:	2b04      	cmp	r3, #4
 800ba86:	d11b      	bne.n	800bac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	f06f 0204 	mvn.w	r2, #4
 800ba90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2202      	movs	r2, #2
 800ba96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	699b      	ldr	r3, [r3, #24]
 800ba9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d003      	beq.n	800baae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baa6:	6878      	ldr	r0, [r7, #4]
 800baa8:	f000 f8db 	bl	800bc62 <HAL_TIM_IC_CaptureCallback>
 800baac:	e005      	b.n	800baba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f8cd 	bl	800bc4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bab4:	6878      	ldr	r0, [r7, #4]
 800bab6:	f000 f8de 	bl	800bc76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	2200      	movs	r2, #0
 800babe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	691b      	ldr	r3, [r3, #16]
 800bac6:	f003 0308 	and.w	r3, r3, #8
 800baca:	2b08      	cmp	r3, #8
 800bacc:	d122      	bne.n	800bb14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	68db      	ldr	r3, [r3, #12]
 800bad4:	f003 0308 	and.w	r3, r3, #8
 800bad8:	2b08      	cmp	r3, #8
 800bada:	d11b      	bne.n	800bb14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	f06f 0208 	mvn.w	r2, #8
 800bae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2204      	movs	r2, #4
 800baea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	69db      	ldr	r3, [r3, #28]
 800baf2:	f003 0303 	and.w	r3, r3, #3
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d003      	beq.n	800bb02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f000 f8b1 	bl	800bc62 <HAL_TIM_IC_CaptureCallback>
 800bb00:	e005      	b.n	800bb0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb02:	6878      	ldr	r0, [r7, #4]
 800bb04:	f000 f8a3 	bl	800bc4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f000 f8b4 	bl	800bc76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	2200      	movs	r2, #0
 800bb12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	691b      	ldr	r3, [r3, #16]
 800bb1a:	f003 0310 	and.w	r3, r3, #16
 800bb1e:	2b10      	cmp	r3, #16
 800bb20:	d122      	bne.n	800bb68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	68db      	ldr	r3, [r3, #12]
 800bb28:	f003 0310 	and.w	r3, r3, #16
 800bb2c:	2b10      	cmp	r3, #16
 800bb2e:	d11b      	bne.n	800bb68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	f06f 0210 	mvn.w	r2, #16
 800bb38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2208      	movs	r2, #8
 800bb3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	69db      	ldr	r3, [r3, #28]
 800bb46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb4a:	2b00      	cmp	r3, #0
 800bb4c:	d003      	beq.n	800bb56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f000 f887 	bl	800bc62 <HAL_TIM_IC_CaptureCallback>
 800bb54:	e005      	b.n	800bb62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb56:	6878      	ldr	r0, [r7, #4]
 800bb58:	f000 f879 	bl	800bc4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f000 f88a 	bl	800bc76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2200      	movs	r2, #0
 800bb66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	691b      	ldr	r3, [r3, #16]
 800bb6e:	f003 0301 	and.w	r3, r3, #1
 800bb72:	2b01      	cmp	r3, #1
 800bb74:	d10e      	bne.n	800bb94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	681b      	ldr	r3, [r3, #0]
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	f003 0301 	and.w	r3, r3, #1
 800bb80:	2b01      	cmp	r3, #1
 800bb82:	d107      	bne.n	800bb94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	f06f 0201 	mvn.w	r2, #1
 800bb8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb8e:	6878      	ldr	r0, [r7, #4]
 800bb90:	f7f6 fa52 	bl	8002038 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb9e:	2b80      	cmp	r3, #128	; 0x80
 800bba0:	d10e      	bne.n	800bbc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	68db      	ldr	r3, [r3, #12]
 800bba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbac:	2b80      	cmp	r3, #128	; 0x80
 800bbae:	d107      	bne.n	800bbc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bbb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bbba:	6878      	ldr	r0, [r7, #4]
 800bbbc:	f000 f91a 	bl	800bdf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bbca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbce:	d10e      	bne.n	800bbee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	68db      	ldr	r3, [r3, #12]
 800bbd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbda:	2b80      	cmp	r3, #128	; 0x80
 800bbdc:	d107      	bne.n	800bbee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bbe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	f000 f90d 	bl	800be08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	691b      	ldr	r3, [r3, #16]
 800bbf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbf8:	2b40      	cmp	r3, #64	; 0x40
 800bbfa:	d10e      	bne.n	800bc1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	68db      	ldr	r3, [r3, #12]
 800bc02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc06:	2b40      	cmp	r3, #64	; 0x40
 800bc08:	d107      	bne.n	800bc1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc14:	6878      	ldr	r0, [r7, #4]
 800bc16:	f000 f838 	bl	800bc8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	691b      	ldr	r3, [r3, #16]
 800bc20:	f003 0320 	and.w	r3, r3, #32
 800bc24:	2b20      	cmp	r3, #32
 800bc26:	d10e      	bne.n	800bc46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	68db      	ldr	r3, [r3, #12]
 800bc2e:	f003 0320 	and.w	r3, r3, #32
 800bc32:	2b20      	cmp	r3, #32
 800bc34:	d107      	bne.n	800bc46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f06f 0220 	mvn.w	r2, #32
 800bc3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bc40:	6878      	ldr	r0, [r7, #4]
 800bc42:	f000 f8cd 	bl	800bde0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bc46:	bf00      	nop
 800bc48:	3708      	adds	r7, #8
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}

0800bc4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc4e:	b480      	push	{r7}
 800bc50:	b083      	sub	sp, #12
 800bc52:	af00      	add	r7, sp, #0
 800bc54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc56:	bf00      	nop
 800bc58:	370c      	adds	r7, #12
 800bc5a:	46bd      	mov	sp, r7
 800bc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc60:	4770      	bx	lr

0800bc62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bc62:	b480      	push	{r7}
 800bc64:	b083      	sub	sp, #12
 800bc66:	af00      	add	r7, sp, #0
 800bc68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bc6a:	bf00      	nop
 800bc6c:	370c      	adds	r7, #12
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc74:	4770      	bx	lr

0800bc76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bc76:	b480      	push	{r7}
 800bc78:	b083      	sub	sp, #12
 800bc7a:	af00      	add	r7, sp, #0
 800bc7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bc7e:	bf00      	nop
 800bc80:	370c      	adds	r7, #12
 800bc82:	46bd      	mov	sp, r7
 800bc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc88:	4770      	bx	lr

0800bc8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc8a:	b480      	push	{r7}
 800bc8c:	b083      	sub	sp, #12
 800bc8e:	af00      	add	r7, sp, #0
 800bc90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc92:	bf00      	nop
 800bc94:	370c      	adds	r7, #12
 800bc96:	46bd      	mov	sp, r7
 800bc98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9c:	4770      	bx	lr
	...

0800bca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b085      	sub	sp, #20
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	4a40      	ldr	r2, [pc, #256]	; (800bdb4 <TIM_Base_SetConfig+0x114>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d013      	beq.n	800bce0 <TIM_Base_SetConfig+0x40>
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcbe:	d00f      	beq.n	800bce0 <TIM_Base_SetConfig+0x40>
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	4a3d      	ldr	r2, [pc, #244]	; (800bdb8 <TIM_Base_SetConfig+0x118>)
 800bcc4:	4293      	cmp	r3, r2
 800bcc6:	d00b      	beq.n	800bce0 <TIM_Base_SetConfig+0x40>
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a3c      	ldr	r2, [pc, #240]	; (800bdbc <TIM_Base_SetConfig+0x11c>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d007      	beq.n	800bce0 <TIM_Base_SetConfig+0x40>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a3b      	ldr	r2, [pc, #236]	; (800bdc0 <TIM_Base_SetConfig+0x120>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d003      	beq.n	800bce0 <TIM_Base_SetConfig+0x40>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	4a3a      	ldr	r2, [pc, #232]	; (800bdc4 <TIM_Base_SetConfig+0x124>)
 800bcdc:	4293      	cmp	r3, r2
 800bcde:	d108      	bne.n	800bcf2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bce6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	685b      	ldr	r3, [r3, #4]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	4313      	orrs	r3, r2
 800bcf0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	4a2f      	ldr	r2, [pc, #188]	; (800bdb4 <TIM_Base_SetConfig+0x114>)
 800bcf6:	4293      	cmp	r3, r2
 800bcf8:	d02b      	beq.n	800bd52 <TIM_Base_SetConfig+0xb2>
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd00:	d027      	beq.n	800bd52 <TIM_Base_SetConfig+0xb2>
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	4a2c      	ldr	r2, [pc, #176]	; (800bdb8 <TIM_Base_SetConfig+0x118>)
 800bd06:	4293      	cmp	r3, r2
 800bd08:	d023      	beq.n	800bd52 <TIM_Base_SetConfig+0xb2>
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	4a2b      	ldr	r2, [pc, #172]	; (800bdbc <TIM_Base_SetConfig+0x11c>)
 800bd0e:	4293      	cmp	r3, r2
 800bd10:	d01f      	beq.n	800bd52 <TIM_Base_SetConfig+0xb2>
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	4a2a      	ldr	r2, [pc, #168]	; (800bdc0 <TIM_Base_SetConfig+0x120>)
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d01b      	beq.n	800bd52 <TIM_Base_SetConfig+0xb2>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4a29      	ldr	r2, [pc, #164]	; (800bdc4 <TIM_Base_SetConfig+0x124>)
 800bd1e:	4293      	cmp	r3, r2
 800bd20:	d017      	beq.n	800bd52 <TIM_Base_SetConfig+0xb2>
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	4a28      	ldr	r2, [pc, #160]	; (800bdc8 <TIM_Base_SetConfig+0x128>)
 800bd26:	4293      	cmp	r3, r2
 800bd28:	d013      	beq.n	800bd52 <TIM_Base_SetConfig+0xb2>
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	4a27      	ldr	r2, [pc, #156]	; (800bdcc <TIM_Base_SetConfig+0x12c>)
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d00f      	beq.n	800bd52 <TIM_Base_SetConfig+0xb2>
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	4a26      	ldr	r2, [pc, #152]	; (800bdd0 <TIM_Base_SetConfig+0x130>)
 800bd36:	4293      	cmp	r3, r2
 800bd38:	d00b      	beq.n	800bd52 <TIM_Base_SetConfig+0xb2>
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	4a25      	ldr	r2, [pc, #148]	; (800bdd4 <TIM_Base_SetConfig+0x134>)
 800bd3e:	4293      	cmp	r3, r2
 800bd40:	d007      	beq.n	800bd52 <TIM_Base_SetConfig+0xb2>
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	4a24      	ldr	r2, [pc, #144]	; (800bdd8 <TIM_Base_SetConfig+0x138>)
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d003      	beq.n	800bd52 <TIM_Base_SetConfig+0xb2>
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	4a23      	ldr	r2, [pc, #140]	; (800bddc <TIM_Base_SetConfig+0x13c>)
 800bd4e:	4293      	cmp	r3, r2
 800bd50:	d108      	bne.n	800bd64 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd5a:	683b      	ldr	r3, [r7, #0]
 800bd5c:	68db      	ldr	r3, [r3, #12]
 800bd5e:	68fa      	ldr	r2, [r7, #12]
 800bd60:	4313      	orrs	r3, r2
 800bd62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd6a:	683b      	ldr	r3, [r7, #0]
 800bd6c:	695b      	ldr	r3, [r3, #20]
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	68fa      	ldr	r2, [r7, #12]
 800bd76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd78:	683b      	ldr	r3, [r7, #0]
 800bd7a:	689a      	ldr	r2, [r3, #8]
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	681a      	ldr	r2, [r3, #0]
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	4a0a      	ldr	r2, [pc, #40]	; (800bdb4 <TIM_Base_SetConfig+0x114>)
 800bd8c:	4293      	cmp	r3, r2
 800bd8e:	d003      	beq.n	800bd98 <TIM_Base_SetConfig+0xf8>
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	4a0c      	ldr	r2, [pc, #48]	; (800bdc4 <TIM_Base_SetConfig+0x124>)
 800bd94:	4293      	cmp	r3, r2
 800bd96:	d103      	bne.n	800bda0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	691a      	ldr	r2, [r3, #16]
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2201      	movs	r2, #1
 800bda4:	615a      	str	r2, [r3, #20]
}
 800bda6:	bf00      	nop
 800bda8:	3714      	adds	r7, #20
 800bdaa:	46bd      	mov	sp, r7
 800bdac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdb0:	4770      	bx	lr
 800bdb2:	bf00      	nop
 800bdb4:	40010000 	.word	0x40010000
 800bdb8:	40000400 	.word	0x40000400
 800bdbc:	40000800 	.word	0x40000800
 800bdc0:	40000c00 	.word	0x40000c00
 800bdc4:	40010400 	.word	0x40010400
 800bdc8:	40014000 	.word	0x40014000
 800bdcc:	40014400 	.word	0x40014400
 800bdd0:	40014800 	.word	0x40014800
 800bdd4:	40001800 	.word	0x40001800
 800bdd8:	40001c00 	.word	0x40001c00
 800bddc:	40002000 	.word	0x40002000

0800bde0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b083      	sub	sp, #12
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bde8:	bf00      	nop
 800bdea:	370c      	adds	r7, #12
 800bdec:	46bd      	mov	sp, r7
 800bdee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf2:	4770      	bx	lr

0800bdf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bdf4:	b480      	push	{r7}
 800bdf6:	b083      	sub	sp, #12
 800bdf8:	af00      	add	r7, sp, #0
 800bdfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bdfc:	bf00      	nop
 800bdfe:	370c      	adds	r7, #12
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800be08:	b480      	push	{r7}
 800be0a:	b083      	sub	sp, #12
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800be10:	bf00      	nop
 800be12:	370c      	adds	r7, #12
 800be14:	46bd      	mov	sp, r7
 800be16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be1a:	4770      	bx	lr

0800be1c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800be1c:	b580      	push	{r7, lr}
 800be1e:	b082      	sub	sp, #8
 800be20:	af00      	add	r7, sp, #0
 800be22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	2b00      	cmp	r3, #0
 800be28:	d101      	bne.n	800be2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800be2a:	2301      	movs	r3, #1
 800be2c:	e040      	b.n	800beb0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800be32:	2b00      	cmp	r3, #0
 800be34:	d106      	bne.n	800be44 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	2200      	movs	r2, #0
 800be3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7f8 f816 	bl	8003e70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	2224      	movs	r2, #36	; 0x24
 800be48:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	f022 0201 	bic.w	r2, r2, #1
 800be58:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800be5a:	6878      	ldr	r0, [r7, #4]
 800be5c:	f000 f82c 	bl	800beb8 <UART_SetConfig>
 800be60:	4603      	mov	r3, r0
 800be62:	2b01      	cmp	r3, #1
 800be64:	d101      	bne.n	800be6a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800be66:	2301      	movs	r3, #1
 800be68:	e022      	b.n	800beb0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d002      	beq.n	800be78 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fa82 	bl	800c37c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	685a      	ldr	r2, [r3, #4]
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	689a      	ldr	r2, [r3, #8]
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	f042 0201 	orr.w	r2, r2, #1
 800bea6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fb09 	bl	800c4c0 <UART_CheckIdleState>
 800beae:	4603      	mov	r3, r0
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3708      	adds	r7, #8
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}

0800beb8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bec0:	2300      	movs	r3, #0
 800bec2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	689a      	ldr	r2, [r3, #8]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	691b      	ldr	r3, [r3, #16]
 800becc:	431a      	orrs	r2, r3
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	695b      	ldr	r3, [r3, #20]
 800bed2:	431a      	orrs	r2, r3
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	69db      	ldr	r3, [r3, #28]
 800bed8:	4313      	orrs	r3, r2
 800beda:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	681a      	ldr	r2, [r3, #0]
 800bee2:	4ba7      	ldr	r3, [pc, #668]	; (800c180 <UART_SetConfig+0x2c8>)
 800bee4:	4013      	ands	r3, r2
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	6812      	ldr	r2, [r2, #0]
 800beea:	6979      	ldr	r1, [r7, #20]
 800beec:	430b      	orrs	r3, r1
 800beee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	685b      	ldr	r3, [r3, #4]
 800bef6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	68da      	ldr	r2, [r3, #12]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	681b      	ldr	r3, [r3, #0]
 800bf02:	430a      	orrs	r2, r1
 800bf04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	699b      	ldr	r3, [r3, #24]
 800bf0a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6a1b      	ldr	r3, [r3, #32]
 800bf10:	697a      	ldr	r2, [r7, #20]
 800bf12:	4313      	orrs	r3, r2
 800bf14:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	689b      	ldr	r3, [r3, #8]
 800bf1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	697a      	ldr	r2, [r7, #20]
 800bf26:	430a      	orrs	r2, r1
 800bf28:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	4a95      	ldr	r2, [pc, #596]	; (800c184 <UART_SetConfig+0x2cc>)
 800bf30:	4293      	cmp	r3, r2
 800bf32:	d120      	bne.n	800bf76 <UART_SetConfig+0xbe>
 800bf34:	4b94      	ldr	r3, [pc, #592]	; (800c188 <UART_SetConfig+0x2d0>)
 800bf36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf3a:	f003 0303 	and.w	r3, r3, #3
 800bf3e:	2b03      	cmp	r3, #3
 800bf40:	d816      	bhi.n	800bf70 <UART_SetConfig+0xb8>
 800bf42:	a201      	add	r2, pc, #4	; (adr r2, 800bf48 <UART_SetConfig+0x90>)
 800bf44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf48:	0800bf59 	.word	0x0800bf59
 800bf4c:	0800bf65 	.word	0x0800bf65
 800bf50:	0800bf5f 	.word	0x0800bf5f
 800bf54:	0800bf6b 	.word	0x0800bf6b
 800bf58:	2301      	movs	r3, #1
 800bf5a:	77fb      	strb	r3, [r7, #31]
 800bf5c:	e14f      	b.n	800c1fe <UART_SetConfig+0x346>
 800bf5e:	2302      	movs	r3, #2
 800bf60:	77fb      	strb	r3, [r7, #31]
 800bf62:	e14c      	b.n	800c1fe <UART_SetConfig+0x346>
 800bf64:	2304      	movs	r3, #4
 800bf66:	77fb      	strb	r3, [r7, #31]
 800bf68:	e149      	b.n	800c1fe <UART_SetConfig+0x346>
 800bf6a:	2308      	movs	r3, #8
 800bf6c:	77fb      	strb	r3, [r7, #31]
 800bf6e:	e146      	b.n	800c1fe <UART_SetConfig+0x346>
 800bf70:	2310      	movs	r3, #16
 800bf72:	77fb      	strb	r3, [r7, #31]
 800bf74:	e143      	b.n	800c1fe <UART_SetConfig+0x346>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	4a84      	ldr	r2, [pc, #528]	; (800c18c <UART_SetConfig+0x2d4>)
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	d132      	bne.n	800bfe6 <UART_SetConfig+0x12e>
 800bf80:	4b81      	ldr	r3, [pc, #516]	; (800c188 <UART_SetConfig+0x2d0>)
 800bf82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf86:	f003 030c 	and.w	r3, r3, #12
 800bf8a:	2b0c      	cmp	r3, #12
 800bf8c:	d828      	bhi.n	800bfe0 <UART_SetConfig+0x128>
 800bf8e:	a201      	add	r2, pc, #4	; (adr r2, 800bf94 <UART_SetConfig+0xdc>)
 800bf90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf94:	0800bfc9 	.word	0x0800bfc9
 800bf98:	0800bfe1 	.word	0x0800bfe1
 800bf9c:	0800bfe1 	.word	0x0800bfe1
 800bfa0:	0800bfe1 	.word	0x0800bfe1
 800bfa4:	0800bfd5 	.word	0x0800bfd5
 800bfa8:	0800bfe1 	.word	0x0800bfe1
 800bfac:	0800bfe1 	.word	0x0800bfe1
 800bfb0:	0800bfe1 	.word	0x0800bfe1
 800bfb4:	0800bfcf 	.word	0x0800bfcf
 800bfb8:	0800bfe1 	.word	0x0800bfe1
 800bfbc:	0800bfe1 	.word	0x0800bfe1
 800bfc0:	0800bfe1 	.word	0x0800bfe1
 800bfc4:	0800bfdb 	.word	0x0800bfdb
 800bfc8:	2300      	movs	r3, #0
 800bfca:	77fb      	strb	r3, [r7, #31]
 800bfcc:	e117      	b.n	800c1fe <UART_SetConfig+0x346>
 800bfce:	2302      	movs	r3, #2
 800bfd0:	77fb      	strb	r3, [r7, #31]
 800bfd2:	e114      	b.n	800c1fe <UART_SetConfig+0x346>
 800bfd4:	2304      	movs	r3, #4
 800bfd6:	77fb      	strb	r3, [r7, #31]
 800bfd8:	e111      	b.n	800c1fe <UART_SetConfig+0x346>
 800bfda:	2308      	movs	r3, #8
 800bfdc:	77fb      	strb	r3, [r7, #31]
 800bfde:	e10e      	b.n	800c1fe <UART_SetConfig+0x346>
 800bfe0:	2310      	movs	r3, #16
 800bfe2:	77fb      	strb	r3, [r7, #31]
 800bfe4:	e10b      	b.n	800c1fe <UART_SetConfig+0x346>
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	4a69      	ldr	r2, [pc, #420]	; (800c190 <UART_SetConfig+0x2d8>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d120      	bne.n	800c032 <UART_SetConfig+0x17a>
 800bff0:	4b65      	ldr	r3, [pc, #404]	; (800c188 <UART_SetConfig+0x2d0>)
 800bff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bff6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bffa:	2b30      	cmp	r3, #48	; 0x30
 800bffc:	d013      	beq.n	800c026 <UART_SetConfig+0x16e>
 800bffe:	2b30      	cmp	r3, #48	; 0x30
 800c000:	d814      	bhi.n	800c02c <UART_SetConfig+0x174>
 800c002:	2b20      	cmp	r3, #32
 800c004:	d009      	beq.n	800c01a <UART_SetConfig+0x162>
 800c006:	2b20      	cmp	r3, #32
 800c008:	d810      	bhi.n	800c02c <UART_SetConfig+0x174>
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d002      	beq.n	800c014 <UART_SetConfig+0x15c>
 800c00e:	2b10      	cmp	r3, #16
 800c010:	d006      	beq.n	800c020 <UART_SetConfig+0x168>
 800c012:	e00b      	b.n	800c02c <UART_SetConfig+0x174>
 800c014:	2300      	movs	r3, #0
 800c016:	77fb      	strb	r3, [r7, #31]
 800c018:	e0f1      	b.n	800c1fe <UART_SetConfig+0x346>
 800c01a:	2302      	movs	r3, #2
 800c01c:	77fb      	strb	r3, [r7, #31]
 800c01e:	e0ee      	b.n	800c1fe <UART_SetConfig+0x346>
 800c020:	2304      	movs	r3, #4
 800c022:	77fb      	strb	r3, [r7, #31]
 800c024:	e0eb      	b.n	800c1fe <UART_SetConfig+0x346>
 800c026:	2308      	movs	r3, #8
 800c028:	77fb      	strb	r3, [r7, #31]
 800c02a:	e0e8      	b.n	800c1fe <UART_SetConfig+0x346>
 800c02c:	2310      	movs	r3, #16
 800c02e:	77fb      	strb	r3, [r7, #31]
 800c030:	e0e5      	b.n	800c1fe <UART_SetConfig+0x346>
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	4a57      	ldr	r2, [pc, #348]	; (800c194 <UART_SetConfig+0x2dc>)
 800c038:	4293      	cmp	r3, r2
 800c03a:	d120      	bne.n	800c07e <UART_SetConfig+0x1c6>
 800c03c:	4b52      	ldr	r3, [pc, #328]	; (800c188 <UART_SetConfig+0x2d0>)
 800c03e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c042:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c046:	2bc0      	cmp	r3, #192	; 0xc0
 800c048:	d013      	beq.n	800c072 <UART_SetConfig+0x1ba>
 800c04a:	2bc0      	cmp	r3, #192	; 0xc0
 800c04c:	d814      	bhi.n	800c078 <UART_SetConfig+0x1c0>
 800c04e:	2b80      	cmp	r3, #128	; 0x80
 800c050:	d009      	beq.n	800c066 <UART_SetConfig+0x1ae>
 800c052:	2b80      	cmp	r3, #128	; 0x80
 800c054:	d810      	bhi.n	800c078 <UART_SetConfig+0x1c0>
 800c056:	2b00      	cmp	r3, #0
 800c058:	d002      	beq.n	800c060 <UART_SetConfig+0x1a8>
 800c05a:	2b40      	cmp	r3, #64	; 0x40
 800c05c:	d006      	beq.n	800c06c <UART_SetConfig+0x1b4>
 800c05e:	e00b      	b.n	800c078 <UART_SetConfig+0x1c0>
 800c060:	2300      	movs	r3, #0
 800c062:	77fb      	strb	r3, [r7, #31]
 800c064:	e0cb      	b.n	800c1fe <UART_SetConfig+0x346>
 800c066:	2302      	movs	r3, #2
 800c068:	77fb      	strb	r3, [r7, #31]
 800c06a:	e0c8      	b.n	800c1fe <UART_SetConfig+0x346>
 800c06c:	2304      	movs	r3, #4
 800c06e:	77fb      	strb	r3, [r7, #31]
 800c070:	e0c5      	b.n	800c1fe <UART_SetConfig+0x346>
 800c072:	2308      	movs	r3, #8
 800c074:	77fb      	strb	r3, [r7, #31]
 800c076:	e0c2      	b.n	800c1fe <UART_SetConfig+0x346>
 800c078:	2310      	movs	r3, #16
 800c07a:	77fb      	strb	r3, [r7, #31]
 800c07c:	e0bf      	b.n	800c1fe <UART_SetConfig+0x346>
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	4a45      	ldr	r2, [pc, #276]	; (800c198 <UART_SetConfig+0x2e0>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d125      	bne.n	800c0d4 <UART_SetConfig+0x21c>
 800c088:	4b3f      	ldr	r3, [pc, #252]	; (800c188 <UART_SetConfig+0x2d0>)
 800c08a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c08e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c092:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c096:	d017      	beq.n	800c0c8 <UART_SetConfig+0x210>
 800c098:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c09c:	d817      	bhi.n	800c0ce <UART_SetConfig+0x216>
 800c09e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0a2:	d00b      	beq.n	800c0bc <UART_SetConfig+0x204>
 800c0a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c0a8:	d811      	bhi.n	800c0ce <UART_SetConfig+0x216>
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d003      	beq.n	800c0b6 <UART_SetConfig+0x1fe>
 800c0ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c0b2:	d006      	beq.n	800c0c2 <UART_SetConfig+0x20a>
 800c0b4:	e00b      	b.n	800c0ce <UART_SetConfig+0x216>
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	77fb      	strb	r3, [r7, #31]
 800c0ba:	e0a0      	b.n	800c1fe <UART_SetConfig+0x346>
 800c0bc:	2302      	movs	r3, #2
 800c0be:	77fb      	strb	r3, [r7, #31]
 800c0c0:	e09d      	b.n	800c1fe <UART_SetConfig+0x346>
 800c0c2:	2304      	movs	r3, #4
 800c0c4:	77fb      	strb	r3, [r7, #31]
 800c0c6:	e09a      	b.n	800c1fe <UART_SetConfig+0x346>
 800c0c8:	2308      	movs	r3, #8
 800c0ca:	77fb      	strb	r3, [r7, #31]
 800c0cc:	e097      	b.n	800c1fe <UART_SetConfig+0x346>
 800c0ce:	2310      	movs	r3, #16
 800c0d0:	77fb      	strb	r3, [r7, #31]
 800c0d2:	e094      	b.n	800c1fe <UART_SetConfig+0x346>
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	4a30      	ldr	r2, [pc, #192]	; (800c19c <UART_SetConfig+0x2e4>)
 800c0da:	4293      	cmp	r3, r2
 800c0dc:	d125      	bne.n	800c12a <UART_SetConfig+0x272>
 800c0de:	4b2a      	ldr	r3, [pc, #168]	; (800c188 <UART_SetConfig+0x2d0>)
 800c0e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c0e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0ec:	d017      	beq.n	800c11e <UART_SetConfig+0x266>
 800c0ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c0f2:	d817      	bhi.n	800c124 <UART_SetConfig+0x26c>
 800c0f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0f8:	d00b      	beq.n	800c112 <UART_SetConfig+0x25a>
 800c0fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c0fe:	d811      	bhi.n	800c124 <UART_SetConfig+0x26c>
 800c100:	2b00      	cmp	r3, #0
 800c102:	d003      	beq.n	800c10c <UART_SetConfig+0x254>
 800c104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c108:	d006      	beq.n	800c118 <UART_SetConfig+0x260>
 800c10a:	e00b      	b.n	800c124 <UART_SetConfig+0x26c>
 800c10c:	2301      	movs	r3, #1
 800c10e:	77fb      	strb	r3, [r7, #31]
 800c110:	e075      	b.n	800c1fe <UART_SetConfig+0x346>
 800c112:	2302      	movs	r3, #2
 800c114:	77fb      	strb	r3, [r7, #31]
 800c116:	e072      	b.n	800c1fe <UART_SetConfig+0x346>
 800c118:	2304      	movs	r3, #4
 800c11a:	77fb      	strb	r3, [r7, #31]
 800c11c:	e06f      	b.n	800c1fe <UART_SetConfig+0x346>
 800c11e:	2308      	movs	r3, #8
 800c120:	77fb      	strb	r3, [r7, #31]
 800c122:	e06c      	b.n	800c1fe <UART_SetConfig+0x346>
 800c124:	2310      	movs	r3, #16
 800c126:	77fb      	strb	r3, [r7, #31]
 800c128:	e069      	b.n	800c1fe <UART_SetConfig+0x346>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	4a1c      	ldr	r2, [pc, #112]	; (800c1a0 <UART_SetConfig+0x2e8>)
 800c130:	4293      	cmp	r3, r2
 800c132:	d137      	bne.n	800c1a4 <UART_SetConfig+0x2ec>
 800c134:	4b14      	ldr	r3, [pc, #80]	; (800c188 <UART_SetConfig+0x2d0>)
 800c136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c13a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c13e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c142:	d017      	beq.n	800c174 <UART_SetConfig+0x2bc>
 800c144:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c148:	d817      	bhi.n	800c17a <UART_SetConfig+0x2c2>
 800c14a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c14e:	d00b      	beq.n	800c168 <UART_SetConfig+0x2b0>
 800c150:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c154:	d811      	bhi.n	800c17a <UART_SetConfig+0x2c2>
 800c156:	2b00      	cmp	r3, #0
 800c158:	d003      	beq.n	800c162 <UART_SetConfig+0x2aa>
 800c15a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c15e:	d006      	beq.n	800c16e <UART_SetConfig+0x2b6>
 800c160:	e00b      	b.n	800c17a <UART_SetConfig+0x2c2>
 800c162:	2300      	movs	r3, #0
 800c164:	77fb      	strb	r3, [r7, #31]
 800c166:	e04a      	b.n	800c1fe <UART_SetConfig+0x346>
 800c168:	2302      	movs	r3, #2
 800c16a:	77fb      	strb	r3, [r7, #31]
 800c16c:	e047      	b.n	800c1fe <UART_SetConfig+0x346>
 800c16e:	2304      	movs	r3, #4
 800c170:	77fb      	strb	r3, [r7, #31]
 800c172:	e044      	b.n	800c1fe <UART_SetConfig+0x346>
 800c174:	2308      	movs	r3, #8
 800c176:	77fb      	strb	r3, [r7, #31]
 800c178:	e041      	b.n	800c1fe <UART_SetConfig+0x346>
 800c17a:	2310      	movs	r3, #16
 800c17c:	77fb      	strb	r3, [r7, #31]
 800c17e:	e03e      	b.n	800c1fe <UART_SetConfig+0x346>
 800c180:	efff69f3 	.word	0xefff69f3
 800c184:	40011000 	.word	0x40011000
 800c188:	40023800 	.word	0x40023800
 800c18c:	40004400 	.word	0x40004400
 800c190:	40004800 	.word	0x40004800
 800c194:	40004c00 	.word	0x40004c00
 800c198:	40005000 	.word	0x40005000
 800c19c:	40011400 	.word	0x40011400
 800c1a0:	40007800 	.word	0x40007800
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	4a71      	ldr	r2, [pc, #452]	; (800c370 <UART_SetConfig+0x4b8>)
 800c1aa:	4293      	cmp	r3, r2
 800c1ac:	d125      	bne.n	800c1fa <UART_SetConfig+0x342>
 800c1ae:	4b71      	ldr	r3, [pc, #452]	; (800c374 <UART_SetConfig+0x4bc>)
 800c1b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c1b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c1b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c1bc:	d017      	beq.n	800c1ee <UART_SetConfig+0x336>
 800c1be:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c1c2:	d817      	bhi.n	800c1f4 <UART_SetConfig+0x33c>
 800c1c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1c8:	d00b      	beq.n	800c1e2 <UART_SetConfig+0x32a>
 800c1ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c1ce:	d811      	bhi.n	800c1f4 <UART_SetConfig+0x33c>
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d003      	beq.n	800c1dc <UART_SetConfig+0x324>
 800c1d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c1d8:	d006      	beq.n	800c1e8 <UART_SetConfig+0x330>
 800c1da:	e00b      	b.n	800c1f4 <UART_SetConfig+0x33c>
 800c1dc:	2300      	movs	r3, #0
 800c1de:	77fb      	strb	r3, [r7, #31]
 800c1e0:	e00d      	b.n	800c1fe <UART_SetConfig+0x346>
 800c1e2:	2302      	movs	r3, #2
 800c1e4:	77fb      	strb	r3, [r7, #31]
 800c1e6:	e00a      	b.n	800c1fe <UART_SetConfig+0x346>
 800c1e8:	2304      	movs	r3, #4
 800c1ea:	77fb      	strb	r3, [r7, #31]
 800c1ec:	e007      	b.n	800c1fe <UART_SetConfig+0x346>
 800c1ee:	2308      	movs	r3, #8
 800c1f0:	77fb      	strb	r3, [r7, #31]
 800c1f2:	e004      	b.n	800c1fe <UART_SetConfig+0x346>
 800c1f4:	2310      	movs	r3, #16
 800c1f6:	77fb      	strb	r3, [r7, #31]
 800c1f8:	e001      	b.n	800c1fe <UART_SetConfig+0x346>
 800c1fa:	2310      	movs	r3, #16
 800c1fc:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	69db      	ldr	r3, [r3, #28]
 800c202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c206:	d15b      	bne.n	800c2c0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800c208:	7ffb      	ldrb	r3, [r7, #31]
 800c20a:	2b08      	cmp	r3, #8
 800c20c:	d827      	bhi.n	800c25e <UART_SetConfig+0x3a6>
 800c20e:	a201      	add	r2, pc, #4	; (adr r2, 800c214 <UART_SetConfig+0x35c>)
 800c210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c214:	0800c239 	.word	0x0800c239
 800c218:	0800c241 	.word	0x0800c241
 800c21c:	0800c249 	.word	0x0800c249
 800c220:	0800c25f 	.word	0x0800c25f
 800c224:	0800c24f 	.word	0x0800c24f
 800c228:	0800c25f 	.word	0x0800c25f
 800c22c:	0800c25f 	.word	0x0800c25f
 800c230:	0800c25f 	.word	0x0800c25f
 800c234:	0800c257 	.word	0x0800c257
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c238:	f7fc fcb2 	bl	8008ba0 <HAL_RCC_GetPCLK1Freq>
 800c23c:	61b8      	str	r0, [r7, #24]
        break;
 800c23e:	e013      	b.n	800c268 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c240:	f7fc fcc2 	bl	8008bc8 <HAL_RCC_GetPCLK2Freq>
 800c244:	61b8      	str	r0, [r7, #24]
        break;
 800c246:	e00f      	b.n	800c268 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c248:	4b4b      	ldr	r3, [pc, #300]	; (800c378 <UART_SetConfig+0x4c0>)
 800c24a:	61bb      	str	r3, [r7, #24]
        break;
 800c24c:	e00c      	b.n	800c268 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c24e:	f7fc fbe5 	bl	8008a1c <HAL_RCC_GetSysClockFreq>
 800c252:	61b8      	str	r0, [r7, #24]
        break;
 800c254:	e008      	b.n	800c268 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c256:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c25a:	61bb      	str	r3, [r7, #24]
        break;
 800c25c:	e004      	b.n	800c268 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800c25e:	2300      	movs	r3, #0
 800c260:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c262:	2301      	movs	r3, #1
 800c264:	77bb      	strb	r3, [r7, #30]
        break;
 800c266:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c268:	69bb      	ldr	r3, [r7, #24]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d074      	beq.n	800c358 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c26e:	69bb      	ldr	r3, [r7, #24]
 800c270:	005a      	lsls	r2, r3, #1
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	685b      	ldr	r3, [r3, #4]
 800c276:	085b      	lsrs	r3, r3, #1
 800c278:	441a      	add	r2, r3
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	685b      	ldr	r3, [r3, #4]
 800c27e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c282:	b29b      	uxth	r3, r3
 800c284:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c286:	693b      	ldr	r3, [r7, #16]
 800c288:	2b0f      	cmp	r3, #15
 800c28a:	d916      	bls.n	800c2ba <UART_SetConfig+0x402>
 800c28c:	693b      	ldr	r3, [r7, #16]
 800c28e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c292:	d212      	bcs.n	800c2ba <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	b29b      	uxth	r3, r3
 800c298:	f023 030f 	bic.w	r3, r3, #15
 800c29c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	085b      	lsrs	r3, r3, #1
 800c2a2:	b29b      	uxth	r3, r3
 800c2a4:	f003 0307 	and.w	r3, r3, #7
 800c2a8:	b29a      	uxth	r2, r3
 800c2aa:	89fb      	ldrh	r3, [r7, #14]
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	89fa      	ldrh	r2, [r7, #14]
 800c2b6:	60da      	str	r2, [r3, #12]
 800c2b8:	e04e      	b.n	800c358 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	77bb      	strb	r3, [r7, #30]
 800c2be:	e04b      	b.n	800c358 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c2c0:	7ffb      	ldrb	r3, [r7, #31]
 800c2c2:	2b08      	cmp	r3, #8
 800c2c4:	d827      	bhi.n	800c316 <UART_SetConfig+0x45e>
 800c2c6:	a201      	add	r2, pc, #4	; (adr r2, 800c2cc <UART_SetConfig+0x414>)
 800c2c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2cc:	0800c2f1 	.word	0x0800c2f1
 800c2d0:	0800c2f9 	.word	0x0800c2f9
 800c2d4:	0800c301 	.word	0x0800c301
 800c2d8:	0800c317 	.word	0x0800c317
 800c2dc:	0800c307 	.word	0x0800c307
 800c2e0:	0800c317 	.word	0x0800c317
 800c2e4:	0800c317 	.word	0x0800c317
 800c2e8:	0800c317 	.word	0x0800c317
 800c2ec:	0800c30f 	.word	0x0800c30f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c2f0:	f7fc fc56 	bl	8008ba0 <HAL_RCC_GetPCLK1Freq>
 800c2f4:	61b8      	str	r0, [r7, #24]
        break;
 800c2f6:	e013      	b.n	800c320 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c2f8:	f7fc fc66 	bl	8008bc8 <HAL_RCC_GetPCLK2Freq>
 800c2fc:	61b8      	str	r0, [r7, #24]
        break;
 800c2fe:	e00f      	b.n	800c320 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c300:	4b1d      	ldr	r3, [pc, #116]	; (800c378 <UART_SetConfig+0x4c0>)
 800c302:	61bb      	str	r3, [r7, #24]
        break;
 800c304:	e00c      	b.n	800c320 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c306:	f7fc fb89 	bl	8008a1c <HAL_RCC_GetSysClockFreq>
 800c30a:	61b8      	str	r0, [r7, #24]
        break;
 800c30c:	e008      	b.n	800c320 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c30e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c312:	61bb      	str	r3, [r7, #24]
        break;
 800c314:	e004      	b.n	800c320 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800c316:	2300      	movs	r3, #0
 800c318:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c31a:	2301      	movs	r3, #1
 800c31c:	77bb      	strb	r3, [r7, #30]
        break;
 800c31e:	bf00      	nop
    }

    if (pclk != 0U)
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d018      	beq.n	800c358 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	685b      	ldr	r3, [r3, #4]
 800c32a:	085a      	lsrs	r2, r3, #1
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	441a      	add	r2, r3
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	fbb2 f3f3 	udiv	r3, r2, r3
 800c338:	b29b      	uxth	r3, r3
 800c33a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c33c:	693b      	ldr	r3, [r7, #16]
 800c33e:	2b0f      	cmp	r3, #15
 800c340:	d908      	bls.n	800c354 <UART_SetConfig+0x49c>
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c348:	d204      	bcs.n	800c354 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	693a      	ldr	r2, [r7, #16]
 800c350:	60da      	str	r2, [r3, #12]
 800c352:	e001      	b.n	800c358 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800c354:	2301      	movs	r3, #1
 800c356:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2200      	movs	r2, #0
 800c35c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	2200      	movs	r2, #0
 800c362:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c364:	7fbb      	ldrb	r3, [r7, #30]
}
 800c366:	4618      	mov	r0, r3
 800c368:	3720      	adds	r7, #32
 800c36a:	46bd      	mov	sp, r7
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	40007c00 	.word	0x40007c00
 800c374:	40023800 	.word	0x40023800
 800c378:	00f42400 	.word	0x00f42400

0800c37c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c37c:	b480      	push	{r7}
 800c37e:	b083      	sub	sp, #12
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c388:	f003 0301 	and.w	r3, r3, #1
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d00a      	beq.n	800c3a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	681b      	ldr	r3, [r3, #0]
 800c394:	685b      	ldr	r3, [r3, #4]
 800c396:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	430a      	orrs	r2, r1
 800c3a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3aa:	f003 0302 	and.w	r3, r3, #2
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d00a      	beq.n	800c3c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	685b      	ldr	r3, [r3, #4]
 800c3b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	430a      	orrs	r2, r1
 800c3c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3cc:	f003 0304 	and.w	r3, r3, #4
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d00a      	beq.n	800c3ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	430a      	orrs	r2, r1
 800c3e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ee:	f003 0308 	and.w	r3, r3, #8
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d00a      	beq.n	800c40c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	681b      	ldr	r3, [r3, #0]
 800c3fa:	685b      	ldr	r3, [r3, #4]
 800c3fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	430a      	orrs	r2, r1
 800c40a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c410:	f003 0310 	and.w	r3, r3, #16
 800c414:	2b00      	cmp	r3, #0
 800c416:	d00a      	beq.n	800c42e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	689b      	ldr	r3, [r3, #8]
 800c41e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	430a      	orrs	r2, r1
 800c42c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c432:	f003 0320 	and.w	r3, r3, #32
 800c436:	2b00      	cmp	r3, #0
 800c438:	d00a      	beq.n	800c450 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	689b      	ldr	r3, [r3, #8]
 800c440:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	430a      	orrs	r2, r1
 800c44e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d01a      	beq.n	800c492 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	685b      	ldr	r3, [r3, #4]
 800c462:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	430a      	orrs	r2, r1
 800c470:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c476:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c47a:	d10a      	bne.n	800c492 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	685b      	ldr	r3, [r3, #4]
 800c482:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	430a      	orrs	r2, r1
 800c490:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c49a:	2b00      	cmp	r3, #0
 800c49c:	d00a      	beq.n	800c4b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	430a      	orrs	r2, r1
 800c4b2:	605a      	str	r2, [r3, #4]
  }
}
 800c4b4:	bf00      	nop
 800c4b6:	370c      	adds	r7, #12
 800c4b8:	46bd      	mov	sp, r7
 800c4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4be:	4770      	bx	lr

0800c4c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c4c0:	b580      	push	{r7, lr}
 800c4c2:	b086      	sub	sp, #24
 800c4c4:	af02      	add	r7, sp, #8
 800c4c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c4d0:	f7f9 fb84 	bl	8005bdc <HAL_GetTick>
 800c4d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f003 0308 	and.w	r3, r3, #8
 800c4e0:	2b08      	cmp	r3, #8
 800c4e2:	d10e      	bne.n	800c502 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c4e8:	9300      	str	r3, [sp, #0]
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c4f2:	6878      	ldr	r0, [r7, #4]
 800c4f4:	f000 f817 	bl	800c526 <UART_WaitOnFlagUntilTimeout>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d001      	beq.n	800c502 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c4fe:	2303      	movs	r3, #3
 800c500:	e00d      	b.n	800c51e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2220      	movs	r2, #32
 800c506:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2220      	movs	r2, #32
 800c50c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2200      	movs	r2, #0
 800c512:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2200      	movs	r2, #0
 800c518:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c51c:	2300      	movs	r3, #0
}
 800c51e:	4618      	mov	r0, r3
 800c520:	3710      	adds	r7, #16
 800c522:	46bd      	mov	sp, r7
 800c524:	bd80      	pop	{r7, pc}

0800c526 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c526:	b580      	push	{r7, lr}
 800c528:	b084      	sub	sp, #16
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	60f8      	str	r0, [r7, #12]
 800c52e:	60b9      	str	r1, [r7, #8]
 800c530:	603b      	str	r3, [r7, #0]
 800c532:	4613      	mov	r3, r2
 800c534:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c536:	e05e      	b.n	800c5f6 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c538:	69bb      	ldr	r3, [r7, #24]
 800c53a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c53e:	d05a      	beq.n	800c5f6 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c540:	f7f9 fb4c 	bl	8005bdc <HAL_GetTick>
 800c544:	4602      	mov	r2, r0
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	1ad3      	subs	r3, r2, r3
 800c54a:	69ba      	ldr	r2, [r7, #24]
 800c54c:	429a      	cmp	r2, r3
 800c54e:	d302      	bcc.n	800c556 <UART_WaitOnFlagUntilTimeout+0x30>
 800c550:	69bb      	ldr	r3, [r7, #24]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d11b      	bne.n	800c58e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	681a      	ldr	r2, [r3, #0]
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c564:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	689a      	ldr	r2, [r3, #8]
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	681b      	ldr	r3, [r3, #0]
 800c570:	f022 0201 	bic.w	r2, r2, #1
 800c574:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c576:	68fb      	ldr	r3, [r7, #12]
 800c578:	2220      	movs	r2, #32
 800c57a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	2220      	movs	r2, #32
 800c580:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c58a:	2303      	movs	r3, #3
 800c58c:	e043      	b.n	800c616 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	f003 0304 	and.w	r3, r3, #4
 800c598:	2b00      	cmp	r3, #0
 800c59a:	d02c      	beq.n	800c5f6 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c59c:	68fb      	ldr	r3, [r7, #12]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	69db      	ldr	r3, [r3, #28]
 800c5a2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c5a6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c5aa:	d124      	bne.n	800c5f6 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c5b4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	681a      	ldr	r2, [r3, #0]
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c5c4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	689a      	ldr	r2, [r3, #8]
 800c5cc:	68fb      	ldr	r3, [r7, #12]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	f022 0201 	bic.w	r2, r2, #1
 800c5d4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	2220      	movs	r2, #32
 800c5da:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	2220      	movs	r2, #32
 800c5e0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	2220      	movs	r2, #32
 800c5e6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c5f2:	2303      	movs	r3, #3
 800c5f4:	e00f      	b.n	800c616 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c5f6:	68fb      	ldr	r3, [r7, #12]
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	69da      	ldr	r2, [r3, #28]
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	4013      	ands	r3, r2
 800c600:	68ba      	ldr	r2, [r7, #8]
 800c602:	429a      	cmp	r2, r3
 800c604:	bf0c      	ite	eq
 800c606:	2301      	moveq	r3, #1
 800c608:	2300      	movne	r3, #0
 800c60a:	b2db      	uxtb	r3, r3
 800c60c:	461a      	mov	r2, r3
 800c60e:	79fb      	ldrb	r3, [r7, #7]
 800c610:	429a      	cmp	r2, r3
 800c612:	d091      	beq.n	800c538 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c614:	2300      	movs	r3, #0
}
 800c616:	4618      	mov	r0, r3
 800c618:	3710      	adds	r7, #16
 800c61a:	46bd      	mov	sp, r7
 800c61c:	bd80      	pop	{r7, pc}
	...

0800c620 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c620:	b480      	push	{r7}
 800c622:	b085      	sub	sp, #20
 800c624:	af00      	add	r7, sp, #0
 800c626:	6078      	str	r0, [r7, #4]
 800c628:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c62a:	2300      	movs	r3, #0
 800c62c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c632:	683b      	ldr	r3, [r7, #0]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	2b01      	cmp	r3, #1
 800c638:	d027      	beq.n	800c68a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c640:	68fa      	ldr	r2, [r7, #12]
 800c642:	4b2f      	ldr	r3, [pc, #188]	; (800c700 <FMC_SDRAM_Init+0xe0>)
 800c644:	4013      	ands	r3, r2
 800c646:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c650:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c656:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c658:	683b      	ldr	r3, [r7, #0]
 800c65a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c65c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c65e:	683b      	ldr	r3, [r7, #0]
 800c660:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c662:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c668:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c66a:	683b      	ldr	r3, [r7, #0]
 800c66c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c66e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c674:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c676:	683b      	ldr	r3, [r7, #0]
 800c678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c67a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c67c:	68fa      	ldr	r2, [r7, #12]
 800c67e:	4313      	orrs	r3, r2
 800c680:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	68fa      	ldr	r2, [r7, #12]
 800c686:	601a      	str	r2, [r3, #0]
 800c688:	e032      	b.n	800c6f0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c696:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c6a0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c6a6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	4313      	orrs	r3, r2
 800c6ac:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c6b4:	68ba      	ldr	r2, [r7, #8]
 800c6b6:	4b12      	ldr	r3, [pc, #72]	; (800c700 <FMC_SDRAM_Init+0xe0>)
 800c6b8:	4013      	ands	r3, r2
 800c6ba:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c6c0:	683b      	ldr	r3, [r7, #0]
 800c6c2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c6c4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c6c6:	683b      	ldr	r3, [r7, #0]
 800c6c8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c6ca:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c6d0:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c6d6:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c6d8:	683b      	ldr	r3, [r7, #0]
 800c6da:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c6dc:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c6de:	68ba      	ldr	r2, [r7, #8]
 800c6e0:	4313      	orrs	r3, r2
 800c6e2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	68fa      	ldr	r2, [r7, #12]
 800c6e8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c6f0:	2300      	movs	r3, #0
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3714      	adds	r7, #20
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr
 800c6fe:	bf00      	nop
 800c700:	ffff8000 	.word	0xffff8000

0800c704 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c704:	b480      	push	{r7}
 800c706:	b087      	sub	sp, #28
 800c708:	af00      	add	r7, sp, #0
 800c70a:	60f8      	str	r0, [r7, #12]
 800c70c:	60b9      	str	r1, [r7, #8]
 800c70e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c710:	2300      	movs	r3, #0
 800c712:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c714:	2300      	movs	r3, #0
 800c716:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d02e      	beq.n	800c77c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c724:	697b      	ldr	r3, [r7, #20]
 800c726:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c72a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	3b01      	subs	r3, #1
 800c738:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c73a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	3b01      	subs	r3, #1
 800c742:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c744:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	3b01      	subs	r3, #1
 800c74c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c74e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	691b      	ldr	r3, [r3, #16]
 800c754:	3b01      	subs	r3, #1
 800c756:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c758:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	695b      	ldr	r3, [r3, #20]
 800c75e:	3b01      	subs	r3, #1
 800c760:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c762:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	699b      	ldr	r3, [r3, #24]
 800c768:	3b01      	subs	r3, #1
 800c76a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c76c:	4313      	orrs	r3, r2
 800c76e:	697a      	ldr	r2, [r7, #20]
 800c770:	4313      	orrs	r3, r2
 800c772:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	697a      	ldr	r2, [r7, #20]
 800c778:	609a      	str	r2, [r3, #8]
 800c77a:	e039      	b.n	800c7f0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	689b      	ldr	r3, [r3, #8]
 800c780:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c782:	697a      	ldr	r2, [r7, #20]
 800c784:	4b1e      	ldr	r3, [pc, #120]	; (800c800 <FMC_SDRAM_Timing_Init+0xfc>)
 800c786:	4013      	ands	r3, r2
 800c788:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	68db      	ldr	r3, [r3, #12]
 800c78e:	3b01      	subs	r3, #1
 800c790:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c792:	68bb      	ldr	r3, [r7, #8]
 800c794:	695b      	ldr	r3, [r3, #20]
 800c796:	3b01      	subs	r3, #1
 800c798:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c79a:	4313      	orrs	r3, r2
 800c79c:	697a      	ldr	r2, [r7, #20]
 800c79e:	4313      	orrs	r3, r2
 800c7a0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	68db      	ldr	r3, [r3, #12]
 800c7a6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c7a8:	693b      	ldr	r3, [r7, #16]
 800c7aa:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c7ae:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	685b      	ldr	r3, [r3, #4]
 800c7ba:	3b01      	subs	r3, #1
 800c7bc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c7be:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	689b      	ldr	r3, [r3, #8]
 800c7c4:	3b01      	subs	r3, #1
 800c7c6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c7c8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	691b      	ldr	r3, [r3, #16]
 800c7ce:	3b01      	subs	r3, #1
 800c7d0:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c7d2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	699b      	ldr	r3, [r3, #24]
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	693a      	ldr	r2, [r7, #16]
 800c7e0:	4313      	orrs	r3, r2
 800c7e2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	697a      	ldr	r2, [r7, #20]
 800c7e8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	693a      	ldr	r2, [r7, #16]
 800c7ee:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c7f0:	2300      	movs	r3, #0
}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	371c      	adds	r7, #28
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fc:	4770      	bx	lr
 800c7fe:	bf00      	nop
 800c800:	ff0f0fff 	.word	0xff0f0fff

0800c804 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800c804:	b480      	push	{r7}
 800c806:	b085      	sub	sp, #20
 800c808:	af00      	add	r7, sp, #0
 800c80a:	60f8      	str	r0, [r7, #12]
 800c80c:	60b9      	str	r1, [r7, #8]
 800c80e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	691a      	ldr	r2, [r3, #16]
 800c814:	4b0c      	ldr	r3, [pc, #48]	; (800c848 <FMC_SDRAM_SendCommand+0x44>)
 800c816:	4013      	ands	r3, r2
 800c818:	68ba      	ldr	r2, [r7, #8]
 800c81a:	6811      	ldr	r1, [r2, #0]
 800c81c:	68ba      	ldr	r2, [r7, #8]
 800c81e:	6852      	ldr	r2, [r2, #4]
 800c820:	4311      	orrs	r1, r2
 800c822:	68ba      	ldr	r2, [r7, #8]
 800c824:	6892      	ldr	r2, [r2, #8]
 800c826:	3a01      	subs	r2, #1
 800c828:	0152      	lsls	r2, r2, #5
 800c82a:	4311      	orrs	r1, r2
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	68d2      	ldr	r2, [r2, #12]
 800c830:	0252      	lsls	r2, r2, #9
 800c832:	430a      	orrs	r2, r1
 800c834:	431a      	orrs	r2, r3
 800c836:	68fb      	ldr	r3, [r7, #12]
 800c838:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800c83a:	2300      	movs	r3, #0
}
 800c83c:	4618      	mov	r0, r3
 800c83e:	3714      	adds	r7, #20
 800c840:	46bd      	mov	sp, r7
 800c842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c846:	4770      	bx	lr
 800c848:	ffc00000 	.word	0xffc00000

0800c84c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
 800c854:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	695a      	ldr	r2, [r3, #20]
 800c85a:	683b      	ldr	r3, [r7, #0]
 800c85c:	005b      	lsls	r3, r3, #1
 800c85e:	431a      	orrs	r2, r3
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c864:	2300      	movs	r3, #0
}
 800c866:	4618      	mov	r0, r3
 800c868:	370c      	adds	r7, #12
 800c86a:	46bd      	mov	sp, r7
 800c86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c870:	4770      	bx	lr
	...

0800c874 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c874:	b084      	sub	sp, #16
 800c876:	b480      	push	{r7}
 800c878:	b085      	sub	sp, #20
 800c87a:	af00      	add	r7, sp, #0
 800c87c:	6078      	str	r0, [r7, #4]
 800c87e:	f107 001c 	add.w	r0, r7, #28
 800c882:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c88a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c88c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c88e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c892:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c894:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c896:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c89a:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c89e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c8a0:	68fa      	ldr	r2, [r7, #12]
 800c8a2:	4313      	orrs	r3, r2
 800c8a4:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	685a      	ldr	r2, [r3, #4]
 800c8aa:	4b07      	ldr	r3, [pc, #28]	; (800c8c8 <SDMMC_Init+0x54>)
 800c8ac:	4013      	ands	r3, r2
 800c8ae:	68fa      	ldr	r2, [r7, #12]
 800c8b0:	431a      	orrs	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c8b6:	2300      	movs	r3, #0
}
 800c8b8:	4618      	mov	r0, r3
 800c8ba:	3714      	adds	r7, #20
 800c8bc:	46bd      	mov	sp, r7
 800c8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c2:	b004      	add	sp, #16
 800c8c4:	4770      	bx	lr
 800c8c6:	bf00      	nop
 800c8c8:	ffff8100 	.word	0xffff8100

0800c8cc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c8cc:	b480      	push	{r7}
 800c8ce:	b083      	sub	sp, #12
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c8da:	4618      	mov	r0, r3
 800c8dc:	370c      	adds	r7, #12
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e4:	4770      	bx	lr

0800c8e6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800c8e6:	b480      	push	{r7}
 800c8e8:	b083      	sub	sp, #12
 800c8ea:	af00      	add	r7, sp, #0
 800c8ec:	6078      	str	r0, [r7, #4]
 800c8ee:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800c8f0:	683b      	ldr	r3, [r7, #0]
 800c8f2:	681a      	ldr	r2, [r3, #0]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c8fa:	2300      	movs	r3, #0
}
 800c8fc:	4618      	mov	r0, r3
 800c8fe:	370c      	adds	r7, #12
 800c900:	46bd      	mov	sp, r7
 800c902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c906:	4770      	bx	lr

0800c908 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c908:	b580      	push	{r7, lr}
 800c90a:	b082      	sub	sp, #8
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	2203      	movs	r2, #3
 800c914:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c916:	2002      	movs	r0, #2
 800c918:	f7f9 f96c 	bl	8005bf4 <HAL_Delay>
  
  return HAL_OK;
 800c91c:	2300      	movs	r3, #0
}
 800c91e:	4618      	mov	r0, r3
 800c920:	3708      	adds	r7, #8
 800c922:	46bd      	mov	sp, r7
 800c924:	bd80      	pop	{r7, pc}

0800c926 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c926:	b480      	push	{r7}
 800c928:	b083      	sub	sp, #12
 800c92a:	af00      	add	r7, sp, #0
 800c92c:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f003 0303 	and.w	r3, r3, #3
}
 800c936:	4618      	mov	r0, r3
 800c938:	370c      	adds	r7, #12
 800c93a:	46bd      	mov	sp, r7
 800c93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c940:	4770      	bx	lr
	...

0800c944 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c944:	b480      	push	{r7}
 800c946:	b085      	sub	sp, #20
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]
 800c94c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c94e:	2300      	movs	r3, #0
 800c950:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c95a:	683b      	ldr	r3, [r7, #0]
 800c95c:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c95e:	683b      	ldr	r3, [r7, #0]
 800c960:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c962:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c964:	683b      	ldr	r3, [r7, #0]
 800c966:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c968:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c96e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c970:	68fa      	ldr	r2, [r7, #12]
 800c972:	4313      	orrs	r3, r2
 800c974:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	68da      	ldr	r2, [r3, #12]
 800c97a:	4b06      	ldr	r3, [pc, #24]	; (800c994 <SDMMC_SendCommand+0x50>)
 800c97c:	4013      	ands	r3, r2
 800c97e:	68fa      	ldr	r2, [r7, #12]
 800c980:	431a      	orrs	r2, r3
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c986:	2300      	movs	r3, #0
}
 800c988:	4618      	mov	r0, r3
 800c98a:	3714      	adds	r7, #20
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr
 800c994:	fffff000 	.word	0xfffff000

0800c998 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c998:	b480      	push	{r7}
 800c99a:	b083      	sub	sp, #12
 800c99c:	af00      	add	r7, sp, #0
 800c99e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	691b      	ldr	r3, [r3, #16]
 800c9a4:	b2db      	uxtb	r3, r3
}
 800c9a6:	4618      	mov	r0, r3
 800c9a8:	370c      	adds	r7, #12
 800c9aa:	46bd      	mov	sp, r7
 800c9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b0:	4770      	bx	lr

0800c9b2 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c9b2:	b480      	push	{r7}
 800c9b4:	b085      	sub	sp, #20
 800c9b6:	af00      	add	r7, sp, #0
 800c9b8:	6078      	str	r0, [r7, #4]
 800c9ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	3314      	adds	r3, #20
 800c9c0:	461a      	mov	r2, r3
 800c9c2:	683b      	ldr	r3, [r7, #0]
 800c9c4:	4413      	add	r3, r2
 800c9c6:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	681b      	ldr	r3, [r3, #0]
}  
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b085      	sub	sp, #20
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	681a      	ldr	r2, [r3, #0]
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c9ee:	683b      	ldr	r3, [r7, #0]
 800c9f0:	685a      	ldr	r2, [r3, #4]
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c9f6:	683b      	ldr	r3, [r7, #0]
 800c9f8:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c9fe:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ca00:	683b      	ldr	r3, [r7, #0]
 800ca02:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ca04:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ca06:	683b      	ldr	r3, [r7, #0]
 800ca08:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ca0a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ca0c:	68fa      	ldr	r2, [r7, #12]
 800ca0e:	4313      	orrs	r3, r2
 800ca10:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca16:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	431a      	orrs	r2, r3
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ca22:	2300      	movs	r3, #0

}
 800ca24:	4618      	mov	r0, r3
 800ca26:	3714      	adds	r7, #20
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b088      	sub	sp, #32
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
 800ca38:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ca3a:	683b      	ldr	r3, [r7, #0]
 800ca3c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ca3e:	2310      	movs	r3, #16
 800ca40:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca42:	2340      	movs	r3, #64	; 0x40
 800ca44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca46:	2300      	movs	r3, #0
 800ca48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca50:	f107 0308 	add.w	r3, r7, #8
 800ca54:	4619      	mov	r1, r3
 800ca56:	6878      	ldr	r0, [r7, #4]
 800ca58:	f7ff ff74 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ca5c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca60:	2110      	movs	r1, #16
 800ca62:	6878      	ldr	r0, [r7, #4]
 800ca64:	f000 fa46 	bl	800cef4 <SDMMC_GetCmdResp1>
 800ca68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca6a:	69fb      	ldr	r3, [r7, #28]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3720      	adds	r7, #32
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}

0800ca74 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b088      	sub	sp, #32
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
 800ca7c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ca82:	2311      	movs	r3, #17
 800ca84:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca86:	2340      	movs	r3, #64	; 0x40
 800ca88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca94:	f107 0308 	add.w	r3, r7, #8
 800ca98:	4619      	mov	r1, r3
 800ca9a:	6878      	ldr	r0, [r7, #4]
 800ca9c:	f7ff ff52 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800caa0:	f241 3288 	movw	r2, #5000	; 0x1388
 800caa4:	2111      	movs	r1, #17
 800caa6:	6878      	ldr	r0, [r7, #4]
 800caa8:	f000 fa24 	bl	800cef4 <SDMMC_GetCmdResp1>
 800caac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800caae:	69fb      	ldr	r3, [r7, #28]
}
 800cab0:	4618      	mov	r0, r3
 800cab2:	3720      	adds	r7, #32
 800cab4:	46bd      	mov	sp, r7
 800cab6:	bd80      	pop	{r7, pc}

0800cab8 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b088      	sub	sp, #32
 800cabc:	af00      	add	r7, sp, #0
 800cabe:	6078      	str	r0, [r7, #4]
 800cac0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800cac6:	2312      	movs	r3, #18
 800cac8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800caca:	2340      	movs	r3, #64	; 0x40
 800cacc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cace:	2300      	movs	r3, #0
 800cad0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cad2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cad6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cad8:	f107 0308 	add.w	r3, r7, #8
 800cadc:	4619      	mov	r1, r3
 800cade:	6878      	ldr	r0, [r7, #4]
 800cae0:	f7ff ff30 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cae4:	f241 3288 	movw	r2, #5000	; 0x1388
 800cae8:	2112      	movs	r1, #18
 800caea:	6878      	ldr	r0, [r7, #4]
 800caec:	f000 fa02 	bl	800cef4 <SDMMC_GetCmdResp1>
 800caf0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800caf2:	69fb      	ldr	r3, [r7, #28]
}
 800caf4:	4618      	mov	r0, r3
 800caf6:	3720      	adds	r7, #32
 800caf8:	46bd      	mov	sp, r7
 800cafa:	bd80      	pop	{r7, pc}

0800cafc <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cafc:	b580      	push	{r7, lr}
 800cafe:	b088      	sub	sp, #32
 800cb00:	af00      	add	r7, sp, #0
 800cb02:	6078      	str	r0, [r7, #4]
 800cb04:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800cb0a:	2318      	movs	r3, #24
 800cb0c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb0e:	2340      	movs	r3, #64	; 0x40
 800cb10:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb12:	2300      	movs	r3, #0
 800cb14:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb1a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb1c:	f107 0308 	add.w	r3, r7, #8
 800cb20:	4619      	mov	r1, r3
 800cb22:	6878      	ldr	r0, [r7, #4]
 800cb24:	f7ff ff0e 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800cb28:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb2c:	2118      	movs	r1, #24
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 f9e0 	bl	800cef4 <SDMMC_GetCmdResp1>
 800cb34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb36:	69fb      	ldr	r3, [r7, #28]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3720      	adds	r7, #32
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}

0800cb40 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b088      	sub	sp, #32
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	6078      	str	r0, [r7, #4]
 800cb48:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cb4a:	683b      	ldr	r3, [r7, #0]
 800cb4c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800cb4e:	2319      	movs	r3, #25
 800cb50:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb52:	2340      	movs	r3, #64	; 0x40
 800cb54:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb56:	2300      	movs	r3, #0
 800cb58:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb5a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb5e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb60:	f107 0308 	add.w	r3, r7, #8
 800cb64:	4619      	mov	r1, r3
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f7ff feec 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cb6c:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb70:	2119      	movs	r1, #25
 800cb72:	6878      	ldr	r0, [r7, #4]
 800cb74:	f000 f9be 	bl	800cef4 <SDMMC_GetCmdResp1>
 800cb78:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb7a:	69fb      	ldr	r3, [r7, #28]
}
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	3720      	adds	r7, #32
 800cb80:	46bd      	mov	sp, r7
 800cb82:	bd80      	pop	{r7, pc}

0800cb84 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b088      	sub	sp, #32
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cb90:	230c      	movs	r3, #12
 800cb92:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb94:	2340      	movs	r3, #64	; 0x40
 800cb96:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cba0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cba2:	f107 0308 	add.w	r3, r7, #8
 800cba6:	4619      	mov	r1, r3
 800cba8:	6878      	ldr	r0, [r7, #4]
 800cbaa:	f7ff fecb 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cbae:	4a05      	ldr	r2, [pc, #20]	; (800cbc4 <SDMMC_CmdStopTransfer+0x40>)
 800cbb0:	210c      	movs	r1, #12
 800cbb2:	6878      	ldr	r0, [r7, #4]
 800cbb4:	f000 f99e 	bl	800cef4 <SDMMC_GetCmdResp1>
 800cbb8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbba:	69fb      	ldr	r3, [r7, #28]
}
 800cbbc:	4618      	mov	r0, r3
 800cbbe:	3720      	adds	r7, #32
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}
 800cbc4:	05f5e100 	.word	0x05f5e100

0800cbc8 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	b08a      	sub	sp, #40	; 0x28
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	60f8      	str	r0, [r7, #12]
 800cbd0:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cbd8:	2307      	movs	r3, #7
 800cbda:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbdc:	2340      	movs	r3, #64	; 0x40
 800cbde:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbe0:	2300      	movs	r3, #0
 800cbe2:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbe8:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbea:	f107 0310 	add.w	r3, r7, #16
 800cbee:	4619      	mov	r1, r3
 800cbf0:	68f8      	ldr	r0, [r7, #12]
 800cbf2:	f7ff fea7 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cbf6:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbfa:	2107      	movs	r1, #7
 800cbfc:	68f8      	ldr	r0, [r7, #12]
 800cbfe:	f000 f979 	bl	800cef4 <SDMMC_GetCmdResp1>
 800cc02:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cc04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cc06:	4618      	mov	r0, r3
 800cc08:	3728      	adds	r7, #40	; 0x28
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	bd80      	pop	{r7, pc}

0800cc0e <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cc0e:	b580      	push	{r7, lr}
 800cc10:	b088      	sub	sp, #32
 800cc12:	af00      	add	r7, sp, #0
 800cc14:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cc16:	2300      	movs	r3, #0
 800cc18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc22:	2300      	movs	r3, #0
 800cc24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc2c:	f107 0308 	add.w	r3, r7, #8
 800cc30:	4619      	mov	r1, r3
 800cc32:	6878      	ldr	r0, [r7, #4]
 800cc34:	f7ff fe86 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cc38:	6878      	ldr	r0, [r7, #4]
 800cc3a:	f000 f92f 	bl	800ce9c <SDMMC_GetCmdError>
 800cc3e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc40:	69fb      	ldr	r3, [r7, #28]
}
 800cc42:	4618      	mov	r0, r3
 800cc44:	3720      	adds	r7, #32
 800cc46:	46bd      	mov	sp, r7
 800cc48:	bd80      	pop	{r7, pc}

0800cc4a <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cc4a:	b580      	push	{r7, lr}
 800cc4c:	b088      	sub	sp, #32
 800cc4e:	af00      	add	r7, sp, #0
 800cc50:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cc52:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cc56:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cc58:	2308      	movs	r3, #8
 800cc5a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc5c:	2340      	movs	r3, #64	; 0x40
 800cc5e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc60:	2300      	movs	r3, #0
 800cc62:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc68:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc6a:	f107 0308 	add.w	r3, r7, #8
 800cc6e:	4619      	mov	r1, r3
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7ff fe67 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f000 fb26 	bl	800d2c8 <SDMMC_GetCmdResp7>
 800cc7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc7e:	69fb      	ldr	r3, [r7, #28]
}
 800cc80:	4618      	mov	r0, r3
 800cc82:	3720      	adds	r7, #32
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}

0800cc88 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b088      	sub	sp, #32
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cc96:	2337      	movs	r3, #55	; 0x37
 800cc98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc9a:	2340      	movs	r3, #64	; 0x40
 800cc9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cca2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cca6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cca8:	f107 0308 	add.w	r3, r7, #8
 800ccac:	4619      	mov	r1, r3
 800ccae:	6878      	ldr	r0, [r7, #4]
 800ccb0:	f7ff fe48 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ccb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccb8:	2137      	movs	r1, #55	; 0x37
 800ccba:	6878      	ldr	r0, [r7, #4]
 800ccbc:	f000 f91a 	bl	800cef4 <SDMMC_GetCmdResp1>
 800ccc0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccc2:	69fb      	ldr	r3, [r7, #28]
}
 800ccc4:	4618      	mov	r0, r3
 800ccc6:	3720      	adds	r7, #32
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	bd80      	pop	{r7, pc}

0800cccc <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cccc:	b580      	push	{r7, lr}
 800ccce:	b088      	sub	sp, #32
 800ccd0:	af00      	add	r7, sp, #0
 800ccd2:	6078      	str	r0, [r7, #4]
 800ccd4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800ccd6:	683a      	ldr	r2, [r7, #0]
 800ccd8:	4b0d      	ldr	r3, [pc, #52]	; (800cd10 <SDMMC_CmdAppOperCommand+0x44>)
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800ccde:	2329      	movs	r3, #41	; 0x29
 800cce0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cce2:	2340      	movs	r3, #64	; 0x40
 800cce4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cce6:	2300      	movs	r3, #0
 800cce8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccf0:	f107 0308 	add.w	r3, r7, #8
 800ccf4:	4619      	mov	r1, r3
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f7ff fe24 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	f000 fa2f 	bl	800d160 <SDMMC_GetCmdResp3>
 800cd02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd04:	69fb      	ldr	r3, [r7, #28]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3720      	adds	r7, #32
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}
 800cd0e:	bf00      	nop
 800cd10:	80100000 	.word	0x80100000

0800cd14 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b088      	sub	sp, #32
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
 800cd1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cd22:	2306      	movs	r3, #6
 800cd24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd26:	2340      	movs	r3, #64	; 0x40
 800cd28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd34:	f107 0308 	add.w	r3, r7, #8
 800cd38:	4619      	mov	r1, r3
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7ff fe02 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800cd40:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd44:	2106      	movs	r1, #6
 800cd46:	6878      	ldr	r0, [r7, #4]
 800cd48:	f000 f8d4 	bl	800cef4 <SDMMC_GetCmdResp1>
 800cd4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd4e:	69fb      	ldr	r3, [r7, #28]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	3720      	adds	r7, #32
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bd80      	pop	{r7, pc}

0800cd58 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800cd58:	b580      	push	{r7, lr}
 800cd5a:	b088      	sub	sp, #32
 800cd5c:	af00      	add	r7, sp, #0
 800cd5e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800cd60:	2300      	movs	r3, #0
 800cd62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cd64:	2333      	movs	r3, #51	; 0x33
 800cd66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cd68:	2340      	movs	r3, #64	; 0x40
 800cd6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd6c:	2300      	movs	r3, #0
 800cd6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd76:	f107 0308 	add.w	r3, r7, #8
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff fde1 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800cd82:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd86:	2133      	movs	r1, #51	; 0x33
 800cd88:	6878      	ldr	r0, [r7, #4]
 800cd8a:	f000 f8b3 	bl	800cef4 <SDMMC_GetCmdResp1>
 800cd8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd90:	69fb      	ldr	r3, [r7, #28]
}
 800cd92:	4618      	mov	r0, r3
 800cd94:	3720      	adds	r7, #32
 800cd96:	46bd      	mov	sp, r7
 800cd98:	bd80      	pop	{r7, pc}

0800cd9a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cd9a:	b580      	push	{r7, lr}
 800cd9c:	b088      	sub	sp, #32
 800cd9e:	af00      	add	r7, sp, #0
 800cda0:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cda2:	2300      	movs	r3, #0
 800cda4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cda6:	2302      	movs	r3, #2
 800cda8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cdaa:	23c0      	movs	r3, #192	; 0xc0
 800cdac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdae:	2300      	movs	r3, #0
 800cdb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdb8:	f107 0308 	add.w	r3, r7, #8
 800cdbc:	4619      	mov	r1, r3
 800cdbe:	6878      	ldr	r0, [r7, #4]
 800cdc0:	f7ff fdc0 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cdc4:	6878      	ldr	r0, [r7, #4]
 800cdc6:	f000 f983 	bl	800d0d0 <SDMMC_GetCmdResp2>
 800cdca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdcc:	69fb      	ldr	r3, [r7, #28]
}
 800cdce:	4618      	mov	r0, r3
 800cdd0:	3720      	adds	r7, #32
 800cdd2:	46bd      	mov	sp, r7
 800cdd4:	bd80      	pop	{r7, pc}

0800cdd6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cdd6:	b580      	push	{r7, lr}
 800cdd8:	b088      	sub	sp, #32
 800cdda:	af00      	add	r7, sp, #0
 800cddc:	6078      	str	r0, [r7, #4]
 800cdde:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cde0:	683b      	ldr	r3, [r7, #0]
 800cde2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cde4:	2309      	movs	r3, #9
 800cde6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cde8:	23c0      	movs	r3, #192	; 0xc0
 800cdea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cdec:	2300      	movs	r3, #0
 800cdee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdf0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdf6:	f107 0308 	add.w	r3, r7, #8
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f7ff fda1 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 f964 	bl	800d0d0 <SDMMC_GetCmdResp2>
 800ce08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce0a:	69fb      	ldr	r3, [r7, #28]
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3720      	adds	r7, #32
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	b088      	sub	sp, #32
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800ce22:	2303      	movs	r3, #3
 800ce24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce26:	2340      	movs	r3, #64	; 0x40
 800ce28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce34:	f107 0308 	add.w	r3, r7, #8
 800ce38:	4619      	mov	r1, r3
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f7ff fd82 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ce40:	683a      	ldr	r2, [r7, #0]
 800ce42:	2103      	movs	r1, #3
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f000 f9c9 	bl	800d1dc <SDMMC_GetCmdResp6>
 800ce4a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce4c:	69fb      	ldr	r3, [r7, #28]
}
 800ce4e:	4618      	mov	r0, r3
 800ce50:	3720      	adds	r7, #32
 800ce52:	46bd      	mov	sp, r7
 800ce54:	bd80      	pop	{r7, pc}

0800ce56 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ce56:	b580      	push	{r7, lr}
 800ce58:	b088      	sub	sp, #32
 800ce5a:	af00      	add	r7, sp, #0
 800ce5c:	6078      	str	r0, [r7, #4]
 800ce5e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ce64:	230d      	movs	r3, #13
 800ce66:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ce68:	2340      	movs	r3, #64	; 0x40
 800ce6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ce70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ce74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ce76:	f107 0308 	add.w	r3, r7, #8
 800ce7a:	4619      	mov	r1, r3
 800ce7c:	6878      	ldr	r0, [r7, #4]
 800ce7e:	f7ff fd61 	bl	800c944 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ce82:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce86:	210d      	movs	r1, #13
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f000 f833 	bl	800cef4 <SDMMC_GetCmdResp1>
 800ce8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce90:	69fb      	ldr	r3, [r7, #28]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3720      	adds	r7, #32
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
	...

0800ce9c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b085      	sub	sp, #20
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800cea4:	4b11      	ldr	r3, [pc, #68]	; (800ceec <SDMMC_GetCmdError+0x50>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	4a11      	ldr	r2, [pc, #68]	; (800cef0 <SDMMC_GetCmdError+0x54>)
 800ceaa:	fba2 2303 	umull	r2, r3, r2, r3
 800ceae:	0a5b      	lsrs	r3, r3, #9
 800ceb0:	f241 3288 	movw	r2, #5000	; 0x1388
 800ceb4:	fb02 f303 	mul.w	r3, r2, r3
 800ceb8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	1e5a      	subs	r2, r3, #1
 800cebe:	60fa      	str	r2, [r7, #12]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d102      	bne.n	800ceca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cec4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cec8:	e009      	b.n	800cede <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d0f1      	beq.n	800ceba <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ced6:	687b      	ldr	r3, [r7, #4]
 800ced8:	22c5      	movs	r2, #197	; 0xc5
 800ceda:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800cedc:	2300      	movs	r3, #0
}
 800cede:	4618      	mov	r0, r3
 800cee0:	3714      	adds	r7, #20
 800cee2:	46bd      	mov	sp, r7
 800cee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cee8:	4770      	bx	lr
 800ceea:	bf00      	nop
 800ceec:	20000040 	.word	0x20000040
 800cef0:	10624dd3 	.word	0x10624dd3

0800cef4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b088      	sub	sp, #32
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	60f8      	str	r0, [r7, #12]
 800cefc:	460b      	mov	r3, r1
 800cefe:	607a      	str	r2, [r7, #4]
 800cf00:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800cf02:	4b70      	ldr	r3, [pc, #448]	; (800d0c4 <SDMMC_GetCmdResp1+0x1d0>)
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4a70      	ldr	r2, [pc, #448]	; (800d0c8 <SDMMC_GetCmdResp1+0x1d4>)
 800cf08:	fba2 2303 	umull	r2, r3, r2, r3
 800cf0c:	0a5a      	lsrs	r2, r3, #9
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	fb02 f303 	mul.w	r3, r2, r3
 800cf14:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800cf16:	69fb      	ldr	r3, [r7, #28]
 800cf18:	1e5a      	subs	r2, r3, #1
 800cf1a:	61fa      	str	r2, [r7, #28]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d102      	bne.n	800cf26 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800cf20:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cf24:	e0c9      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf2a:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf2c:	69bb      	ldr	r3, [r7, #24]
 800cf2e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d0ef      	beq.n	800cf16 <SDMMC_GetCmdResp1+0x22>
 800cf36:	69bb      	ldr	r3, [r7, #24]
 800cf38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d1ea      	bne.n	800cf16 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf44:	f003 0304 	and.w	r3, r3, #4
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d004      	beq.n	800cf56 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2204      	movs	r2, #4
 800cf50:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cf52:	2304      	movs	r3, #4
 800cf54:	e0b1      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800cf56:	68fb      	ldr	r3, [r7, #12]
 800cf58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf5a:	f003 0301 	and.w	r3, r3, #1
 800cf5e:	2b00      	cmp	r3, #0
 800cf60:	d004      	beq.n	800cf6c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cf62:	68fb      	ldr	r3, [r7, #12]
 800cf64:	2201      	movs	r2, #1
 800cf66:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf68:	2301      	movs	r3, #1
 800cf6a:	e0a6      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	22c5      	movs	r2, #197	; 0xc5
 800cf70:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f7ff fd10 	bl	800c998 <SDMMC_GetCommandResponse>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	461a      	mov	r2, r3
 800cf7c:	7afb      	ldrb	r3, [r7, #11]
 800cf7e:	4293      	cmp	r3, r2
 800cf80:	d001      	beq.n	800cf86 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cf82:	2301      	movs	r3, #1
 800cf84:	e099      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cf86:	2100      	movs	r1, #0
 800cf88:	68f8      	ldr	r0, [r7, #12]
 800cf8a:	f7ff fd12 	bl	800c9b2 <SDMMC_GetResponse>
 800cf8e:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cf90:	697a      	ldr	r2, [r7, #20]
 800cf92:	4b4e      	ldr	r3, [pc, #312]	; (800d0cc <SDMMC_GetCmdResp1+0x1d8>)
 800cf94:	4013      	ands	r3, r2
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d101      	bne.n	800cf9e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	e08d      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cf9e:	697b      	ldr	r3, [r7, #20]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	da02      	bge.n	800cfaa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cfa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cfa8:	e087      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cfaa:	697b      	ldr	r3, [r7, #20]
 800cfac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d001      	beq.n	800cfb8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cfb4:	2340      	movs	r3, #64	; 0x40
 800cfb6:	e080      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cfb8:	697b      	ldr	r3, [r7, #20]
 800cfba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d001      	beq.n	800cfc6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cfc2:	2380      	movs	r3, #128	; 0x80
 800cfc4:	e079      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cfc6:	697b      	ldr	r3, [r7, #20]
 800cfc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d002      	beq.n	800cfd6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cfd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cfd4:	e071      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d002      	beq.n	800cfe6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cfe0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cfe4:	e069      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cfe6:	697b      	ldr	r3, [r7, #20]
 800cfe8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d002      	beq.n	800cff6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cff4:	e061      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d002      	beq.n	800d006 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800d000:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d004:	e059      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800d006:	697b      	ldr	r3, [r7, #20]
 800d008:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d002      	beq.n	800d016 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d014:	e051      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d002      	beq.n	800d026 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d020:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d024:	e049      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800d026:	697b      	ldr	r3, [r7, #20]
 800d028:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d002      	beq.n	800d036 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800d030:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d034:	e041      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800d036:	697b      	ldr	r3, [r7, #20]
 800d038:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d002      	beq.n	800d046 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800d040:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d044:	e039      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800d046:	697b      	ldr	r3, [r7, #20]
 800d048:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d002      	beq.n	800d056 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800d050:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d054:	e031      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d002      	beq.n	800d066 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800d060:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800d064:	e029      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800d066:	697b      	ldr	r3, [r7, #20]
 800d068:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d002      	beq.n	800d076 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800d070:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d074:	e021      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800d076:	697b      	ldr	r3, [r7, #20]
 800d078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d002      	beq.n	800d086 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800d080:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d084:	e019      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d002      	beq.n	800d096 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d090:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d094:	e011      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d096:	697b      	ldr	r3, [r7, #20]
 800d098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d002      	beq.n	800d0a6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d0a0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d0a4:	e009      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	f003 0308 	and.w	r3, r3, #8
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d002      	beq.n	800d0b6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d0b0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d0b4:	e001      	b.n	800d0ba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d0b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	3720      	adds	r7, #32
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	20000040 	.word	0x20000040
 800d0c8:	10624dd3 	.word	0x10624dd3
 800d0cc:	fdffe008 	.word	0xfdffe008

0800d0d0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d0d0:	b480      	push	{r7}
 800d0d2:	b085      	sub	sp, #20
 800d0d4:	af00      	add	r7, sp, #0
 800d0d6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d0d8:	4b1f      	ldr	r3, [pc, #124]	; (800d158 <SDMMC_GetCmdResp2+0x88>)
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a1f      	ldr	r2, [pc, #124]	; (800d15c <SDMMC_GetCmdResp2+0x8c>)
 800d0de:	fba2 2303 	umull	r2, r3, r2, r3
 800d0e2:	0a5b      	lsrs	r3, r3, #9
 800d0e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0e8:	fb02 f303 	mul.w	r3, r2, r3
 800d0ec:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d0ee:	68fb      	ldr	r3, [r7, #12]
 800d0f0:	1e5a      	subs	r2, r3, #1
 800d0f2:	60fa      	str	r2, [r7, #12]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d102      	bne.n	800d0fe <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d0f8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d0fc:	e026      	b.n	800d14c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d102:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d104:	68bb      	ldr	r3, [r7, #8]
 800d106:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d0ef      	beq.n	800d0ee <SDMMC_GetCmdResp2+0x1e>
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d114:	2b00      	cmp	r3, #0
 800d116:	d1ea      	bne.n	800d0ee <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d118:	687b      	ldr	r3, [r7, #4]
 800d11a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d11c:	f003 0304 	and.w	r3, r3, #4
 800d120:	2b00      	cmp	r3, #0
 800d122:	d004      	beq.n	800d12e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	2204      	movs	r2, #4
 800d128:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d12a:	2304      	movs	r3, #4
 800d12c:	e00e      	b.n	800d14c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d132:	f003 0301 	and.w	r3, r3, #1
 800d136:	2b00      	cmp	r3, #0
 800d138:	d004      	beq.n	800d144 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2201      	movs	r2, #1
 800d13e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d140:	2301      	movs	r3, #1
 800d142:	e003      	b.n	800d14c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	22c5      	movs	r2, #197	; 0xc5
 800d148:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d14a:	2300      	movs	r3, #0
}
 800d14c:	4618      	mov	r0, r3
 800d14e:	3714      	adds	r7, #20
 800d150:	46bd      	mov	sp, r7
 800d152:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d156:	4770      	bx	lr
 800d158:	20000040 	.word	0x20000040
 800d15c:	10624dd3 	.word	0x10624dd3

0800d160 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d168:	4b1a      	ldr	r3, [pc, #104]	; (800d1d4 <SDMMC_GetCmdResp3+0x74>)
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	4a1a      	ldr	r2, [pc, #104]	; (800d1d8 <SDMMC_GetCmdResp3+0x78>)
 800d16e:	fba2 2303 	umull	r2, r3, r2, r3
 800d172:	0a5b      	lsrs	r3, r3, #9
 800d174:	f241 3288 	movw	r2, #5000	; 0x1388
 800d178:	fb02 f303 	mul.w	r3, r2, r3
 800d17c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	1e5a      	subs	r2, r3, #1
 800d182:	60fa      	str	r2, [r7, #12]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d102      	bne.n	800d18e <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d188:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d18c:	e01b      	b.n	800d1c6 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d192:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d194:	68bb      	ldr	r3, [r7, #8]
 800d196:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d0ef      	beq.n	800d17e <SDMMC_GetCmdResp3+0x1e>
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d1ea      	bne.n	800d17e <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1ac:	f003 0304 	and.w	r3, r3, #4
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d004      	beq.n	800d1be <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	2204      	movs	r2, #4
 800d1b8:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1ba:	2304      	movs	r3, #4
 800d1bc:	e003      	b.n	800d1c6 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	22c5      	movs	r2, #197	; 0xc5
 800d1c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d1c4:	2300      	movs	r3, #0
}
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	3714      	adds	r7, #20
 800d1ca:	46bd      	mov	sp, r7
 800d1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1d0:	4770      	bx	lr
 800d1d2:	bf00      	nop
 800d1d4:	20000040 	.word	0x20000040
 800d1d8:	10624dd3 	.word	0x10624dd3

0800d1dc <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b088      	sub	sp, #32
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	60f8      	str	r0, [r7, #12]
 800d1e4:	460b      	mov	r3, r1
 800d1e6:	607a      	str	r2, [r7, #4]
 800d1e8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d1ea:	4b35      	ldr	r3, [pc, #212]	; (800d2c0 <SDMMC_GetCmdResp6+0xe4>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	4a35      	ldr	r2, [pc, #212]	; (800d2c4 <SDMMC_GetCmdResp6+0xe8>)
 800d1f0:	fba2 2303 	umull	r2, r3, r2, r3
 800d1f4:	0a5b      	lsrs	r3, r3, #9
 800d1f6:	f241 3288 	movw	r2, #5000	; 0x1388
 800d1fa:	fb02 f303 	mul.w	r3, r2, r3
 800d1fe:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d200:	69fb      	ldr	r3, [r7, #28]
 800d202:	1e5a      	subs	r2, r3, #1
 800d204:	61fa      	str	r2, [r7, #28]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d102      	bne.n	800d210 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d20a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d20e:	e052      	b.n	800d2b6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d214:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d216:	69bb      	ldr	r3, [r7, #24]
 800d218:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d0ef      	beq.n	800d200 <SDMMC_GetCmdResp6+0x24>
 800d220:	69bb      	ldr	r3, [r7, #24]
 800d222:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d226:	2b00      	cmp	r3, #0
 800d228:	d1ea      	bne.n	800d200 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d22e:	f003 0304 	and.w	r3, r3, #4
 800d232:	2b00      	cmp	r3, #0
 800d234:	d004      	beq.n	800d240 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	2204      	movs	r2, #4
 800d23a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d23c:	2304      	movs	r3, #4
 800d23e:	e03a      	b.n	800d2b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d240:	68fb      	ldr	r3, [r7, #12]
 800d242:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d244:	f003 0301 	and.w	r3, r3, #1
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d004      	beq.n	800d256 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2201      	movs	r2, #1
 800d250:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d252:	2301      	movs	r3, #1
 800d254:	e02f      	b.n	800d2b6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d256:	68f8      	ldr	r0, [r7, #12]
 800d258:	f7ff fb9e 	bl	800c998 <SDMMC_GetCommandResponse>
 800d25c:	4603      	mov	r3, r0
 800d25e:	461a      	mov	r2, r3
 800d260:	7afb      	ldrb	r3, [r7, #11]
 800d262:	4293      	cmp	r3, r2
 800d264:	d001      	beq.n	800d26a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d266:	2301      	movs	r3, #1
 800d268:	e025      	b.n	800d2b6 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d26a:	68fb      	ldr	r3, [r7, #12]
 800d26c:	22c5      	movs	r2, #197	; 0xc5
 800d26e:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d270:	2100      	movs	r1, #0
 800d272:	68f8      	ldr	r0, [r7, #12]
 800d274:	f7ff fb9d 	bl	800c9b2 <SDMMC_GetResponse>
 800d278:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d27a:	697b      	ldr	r3, [r7, #20]
 800d27c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d280:	2b00      	cmp	r3, #0
 800d282:	d106      	bne.n	800d292 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	0c1b      	lsrs	r3, r3, #16
 800d288:	b29a      	uxth	r2, r3
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d28e:	2300      	movs	r3, #0
 800d290:	e011      	b.n	800d2b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d292:	697b      	ldr	r3, [r7, #20]
 800d294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d002      	beq.n	800d2a2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d29c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d2a0:	e009      	b.n	800d2b6 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d2a2:	697b      	ldr	r3, [r7, #20]
 800d2a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d002      	beq.n	800d2b2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d2ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d2b0:	e001      	b.n	800d2b6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d2b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d2b6:	4618      	mov	r0, r3
 800d2b8:	3720      	adds	r7, #32
 800d2ba:	46bd      	mov	sp, r7
 800d2bc:	bd80      	pop	{r7, pc}
 800d2be:	bf00      	nop
 800d2c0:	20000040 	.word	0x20000040
 800d2c4:	10624dd3 	.word	0x10624dd3

0800d2c8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d2c8:	b480      	push	{r7}
 800d2ca:	b085      	sub	sp, #20
 800d2cc:	af00      	add	r7, sp, #0
 800d2ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d2d0:	4b22      	ldr	r3, [pc, #136]	; (800d35c <SDMMC_GetCmdResp7+0x94>)
 800d2d2:	681b      	ldr	r3, [r3, #0]
 800d2d4:	4a22      	ldr	r2, [pc, #136]	; (800d360 <SDMMC_GetCmdResp7+0x98>)
 800d2d6:	fba2 2303 	umull	r2, r3, r2, r3
 800d2da:	0a5b      	lsrs	r3, r3, #9
 800d2dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800d2e0:	fb02 f303 	mul.w	r3, r2, r3
 800d2e4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d2e6:	68fb      	ldr	r3, [r7, #12]
 800d2e8:	1e5a      	subs	r2, r3, #1
 800d2ea:	60fa      	str	r2, [r7, #12]
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d102      	bne.n	800d2f6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d2f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d2f4:	e02c      	b.n	800d350 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d302:	2b00      	cmp	r3, #0
 800d304:	d0ef      	beq.n	800d2e6 <SDMMC_GetCmdResp7+0x1e>
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1ea      	bne.n	800d2e6 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d314:	f003 0304 	and.w	r3, r3, #4
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d004      	beq.n	800d326 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	2204      	movs	r2, #4
 800d320:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d322:	2304      	movs	r3, #4
 800d324:	e014      	b.n	800d350 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d32a:	f003 0301 	and.w	r3, r3, #1
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d004      	beq.n	800d33c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	2201      	movs	r2, #1
 800d336:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d338:	2301      	movs	r3, #1
 800d33a:	e009      	b.n	800d350 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d340:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d344:	2b00      	cmp	r3, #0
 800d346:	d002      	beq.n	800d34e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	2240      	movs	r2, #64	; 0x40
 800d34c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d34e:	2300      	movs	r3, #0
  
}
 800d350:	4618      	mov	r0, r3
 800d352:	3714      	adds	r7, #20
 800d354:	46bd      	mov	sp, r7
 800d356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35a:	4770      	bx	lr
 800d35c:	20000040 	.word	0x20000040
 800d360:	10624dd3 	.word	0x10624dd3

0800d364 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d364:	b580      	push	{r7, lr}
 800d366:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d368:	4904      	ldr	r1, [pc, #16]	; (800d37c <MX_FATFS_Init+0x18>)
 800d36a:	4805      	ldr	r0, [pc, #20]	; (800d380 <MX_FATFS_Init+0x1c>)
 800d36c:	f003 f900 	bl	8010570 <FATFS_LinkDriver>
 800d370:	4603      	mov	r3, r0
 800d372:	461a      	mov	r2, r3
 800d374:	4b03      	ldr	r3, [pc, #12]	; (800d384 <MX_FATFS_Init+0x20>)
 800d376:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d378:	bf00      	nop
 800d37a:	bd80      	pop	{r7, pc}
 800d37c:	200092d4 	.word	0x200092d4
 800d380:	08015e20 	.word	0x08015e20
 800d384:	200092d0 	.word	0x200092d0

0800d388 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d388:	b480      	push	{r7}
 800d38a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d38c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d38e:	4618      	mov	r0, r3
 800d390:	46bd      	mov	sp, r7
 800d392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d396:	4770      	bx	lr

0800d398 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d398:	b580      	push	{r7, lr}
 800d39a:	b082      	sub	sp, #8
 800d39c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d39e:	2300      	movs	r3, #0
 800d3a0:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d3a2:	f000 f896 	bl	800d4d2 <BSP_SD_IsDetected>
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	2b01      	cmp	r3, #1
 800d3aa:	d001      	beq.n	800d3b0 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d3ac:	2302      	movs	r3, #2
 800d3ae:	e012      	b.n	800d3d6 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d3b0:	480b      	ldr	r0, [pc, #44]	; (800d3e0 <BSP_SD_Init+0x48>)
 800d3b2:	f7fc feac 	bl	800a10e <HAL_SD_Init>
 800d3b6:	4603      	mov	r3, r0
 800d3b8:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d3ba:	79fb      	ldrb	r3, [r7, #7]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d109      	bne.n	800d3d4 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d3c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d3c4:	4806      	ldr	r0, [pc, #24]	; (800d3e0 <BSP_SD_Init+0x48>)
 800d3c6:	f7fd fc71 	bl	800acac <HAL_SD_ConfigWideBusOperation>
 800d3ca:	4603      	mov	r3, r0
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d001      	beq.n	800d3d4 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d3d0:	2301      	movs	r3, #1
 800d3d2:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d3d4:	79fb      	ldrb	r3, [r7, #7]
}
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	3708      	adds	r7, #8
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	20008a04 	.word	0x20008a04

0800d3e4 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d3e4:	b580      	push	{r7, lr}
 800d3e6:	b086      	sub	sp, #24
 800d3e8:	af00      	add	r7, sp, #0
 800d3ea:	60f8      	str	r0, [r7, #12]
 800d3ec:	60b9      	str	r1, [r7, #8]
 800d3ee:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	68ba      	ldr	r2, [r7, #8]
 800d3f8:	68f9      	ldr	r1, [r7, #12]
 800d3fa:	4806      	ldr	r0, [pc, #24]	; (800d414 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d3fc:	f7fc ff3e 	bl	800a27c <HAL_SD_ReadBlocks_DMA>
 800d400:	4603      	mov	r3, r0
 800d402:	2b00      	cmp	r3, #0
 800d404:	d001      	beq.n	800d40a <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d406:	2301      	movs	r3, #1
 800d408:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d40a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3718      	adds	r7, #24
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	20008a04 	.word	0x20008a04

0800d418 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b086      	sub	sp, #24
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	60f8      	str	r0, [r7, #12]
 800d420:	60b9      	str	r1, [r7, #8]
 800d422:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d424:	2300      	movs	r3, #0
 800d426:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	68ba      	ldr	r2, [r7, #8]
 800d42c:	68f9      	ldr	r1, [r7, #12]
 800d42e:	4806      	ldr	r0, [pc, #24]	; (800d448 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d430:	f7fd f806 	bl	800a440 <HAL_SD_WriteBlocks_DMA>
 800d434:	4603      	mov	r3, r0
 800d436:	2b00      	cmp	r3, #0
 800d438:	d001      	beq.n	800d43e <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d43a:	2301      	movs	r3, #1
 800d43c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d43e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d440:	4618      	mov	r0, r3
 800d442:	3718      	adds	r7, #24
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}
 800d448:	20008a04 	.word	0x20008a04

0800d44c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d450:	4805      	ldr	r0, [pc, #20]	; (800d468 <BSP_SD_GetCardState+0x1c>)
 800d452:	f7fd fcc5 	bl	800ade0 <HAL_SD_GetCardState>
 800d456:	4603      	mov	r3, r0
 800d458:	2b04      	cmp	r3, #4
 800d45a:	bf14      	ite	ne
 800d45c:	2301      	movne	r3, #1
 800d45e:	2300      	moveq	r3, #0
 800d460:	b2db      	uxtb	r3, r3
}
 800d462:	4618      	mov	r0, r3
 800d464:	bd80      	pop	{r7, pc}
 800d466:	bf00      	nop
 800d468:	20008a04 	.word	0x20008a04

0800d46c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b082      	sub	sp, #8
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d474:	6879      	ldr	r1, [r7, #4]
 800d476:	4803      	ldr	r0, [pc, #12]	; (800d484 <BSP_SD_GetCardInfo+0x18>)
 800d478:	f7fd fbec 	bl	800ac54 <HAL_SD_GetCardInfo>
}
 800d47c:	bf00      	nop
 800d47e:	3708      	adds	r7, #8
 800d480:	46bd      	mov	sp, r7
 800d482:	bd80      	pop	{r7, pc}
 800d484:	20008a04 	.word	0x20008a04

0800d488 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
 800d48e:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d490:	f000 f818 	bl	800d4c4 <BSP_SD_AbortCallback>
}
 800d494:	bf00      	nop
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}

0800d49c <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b082      	sub	sp, #8
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d4a4:	f000 f9c4 	bl	800d830 <BSP_SD_WriteCpltCallback>
}
 800d4a8:	bf00      	nop
 800d4aa:	3708      	adds	r7, #8
 800d4ac:	46bd      	mov	sp, r7
 800d4ae:	bd80      	pop	{r7, pc}

0800d4b0 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d4b0:	b580      	push	{r7, lr}
 800d4b2:	b082      	sub	sp, #8
 800d4b4:	af00      	add	r7, sp, #0
 800d4b6:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d4b8:	f000 f9c8 	bl	800d84c <BSP_SD_ReadCpltCallback>
}
 800d4bc:	bf00      	nop
 800d4be:	3708      	adds	r7, #8
 800d4c0:	46bd      	mov	sp, r7
 800d4c2:	bd80      	pop	{r7, pc}

0800d4c4 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d4c4:	b480      	push	{r7}
 800d4c6:	af00      	add	r7, sp, #0

}
 800d4c8:	bf00      	nop
 800d4ca:	46bd      	mov	sp, r7
 800d4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d0:	4770      	bx	lr

0800d4d2 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b082      	sub	sp, #8
 800d4d6:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d4d8:	2301      	movs	r3, #1
 800d4da:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d4dc:	f000 f80c 	bl	800d4f8 <BSP_PlatformIsDetected>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d101      	bne.n	800d4ea <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d4ea:	79fb      	ldrb	r3, [r7, #7]
 800d4ec:	b2db      	uxtb	r3, r3
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3708      	adds	r7, #8
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bd80      	pop	{r7, pc}
	...

0800d4f8 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d4f8:	b580      	push	{r7, lr}
 800d4fa:	b082      	sub	sp, #8
 800d4fc:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d4fe:	2301      	movs	r3, #1
 800d500:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d506:	4806      	ldr	r0, [pc, #24]	; (800d520 <BSP_PlatformIsDetected+0x28>)
 800d508:	f7f9 fdc2 	bl	8007090 <HAL_GPIO_ReadPin>
 800d50c:	4603      	mov	r3, r0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d001      	beq.n	800d516 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d512:	2300      	movs	r3, #0
 800d514:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d516:	79fb      	ldrb	r3, [r7, #7]
}
 800d518:	4618      	mov	r0, r3
 800d51a:	3708      	adds	r7, #8
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	40020800 	.word	0x40020800

0800d524 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d52c:	f003 f8b8 	bl	80106a0 <osKernelSysTick>
 800d530:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d532:	e006      	b.n	800d542 <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d534:	f7ff ff8a 	bl	800d44c <BSP_SD_GetCardState>
 800d538:	4603      	mov	r3, r0
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d101      	bne.n	800d542 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d53e:	2300      	movs	r3, #0
 800d540:	e009      	b.n	800d556 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d542:	f003 f8ad 	bl	80106a0 <osKernelSysTick>
 800d546:	4602      	mov	r2, r0
 800d548:	68fb      	ldr	r3, [r7, #12]
 800d54a:	1ad3      	subs	r3, r2, r3
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d8f0      	bhi.n	800d534 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d552:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d556:	4618      	mov	r0, r3
 800d558:	3710      	adds	r7, #16
 800d55a:	46bd      	mov	sp, r7
 800d55c:	bd80      	pop	{r7, pc}
	...

0800d560 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b082      	sub	sp, #8
 800d564:	af00      	add	r7, sp, #0
 800d566:	4603      	mov	r3, r0
 800d568:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d56a:	4b0b      	ldr	r3, [pc, #44]	; (800d598 <SD_CheckStatus+0x38>)
 800d56c:	2201      	movs	r2, #1
 800d56e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d570:	f7ff ff6c 	bl	800d44c <BSP_SD_GetCardState>
 800d574:	4603      	mov	r3, r0
 800d576:	2b00      	cmp	r3, #0
 800d578:	d107      	bne.n	800d58a <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d57a:	4b07      	ldr	r3, [pc, #28]	; (800d598 <SD_CheckStatus+0x38>)
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	b2db      	uxtb	r3, r3
 800d580:	f023 0301 	bic.w	r3, r3, #1
 800d584:	b2da      	uxtb	r2, r3
 800d586:	4b04      	ldr	r3, [pc, #16]	; (800d598 <SD_CheckStatus+0x38>)
 800d588:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d58a:	4b03      	ldr	r3, [pc, #12]	; (800d598 <SD_CheckStatus+0x38>)
 800d58c:	781b      	ldrb	r3, [r3, #0]
 800d58e:	b2db      	uxtb	r3, r3
}
 800d590:	4618      	mov	r0, r3
 800d592:	3708      	adds	r7, #8
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	2000007d 	.word	0x2000007d

0800d59c <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d59c:	b590      	push	{r4, r7, lr}
 800d59e:	b087      	sub	sp, #28
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	4603      	mov	r3, r0
 800d5a4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d5a6:	4b20      	ldr	r3, [pc, #128]	; (800d628 <SD_initialize+0x8c>)
 800d5a8:	2201      	movs	r2, #1
 800d5aa:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d5ac:	f003 f86c 	bl	8010688 <osKernelRunning>
 800d5b0:	4603      	mov	r3, r0
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d030      	beq.n	800d618 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d5b6:	f7ff feef 	bl	800d398 <BSP_SD_Init>
 800d5ba:	4603      	mov	r3, r0
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d107      	bne.n	800d5d0 <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d5c0:	79fb      	ldrb	r3, [r7, #7]
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7ff ffcc 	bl	800d560 <SD_CheckStatus>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	4b16      	ldr	r3, [pc, #88]	; (800d628 <SD_initialize+0x8c>)
 800d5ce:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d5d0:	4b15      	ldr	r3, [pc, #84]	; (800d628 <SD_initialize+0x8c>)
 800d5d2:	781b      	ldrb	r3, [r3, #0]
 800d5d4:	b2db      	uxtb	r3, r3
 800d5d6:	2b01      	cmp	r3, #1
 800d5d8:	d01e      	beq.n	800d618 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d5da:	4b14      	ldr	r3, [pc, #80]	; (800d62c <SD_initialize+0x90>)
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d10e      	bne.n	800d600 <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d5e2:	4b13      	ldr	r3, [pc, #76]	; (800d630 <SD_initialize+0x94>)
 800d5e4:	f107 0408 	add.w	r4, r7, #8
 800d5e8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d5ea:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d5ee:	f107 0308 	add.w	r3, r7, #8
 800d5f2:	2100      	movs	r1, #0
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	f003 f98c 	bl	8010912 <osMessageCreate>
 800d5fa:	4603      	mov	r3, r0
 800d5fc:	4a0b      	ldr	r2, [pc, #44]	; (800d62c <SD_initialize+0x90>)
 800d5fe:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d600:	4b0a      	ldr	r3, [pc, #40]	; (800d62c <SD_initialize+0x90>)
 800d602:	681b      	ldr	r3, [r3, #0]
 800d604:	2b00      	cmp	r3, #0
 800d606:	d107      	bne.n	800d618 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d608:	4b07      	ldr	r3, [pc, #28]	; (800d628 <SD_initialize+0x8c>)
 800d60a:	781b      	ldrb	r3, [r3, #0]
 800d60c:	b2db      	uxtb	r3, r3
 800d60e:	f043 0301 	orr.w	r3, r3, #1
 800d612:	b2da      	uxtb	r2, r3
 800d614:	4b04      	ldr	r3, [pc, #16]	; (800d628 <SD_initialize+0x8c>)
 800d616:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d618:	4b03      	ldr	r3, [pc, #12]	; (800d628 <SD_initialize+0x8c>)
 800d61a:	781b      	ldrb	r3, [r3, #0]
 800d61c:	b2db      	uxtb	r3, r3
}
 800d61e:	4618      	mov	r0, r3
 800d620:	371c      	adds	r7, #28
 800d622:	46bd      	mov	sp, r7
 800d624:	bd90      	pop	{r4, r7, pc}
 800d626:	bf00      	nop
 800d628:	2000007d 	.word	0x2000007d
 800d62c:	20000700 	.word	0x20000700
 800d630:	08013e78 	.word	0x08013e78

0800d634 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b082      	sub	sp, #8
 800d638:	af00      	add	r7, sp, #0
 800d63a:	4603      	mov	r3, r0
 800d63c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d63e:	79fb      	ldrb	r3, [r7, #7]
 800d640:	4618      	mov	r0, r3
 800d642:	f7ff ff8d 	bl	800d560 <SD_CheckStatus>
 800d646:	4603      	mov	r3, r0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b08a      	sub	sp, #40	; 0x28
 800d654:	af00      	add	r7, sp, #0
 800d656:	60b9      	str	r1, [r7, #8]
 800d658:	607a      	str	r2, [r7, #4]
 800d65a:	603b      	str	r3, [r7, #0]
 800d65c:	4603      	mov	r3, r0
 800d65e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d660:	2301      	movs	r3, #1
 800d662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d666:	f247 5030 	movw	r0, #30000	; 0x7530
 800d66a:	f7ff ff5b 	bl	800d524 <SD_CheckStatusWithTimeout>
 800d66e:	4603      	mov	r3, r0
 800d670:	2b00      	cmp	r3, #0
 800d672:	da02      	bge.n	800d67a <SD_read+0x2a>
  {
    return res;
 800d674:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d678:	e032      	b.n	800d6e0 <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d67a:	683a      	ldr	r2, [r7, #0]
 800d67c:	6879      	ldr	r1, [r7, #4]
 800d67e:	68b8      	ldr	r0, [r7, #8]
 800d680:	f7ff feb0 	bl	800d3e4 <BSP_SD_ReadBlocks_DMA>
 800d684:	4603      	mov	r3, r0
 800d686:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800d68a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d124      	bne.n	800d6dc <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d692:	4b15      	ldr	r3, [pc, #84]	; (800d6e8 <SD_read+0x98>)
 800d694:	6819      	ldr	r1, [r3, #0]
 800d696:	f107 0314 	add.w	r3, r7, #20
 800d69a:	f247 5230 	movw	r2, #30000	; 0x7530
 800d69e:	4618      	mov	r0, r3
 800d6a0:	f003 f9a0 	bl	80109e4 <osMessageGet>

    if (event.status == osEventMessage)
 800d6a4:	697b      	ldr	r3, [r7, #20]
 800d6a6:	2b10      	cmp	r3, #16
 800d6a8:	d118      	bne.n	800d6dc <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d6aa:	69bb      	ldr	r3, [r7, #24]
 800d6ac:	2b01      	cmp	r3, #1
 800d6ae:	d115      	bne.n	800d6dc <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d6b0:	f002 fff6 	bl	80106a0 <osKernelSysTick>
 800d6b4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d6b6:	e008      	b.n	800d6ca <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d6b8:	f7ff fec8 	bl	800d44c <BSP_SD_GetCardState>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d103      	bne.n	800d6ca <SD_read+0x7a>
              {
                res = RES_OK;
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d6c8:	e008      	b.n	800d6dc <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d6ca:	f002 ffe9 	bl	80106a0 <osKernelSysTick>
 800d6ce:	4602      	mov	r2, r0
 800d6d0:	6a3b      	ldr	r3, [r7, #32]
 800d6d2:	1ad3      	subs	r3, r2, r3
 800d6d4:	f247 522f 	movw	r2, #29999	; 0x752f
 800d6d8:	4293      	cmp	r3, r2
 800d6da:	d9ed      	bls.n	800d6b8 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d6dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	3728      	adds	r7, #40	; 0x28
 800d6e4:	46bd      	mov	sp, r7
 800d6e6:	bd80      	pop	{r7, pc}
 800d6e8:	20000700 	.word	0x20000700

0800d6ec <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b08a      	sub	sp, #40	; 0x28
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60b9      	str	r1, [r7, #8]
 800d6f4:	607a      	str	r2, [r7, #4]
 800d6f6:	603b      	str	r3, [r7, #0]
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d702:	f247 5030 	movw	r0, #30000	; 0x7530
 800d706:	f7ff ff0d 	bl	800d524 <SD_CheckStatusWithTimeout>
 800d70a:	4603      	mov	r3, r0
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	da02      	bge.n	800d716 <SD_write+0x2a>
  {
    return res;
 800d710:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d714:	e02e      	b.n	800d774 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d716:	683a      	ldr	r2, [r7, #0]
 800d718:	6879      	ldr	r1, [r7, #4]
 800d71a:	68b8      	ldr	r0, [r7, #8]
 800d71c:	f7ff fe7c 	bl	800d418 <BSP_SD_WriteBlocks_DMA>
 800d720:	4603      	mov	r3, r0
 800d722:	2b00      	cmp	r3, #0
 800d724:	d124      	bne.n	800d770 <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d726:	4b15      	ldr	r3, [pc, #84]	; (800d77c <SD_write+0x90>)
 800d728:	6819      	ldr	r1, [r3, #0]
 800d72a:	f107 0314 	add.w	r3, r7, #20
 800d72e:	f247 5230 	movw	r2, #30000	; 0x7530
 800d732:	4618      	mov	r0, r3
 800d734:	f003 f956 	bl	80109e4 <osMessageGet>

    if (event.status == osEventMessage)
 800d738:	697b      	ldr	r3, [r7, #20]
 800d73a:	2b10      	cmp	r3, #16
 800d73c:	d118      	bne.n	800d770 <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d73e:	69bb      	ldr	r3, [r7, #24]
 800d740:	2b02      	cmp	r3, #2
 800d742:	d115      	bne.n	800d770 <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d744:	f002 ffac 	bl	80106a0 <osKernelSysTick>
 800d748:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d74a:	e008      	b.n	800d75e <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d74c:	f7ff fe7e 	bl	800d44c <BSP_SD_GetCardState>
 800d750:	4603      	mov	r3, r0
 800d752:	2b00      	cmp	r3, #0
 800d754:	d103      	bne.n	800d75e <SD_write+0x72>
          {
            res = RES_OK;
 800d756:	2300      	movs	r3, #0
 800d758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d75c:	e008      	b.n	800d770 <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d75e:	f002 ff9f 	bl	80106a0 <osKernelSysTick>
 800d762:	4602      	mov	r2, r0
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	1ad3      	subs	r3, r2, r3
 800d768:	f247 522f 	movw	r2, #29999	; 0x752f
 800d76c:	4293      	cmp	r3, r2
 800d76e:	d9ed      	bls.n	800d74c <SD_write+0x60>
    }

  }
#endif

  return res;
 800d770:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d774:	4618      	mov	r0, r3
 800d776:	3728      	adds	r7, #40	; 0x28
 800d778:	46bd      	mov	sp, r7
 800d77a:	bd80      	pop	{r7, pc}
 800d77c:	20000700 	.word	0x20000700

0800d780 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d780:	b580      	push	{r7, lr}
 800d782:	b08c      	sub	sp, #48	; 0x30
 800d784:	af00      	add	r7, sp, #0
 800d786:	4603      	mov	r3, r0
 800d788:	603a      	str	r2, [r7, #0]
 800d78a:	71fb      	strb	r3, [r7, #7]
 800d78c:	460b      	mov	r3, r1
 800d78e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d790:	2301      	movs	r3, #1
 800d792:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d796:	4b25      	ldr	r3, [pc, #148]	; (800d82c <SD_ioctl+0xac>)
 800d798:	781b      	ldrb	r3, [r3, #0]
 800d79a:	b2db      	uxtb	r3, r3
 800d79c:	f003 0301 	and.w	r3, r3, #1
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d001      	beq.n	800d7a8 <SD_ioctl+0x28>
 800d7a4:	2303      	movs	r3, #3
 800d7a6:	e03c      	b.n	800d822 <SD_ioctl+0xa2>

  switch (cmd)
 800d7a8:	79bb      	ldrb	r3, [r7, #6]
 800d7aa:	2b03      	cmp	r3, #3
 800d7ac:	d834      	bhi.n	800d818 <SD_ioctl+0x98>
 800d7ae:	a201      	add	r2, pc, #4	; (adr r2, 800d7b4 <SD_ioctl+0x34>)
 800d7b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7b4:	0800d7c5 	.word	0x0800d7c5
 800d7b8:	0800d7cd 	.word	0x0800d7cd
 800d7bc:	0800d7e5 	.word	0x0800d7e5
 800d7c0:	0800d7ff 	.word	0x0800d7ff
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d7ca:	e028      	b.n	800d81e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d7cc:	f107 030c 	add.w	r3, r7, #12
 800d7d0:	4618      	mov	r0, r3
 800d7d2:	f7ff fe4b 	bl	800d46c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d7d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d7d8:	683b      	ldr	r3, [r7, #0]
 800d7da:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d7dc:	2300      	movs	r3, #0
 800d7de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d7e2:	e01c      	b.n	800d81e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d7e4:	f107 030c 	add.w	r3, r7, #12
 800d7e8:	4618      	mov	r0, r3
 800d7ea:	f7ff fe3f 	bl	800d46c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d7ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7f0:	b29a      	uxth	r2, r3
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d7fc:	e00f      	b.n	800d81e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d7fe:	f107 030c 	add.w	r3, r7, #12
 800d802:	4618      	mov	r0, r3
 800d804:	f7ff fe32 	bl	800d46c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d80a:	0a5a      	lsrs	r2, r3, #9
 800d80c:	683b      	ldr	r3, [r7, #0]
 800d80e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d810:	2300      	movs	r3, #0
 800d812:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d816:	e002      	b.n	800d81e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d818:	2304      	movs	r3, #4
 800d81a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d81e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d822:	4618      	mov	r0, r3
 800d824:	3730      	adds	r7, #48	; 0x30
 800d826:	46bd      	mov	sp, r7
 800d828:	bd80      	pop	{r7, pc}
 800d82a:	bf00      	nop
 800d82c:	2000007d 	.word	0x2000007d

0800d830 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d830:	b580      	push	{r7, lr}
 800d832:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800d834:	4b04      	ldr	r3, [pc, #16]	; (800d848 <BSP_SD_WriteCpltCallback+0x18>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	2200      	movs	r2, #0
 800d83a:	2102      	movs	r1, #2
 800d83c:	4618      	mov	r0, r3
 800d83e:	f003 f891 	bl	8010964 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d842:	bf00      	nop
 800d844:	bd80      	pop	{r7, pc}
 800d846:	bf00      	nop
 800d848:	20000700 	.word	0x20000700

0800d84c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d850:	4b04      	ldr	r3, [pc, #16]	; (800d864 <BSP_SD_ReadCpltCallback+0x18>)
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2200      	movs	r2, #0
 800d856:	2101      	movs	r1, #1
 800d858:	4618      	mov	r0, r3
 800d85a:	f003 f883 	bl	8010964 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d85e:	bf00      	nop
 800d860:	bd80      	pop	{r7, pc}
 800d862:	bf00      	nop
 800d864:	20000700 	.word	0x20000700

0800d868 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d868:	b580      	push	{r7, lr}
 800d86a:	b084      	sub	sp, #16
 800d86c:	af00      	add	r7, sp, #0
 800d86e:	4603      	mov	r3, r0
 800d870:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d872:	79fb      	ldrb	r3, [r7, #7]
 800d874:	4a08      	ldr	r2, [pc, #32]	; (800d898 <disk_status+0x30>)
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	4413      	add	r3, r2
 800d87a:	685b      	ldr	r3, [r3, #4]
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	79fa      	ldrb	r2, [r7, #7]
 800d880:	4905      	ldr	r1, [pc, #20]	; (800d898 <disk_status+0x30>)
 800d882:	440a      	add	r2, r1
 800d884:	7a12      	ldrb	r2, [r2, #8]
 800d886:	4610      	mov	r0, r2
 800d888:	4798      	blx	r3
 800d88a:	4603      	mov	r3, r0
 800d88c:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d88e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	2000072c 	.word	0x2000072c

0800d89c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b084      	sub	sp, #16
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d8aa:	79fb      	ldrb	r3, [r7, #7]
 800d8ac:	4a0d      	ldr	r2, [pc, #52]	; (800d8e4 <disk_initialize+0x48>)
 800d8ae:	5cd3      	ldrb	r3, [r2, r3]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d111      	bne.n	800d8d8 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d8b4:	79fb      	ldrb	r3, [r7, #7]
 800d8b6:	4a0b      	ldr	r2, [pc, #44]	; (800d8e4 <disk_initialize+0x48>)
 800d8b8:	2101      	movs	r1, #1
 800d8ba:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d8bc:	79fb      	ldrb	r3, [r7, #7]
 800d8be:	4a09      	ldr	r2, [pc, #36]	; (800d8e4 <disk_initialize+0x48>)
 800d8c0:	009b      	lsls	r3, r3, #2
 800d8c2:	4413      	add	r3, r2
 800d8c4:	685b      	ldr	r3, [r3, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	79fa      	ldrb	r2, [r7, #7]
 800d8ca:	4906      	ldr	r1, [pc, #24]	; (800d8e4 <disk_initialize+0x48>)
 800d8cc:	440a      	add	r2, r1
 800d8ce:	7a12      	ldrb	r2, [r2, #8]
 800d8d0:	4610      	mov	r0, r2
 800d8d2:	4798      	blx	r3
 800d8d4:	4603      	mov	r3, r0
 800d8d6:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d8d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8da:	4618      	mov	r0, r3
 800d8dc:	3710      	adds	r7, #16
 800d8de:	46bd      	mov	sp, r7
 800d8e0:	bd80      	pop	{r7, pc}
 800d8e2:	bf00      	nop
 800d8e4:	2000072c 	.word	0x2000072c

0800d8e8 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d8e8:	b590      	push	{r4, r7, lr}
 800d8ea:	b087      	sub	sp, #28
 800d8ec:	af00      	add	r7, sp, #0
 800d8ee:	60b9      	str	r1, [r7, #8]
 800d8f0:	607a      	str	r2, [r7, #4]
 800d8f2:	603b      	str	r3, [r7, #0]
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d8f8:	7bfb      	ldrb	r3, [r7, #15]
 800d8fa:	4a0a      	ldr	r2, [pc, #40]	; (800d924 <disk_read+0x3c>)
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	4413      	add	r3, r2
 800d900:	685b      	ldr	r3, [r3, #4]
 800d902:	689c      	ldr	r4, [r3, #8]
 800d904:	7bfb      	ldrb	r3, [r7, #15]
 800d906:	4a07      	ldr	r2, [pc, #28]	; (800d924 <disk_read+0x3c>)
 800d908:	4413      	add	r3, r2
 800d90a:	7a18      	ldrb	r0, [r3, #8]
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	687a      	ldr	r2, [r7, #4]
 800d910:	68b9      	ldr	r1, [r7, #8]
 800d912:	47a0      	blx	r4
 800d914:	4603      	mov	r3, r0
 800d916:	75fb      	strb	r3, [r7, #23]
  return res;
 800d918:	7dfb      	ldrb	r3, [r7, #23]
}
 800d91a:	4618      	mov	r0, r3
 800d91c:	371c      	adds	r7, #28
 800d91e:	46bd      	mov	sp, r7
 800d920:	bd90      	pop	{r4, r7, pc}
 800d922:	bf00      	nop
 800d924:	2000072c 	.word	0x2000072c

0800d928 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d928:	b590      	push	{r4, r7, lr}
 800d92a:	b087      	sub	sp, #28
 800d92c:	af00      	add	r7, sp, #0
 800d92e:	60b9      	str	r1, [r7, #8]
 800d930:	607a      	str	r2, [r7, #4]
 800d932:	603b      	str	r3, [r7, #0]
 800d934:	4603      	mov	r3, r0
 800d936:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d938:	7bfb      	ldrb	r3, [r7, #15]
 800d93a:	4a0a      	ldr	r2, [pc, #40]	; (800d964 <disk_write+0x3c>)
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	4413      	add	r3, r2
 800d940:	685b      	ldr	r3, [r3, #4]
 800d942:	68dc      	ldr	r4, [r3, #12]
 800d944:	7bfb      	ldrb	r3, [r7, #15]
 800d946:	4a07      	ldr	r2, [pc, #28]	; (800d964 <disk_write+0x3c>)
 800d948:	4413      	add	r3, r2
 800d94a:	7a18      	ldrb	r0, [r3, #8]
 800d94c:	683b      	ldr	r3, [r7, #0]
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	68b9      	ldr	r1, [r7, #8]
 800d952:	47a0      	blx	r4
 800d954:	4603      	mov	r3, r0
 800d956:	75fb      	strb	r3, [r7, #23]
  return res;
 800d958:	7dfb      	ldrb	r3, [r7, #23]
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	371c      	adds	r7, #28
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd90      	pop	{r4, r7, pc}
 800d962:	bf00      	nop
 800d964:	2000072c 	.word	0x2000072c

0800d968 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	4603      	mov	r3, r0
 800d970:	603a      	str	r2, [r7, #0]
 800d972:	71fb      	strb	r3, [r7, #7]
 800d974:	460b      	mov	r3, r1
 800d976:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d978:	79fb      	ldrb	r3, [r7, #7]
 800d97a:	4a09      	ldr	r2, [pc, #36]	; (800d9a0 <disk_ioctl+0x38>)
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	4413      	add	r3, r2
 800d980:	685b      	ldr	r3, [r3, #4]
 800d982:	691b      	ldr	r3, [r3, #16]
 800d984:	79fa      	ldrb	r2, [r7, #7]
 800d986:	4906      	ldr	r1, [pc, #24]	; (800d9a0 <disk_ioctl+0x38>)
 800d988:	440a      	add	r2, r1
 800d98a:	7a10      	ldrb	r0, [r2, #8]
 800d98c:	79b9      	ldrb	r1, [r7, #6]
 800d98e:	683a      	ldr	r2, [r7, #0]
 800d990:	4798      	blx	r3
 800d992:	4603      	mov	r3, r0
 800d994:	73fb      	strb	r3, [r7, #15]
  return res;
 800d996:	7bfb      	ldrb	r3, [r7, #15]
}
 800d998:	4618      	mov	r0, r3
 800d99a:	3710      	adds	r7, #16
 800d99c:	46bd      	mov	sp, r7
 800d99e:	bd80      	pop	{r7, pc}
 800d9a0:	2000072c 	.word	0x2000072c

0800d9a4 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d9a4:	b480      	push	{r7}
 800d9a6:	b085      	sub	sp, #20
 800d9a8:	af00      	add	r7, sp, #0
 800d9aa:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	3301      	adds	r3, #1
 800d9b0:	781b      	ldrb	r3, [r3, #0]
 800d9b2:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d9b4:	89fb      	ldrh	r3, [r7, #14]
 800d9b6:	021b      	lsls	r3, r3, #8
 800d9b8:	b21a      	sxth	r2, r3
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	781b      	ldrb	r3, [r3, #0]
 800d9be:	b21b      	sxth	r3, r3
 800d9c0:	4313      	orrs	r3, r2
 800d9c2:	b21b      	sxth	r3, r3
 800d9c4:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d9c6:	89fb      	ldrh	r3, [r7, #14]
}
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	3714      	adds	r7, #20
 800d9cc:	46bd      	mov	sp, r7
 800d9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9d2:	4770      	bx	lr

0800d9d4 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d9d4:	b480      	push	{r7}
 800d9d6:	b085      	sub	sp, #20
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	3303      	adds	r3, #3
 800d9e0:	781b      	ldrb	r3, [r3, #0]
 800d9e2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	021b      	lsls	r3, r3, #8
 800d9e8:	687a      	ldr	r2, [r7, #4]
 800d9ea:	3202      	adds	r2, #2
 800d9ec:	7812      	ldrb	r2, [r2, #0]
 800d9ee:	4313      	orrs	r3, r2
 800d9f0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	021b      	lsls	r3, r3, #8
 800d9f6:	687a      	ldr	r2, [r7, #4]
 800d9f8:	3201      	adds	r2, #1
 800d9fa:	7812      	ldrb	r2, [r2, #0]
 800d9fc:	4313      	orrs	r3, r2
 800d9fe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	021b      	lsls	r3, r3, #8
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	7812      	ldrb	r2, [r2, #0]
 800da08:	4313      	orrs	r3, r2
 800da0a:	60fb      	str	r3, [r7, #12]
	return rv;
 800da0c:	68fb      	ldr	r3, [r7, #12]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3714      	adds	r7, #20
 800da12:	46bd      	mov	sp, r7
 800da14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da18:	4770      	bx	lr

0800da1a <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800da1a:	b480      	push	{r7}
 800da1c:	b083      	sub	sp, #12
 800da1e:	af00      	add	r7, sp, #0
 800da20:	6078      	str	r0, [r7, #4]
 800da22:	460b      	mov	r3, r1
 800da24:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	1c5a      	adds	r2, r3, #1
 800da2a:	607a      	str	r2, [r7, #4]
 800da2c:	887a      	ldrh	r2, [r7, #2]
 800da2e:	b2d2      	uxtb	r2, r2
 800da30:	701a      	strb	r2, [r3, #0]
 800da32:	887b      	ldrh	r3, [r7, #2]
 800da34:	0a1b      	lsrs	r3, r3, #8
 800da36:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	1c5a      	adds	r2, r3, #1
 800da3c:	607a      	str	r2, [r7, #4]
 800da3e:	887a      	ldrh	r2, [r7, #2]
 800da40:	b2d2      	uxtb	r2, r2
 800da42:	701a      	strb	r2, [r3, #0]
}
 800da44:	bf00      	nop
 800da46:	370c      	adds	r7, #12
 800da48:	46bd      	mov	sp, r7
 800da4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da4e:	4770      	bx	lr

0800da50 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800da50:	b480      	push	{r7}
 800da52:	b083      	sub	sp, #12
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	1c5a      	adds	r2, r3, #1
 800da5e:	607a      	str	r2, [r7, #4]
 800da60:	683a      	ldr	r2, [r7, #0]
 800da62:	b2d2      	uxtb	r2, r2
 800da64:	701a      	strb	r2, [r3, #0]
 800da66:	683b      	ldr	r3, [r7, #0]
 800da68:	0a1b      	lsrs	r3, r3, #8
 800da6a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	1c5a      	adds	r2, r3, #1
 800da70:	607a      	str	r2, [r7, #4]
 800da72:	683a      	ldr	r2, [r7, #0]
 800da74:	b2d2      	uxtb	r2, r2
 800da76:	701a      	strb	r2, [r3, #0]
 800da78:	683b      	ldr	r3, [r7, #0]
 800da7a:	0a1b      	lsrs	r3, r3, #8
 800da7c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	1c5a      	adds	r2, r3, #1
 800da82:	607a      	str	r2, [r7, #4]
 800da84:	683a      	ldr	r2, [r7, #0]
 800da86:	b2d2      	uxtb	r2, r2
 800da88:	701a      	strb	r2, [r3, #0]
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	0a1b      	lsrs	r3, r3, #8
 800da8e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	1c5a      	adds	r2, r3, #1
 800da94:	607a      	str	r2, [r7, #4]
 800da96:	683a      	ldr	r2, [r7, #0]
 800da98:	b2d2      	uxtb	r2, r2
 800da9a:	701a      	strb	r2, [r3, #0]
}
 800da9c:	bf00      	nop
 800da9e:	370c      	adds	r7, #12
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr

0800daa8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800daa8:	b480      	push	{r7}
 800daaa:	b087      	sub	sp, #28
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800dab8:	68bb      	ldr	r3, [r7, #8]
 800daba:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	2b00      	cmp	r3, #0
 800dac0:	d00d      	beq.n	800dade <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800dac2:	693a      	ldr	r2, [r7, #16]
 800dac4:	1c53      	adds	r3, r2, #1
 800dac6:	613b      	str	r3, [r7, #16]
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	1c59      	adds	r1, r3, #1
 800dacc:	6179      	str	r1, [r7, #20]
 800dace:	7812      	ldrb	r2, [r2, #0]
 800dad0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	3b01      	subs	r3, #1
 800dad6:	607b      	str	r3, [r7, #4]
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2b00      	cmp	r3, #0
 800dadc:	d1f1      	bne.n	800dac2 <mem_cpy+0x1a>
	}
}
 800dade:	bf00      	nop
 800dae0:	371c      	adds	r7, #28
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr

0800daea <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800daea:	b480      	push	{r7}
 800daec:	b087      	sub	sp, #28
 800daee:	af00      	add	r7, sp, #0
 800daf0:	60f8      	str	r0, [r7, #12]
 800daf2:	60b9      	str	r1, [r7, #8]
 800daf4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800dafa:	697b      	ldr	r3, [r7, #20]
 800dafc:	1c5a      	adds	r2, r3, #1
 800dafe:	617a      	str	r2, [r7, #20]
 800db00:	68ba      	ldr	r2, [r7, #8]
 800db02:	b2d2      	uxtb	r2, r2
 800db04:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	3b01      	subs	r3, #1
 800db0a:	607b      	str	r3, [r7, #4]
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d1f3      	bne.n	800dafa <mem_set+0x10>
}
 800db12:	bf00      	nop
 800db14:	bf00      	nop
 800db16:	371c      	adds	r7, #28
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800db20:	b480      	push	{r7}
 800db22:	b089      	sub	sp, #36	; 0x24
 800db24:	af00      	add	r7, sp, #0
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	61fb      	str	r3, [r7, #28]
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800db34:	2300      	movs	r3, #0
 800db36:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800db38:	69fb      	ldr	r3, [r7, #28]
 800db3a:	1c5a      	adds	r2, r3, #1
 800db3c:	61fa      	str	r2, [r7, #28]
 800db3e:	781b      	ldrb	r3, [r3, #0]
 800db40:	4619      	mov	r1, r3
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	1c5a      	adds	r2, r3, #1
 800db46:	61ba      	str	r2, [r7, #24]
 800db48:	781b      	ldrb	r3, [r3, #0]
 800db4a:	1acb      	subs	r3, r1, r3
 800db4c:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	3b01      	subs	r3, #1
 800db52:	607b      	str	r3, [r7, #4]
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d002      	beq.n	800db60 <mem_cmp+0x40>
 800db5a:	697b      	ldr	r3, [r7, #20]
 800db5c:	2b00      	cmp	r3, #0
 800db5e:	d0eb      	beq.n	800db38 <mem_cmp+0x18>

	return r;
 800db60:	697b      	ldr	r3, [r7, #20]
}
 800db62:	4618      	mov	r0, r3
 800db64:	3724      	adds	r7, #36	; 0x24
 800db66:	46bd      	mov	sp, r7
 800db68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db6c:	4770      	bx	lr

0800db6e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800db6e:	b480      	push	{r7}
 800db70:	b083      	sub	sp, #12
 800db72:	af00      	add	r7, sp, #0
 800db74:	6078      	str	r0, [r7, #4]
 800db76:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800db78:	e002      	b.n	800db80 <chk_chr+0x12>
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	3301      	adds	r3, #1
 800db7e:	607b      	str	r3, [r7, #4]
 800db80:	687b      	ldr	r3, [r7, #4]
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d005      	beq.n	800db94 <chk_chr+0x26>
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	461a      	mov	r2, r3
 800db8e:	683b      	ldr	r3, [r7, #0]
 800db90:	4293      	cmp	r3, r2
 800db92:	d1f2      	bne.n	800db7a <chk_chr+0xc>
	return *str;
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	781b      	ldrb	r3, [r3, #0]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	370c      	adds	r7, #12
 800db9c:	46bd      	mov	sp, r7
 800db9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dba2:	4770      	bx	lr

0800dba4 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800dba4:	b580      	push	{r7, lr}
 800dba6:	b082      	sub	sp, #8
 800dba8:	af00      	add	r7, sp, #0
 800dbaa:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2b00      	cmp	r3, #0
 800dbb0:	d009      	beq.n	800dbc6 <lock_fs+0x22>
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	68db      	ldr	r3, [r3, #12]
 800dbb6:	4618      	mov	r0, r3
 800dbb8:	f002 fd15 	bl	80105e6 <ff_req_grant>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d001      	beq.n	800dbc6 <lock_fs+0x22>
 800dbc2:	2301      	movs	r3, #1
 800dbc4:	e000      	b.n	800dbc8 <lock_fs+0x24>
 800dbc6:	2300      	movs	r3, #0
}
 800dbc8:	4618      	mov	r0, r3
 800dbca:	3708      	adds	r7, #8
 800dbcc:	46bd      	mov	sp, r7
 800dbce:	bd80      	pop	{r7, pc}

0800dbd0 <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b082      	sub	sp, #8
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	6078      	str	r0, [r7, #4]
 800dbd8:	460b      	mov	r3, r1
 800dbda:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2b00      	cmp	r3, #0
 800dbe0:	d00d      	beq.n	800dbfe <unlock_fs+0x2e>
 800dbe2:	78fb      	ldrb	r3, [r7, #3]
 800dbe4:	2b0c      	cmp	r3, #12
 800dbe6:	d00a      	beq.n	800dbfe <unlock_fs+0x2e>
 800dbe8:	78fb      	ldrb	r3, [r7, #3]
 800dbea:	2b0b      	cmp	r3, #11
 800dbec:	d007      	beq.n	800dbfe <unlock_fs+0x2e>
 800dbee:	78fb      	ldrb	r3, [r7, #3]
 800dbf0:	2b0f      	cmp	r3, #15
 800dbf2:	d004      	beq.n	800dbfe <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	68db      	ldr	r3, [r3, #12]
 800dbf8:	4618      	mov	r0, r3
 800dbfa:	f002 fd09 	bl	8010610 <ff_rel_grant>
	}
}
 800dbfe:	bf00      	nop
 800dc00:	3708      	adds	r7, #8
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}
	...

0800dc08 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b085      	sub	sp, #20
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dc12:	2300      	movs	r3, #0
 800dc14:	60bb      	str	r3, [r7, #8]
 800dc16:	68bb      	ldr	r3, [r7, #8]
 800dc18:	60fb      	str	r3, [r7, #12]
 800dc1a:	e029      	b.n	800dc70 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800dc1c:	4a27      	ldr	r2, [pc, #156]	; (800dcbc <chk_lock+0xb4>)
 800dc1e:	68fb      	ldr	r3, [r7, #12]
 800dc20:	011b      	lsls	r3, r3, #4
 800dc22:	4413      	add	r3, r2
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d01d      	beq.n	800dc66 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dc2a:	4a24      	ldr	r2, [pc, #144]	; (800dcbc <chk_lock+0xb4>)
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	011b      	lsls	r3, r3, #4
 800dc30:	4413      	add	r3, r2
 800dc32:	681a      	ldr	r2, [r3, #0]
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	429a      	cmp	r2, r3
 800dc3a:	d116      	bne.n	800dc6a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800dc3c:	4a1f      	ldr	r2, [pc, #124]	; (800dcbc <chk_lock+0xb4>)
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	011b      	lsls	r3, r3, #4
 800dc42:	4413      	add	r3, r2
 800dc44:	3304      	adds	r3, #4
 800dc46:	681a      	ldr	r2, [r3, #0]
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d10c      	bne.n	800dc6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dc50:	4a1a      	ldr	r2, [pc, #104]	; (800dcbc <chk_lock+0xb4>)
 800dc52:	68fb      	ldr	r3, [r7, #12]
 800dc54:	011b      	lsls	r3, r3, #4
 800dc56:	4413      	add	r3, r2
 800dc58:	3308      	adds	r3, #8
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d102      	bne.n	800dc6a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dc64:	e007      	b.n	800dc76 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800dc66:	2301      	movs	r3, #1
 800dc68:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	3301      	adds	r3, #1
 800dc6e:	60fb      	str	r3, [r7, #12]
 800dc70:	68fb      	ldr	r3, [r7, #12]
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d9d2      	bls.n	800dc1c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	2b02      	cmp	r3, #2
 800dc7a:	d109      	bne.n	800dc90 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800dc7c:	68bb      	ldr	r3, [r7, #8]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d102      	bne.n	800dc88 <chk_lock+0x80>
 800dc82:	683b      	ldr	r3, [r7, #0]
 800dc84:	2b02      	cmp	r3, #2
 800dc86:	d101      	bne.n	800dc8c <chk_lock+0x84>
 800dc88:	2300      	movs	r3, #0
 800dc8a:	e010      	b.n	800dcae <chk_lock+0xa6>
 800dc8c:	2312      	movs	r3, #18
 800dc8e:	e00e      	b.n	800dcae <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800dc90:	683b      	ldr	r3, [r7, #0]
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	d108      	bne.n	800dca8 <chk_lock+0xa0>
 800dc96:	4a09      	ldr	r2, [pc, #36]	; (800dcbc <chk_lock+0xb4>)
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	011b      	lsls	r3, r3, #4
 800dc9c:	4413      	add	r3, r2
 800dc9e:	330c      	adds	r3, #12
 800dca0:	881b      	ldrh	r3, [r3, #0]
 800dca2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dca6:	d101      	bne.n	800dcac <chk_lock+0xa4>
 800dca8:	2310      	movs	r3, #16
 800dcaa:	e000      	b.n	800dcae <chk_lock+0xa6>
 800dcac:	2300      	movs	r3, #0
}
 800dcae:	4618      	mov	r0, r3
 800dcb0:	3714      	adds	r7, #20
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb8:	4770      	bx	lr
 800dcba:	bf00      	nop
 800dcbc:	2000070c 	.word	0x2000070c

0800dcc0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b083      	sub	sp, #12
 800dcc4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dcc6:	2300      	movs	r3, #0
 800dcc8:	607b      	str	r3, [r7, #4]
 800dcca:	e002      	b.n	800dcd2 <enq_lock+0x12>
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	607b      	str	r3, [r7, #4]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d806      	bhi.n	800dce6 <enq_lock+0x26>
 800dcd8:	4a09      	ldr	r2, [pc, #36]	; (800dd00 <enq_lock+0x40>)
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	011b      	lsls	r3, r3, #4
 800dcde:	4413      	add	r3, r2
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	d1f2      	bne.n	800dccc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2b02      	cmp	r3, #2
 800dcea:	bf14      	ite	ne
 800dcec:	2301      	movne	r3, #1
 800dcee:	2300      	moveq	r3, #0
 800dcf0:	b2db      	uxtb	r3, r3
}
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	370c      	adds	r7, #12
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfc:	4770      	bx	lr
 800dcfe:	bf00      	nop
 800dd00:	2000070c 	.word	0x2000070c

0800dd04 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dd04:	b480      	push	{r7}
 800dd06:	b085      	sub	sp, #20
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	6078      	str	r0, [r7, #4]
 800dd0c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dd0e:	2300      	movs	r3, #0
 800dd10:	60fb      	str	r3, [r7, #12]
 800dd12:	e01f      	b.n	800dd54 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800dd14:	4a41      	ldr	r2, [pc, #260]	; (800de1c <inc_lock+0x118>)
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	011b      	lsls	r3, r3, #4
 800dd1a:	4413      	add	r3, r2
 800dd1c:	681a      	ldr	r2, [r3, #0]
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d113      	bne.n	800dd4e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800dd26:	4a3d      	ldr	r2, [pc, #244]	; (800de1c <inc_lock+0x118>)
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	011b      	lsls	r3, r3, #4
 800dd2c:	4413      	add	r3, r2
 800dd2e:	3304      	adds	r3, #4
 800dd30:	681a      	ldr	r2, [r3, #0]
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800dd36:	429a      	cmp	r2, r3
 800dd38:	d109      	bne.n	800dd4e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800dd3a:	4a38      	ldr	r2, [pc, #224]	; (800de1c <inc_lock+0x118>)
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	011b      	lsls	r3, r3, #4
 800dd40:	4413      	add	r3, r2
 800dd42:	3308      	adds	r3, #8
 800dd44:	681a      	ldr	r2, [r3, #0]
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d006      	beq.n	800dd5c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	3301      	adds	r3, #1
 800dd52:	60fb      	str	r3, [r7, #12]
 800dd54:	68fb      	ldr	r3, [r7, #12]
 800dd56:	2b01      	cmp	r3, #1
 800dd58:	d9dc      	bls.n	800dd14 <inc_lock+0x10>
 800dd5a:	e000      	b.n	800dd5e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800dd5c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2b02      	cmp	r3, #2
 800dd62:	d132      	bne.n	800ddca <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dd64:	2300      	movs	r3, #0
 800dd66:	60fb      	str	r3, [r7, #12]
 800dd68:	e002      	b.n	800dd70 <inc_lock+0x6c>
 800dd6a:	68fb      	ldr	r3, [r7, #12]
 800dd6c:	3301      	adds	r3, #1
 800dd6e:	60fb      	str	r3, [r7, #12]
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2b01      	cmp	r3, #1
 800dd74:	d806      	bhi.n	800dd84 <inc_lock+0x80>
 800dd76:	4a29      	ldr	r2, [pc, #164]	; (800de1c <inc_lock+0x118>)
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	011b      	lsls	r3, r3, #4
 800dd7c:	4413      	add	r3, r2
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d1f2      	bne.n	800dd6a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	2b02      	cmp	r3, #2
 800dd88:	d101      	bne.n	800dd8e <inc_lock+0x8a>
 800dd8a:	2300      	movs	r3, #0
 800dd8c:	e040      	b.n	800de10 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681a      	ldr	r2, [r3, #0]
 800dd92:	4922      	ldr	r1, [pc, #136]	; (800de1c <inc_lock+0x118>)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	011b      	lsls	r3, r3, #4
 800dd98:	440b      	add	r3, r1
 800dd9a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	689a      	ldr	r2, [r3, #8]
 800dda0:	491e      	ldr	r1, [pc, #120]	; (800de1c <inc_lock+0x118>)
 800dda2:	68fb      	ldr	r3, [r7, #12]
 800dda4:	011b      	lsls	r3, r3, #4
 800dda6:	440b      	add	r3, r1
 800dda8:	3304      	adds	r3, #4
 800ddaa:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	695a      	ldr	r2, [r3, #20]
 800ddb0:	491a      	ldr	r1, [pc, #104]	; (800de1c <inc_lock+0x118>)
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	011b      	lsls	r3, r3, #4
 800ddb6:	440b      	add	r3, r1
 800ddb8:	3308      	adds	r3, #8
 800ddba:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800ddbc:	4a17      	ldr	r2, [pc, #92]	; (800de1c <inc_lock+0x118>)
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	011b      	lsls	r3, r3, #4
 800ddc2:	4413      	add	r3, r2
 800ddc4:	330c      	adds	r3, #12
 800ddc6:	2200      	movs	r2, #0
 800ddc8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d009      	beq.n	800dde4 <inc_lock+0xe0>
 800ddd0:	4a12      	ldr	r2, [pc, #72]	; (800de1c <inc_lock+0x118>)
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	011b      	lsls	r3, r3, #4
 800ddd6:	4413      	add	r3, r2
 800ddd8:	330c      	adds	r3, #12
 800ddda:	881b      	ldrh	r3, [r3, #0]
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d001      	beq.n	800dde4 <inc_lock+0xe0>
 800dde0:	2300      	movs	r3, #0
 800dde2:	e015      	b.n	800de10 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d108      	bne.n	800ddfc <inc_lock+0xf8>
 800ddea:	4a0c      	ldr	r2, [pc, #48]	; (800de1c <inc_lock+0x118>)
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	011b      	lsls	r3, r3, #4
 800ddf0:	4413      	add	r3, r2
 800ddf2:	330c      	adds	r3, #12
 800ddf4:	881b      	ldrh	r3, [r3, #0]
 800ddf6:	3301      	adds	r3, #1
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	e001      	b.n	800de00 <inc_lock+0xfc>
 800ddfc:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de00:	4906      	ldr	r1, [pc, #24]	; (800de1c <inc_lock+0x118>)
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	011b      	lsls	r3, r3, #4
 800de06:	440b      	add	r3, r1
 800de08:	330c      	adds	r3, #12
 800de0a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800de0c:	68fb      	ldr	r3, [r7, #12]
 800de0e:	3301      	adds	r3, #1
}
 800de10:	4618      	mov	r0, r3
 800de12:	3714      	adds	r7, #20
 800de14:	46bd      	mov	sp, r7
 800de16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1a:	4770      	bx	lr
 800de1c:	2000070c 	.word	0x2000070c

0800de20 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800de20:	b480      	push	{r7}
 800de22:	b085      	sub	sp, #20
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	3b01      	subs	r3, #1
 800de2c:	607b      	str	r3, [r7, #4]
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2b01      	cmp	r3, #1
 800de32:	d825      	bhi.n	800de80 <dec_lock+0x60>
		n = Files[i].ctr;
 800de34:	4a17      	ldr	r2, [pc, #92]	; (800de94 <dec_lock+0x74>)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	011b      	lsls	r3, r3, #4
 800de3a:	4413      	add	r3, r2
 800de3c:	330c      	adds	r3, #12
 800de3e:	881b      	ldrh	r3, [r3, #0]
 800de40:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800de42:	89fb      	ldrh	r3, [r7, #14]
 800de44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800de48:	d101      	bne.n	800de4e <dec_lock+0x2e>
 800de4a:	2300      	movs	r3, #0
 800de4c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800de4e:	89fb      	ldrh	r3, [r7, #14]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d002      	beq.n	800de5a <dec_lock+0x3a>
 800de54:	89fb      	ldrh	r3, [r7, #14]
 800de56:	3b01      	subs	r3, #1
 800de58:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800de5a:	4a0e      	ldr	r2, [pc, #56]	; (800de94 <dec_lock+0x74>)
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	011b      	lsls	r3, r3, #4
 800de60:	4413      	add	r3, r2
 800de62:	330c      	adds	r3, #12
 800de64:	89fa      	ldrh	r2, [r7, #14]
 800de66:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800de68:	89fb      	ldrh	r3, [r7, #14]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d105      	bne.n	800de7a <dec_lock+0x5a>
 800de6e:	4a09      	ldr	r2, [pc, #36]	; (800de94 <dec_lock+0x74>)
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	011b      	lsls	r3, r3, #4
 800de74:	4413      	add	r3, r2
 800de76:	2200      	movs	r2, #0
 800de78:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800de7a:	2300      	movs	r3, #0
 800de7c:	737b      	strb	r3, [r7, #13]
 800de7e:	e001      	b.n	800de84 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800de80:	2302      	movs	r3, #2
 800de82:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800de84:	7b7b      	ldrb	r3, [r7, #13]
}
 800de86:	4618      	mov	r0, r3
 800de88:	3714      	adds	r7, #20
 800de8a:	46bd      	mov	sp, r7
 800de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de90:	4770      	bx	lr
 800de92:	bf00      	nop
 800de94:	2000070c 	.word	0x2000070c

0800de98 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800de98:	b480      	push	{r7}
 800de9a:	b085      	sub	sp, #20
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800dea0:	2300      	movs	r3, #0
 800dea2:	60fb      	str	r3, [r7, #12]
 800dea4:	e010      	b.n	800dec8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800dea6:	4a0d      	ldr	r2, [pc, #52]	; (800dedc <clear_lock+0x44>)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	011b      	lsls	r3, r3, #4
 800deac:	4413      	add	r3, r2
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	687a      	ldr	r2, [r7, #4]
 800deb2:	429a      	cmp	r2, r3
 800deb4:	d105      	bne.n	800dec2 <clear_lock+0x2a>
 800deb6:	4a09      	ldr	r2, [pc, #36]	; (800dedc <clear_lock+0x44>)
 800deb8:	68fb      	ldr	r3, [r7, #12]
 800deba:	011b      	lsls	r3, r3, #4
 800debc:	4413      	add	r3, r2
 800debe:	2200      	movs	r2, #0
 800dec0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	3301      	adds	r3, #1
 800dec6:	60fb      	str	r3, [r7, #12]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	2b01      	cmp	r3, #1
 800decc:	d9eb      	bls.n	800dea6 <clear_lock+0xe>
	}
}
 800dece:	bf00      	nop
 800ded0:	bf00      	nop
 800ded2:	3714      	adds	r7, #20
 800ded4:	46bd      	mov	sp, r7
 800ded6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deda:	4770      	bx	lr
 800dedc:	2000070c 	.word	0x2000070c

0800dee0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b086      	sub	sp, #24
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800dee8:	2300      	movs	r3, #0
 800deea:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	78db      	ldrb	r3, [r3, #3]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d034      	beq.n	800df5e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800def8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	7858      	ldrb	r0, [r3, #1]
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800df04:	2301      	movs	r3, #1
 800df06:	697a      	ldr	r2, [r7, #20]
 800df08:	f7ff fd0e 	bl	800d928 <disk_write>
 800df0c:	4603      	mov	r3, r0
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d002      	beq.n	800df18 <sync_window+0x38>
			res = FR_DISK_ERR;
 800df12:	2301      	movs	r3, #1
 800df14:	73fb      	strb	r3, [r7, #15]
 800df16:	e022      	b.n	800df5e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	2200      	movs	r2, #0
 800df1c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df22:	697a      	ldr	r2, [r7, #20]
 800df24:	1ad2      	subs	r2, r2, r3
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	69db      	ldr	r3, [r3, #28]
 800df2a:	429a      	cmp	r2, r3
 800df2c:	d217      	bcs.n	800df5e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	789b      	ldrb	r3, [r3, #2]
 800df32:	613b      	str	r3, [r7, #16]
 800df34:	e010      	b.n	800df58 <sync_window+0x78>
					wsect += fs->fsize;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	69db      	ldr	r3, [r3, #28]
 800df3a:	697a      	ldr	r2, [r7, #20]
 800df3c:	4413      	add	r3, r2
 800df3e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	7858      	ldrb	r0, [r3, #1]
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800df4a:	2301      	movs	r3, #1
 800df4c:	697a      	ldr	r2, [r7, #20]
 800df4e:	f7ff fceb 	bl	800d928 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800df52:	693b      	ldr	r3, [r7, #16]
 800df54:	3b01      	subs	r3, #1
 800df56:	613b      	str	r3, [r7, #16]
 800df58:	693b      	ldr	r3, [r7, #16]
 800df5a:	2b01      	cmp	r3, #1
 800df5c:	d8eb      	bhi.n	800df36 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800df5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800df60:	4618      	mov	r0, r3
 800df62:	3718      	adds	r7, #24
 800df64:	46bd      	mov	sp, r7
 800df66:	bd80      	pop	{r7, pc}

0800df68 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800df72:	2300      	movs	r3, #0
 800df74:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800df7a:	683a      	ldr	r2, [r7, #0]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	d01b      	beq.n	800dfb8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f7ff ffad 	bl	800dee0 <sync_window>
 800df86:	4603      	mov	r3, r0
 800df88:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800df8a:	7bfb      	ldrb	r3, [r7, #15]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d113      	bne.n	800dfb8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	7858      	ldrb	r0, [r3, #1]
 800df94:	687b      	ldr	r3, [r7, #4]
 800df96:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800df9a:	2301      	movs	r3, #1
 800df9c:	683a      	ldr	r2, [r7, #0]
 800df9e:	f7ff fca3 	bl	800d8e8 <disk_read>
 800dfa2:	4603      	mov	r3, r0
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d004      	beq.n	800dfb2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800dfa8:	f04f 33ff 	mov.w	r3, #4294967295
 800dfac:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800dfae:	2301      	movs	r3, #1
 800dfb0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	683a      	ldr	r2, [r7, #0]
 800dfb6:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800dfb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfba:	4618      	mov	r0, r3
 800dfbc:	3710      	adds	r7, #16
 800dfbe:	46bd      	mov	sp, r7
 800dfc0:	bd80      	pop	{r7, pc}
	...

0800dfc4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f7ff ff87 	bl	800dee0 <sync_window>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800dfd6:	7bfb      	ldrb	r3, [r7, #15]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d158      	bne.n	800e08e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	2b03      	cmp	r3, #3
 800dfe2:	d148      	bne.n	800e076 <sync_fs+0xb2>
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	791b      	ldrb	r3, [r3, #4]
 800dfe8:	2b01      	cmp	r3, #1
 800dfea:	d144      	bne.n	800e076 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	3334      	adds	r3, #52	; 0x34
 800dff0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dff4:	2100      	movs	r1, #0
 800dff6:	4618      	mov	r0, r3
 800dff8:	f7ff fd77 	bl	800daea <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	3334      	adds	r3, #52	; 0x34
 800e000:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e004:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e008:	4618      	mov	r0, r3
 800e00a:	f7ff fd06 	bl	800da1a <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	3334      	adds	r3, #52	; 0x34
 800e012:	4921      	ldr	r1, [pc, #132]	; (800e098 <sync_fs+0xd4>)
 800e014:	4618      	mov	r0, r3
 800e016:	f7ff fd1b 	bl	800da50 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	3334      	adds	r3, #52	; 0x34
 800e01e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e022:	491e      	ldr	r1, [pc, #120]	; (800e09c <sync_fs+0xd8>)
 800e024:	4618      	mov	r0, r3
 800e026:	f7ff fd13 	bl	800da50 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	3334      	adds	r3, #52	; 0x34
 800e02e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	695b      	ldr	r3, [r3, #20]
 800e036:	4619      	mov	r1, r3
 800e038:	4610      	mov	r0, r2
 800e03a:	f7ff fd09 	bl	800da50 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	3334      	adds	r3, #52	; 0x34
 800e042:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	691b      	ldr	r3, [r3, #16]
 800e04a:	4619      	mov	r1, r3
 800e04c:	4610      	mov	r0, r2
 800e04e:	f7ff fcff 	bl	800da50 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	6a1b      	ldr	r3, [r3, #32]
 800e056:	1c5a      	adds	r2, r3, #1
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	7858      	ldrb	r0, [r3, #1]
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e06a:	2301      	movs	r3, #1
 800e06c:	f7ff fc5c 	bl	800d928 <disk_write>
			fs->fsi_flag = 0;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2200      	movs	r2, #0
 800e074:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	785b      	ldrb	r3, [r3, #1]
 800e07a:	2200      	movs	r2, #0
 800e07c:	2100      	movs	r1, #0
 800e07e:	4618      	mov	r0, r3
 800e080:	f7ff fc72 	bl	800d968 <disk_ioctl>
 800e084:	4603      	mov	r3, r0
 800e086:	2b00      	cmp	r3, #0
 800e088:	d001      	beq.n	800e08e <sync_fs+0xca>
 800e08a:	2301      	movs	r3, #1
 800e08c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e08e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e090:	4618      	mov	r0, r3
 800e092:	3710      	adds	r7, #16
 800e094:	46bd      	mov	sp, r7
 800e096:	bd80      	pop	{r7, pc}
 800e098:	41615252 	.word	0x41615252
 800e09c:	61417272 	.word	0x61417272

0800e0a0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e0a0:	b480      	push	{r7}
 800e0a2:	b083      	sub	sp, #12
 800e0a4:	af00      	add	r7, sp, #0
 800e0a6:	6078      	str	r0, [r7, #4]
 800e0a8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	3b02      	subs	r3, #2
 800e0ae:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	699b      	ldr	r3, [r3, #24]
 800e0b4:	3b02      	subs	r3, #2
 800e0b6:	683a      	ldr	r2, [r7, #0]
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d301      	bcc.n	800e0c0 <clust2sect+0x20>
 800e0bc:	2300      	movs	r3, #0
 800e0be:	e008      	b.n	800e0d2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	895b      	ldrh	r3, [r3, #10]
 800e0c4:	461a      	mov	r2, r3
 800e0c6:	683b      	ldr	r3, [r7, #0]
 800e0c8:	fb03 f202 	mul.w	r2, r3, r2
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0d0:	4413      	add	r3, r2
}
 800e0d2:	4618      	mov	r0, r3
 800e0d4:	370c      	adds	r7, #12
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0dc:	4770      	bx	lr

0800e0de <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e0de:	b580      	push	{r7, lr}
 800e0e0:	b086      	sub	sp, #24
 800e0e2:	af00      	add	r7, sp, #0
 800e0e4:	6078      	str	r0, [r7, #4]
 800e0e6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e0ee:	683b      	ldr	r3, [r7, #0]
 800e0f0:	2b01      	cmp	r3, #1
 800e0f2:	d904      	bls.n	800e0fe <get_fat+0x20>
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	699b      	ldr	r3, [r3, #24]
 800e0f8:	683a      	ldr	r2, [r7, #0]
 800e0fa:	429a      	cmp	r2, r3
 800e0fc:	d302      	bcc.n	800e104 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e0fe:	2301      	movs	r3, #1
 800e100:	617b      	str	r3, [r7, #20]
 800e102:	e08f      	b.n	800e224 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e104:	f04f 33ff 	mov.w	r3, #4294967295
 800e108:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e10a:	693b      	ldr	r3, [r7, #16]
 800e10c:	781b      	ldrb	r3, [r3, #0]
 800e10e:	2b03      	cmp	r3, #3
 800e110:	d062      	beq.n	800e1d8 <get_fat+0xfa>
 800e112:	2b03      	cmp	r3, #3
 800e114:	dc7c      	bgt.n	800e210 <get_fat+0x132>
 800e116:	2b01      	cmp	r3, #1
 800e118:	d002      	beq.n	800e120 <get_fat+0x42>
 800e11a:	2b02      	cmp	r3, #2
 800e11c:	d042      	beq.n	800e1a4 <get_fat+0xc6>
 800e11e:	e077      	b.n	800e210 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e120:	683b      	ldr	r3, [r7, #0]
 800e122:	60fb      	str	r3, [r7, #12]
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	085b      	lsrs	r3, r3, #1
 800e128:	68fa      	ldr	r2, [r7, #12]
 800e12a:	4413      	add	r3, r2
 800e12c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e12e:	693b      	ldr	r3, [r7, #16]
 800e130:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	0a5b      	lsrs	r3, r3, #9
 800e136:	4413      	add	r3, r2
 800e138:	4619      	mov	r1, r3
 800e13a:	6938      	ldr	r0, [r7, #16]
 800e13c:	f7ff ff14 	bl	800df68 <move_window>
 800e140:	4603      	mov	r3, r0
 800e142:	2b00      	cmp	r3, #0
 800e144:	d167      	bne.n	800e216 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	1c5a      	adds	r2, r3, #1
 800e14a:	60fa      	str	r2, [r7, #12]
 800e14c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e150:	693a      	ldr	r2, [r7, #16]
 800e152:	4413      	add	r3, r2
 800e154:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e158:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e15a:	693b      	ldr	r3, [r7, #16]
 800e15c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	0a5b      	lsrs	r3, r3, #9
 800e162:	4413      	add	r3, r2
 800e164:	4619      	mov	r1, r3
 800e166:	6938      	ldr	r0, [r7, #16]
 800e168:	f7ff fefe 	bl	800df68 <move_window>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d153      	bne.n	800e21a <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e178:	693a      	ldr	r2, [r7, #16]
 800e17a:	4413      	add	r3, r2
 800e17c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e180:	021b      	lsls	r3, r3, #8
 800e182:	461a      	mov	r2, r3
 800e184:	68bb      	ldr	r3, [r7, #8]
 800e186:	4313      	orrs	r3, r2
 800e188:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	f003 0301 	and.w	r3, r3, #1
 800e190:	2b00      	cmp	r3, #0
 800e192:	d002      	beq.n	800e19a <get_fat+0xbc>
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	091b      	lsrs	r3, r3, #4
 800e198:	e002      	b.n	800e1a0 <get_fat+0xc2>
 800e19a:	68bb      	ldr	r3, [r7, #8]
 800e19c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e1a0:	617b      	str	r3, [r7, #20]
			break;
 800e1a2:	e03f      	b.n	800e224 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e1a4:	693b      	ldr	r3, [r7, #16]
 800e1a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1a8:	683b      	ldr	r3, [r7, #0]
 800e1aa:	0a1b      	lsrs	r3, r3, #8
 800e1ac:	4413      	add	r3, r2
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	6938      	ldr	r0, [r7, #16]
 800e1b2:	f7ff fed9 	bl	800df68 <move_window>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	2b00      	cmp	r3, #0
 800e1ba:	d130      	bne.n	800e21e <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e1bc:	693b      	ldr	r3, [r7, #16]
 800e1be:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e1c2:	683b      	ldr	r3, [r7, #0]
 800e1c4:	005b      	lsls	r3, r3, #1
 800e1c6:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e1ca:	4413      	add	r3, r2
 800e1cc:	4618      	mov	r0, r3
 800e1ce:	f7ff fbe9 	bl	800d9a4 <ld_word>
 800e1d2:	4603      	mov	r3, r0
 800e1d4:	617b      	str	r3, [r7, #20]
			break;
 800e1d6:	e025      	b.n	800e224 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e1d8:	693b      	ldr	r3, [r7, #16]
 800e1da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	09db      	lsrs	r3, r3, #7
 800e1e0:	4413      	add	r3, r2
 800e1e2:	4619      	mov	r1, r3
 800e1e4:	6938      	ldr	r0, [r7, #16]
 800e1e6:	f7ff febf 	bl	800df68 <move_window>
 800e1ea:	4603      	mov	r3, r0
 800e1ec:	2b00      	cmp	r3, #0
 800e1ee:	d118      	bne.n	800e222 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e1f0:	693b      	ldr	r3, [r7, #16]
 800e1f2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e1f6:	683b      	ldr	r3, [r7, #0]
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e1fe:	4413      	add	r3, r2
 800e200:	4618      	mov	r0, r3
 800e202:	f7ff fbe7 	bl	800d9d4 <ld_dword>
 800e206:	4603      	mov	r3, r0
 800e208:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e20c:	617b      	str	r3, [r7, #20]
			break;
 800e20e:	e009      	b.n	800e224 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e210:	2301      	movs	r3, #1
 800e212:	617b      	str	r3, [r7, #20]
 800e214:	e006      	b.n	800e224 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e216:	bf00      	nop
 800e218:	e004      	b.n	800e224 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e21a:	bf00      	nop
 800e21c:	e002      	b.n	800e224 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e21e:	bf00      	nop
 800e220:	e000      	b.n	800e224 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e222:	bf00      	nop
		}
	}

	return val;
 800e224:	697b      	ldr	r3, [r7, #20]
}
 800e226:	4618      	mov	r0, r3
 800e228:	3718      	adds	r7, #24
 800e22a:	46bd      	mov	sp, r7
 800e22c:	bd80      	pop	{r7, pc}

0800e22e <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e22e:	b590      	push	{r4, r7, lr}
 800e230:	b089      	sub	sp, #36	; 0x24
 800e232:	af00      	add	r7, sp, #0
 800e234:	60f8      	str	r0, [r7, #12]
 800e236:	60b9      	str	r1, [r7, #8]
 800e238:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e23a:	2302      	movs	r3, #2
 800e23c:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e23e:	68bb      	ldr	r3, [r7, #8]
 800e240:	2b01      	cmp	r3, #1
 800e242:	f240 80d2 	bls.w	800e3ea <put_fat+0x1bc>
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	699b      	ldr	r3, [r3, #24]
 800e24a:	68ba      	ldr	r2, [r7, #8]
 800e24c:	429a      	cmp	r2, r3
 800e24e:	f080 80cc 	bcs.w	800e3ea <put_fat+0x1bc>
		switch (fs->fs_type) {
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	2b03      	cmp	r3, #3
 800e258:	f000 8096 	beq.w	800e388 <put_fat+0x15a>
 800e25c:	2b03      	cmp	r3, #3
 800e25e:	f300 80cd 	bgt.w	800e3fc <put_fat+0x1ce>
 800e262:	2b01      	cmp	r3, #1
 800e264:	d002      	beq.n	800e26c <put_fat+0x3e>
 800e266:	2b02      	cmp	r3, #2
 800e268:	d06e      	beq.n	800e348 <put_fat+0x11a>
 800e26a:	e0c7      	b.n	800e3fc <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e26c:	68bb      	ldr	r3, [r7, #8]
 800e26e:	61bb      	str	r3, [r7, #24]
 800e270:	69bb      	ldr	r3, [r7, #24]
 800e272:	085b      	lsrs	r3, r3, #1
 800e274:	69ba      	ldr	r2, [r7, #24]
 800e276:	4413      	add	r3, r2
 800e278:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e27a:	68fb      	ldr	r3, [r7, #12]
 800e27c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	0a5b      	lsrs	r3, r3, #9
 800e282:	4413      	add	r3, r2
 800e284:	4619      	mov	r1, r3
 800e286:	68f8      	ldr	r0, [r7, #12]
 800e288:	f7ff fe6e 	bl	800df68 <move_window>
 800e28c:	4603      	mov	r3, r0
 800e28e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e290:	7ffb      	ldrb	r3, [r7, #31]
 800e292:	2b00      	cmp	r3, #0
 800e294:	f040 80ab 	bne.w	800e3ee <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e29e:	69bb      	ldr	r3, [r7, #24]
 800e2a0:	1c59      	adds	r1, r3, #1
 800e2a2:	61b9      	str	r1, [r7, #24]
 800e2a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e2a8:	4413      	add	r3, r2
 800e2aa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	f003 0301 	and.w	r3, r3, #1
 800e2b2:	2b00      	cmp	r3, #0
 800e2b4:	d00d      	beq.n	800e2d2 <put_fat+0xa4>
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	781b      	ldrb	r3, [r3, #0]
 800e2ba:	b25b      	sxtb	r3, r3
 800e2bc:	f003 030f 	and.w	r3, r3, #15
 800e2c0:	b25a      	sxtb	r2, r3
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	011b      	lsls	r3, r3, #4
 800e2c8:	b25b      	sxtb	r3, r3
 800e2ca:	4313      	orrs	r3, r2
 800e2cc:	b25b      	sxtb	r3, r3
 800e2ce:	b2db      	uxtb	r3, r3
 800e2d0:	e001      	b.n	800e2d6 <put_fat+0xa8>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	b2db      	uxtb	r3, r3
 800e2d6:	697a      	ldr	r2, [r7, #20]
 800e2d8:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2201      	movs	r2, #1
 800e2de:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2e4:	69bb      	ldr	r3, [r7, #24]
 800e2e6:	0a5b      	lsrs	r3, r3, #9
 800e2e8:	4413      	add	r3, r2
 800e2ea:	4619      	mov	r1, r3
 800e2ec:	68f8      	ldr	r0, [r7, #12]
 800e2ee:	f7ff fe3b 	bl	800df68 <move_window>
 800e2f2:	4603      	mov	r3, r0
 800e2f4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e2f6:	7ffb      	ldrb	r3, [r7, #31]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d17a      	bne.n	800e3f2 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e308:	4413      	add	r3, r2
 800e30a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	f003 0301 	and.w	r3, r3, #1
 800e312:	2b00      	cmp	r3, #0
 800e314:	d003      	beq.n	800e31e <put_fat+0xf0>
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	091b      	lsrs	r3, r3, #4
 800e31a:	b2db      	uxtb	r3, r3
 800e31c:	e00e      	b.n	800e33c <put_fat+0x10e>
 800e31e:	697b      	ldr	r3, [r7, #20]
 800e320:	781b      	ldrb	r3, [r3, #0]
 800e322:	b25b      	sxtb	r3, r3
 800e324:	f023 030f 	bic.w	r3, r3, #15
 800e328:	b25a      	sxtb	r2, r3
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	0a1b      	lsrs	r3, r3, #8
 800e32e:	b25b      	sxtb	r3, r3
 800e330:	f003 030f 	and.w	r3, r3, #15
 800e334:	b25b      	sxtb	r3, r3
 800e336:	4313      	orrs	r3, r2
 800e338:	b25b      	sxtb	r3, r3
 800e33a:	b2db      	uxtb	r3, r3
 800e33c:	697a      	ldr	r2, [r7, #20]
 800e33e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	2201      	movs	r2, #1
 800e344:	70da      	strb	r2, [r3, #3]
			break;
 800e346:	e059      	b.n	800e3fc <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	0a1b      	lsrs	r3, r3, #8
 800e350:	4413      	add	r3, r2
 800e352:	4619      	mov	r1, r3
 800e354:	68f8      	ldr	r0, [r7, #12]
 800e356:	f7ff fe07 	bl	800df68 <move_window>
 800e35a:	4603      	mov	r3, r0
 800e35c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e35e:	7ffb      	ldrb	r3, [r7, #31]
 800e360:	2b00      	cmp	r3, #0
 800e362:	d148      	bne.n	800e3f6 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e36a:	68bb      	ldr	r3, [r7, #8]
 800e36c:	005b      	lsls	r3, r3, #1
 800e36e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e372:	4413      	add	r3, r2
 800e374:	687a      	ldr	r2, [r7, #4]
 800e376:	b292      	uxth	r2, r2
 800e378:	4611      	mov	r1, r2
 800e37a:	4618      	mov	r0, r3
 800e37c:	f7ff fb4d 	bl	800da1a <st_word>
			fs->wflag = 1;
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2201      	movs	r2, #1
 800e384:	70da      	strb	r2, [r3, #3]
			break;
 800e386:	e039      	b.n	800e3fc <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e38c:	68bb      	ldr	r3, [r7, #8]
 800e38e:	09db      	lsrs	r3, r3, #7
 800e390:	4413      	add	r3, r2
 800e392:	4619      	mov	r1, r3
 800e394:	68f8      	ldr	r0, [r7, #12]
 800e396:	f7ff fde7 	bl	800df68 <move_window>
 800e39a:	4603      	mov	r3, r0
 800e39c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e39e:	7ffb      	ldrb	r3, [r7, #31]
 800e3a0:	2b00      	cmp	r3, #0
 800e3a2:	d12a      	bne.n	800e3fa <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e3b8:	4413      	add	r3, r2
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	f7ff fb0a 	bl	800d9d4 <ld_dword>
 800e3c0:	4603      	mov	r3, r0
 800e3c2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e3c6:	4323      	orrs	r3, r4
 800e3c8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e3ca:	68fb      	ldr	r3, [r7, #12]
 800e3cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e3d0:	68bb      	ldr	r3, [r7, #8]
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e3d8:	4413      	add	r3, r2
 800e3da:	6879      	ldr	r1, [r7, #4]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f7ff fb37 	bl	800da50 <st_dword>
			fs->wflag = 1;
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2201      	movs	r2, #1
 800e3e6:	70da      	strb	r2, [r3, #3]
			break;
 800e3e8:	e008      	b.n	800e3fc <put_fat+0x1ce>
		}
	}
 800e3ea:	bf00      	nop
 800e3ec:	e006      	b.n	800e3fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e3ee:	bf00      	nop
 800e3f0:	e004      	b.n	800e3fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e3f2:	bf00      	nop
 800e3f4:	e002      	b.n	800e3fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e3f6:	bf00      	nop
 800e3f8:	e000      	b.n	800e3fc <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e3fa:	bf00      	nop
	return res;
 800e3fc:	7ffb      	ldrb	r3, [r7, #31]
}
 800e3fe:	4618      	mov	r0, r3
 800e400:	3724      	adds	r7, #36	; 0x24
 800e402:	46bd      	mov	sp, r7
 800e404:	bd90      	pop	{r4, r7, pc}

0800e406 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e406:	b580      	push	{r7, lr}
 800e408:	b088      	sub	sp, #32
 800e40a:	af00      	add	r7, sp, #0
 800e40c:	60f8      	str	r0, [r7, #12]
 800e40e:	60b9      	str	r1, [r7, #8]
 800e410:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e412:	2300      	movs	r3, #0
 800e414:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	681b      	ldr	r3, [r3, #0]
 800e41a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e41c:	68bb      	ldr	r3, [r7, #8]
 800e41e:	2b01      	cmp	r3, #1
 800e420:	d904      	bls.n	800e42c <remove_chain+0x26>
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	699b      	ldr	r3, [r3, #24]
 800e426:	68ba      	ldr	r2, [r7, #8]
 800e428:	429a      	cmp	r2, r3
 800e42a:	d301      	bcc.n	800e430 <remove_chain+0x2a>
 800e42c:	2302      	movs	r3, #2
 800e42e:	e04b      	b.n	800e4c8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	2b00      	cmp	r3, #0
 800e434:	d00c      	beq.n	800e450 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e436:	f04f 32ff 	mov.w	r2, #4294967295
 800e43a:	6879      	ldr	r1, [r7, #4]
 800e43c:	69b8      	ldr	r0, [r7, #24]
 800e43e:	f7ff fef6 	bl	800e22e <put_fat>
 800e442:	4603      	mov	r3, r0
 800e444:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e446:	7ffb      	ldrb	r3, [r7, #31]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d001      	beq.n	800e450 <remove_chain+0x4a>
 800e44c:	7ffb      	ldrb	r3, [r7, #31]
 800e44e:	e03b      	b.n	800e4c8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e450:	68b9      	ldr	r1, [r7, #8]
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	f7ff fe43 	bl	800e0de <get_fat>
 800e458:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d031      	beq.n	800e4c4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	2b01      	cmp	r3, #1
 800e464:	d101      	bne.n	800e46a <remove_chain+0x64>
 800e466:	2302      	movs	r3, #2
 800e468:	e02e      	b.n	800e4c8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e46a:	697b      	ldr	r3, [r7, #20]
 800e46c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e470:	d101      	bne.n	800e476 <remove_chain+0x70>
 800e472:	2301      	movs	r3, #1
 800e474:	e028      	b.n	800e4c8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e476:	2200      	movs	r2, #0
 800e478:	68b9      	ldr	r1, [r7, #8]
 800e47a:	69b8      	ldr	r0, [r7, #24]
 800e47c:	f7ff fed7 	bl	800e22e <put_fat>
 800e480:	4603      	mov	r3, r0
 800e482:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e484:	7ffb      	ldrb	r3, [r7, #31]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d001      	beq.n	800e48e <remove_chain+0x88>
 800e48a:	7ffb      	ldrb	r3, [r7, #31]
 800e48c:	e01c      	b.n	800e4c8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e48e:	69bb      	ldr	r3, [r7, #24]
 800e490:	695a      	ldr	r2, [r3, #20]
 800e492:	69bb      	ldr	r3, [r7, #24]
 800e494:	699b      	ldr	r3, [r3, #24]
 800e496:	3b02      	subs	r3, #2
 800e498:	429a      	cmp	r2, r3
 800e49a:	d20b      	bcs.n	800e4b4 <remove_chain+0xae>
			fs->free_clst++;
 800e49c:	69bb      	ldr	r3, [r7, #24]
 800e49e:	695b      	ldr	r3, [r3, #20]
 800e4a0:	1c5a      	adds	r2, r3, #1
 800e4a2:	69bb      	ldr	r3, [r7, #24]
 800e4a4:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e4a6:	69bb      	ldr	r3, [r7, #24]
 800e4a8:	791b      	ldrb	r3, [r3, #4]
 800e4aa:	f043 0301 	orr.w	r3, r3, #1
 800e4ae:	b2da      	uxtb	r2, r3
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	699b      	ldr	r3, [r3, #24]
 800e4bc:	68ba      	ldr	r2, [r7, #8]
 800e4be:	429a      	cmp	r2, r3
 800e4c0:	d3c6      	bcc.n	800e450 <remove_chain+0x4a>
 800e4c2:	e000      	b.n	800e4c6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e4c4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e4c6:	2300      	movs	r3, #0
}
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3720      	adds	r7, #32
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}

0800e4d0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e4d0:	b580      	push	{r7, lr}
 800e4d2:	b088      	sub	sp, #32
 800e4d4:	af00      	add	r7, sp, #0
 800e4d6:	6078      	str	r0, [r7, #4]
 800e4d8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e4e0:	683b      	ldr	r3, [r7, #0]
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	d10d      	bne.n	800e502 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e4e6:	693b      	ldr	r3, [r7, #16]
 800e4e8:	691b      	ldr	r3, [r3, #16]
 800e4ea:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d004      	beq.n	800e4fc <create_chain+0x2c>
 800e4f2:	693b      	ldr	r3, [r7, #16]
 800e4f4:	699b      	ldr	r3, [r3, #24]
 800e4f6:	69ba      	ldr	r2, [r7, #24]
 800e4f8:	429a      	cmp	r2, r3
 800e4fa:	d31b      	bcc.n	800e534 <create_chain+0x64>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	61bb      	str	r3, [r7, #24]
 800e500:	e018      	b.n	800e534 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e502:	6839      	ldr	r1, [r7, #0]
 800e504:	6878      	ldr	r0, [r7, #4]
 800e506:	f7ff fdea 	bl	800e0de <get_fat>
 800e50a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e50c:	68fb      	ldr	r3, [r7, #12]
 800e50e:	2b01      	cmp	r3, #1
 800e510:	d801      	bhi.n	800e516 <create_chain+0x46>
 800e512:	2301      	movs	r3, #1
 800e514:	e070      	b.n	800e5f8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e51c:	d101      	bne.n	800e522 <create_chain+0x52>
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	e06a      	b.n	800e5f8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e522:	693b      	ldr	r3, [r7, #16]
 800e524:	699b      	ldr	r3, [r3, #24]
 800e526:	68fa      	ldr	r2, [r7, #12]
 800e528:	429a      	cmp	r2, r3
 800e52a:	d201      	bcs.n	800e530 <create_chain+0x60>
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	e063      	b.n	800e5f8 <create_chain+0x128>
		scl = clst;
 800e530:	683b      	ldr	r3, [r7, #0]
 800e532:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e534:	69bb      	ldr	r3, [r7, #24]
 800e536:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e538:	69fb      	ldr	r3, [r7, #28]
 800e53a:	3301      	adds	r3, #1
 800e53c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	699b      	ldr	r3, [r3, #24]
 800e542:	69fa      	ldr	r2, [r7, #28]
 800e544:	429a      	cmp	r2, r3
 800e546:	d307      	bcc.n	800e558 <create_chain+0x88>
				ncl = 2;
 800e548:	2302      	movs	r3, #2
 800e54a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e54c:	69fa      	ldr	r2, [r7, #28]
 800e54e:	69bb      	ldr	r3, [r7, #24]
 800e550:	429a      	cmp	r2, r3
 800e552:	d901      	bls.n	800e558 <create_chain+0x88>
 800e554:	2300      	movs	r3, #0
 800e556:	e04f      	b.n	800e5f8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e558:	69f9      	ldr	r1, [r7, #28]
 800e55a:	6878      	ldr	r0, [r7, #4]
 800e55c:	f7ff fdbf 	bl	800e0de <get_fat>
 800e560:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e562:	68fb      	ldr	r3, [r7, #12]
 800e564:	2b00      	cmp	r3, #0
 800e566:	d00e      	beq.n	800e586 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	2b01      	cmp	r3, #1
 800e56c:	d003      	beq.n	800e576 <create_chain+0xa6>
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e574:	d101      	bne.n	800e57a <create_chain+0xaa>
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	e03e      	b.n	800e5f8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e57a:	69fa      	ldr	r2, [r7, #28]
 800e57c:	69bb      	ldr	r3, [r7, #24]
 800e57e:	429a      	cmp	r2, r3
 800e580:	d1da      	bne.n	800e538 <create_chain+0x68>
 800e582:	2300      	movs	r3, #0
 800e584:	e038      	b.n	800e5f8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e586:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e588:	f04f 32ff 	mov.w	r2, #4294967295
 800e58c:	69f9      	ldr	r1, [r7, #28]
 800e58e:	6938      	ldr	r0, [r7, #16]
 800e590:	f7ff fe4d 	bl	800e22e <put_fat>
 800e594:	4603      	mov	r3, r0
 800e596:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e598:	7dfb      	ldrb	r3, [r7, #23]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	d109      	bne.n	800e5b2 <create_chain+0xe2>
 800e59e:	683b      	ldr	r3, [r7, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d006      	beq.n	800e5b2 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e5a4:	69fa      	ldr	r2, [r7, #28]
 800e5a6:	6839      	ldr	r1, [r7, #0]
 800e5a8:	6938      	ldr	r0, [r7, #16]
 800e5aa:	f7ff fe40 	bl	800e22e <put_fat>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e5b2:	7dfb      	ldrb	r3, [r7, #23]
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d116      	bne.n	800e5e6 <create_chain+0x116>
		fs->last_clst = ncl;
 800e5b8:	693b      	ldr	r3, [r7, #16]
 800e5ba:	69fa      	ldr	r2, [r7, #28]
 800e5bc:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e5be:	693b      	ldr	r3, [r7, #16]
 800e5c0:	695a      	ldr	r2, [r3, #20]
 800e5c2:	693b      	ldr	r3, [r7, #16]
 800e5c4:	699b      	ldr	r3, [r3, #24]
 800e5c6:	3b02      	subs	r3, #2
 800e5c8:	429a      	cmp	r2, r3
 800e5ca:	d804      	bhi.n	800e5d6 <create_chain+0x106>
 800e5cc:	693b      	ldr	r3, [r7, #16]
 800e5ce:	695b      	ldr	r3, [r3, #20]
 800e5d0:	1e5a      	subs	r2, r3, #1
 800e5d2:	693b      	ldr	r3, [r7, #16]
 800e5d4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e5d6:	693b      	ldr	r3, [r7, #16]
 800e5d8:	791b      	ldrb	r3, [r3, #4]
 800e5da:	f043 0301 	orr.w	r3, r3, #1
 800e5de:	b2da      	uxtb	r2, r3
 800e5e0:	693b      	ldr	r3, [r7, #16]
 800e5e2:	711a      	strb	r2, [r3, #4]
 800e5e4:	e007      	b.n	800e5f6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e5e6:	7dfb      	ldrb	r3, [r7, #23]
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d102      	bne.n	800e5f2 <create_chain+0x122>
 800e5ec:	f04f 33ff 	mov.w	r3, #4294967295
 800e5f0:	e000      	b.n	800e5f4 <create_chain+0x124>
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e5f6:	69fb      	ldr	r3, [r7, #28]
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3720      	adds	r7, #32
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}

0800e600 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e600:	b480      	push	{r7}
 800e602:	b087      	sub	sp, #28
 800e604:	af00      	add	r7, sp, #0
 800e606:	6078      	str	r0, [r7, #4]
 800e608:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e614:	3304      	adds	r3, #4
 800e616:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	0a5b      	lsrs	r3, r3, #9
 800e61c:	68fa      	ldr	r2, [r7, #12]
 800e61e:	8952      	ldrh	r2, [r2, #10]
 800e620:	fbb3 f3f2 	udiv	r3, r3, r2
 800e624:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e626:	693b      	ldr	r3, [r7, #16]
 800e628:	1d1a      	adds	r2, r3, #4
 800e62a:	613a      	str	r2, [r7, #16]
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d101      	bne.n	800e63a <clmt_clust+0x3a>
 800e636:	2300      	movs	r3, #0
 800e638:	e010      	b.n	800e65c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e63a:	697a      	ldr	r2, [r7, #20]
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	429a      	cmp	r2, r3
 800e640:	d307      	bcc.n	800e652 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e642:	697a      	ldr	r2, [r7, #20]
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	1ad3      	subs	r3, r2, r3
 800e648:	617b      	str	r3, [r7, #20]
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	3304      	adds	r3, #4
 800e64e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e650:	e7e9      	b.n	800e626 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e652:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e654:	693b      	ldr	r3, [r7, #16]
 800e656:	681a      	ldr	r2, [r3, #0]
 800e658:	697b      	ldr	r3, [r7, #20]
 800e65a:	4413      	add	r3, r2
}
 800e65c:	4618      	mov	r0, r3
 800e65e:	371c      	adds	r7, #28
 800e660:	46bd      	mov	sp, r7
 800e662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e666:	4770      	bx	lr

0800e668 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e668:	b580      	push	{r7, lr}
 800e66a:	b086      	sub	sp, #24
 800e66c:	af00      	add	r7, sp, #0
 800e66e:	6078      	str	r0, [r7, #4]
 800e670:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e678:	683b      	ldr	r3, [r7, #0]
 800e67a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e67e:	d204      	bcs.n	800e68a <dir_sdi+0x22>
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	f003 031f 	and.w	r3, r3, #31
 800e686:	2b00      	cmp	r3, #0
 800e688:	d001      	beq.n	800e68e <dir_sdi+0x26>
		return FR_INT_ERR;
 800e68a:	2302      	movs	r3, #2
 800e68c:	e063      	b.n	800e756 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	683a      	ldr	r2, [r7, #0]
 800e692:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	689b      	ldr	r3, [r3, #8]
 800e698:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e69a:	697b      	ldr	r3, [r7, #20]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d106      	bne.n	800e6ae <dir_sdi+0x46>
 800e6a0:	693b      	ldr	r3, [r7, #16]
 800e6a2:	781b      	ldrb	r3, [r3, #0]
 800e6a4:	2b02      	cmp	r3, #2
 800e6a6:	d902      	bls.n	800e6ae <dir_sdi+0x46>
		clst = fs->dirbase;
 800e6a8:	693b      	ldr	r3, [r7, #16]
 800e6aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ac:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d10c      	bne.n	800e6ce <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	095b      	lsrs	r3, r3, #5
 800e6b8:	693a      	ldr	r2, [r7, #16]
 800e6ba:	8912      	ldrh	r2, [r2, #8]
 800e6bc:	4293      	cmp	r3, r2
 800e6be:	d301      	bcc.n	800e6c4 <dir_sdi+0x5c>
 800e6c0:	2302      	movs	r3, #2
 800e6c2:	e048      	b.n	800e756 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	61da      	str	r2, [r3, #28]
 800e6cc:	e029      	b.n	800e722 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e6ce:	693b      	ldr	r3, [r7, #16]
 800e6d0:	895b      	ldrh	r3, [r3, #10]
 800e6d2:	025b      	lsls	r3, r3, #9
 800e6d4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e6d6:	e019      	b.n	800e70c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	6979      	ldr	r1, [r7, #20]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f7ff fcfe 	bl	800e0de <get_fat>
 800e6e2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e6e4:	697b      	ldr	r3, [r7, #20]
 800e6e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6ea:	d101      	bne.n	800e6f0 <dir_sdi+0x88>
 800e6ec:	2301      	movs	r3, #1
 800e6ee:	e032      	b.n	800e756 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	2b01      	cmp	r3, #1
 800e6f4:	d904      	bls.n	800e700 <dir_sdi+0x98>
 800e6f6:	693b      	ldr	r3, [r7, #16]
 800e6f8:	699b      	ldr	r3, [r3, #24]
 800e6fa:	697a      	ldr	r2, [r7, #20]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d301      	bcc.n	800e704 <dir_sdi+0x9c>
 800e700:	2302      	movs	r3, #2
 800e702:	e028      	b.n	800e756 <dir_sdi+0xee>
			ofs -= csz;
 800e704:	683a      	ldr	r2, [r7, #0]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	1ad3      	subs	r3, r2, r3
 800e70a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e70c:	683a      	ldr	r2, [r7, #0]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	429a      	cmp	r2, r3
 800e712:	d2e1      	bcs.n	800e6d8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e714:	6979      	ldr	r1, [r7, #20]
 800e716:	6938      	ldr	r0, [r7, #16]
 800e718:	f7ff fcc2 	bl	800e0a0 <clust2sect>
 800e71c:	4602      	mov	r2, r0
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	697a      	ldr	r2, [r7, #20]
 800e726:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e728:	687b      	ldr	r3, [r7, #4]
 800e72a:	69db      	ldr	r3, [r3, #28]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d101      	bne.n	800e734 <dir_sdi+0xcc>
 800e730:	2302      	movs	r3, #2
 800e732:	e010      	b.n	800e756 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e734:	687b      	ldr	r3, [r7, #4]
 800e736:	69da      	ldr	r2, [r3, #28]
 800e738:	683b      	ldr	r3, [r7, #0]
 800e73a:	0a5b      	lsrs	r3, r3, #9
 800e73c:	441a      	add	r2, r3
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e742:	693b      	ldr	r3, [r7, #16]
 800e744:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e748:	683b      	ldr	r3, [r7, #0]
 800e74a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e74e:	441a      	add	r2, r3
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e754:	2300      	movs	r3, #0
}
 800e756:	4618      	mov	r0, r3
 800e758:	3718      	adds	r7, #24
 800e75a:	46bd      	mov	sp, r7
 800e75c:	bd80      	pop	{r7, pc}

0800e75e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e75e:	b580      	push	{r7, lr}
 800e760:	b086      	sub	sp, #24
 800e762:	af00      	add	r7, sp, #0
 800e764:	6078      	str	r0, [r7, #4]
 800e766:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	695b      	ldr	r3, [r3, #20]
 800e772:	3320      	adds	r3, #32
 800e774:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	69db      	ldr	r3, [r3, #28]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d003      	beq.n	800e786 <dir_next+0x28>
 800e77e:	68bb      	ldr	r3, [r7, #8]
 800e780:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e784:	d301      	bcc.n	800e78a <dir_next+0x2c>
 800e786:	2304      	movs	r3, #4
 800e788:	e0aa      	b.n	800e8e0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e78a:	68bb      	ldr	r3, [r7, #8]
 800e78c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e790:	2b00      	cmp	r3, #0
 800e792:	f040 8098 	bne.w	800e8c6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	69db      	ldr	r3, [r3, #28]
 800e79a:	1c5a      	adds	r2, r3, #1
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	699b      	ldr	r3, [r3, #24]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d10b      	bne.n	800e7c0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	095b      	lsrs	r3, r3, #5
 800e7ac:	68fa      	ldr	r2, [r7, #12]
 800e7ae:	8912      	ldrh	r2, [r2, #8]
 800e7b0:	4293      	cmp	r3, r2
 800e7b2:	f0c0 8088 	bcc.w	800e8c6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	2200      	movs	r2, #0
 800e7ba:	61da      	str	r2, [r3, #28]
 800e7bc:	2304      	movs	r3, #4
 800e7be:	e08f      	b.n	800e8e0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	0a5b      	lsrs	r3, r3, #9
 800e7c4:	68fa      	ldr	r2, [r7, #12]
 800e7c6:	8952      	ldrh	r2, [r2, #10]
 800e7c8:	3a01      	subs	r2, #1
 800e7ca:	4013      	ands	r3, r2
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d17a      	bne.n	800e8c6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	699b      	ldr	r3, [r3, #24]
 800e7d6:	4619      	mov	r1, r3
 800e7d8:	4610      	mov	r0, r2
 800e7da:	f7ff fc80 	bl	800e0de <get_fat>
 800e7de:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e7e0:	697b      	ldr	r3, [r7, #20]
 800e7e2:	2b01      	cmp	r3, #1
 800e7e4:	d801      	bhi.n	800e7ea <dir_next+0x8c>
 800e7e6:	2302      	movs	r3, #2
 800e7e8:	e07a      	b.n	800e8e0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e7ea:	697b      	ldr	r3, [r7, #20]
 800e7ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7f0:	d101      	bne.n	800e7f6 <dir_next+0x98>
 800e7f2:	2301      	movs	r3, #1
 800e7f4:	e074      	b.n	800e8e0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	699b      	ldr	r3, [r3, #24]
 800e7fa:	697a      	ldr	r2, [r7, #20]
 800e7fc:	429a      	cmp	r2, r3
 800e7fe:	d358      	bcc.n	800e8b2 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e800:	683b      	ldr	r3, [r7, #0]
 800e802:	2b00      	cmp	r3, #0
 800e804:	d104      	bne.n	800e810 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2200      	movs	r2, #0
 800e80a:	61da      	str	r2, [r3, #28]
 800e80c:	2304      	movs	r3, #4
 800e80e:	e067      	b.n	800e8e0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e810:	687a      	ldr	r2, [r7, #4]
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	699b      	ldr	r3, [r3, #24]
 800e816:	4619      	mov	r1, r3
 800e818:	4610      	mov	r0, r2
 800e81a:	f7ff fe59 	bl	800e4d0 <create_chain>
 800e81e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e820:	697b      	ldr	r3, [r7, #20]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d101      	bne.n	800e82a <dir_next+0xcc>
 800e826:	2307      	movs	r3, #7
 800e828:	e05a      	b.n	800e8e0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e82a:	697b      	ldr	r3, [r7, #20]
 800e82c:	2b01      	cmp	r3, #1
 800e82e:	d101      	bne.n	800e834 <dir_next+0xd6>
 800e830:	2302      	movs	r3, #2
 800e832:	e055      	b.n	800e8e0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e834:	697b      	ldr	r3, [r7, #20]
 800e836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e83a:	d101      	bne.n	800e840 <dir_next+0xe2>
 800e83c:	2301      	movs	r3, #1
 800e83e:	e04f      	b.n	800e8e0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e840:	68f8      	ldr	r0, [r7, #12]
 800e842:	f7ff fb4d 	bl	800dee0 <sync_window>
 800e846:	4603      	mov	r3, r0
 800e848:	2b00      	cmp	r3, #0
 800e84a:	d001      	beq.n	800e850 <dir_next+0xf2>
 800e84c:	2301      	movs	r3, #1
 800e84e:	e047      	b.n	800e8e0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e850:	68fb      	ldr	r3, [r7, #12]
 800e852:	3334      	adds	r3, #52	; 0x34
 800e854:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e858:	2100      	movs	r1, #0
 800e85a:	4618      	mov	r0, r3
 800e85c:	f7ff f945 	bl	800daea <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e860:	2300      	movs	r3, #0
 800e862:	613b      	str	r3, [r7, #16]
 800e864:	6979      	ldr	r1, [r7, #20]
 800e866:	68f8      	ldr	r0, [r7, #12]
 800e868:	f7ff fc1a 	bl	800e0a0 <clust2sect>
 800e86c:	4602      	mov	r2, r0
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	631a      	str	r2, [r3, #48]	; 0x30
 800e872:	e012      	b.n	800e89a <dir_next+0x13c>
						fs->wflag = 1;
 800e874:	68fb      	ldr	r3, [r7, #12]
 800e876:	2201      	movs	r2, #1
 800e878:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e87a:	68f8      	ldr	r0, [r7, #12]
 800e87c:	f7ff fb30 	bl	800dee0 <sync_window>
 800e880:	4603      	mov	r3, r0
 800e882:	2b00      	cmp	r3, #0
 800e884:	d001      	beq.n	800e88a <dir_next+0x12c>
 800e886:	2301      	movs	r3, #1
 800e888:	e02a      	b.n	800e8e0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e88a:	693b      	ldr	r3, [r7, #16]
 800e88c:	3301      	adds	r3, #1
 800e88e:	613b      	str	r3, [r7, #16]
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e894:	1c5a      	adds	r2, r3, #1
 800e896:	68fb      	ldr	r3, [r7, #12]
 800e898:	631a      	str	r2, [r3, #48]	; 0x30
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	895b      	ldrh	r3, [r3, #10]
 800e89e:	461a      	mov	r2, r3
 800e8a0:	693b      	ldr	r3, [r7, #16]
 800e8a2:	4293      	cmp	r3, r2
 800e8a4:	d3e6      	bcc.n	800e874 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e8aa:	693b      	ldr	r3, [r7, #16]
 800e8ac:	1ad2      	subs	r2, r2, r3
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	697a      	ldr	r2, [r7, #20]
 800e8b6:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e8b8:	6979      	ldr	r1, [r7, #20]
 800e8ba:	68f8      	ldr	r0, [r7, #12]
 800e8bc:	f7ff fbf0 	bl	800e0a0 <clust2sect>
 800e8c0:	4602      	mov	r2, r0
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	68ba      	ldr	r2, [r7, #8]
 800e8ca:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e8d2:	68bb      	ldr	r3, [r7, #8]
 800e8d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8d8:	441a      	add	r2, r3
 800e8da:	687b      	ldr	r3, [r7, #4]
 800e8dc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e8de:	2300      	movs	r3, #0
}
 800e8e0:	4618      	mov	r0, r3
 800e8e2:	3718      	adds	r7, #24
 800e8e4:	46bd      	mov	sp, r7
 800e8e6:	bd80      	pop	{r7, pc}

0800e8e8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e8e8:	b580      	push	{r7, lr}
 800e8ea:	b086      	sub	sp, #24
 800e8ec:	af00      	add	r7, sp, #0
 800e8ee:	6078      	str	r0, [r7, #4]
 800e8f0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	681b      	ldr	r3, [r3, #0]
 800e8f6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e8f8:	2100      	movs	r1, #0
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f7ff feb4 	bl	800e668 <dir_sdi>
 800e900:	4603      	mov	r3, r0
 800e902:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e904:	7dfb      	ldrb	r3, [r7, #23]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d12b      	bne.n	800e962 <dir_alloc+0x7a>
		n = 0;
 800e90a:	2300      	movs	r3, #0
 800e90c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e90e:	687b      	ldr	r3, [r7, #4]
 800e910:	69db      	ldr	r3, [r3, #28]
 800e912:	4619      	mov	r1, r3
 800e914:	68f8      	ldr	r0, [r7, #12]
 800e916:	f7ff fb27 	bl	800df68 <move_window>
 800e91a:	4603      	mov	r3, r0
 800e91c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e91e:	7dfb      	ldrb	r3, [r7, #23]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d11d      	bne.n	800e960 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e924:	687b      	ldr	r3, [r7, #4]
 800e926:	6a1b      	ldr	r3, [r3, #32]
 800e928:	781b      	ldrb	r3, [r3, #0]
 800e92a:	2be5      	cmp	r3, #229	; 0xe5
 800e92c:	d004      	beq.n	800e938 <dir_alloc+0x50>
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6a1b      	ldr	r3, [r3, #32]
 800e932:	781b      	ldrb	r3, [r3, #0]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d107      	bne.n	800e948 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e938:	693b      	ldr	r3, [r7, #16]
 800e93a:	3301      	adds	r3, #1
 800e93c:	613b      	str	r3, [r7, #16]
 800e93e:	693a      	ldr	r2, [r7, #16]
 800e940:	683b      	ldr	r3, [r7, #0]
 800e942:	429a      	cmp	r2, r3
 800e944:	d102      	bne.n	800e94c <dir_alloc+0x64>
 800e946:	e00c      	b.n	800e962 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e948:	2300      	movs	r3, #0
 800e94a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e94c:	2101      	movs	r1, #1
 800e94e:	6878      	ldr	r0, [r7, #4]
 800e950:	f7ff ff05 	bl	800e75e <dir_next>
 800e954:	4603      	mov	r3, r0
 800e956:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e958:	7dfb      	ldrb	r3, [r7, #23]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d0d7      	beq.n	800e90e <dir_alloc+0x26>
 800e95e:	e000      	b.n	800e962 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e960:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e962:	7dfb      	ldrb	r3, [r7, #23]
 800e964:	2b04      	cmp	r3, #4
 800e966:	d101      	bne.n	800e96c <dir_alloc+0x84>
 800e968:	2307      	movs	r3, #7
 800e96a:	75fb      	strb	r3, [r7, #23]
	return res;
 800e96c:	7dfb      	ldrb	r3, [r7, #23]
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3718      	adds	r7, #24
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}

0800e976 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e976:	b580      	push	{r7, lr}
 800e978:	b084      	sub	sp, #16
 800e97a:	af00      	add	r7, sp, #0
 800e97c:	6078      	str	r0, [r7, #4]
 800e97e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	331a      	adds	r3, #26
 800e984:	4618      	mov	r0, r3
 800e986:	f7ff f80d 	bl	800d9a4 <ld_word>
 800e98a:	4603      	mov	r3, r0
 800e98c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	781b      	ldrb	r3, [r3, #0]
 800e992:	2b03      	cmp	r3, #3
 800e994:	d109      	bne.n	800e9aa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e996:	683b      	ldr	r3, [r7, #0]
 800e998:	3314      	adds	r3, #20
 800e99a:	4618      	mov	r0, r3
 800e99c:	f7ff f802 	bl	800d9a4 <ld_word>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	041b      	lsls	r3, r3, #16
 800e9a4:	68fa      	ldr	r2, [r7, #12]
 800e9a6:	4313      	orrs	r3, r2
 800e9a8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
}
 800e9ac:	4618      	mov	r0, r3
 800e9ae:	3710      	adds	r7, #16
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	bd80      	pop	{r7, pc}

0800e9b4 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e9b4:	b580      	push	{r7, lr}
 800e9b6:	b084      	sub	sp, #16
 800e9b8:	af00      	add	r7, sp, #0
 800e9ba:	60f8      	str	r0, [r7, #12]
 800e9bc:	60b9      	str	r1, [r7, #8]
 800e9be:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	331a      	adds	r3, #26
 800e9c4:	687a      	ldr	r2, [r7, #4]
 800e9c6:	b292      	uxth	r2, r2
 800e9c8:	4611      	mov	r1, r2
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7ff f825 	bl	800da1a <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e9d0:	68fb      	ldr	r3, [r7, #12]
 800e9d2:	781b      	ldrb	r3, [r3, #0]
 800e9d4:	2b03      	cmp	r3, #3
 800e9d6:	d109      	bne.n	800e9ec <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e9d8:	68bb      	ldr	r3, [r7, #8]
 800e9da:	f103 0214 	add.w	r2, r3, #20
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	0c1b      	lsrs	r3, r3, #16
 800e9e2:	b29b      	uxth	r3, r3
 800e9e4:	4619      	mov	r1, r3
 800e9e6:	4610      	mov	r0, r2
 800e9e8:	f7ff f817 	bl	800da1a <st_word>
	}
}
 800e9ec:	bf00      	nop
 800e9ee:	3710      	adds	r7, #16
 800e9f0:	46bd      	mov	sp, r7
 800e9f2:	bd80      	pop	{r7, pc}

0800e9f4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e9f4:	b580      	push	{r7, lr}
 800e9f6:	b086      	sub	sp, #24
 800e9f8:	af00      	add	r7, sp, #0
 800e9fa:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800ea02:	2100      	movs	r1, #0
 800ea04:	6878      	ldr	r0, [r7, #4]
 800ea06:	f7ff fe2f 	bl	800e668 <dir_sdi>
 800ea0a:	4603      	mov	r3, r0
 800ea0c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800ea0e:	7dfb      	ldrb	r3, [r7, #23]
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	d001      	beq.n	800ea18 <dir_find+0x24>
 800ea14:	7dfb      	ldrb	r3, [r7, #23]
 800ea16:	e03e      	b.n	800ea96 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	69db      	ldr	r3, [r3, #28]
 800ea1c:	4619      	mov	r1, r3
 800ea1e:	6938      	ldr	r0, [r7, #16]
 800ea20:	f7ff faa2 	bl	800df68 <move_window>
 800ea24:	4603      	mov	r3, r0
 800ea26:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800ea28:	7dfb      	ldrb	r3, [r7, #23]
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	d12f      	bne.n	800ea8e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	6a1b      	ldr	r3, [r3, #32]
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800ea36:	7bfb      	ldrb	r3, [r7, #15]
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d102      	bne.n	800ea42 <dir_find+0x4e>
 800ea3c:	2304      	movs	r3, #4
 800ea3e:	75fb      	strb	r3, [r7, #23]
 800ea40:	e028      	b.n	800ea94 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6a1b      	ldr	r3, [r3, #32]
 800ea46:	330b      	adds	r3, #11
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ea4e:	b2da      	uxtb	r2, r3
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6a1b      	ldr	r3, [r3, #32]
 800ea58:	330b      	adds	r3, #11
 800ea5a:	781b      	ldrb	r3, [r3, #0]
 800ea5c:	f003 0308 	and.w	r3, r3, #8
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d10a      	bne.n	800ea7a <dir_find+0x86>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	6a18      	ldr	r0, [r3, #32]
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	3324      	adds	r3, #36	; 0x24
 800ea6c:	220b      	movs	r2, #11
 800ea6e:	4619      	mov	r1, r3
 800ea70:	f7ff f856 	bl	800db20 <mem_cmp>
 800ea74:	4603      	mov	r3, r0
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d00b      	beq.n	800ea92 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800ea7a:	2100      	movs	r1, #0
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f7ff fe6e 	bl	800e75e <dir_next>
 800ea82:	4603      	mov	r3, r0
 800ea84:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ea86:	7dfb      	ldrb	r3, [r7, #23]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d0c5      	beq.n	800ea18 <dir_find+0x24>
 800ea8c:	e002      	b.n	800ea94 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ea8e:	bf00      	nop
 800ea90:	e000      	b.n	800ea94 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ea92:	bf00      	nop

	return res;
 800ea94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	3718      	adds	r7, #24
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b084      	sub	sp, #16
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800eaac:	2101      	movs	r1, #1
 800eaae:	6878      	ldr	r0, [r7, #4]
 800eab0:	f7ff ff1a 	bl	800e8e8 <dir_alloc>
 800eab4:	4603      	mov	r3, r0
 800eab6:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800eab8:	7bfb      	ldrb	r3, [r7, #15]
 800eaba:	2b00      	cmp	r3, #0
 800eabc:	d11c      	bne.n	800eaf8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	69db      	ldr	r3, [r3, #28]
 800eac2:	4619      	mov	r1, r3
 800eac4:	68b8      	ldr	r0, [r7, #8]
 800eac6:	f7ff fa4f 	bl	800df68 <move_window>
 800eaca:	4603      	mov	r3, r0
 800eacc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800eace:	7bfb      	ldrb	r3, [r7, #15]
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	d111      	bne.n	800eaf8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6a1b      	ldr	r3, [r3, #32]
 800ead8:	2220      	movs	r2, #32
 800eada:	2100      	movs	r1, #0
 800eadc:	4618      	mov	r0, r3
 800eade:	f7ff f804 	bl	800daea <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	6a18      	ldr	r0, [r3, #32]
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	3324      	adds	r3, #36	; 0x24
 800eaea:	220b      	movs	r2, #11
 800eaec:	4619      	mov	r1, r3
 800eaee:	f7fe ffdb 	bl	800daa8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800eaf2:	68bb      	ldr	r3, [r7, #8]
 800eaf4:	2201      	movs	r2, #1
 800eaf6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800eaf8:	7bfb      	ldrb	r3, [r7, #15]
}
 800eafa:	4618      	mov	r0, r3
 800eafc:	3710      	adds	r7, #16
 800eafe:	46bd      	mov	sp, r7
 800eb00:	bd80      	pop	{r7, pc}
	...

0800eb04 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800eb04:	b580      	push	{r7, lr}
 800eb06:	b088      	sub	sp, #32
 800eb08:	af00      	add	r7, sp, #0
 800eb0a:	6078      	str	r0, [r7, #4]
 800eb0c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800eb0e:	683b      	ldr	r3, [r7, #0]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	60fb      	str	r3, [r7, #12]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	3324      	adds	r3, #36	; 0x24
 800eb18:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800eb1a:	220b      	movs	r2, #11
 800eb1c:	2120      	movs	r1, #32
 800eb1e:	68b8      	ldr	r0, [r7, #8]
 800eb20:	f7fe ffe3 	bl	800daea <mem_set>
	si = i = 0; ni = 8;
 800eb24:	2300      	movs	r3, #0
 800eb26:	613b      	str	r3, [r7, #16]
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	61fb      	str	r3, [r7, #28]
 800eb2c:	2308      	movs	r3, #8
 800eb2e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800eb30:	69fb      	ldr	r3, [r7, #28]
 800eb32:	1c5a      	adds	r2, r3, #1
 800eb34:	61fa      	str	r2, [r7, #28]
 800eb36:	68fa      	ldr	r2, [r7, #12]
 800eb38:	4413      	add	r3, r2
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800eb3e:	7efb      	ldrb	r3, [r7, #27]
 800eb40:	2b20      	cmp	r3, #32
 800eb42:	d94e      	bls.n	800ebe2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800eb44:	7efb      	ldrb	r3, [r7, #27]
 800eb46:	2b2f      	cmp	r3, #47	; 0x2f
 800eb48:	d006      	beq.n	800eb58 <create_name+0x54>
 800eb4a:	7efb      	ldrb	r3, [r7, #27]
 800eb4c:	2b5c      	cmp	r3, #92	; 0x5c
 800eb4e:	d110      	bne.n	800eb72 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eb50:	e002      	b.n	800eb58 <create_name+0x54>
 800eb52:	69fb      	ldr	r3, [r7, #28]
 800eb54:	3301      	adds	r3, #1
 800eb56:	61fb      	str	r3, [r7, #28]
 800eb58:	68fa      	ldr	r2, [r7, #12]
 800eb5a:	69fb      	ldr	r3, [r7, #28]
 800eb5c:	4413      	add	r3, r2
 800eb5e:	781b      	ldrb	r3, [r3, #0]
 800eb60:	2b2f      	cmp	r3, #47	; 0x2f
 800eb62:	d0f6      	beq.n	800eb52 <create_name+0x4e>
 800eb64:	68fa      	ldr	r2, [r7, #12]
 800eb66:	69fb      	ldr	r3, [r7, #28]
 800eb68:	4413      	add	r3, r2
 800eb6a:	781b      	ldrb	r3, [r3, #0]
 800eb6c:	2b5c      	cmp	r3, #92	; 0x5c
 800eb6e:	d0f0      	beq.n	800eb52 <create_name+0x4e>
			break;
 800eb70:	e038      	b.n	800ebe4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800eb72:	7efb      	ldrb	r3, [r7, #27]
 800eb74:	2b2e      	cmp	r3, #46	; 0x2e
 800eb76:	d003      	beq.n	800eb80 <create_name+0x7c>
 800eb78:	693a      	ldr	r2, [r7, #16]
 800eb7a:	697b      	ldr	r3, [r7, #20]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d30c      	bcc.n	800eb9a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	2b0b      	cmp	r3, #11
 800eb84:	d002      	beq.n	800eb8c <create_name+0x88>
 800eb86:	7efb      	ldrb	r3, [r7, #27]
 800eb88:	2b2e      	cmp	r3, #46	; 0x2e
 800eb8a:	d001      	beq.n	800eb90 <create_name+0x8c>
 800eb8c:	2306      	movs	r3, #6
 800eb8e:	e044      	b.n	800ec1a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800eb90:	2308      	movs	r3, #8
 800eb92:	613b      	str	r3, [r7, #16]
 800eb94:	230b      	movs	r3, #11
 800eb96:	617b      	str	r3, [r7, #20]
			continue;
 800eb98:	e022      	b.n	800ebe0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800eb9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800eb9e:	2b00      	cmp	r3, #0
 800eba0:	da04      	bge.n	800ebac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800eba2:	7efb      	ldrb	r3, [r7, #27]
 800eba4:	3b80      	subs	r3, #128	; 0x80
 800eba6:	4a1f      	ldr	r2, [pc, #124]	; (800ec24 <create_name+0x120>)
 800eba8:	5cd3      	ldrb	r3, [r2, r3]
 800ebaa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800ebac:	7efb      	ldrb	r3, [r7, #27]
 800ebae:	4619      	mov	r1, r3
 800ebb0:	481d      	ldr	r0, [pc, #116]	; (800ec28 <create_name+0x124>)
 800ebb2:	f7fe ffdc 	bl	800db6e <chk_chr>
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d001      	beq.n	800ebc0 <create_name+0xbc>
 800ebbc:	2306      	movs	r3, #6
 800ebbe:	e02c      	b.n	800ec1a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800ebc0:	7efb      	ldrb	r3, [r7, #27]
 800ebc2:	2b60      	cmp	r3, #96	; 0x60
 800ebc4:	d905      	bls.n	800ebd2 <create_name+0xce>
 800ebc6:	7efb      	ldrb	r3, [r7, #27]
 800ebc8:	2b7a      	cmp	r3, #122	; 0x7a
 800ebca:	d802      	bhi.n	800ebd2 <create_name+0xce>
 800ebcc:	7efb      	ldrb	r3, [r7, #27]
 800ebce:	3b20      	subs	r3, #32
 800ebd0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800ebd2:	693b      	ldr	r3, [r7, #16]
 800ebd4:	1c5a      	adds	r2, r3, #1
 800ebd6:	613a      	str	r2, [r7, #16]
 800ebd8:	68ba      	ldr	r2, [r7, #8]
 800ebda:	4413      	add	r3, r2
 800ebdc:	7efa      	ldrb	r2, [r7, #27]
 800ebde:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800ebe0:	e7a6      	b.n	800eb30 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800ebe2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800ebe4:	68fa      	ldr	r2, [r7, #12]
 800ebe6:	69fb      	ldr	r3, [r7, #28]
 800ebe8:	441a      	add	r2, r3
 800ebea:	683b      	ldr	r3, [r7, #0]
 800ebec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800ebee:	693b      	ldr	r3, [r7, #16]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d101      	bne.n	800ebf8 <create_name+0xf4>
 800ebf4:	2306      	movs	r3, #6
 800ebf6:	e010      	b.n	800ec1a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ebf8:	68bb      	ldr	r3, [r7, #8]
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	2be5      	cmp	r3, #229	; 0xe5
 800ebfe:	d102      	bne.n	800ec06 <create_name+0x102>
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	2205      	movs	r2, #5
 800ec04:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800ec06:	7efb      	ldrb	r3, [r7, #27]
 800ec08:	2b20      	cmp	r3, #32
 800ec0a:	d801      	bhi.n	800ec10 <create_name+0x10c>
 800ec0c:	2204      	movs	r2, #4
 800ec0e:	e000      	b.n	800ec12 <create_name+0x10e>
 800ec10:	2200      	movs	r2, #0
 800ec12:	68bb      	ldr	r3, [r7, #8]
 800ec14:	330b      	adds	r3, #11
 800ec16:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800ec18:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	3720      	adds	r7, #32
 800ec1e:	46bd      	mov	sp, r7
 800ec20:	bd80      	pop	{r7, pc}
 800ec22:	bf00      	nop
 800ec24:	08015e34 	.word	0x08015e34
 800ec28:	08013e88 	.word	0x08013e88

0800ec2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800ec2c:	b580      	push	{r7, lr}
 800ec2e:	b086      	sub	sp, #24
 800ec30:	af00      	add	r7, sp, #0
 800ec32:	6078      	str	r0, [r7, #4]
 800ec34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ec3a:	693b      	ldr	r3, [r7, #16]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ec40:	e002      	b.n	800ec48 <follow_path+0x1c>
 800ec42:	683b      	ldr	r3, [r7, #0]
 800ec44:	3301      	adds	r3, #1
 800ec46:	603b      	str	r3, [r7, #0]
 800ec48:	683b      	ldr	r3, [r7, #0]
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	2b2f      	cmp	r3, #47	; 0x2f
 800ec4e:	d0f8      	beq.n	800ec42 <follow_path+0x16>
 800ec50:	683b      	ldr	r3, [r7, #0]
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	2b5c      	cmp	r3, #92	; 0x5c
 800ec56:	d0f4      	beq.n	800ec42 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ec58:	693b      	ldr	r3, [r7, #16]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	781b      	ldrb	r3, [r3, #0]
 800ec62:	2b1f      	cmp	r3, #31
 800ec64:	d80a      	bhi.n	800ec7c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2280      	movs	r2, #128	; 0x80
 800ec6a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ec6e:	2100      	movs	r1, #0
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f7ff fcf9 	bl	800e668 <dir_sdi>
 800ec76:	4603      	mov	r3, r0
 800ec78:	75fb      	strb	r3, [r7, #23]
 800ec7a:	e043      	b.n	800ed04 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ec7c:	463b      	mov	r3, r7
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f7ff ff3f 	bl	800eb04 <create_name>
 800ec86:	4603      	mov	r3, r0
 800ec88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ec8a:	7dfb      	ldrb	r3, [r7, #23]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d134      	bne.n	800ecfa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f7ff feaf 	bl	800e9f4 <dir_find>
 800ec96:	4603      	mov	r3, r0
 800ec98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800eca0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800eca2:	7dfb      	ldrb	r3, [r7, #23]
 800eca4:	2b00      	cmp	r3, #0
 800eca6:	d00a      	beq.n	800ecbe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800eca8:	7dfb      	ldrb	r3, [r7, #23]
 800ecaa:	2b04      	cmp	r3, #4
 800ecac:	d127      	bne.n	800ecfe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ecae:	7afb      	ldrb	r3, [r7, #11]
 800ecb0:	f003 0304 	and.w	r3, r3, #4
 800ecb4:	2b00      	cmp	r3, #0
 800ecb6:	d122      	bne.n	800ecfe <follow_path+0xd2>
 800ecb8:	2305      	movs	r3, #5
 800ecba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ecbc:	e01f      	b.n	800ecfe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ecbe:	7afb      	ldrb	r3, [r7, #11]
 800ecc0:	f003 0304 	and.w	r3, r3, #4
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d11c      	bne.n	800ed02 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	799b      	ldrb	r3, [r3, #6]
 800eccc:	f003 0310 	and.w	r3, r3, #16
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d102      	bne.n	800ecda <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ecd4:	2305      	movs	r3, #5
 800ecd6:	75fb      	strb	r3, [r7, #23]
 800ecd8:	e014      	b.n	800ed04 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ecda:	68fb      	ldr	r3, [r7, #12]
 800ecdc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	695b      	ldr	r3, [r3, #20]
 800ece4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ece8:	4413      	add	r3, r2
 800ecea:	4619      	mov	r1, r3
 800ecec:	68f8      	ldr	r0, [r7, #12]
 800ecee:	f7ff fe42 	bl	800e976 <ld_clust>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	693b      	ldr	r3, [r7, #16]
 800ecf6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ecf8:	e7c0      	b.n	800ec7c <follow_path+0x50>
			if (res != FR_OK) break;
 800ecfa:	bf00      	nop
 800ecfc:	e002      	b.n	800ed04 <follow_path+0xd8>
				break;
 800ecfe:	bf00      	nop
 800ed00:	e000      	b.n	800ed04 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ed02:	bf00      	nop
			}
		}
	}

	return res;
 800ed04:	7dfb      	ldrb	r3, [r7, #23]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	3718      	adds	r7, #24
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ed0e:	b480      	push	{r7}
 800ed10:	b087      	sub	sp, #28
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ed16:	f04f 33ff 	mov.w	r3, #4294967295
 800ed1a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ed1c:	687b      	ldr	r3, [r7, #4]
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	2b00      	cmp	r3, #0
 800ed22:	d031      	beq.n	800ed88 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	681b      	ldr	r3, [r3, #0]
 800ed28:	617b      	str	r3, [r7, #20]
 800ed2a:	e002      	b.n	800ed32 <get_ldnumber+0x24>
 800ed2c:	697b      	ldr	r3, [r7, #20]
 800ed2e:	3301      	adds	r3, #1
 800ed30:	617b      	str	r3, [r7, #20]
 800ed32:	697b      	ldr	r3, [r7, #20]
 800ed34:	781b      	ldrb	r3, [r3, #0]
 800ed36:	2b20      	cmp	r3, #32
 800ed38:	d903      	bls.n	800ed42 <get_ldnumber+0x34>
 800ed3a:	697b      	ldr	r3, [r7, #20]
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	2b3a      	cmp	r3, #58	; 0x3a
 800ed40:	d1f4      	bne.n	800ed2c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ed42:	697b      	ldr	r3, [r7, #20]
 800ed44:	781b      	ldrb	r3, [r3, #0]
 800ed46:	2b3a      	cmp	r3, #58	; 0x3a
 800ed48:	d11c      	bne.n	800ed84 <get_ldnumber+0x76>
			tp = *path;
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	1c5a      	adds	r2, r3, #1
 800ed54:	60fa      	str	r2, [r7, #12]
 800ed56:	781b      	ldrb	r3, [r3, #0]
 800ed58:	3b30      	subs	r3, #48	; 0x30
 800ed5a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ed5c:	68bb      	ldr	r3, [r7, #8]
 800ed5e:	2b09      	cmp	r3, #9
 800ed60:	d80e      	bhi.n	800ed80 <get_ldnumber+0x72>
 800ed62:	68fa      	ldr	r2, [r7, #12]
 800ed64:	697b      	ldr	r3, [r7, #20]
 800ed66:	429a      	cmp	r2, r3
 800ed68:	d10a      	bne.n	800ed80 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	d107      	bne.n	800ed80 <get_ldnumber+0x72>
					vol = (int)i;
 800ed70:	68bb      	ldr	r3, [r7, #8]
 800ed72:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ed74:	697b      	ldr	r3, [r7, #20]
 800ed76:	3301      	adds	r3, #1
 800ed78:	617b      	str	r3, [r7, #20]
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	697a      	ldr	r2, [r7, #20]
 800ed7e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ed80:	693b      	ldr	r3, [r7, #16]
 800ed82:	e002      	b.n	800ed8a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ed84:	2300      	movs	r3, #0
 800ed86:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ed88:	693b      	ldr	r3, [r7, #16]
}
 800ed8a:	4618      	mov	r0, r3
 800ed8c:	371c      	adds	r7, #28
 800ed8e:	46bd      	mov	sp, r7
 800ed90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed94:	4770      	bx	lr
	...

0800ed98 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ed98:	b580      	push	{r7, lr}
 800ed9a:	b082      	sub	sp, #8
 800ed9c:	af00      	add	r7, sp, #0
 800ed9e:	6078      	str	r0, [r7, #4]
 800eda0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	2200      	movs	r2, #0
 800eda6:	70da      	strb	r2, [r3, #3]
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	f04f 32ff 	mov.w	r2, #4294967295
 800edae:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800edb0:	6839      	ldr	r1, [r7, #0]
 800edb2:	6878      	ldr	r0, [r7, #4]
 800edb4:	f7ff f8d8 	bl	800df68 <move_window>
 800edb8:	4603      	mov	r3, r0
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d001      	beq.n	800edc2 <check_fs+0x2a>
 800edbe:	2304      	movs	r3, #4
 800edc0:	e038      	b.n	800ee34 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	3334      	adds	r3, #52	; 0x34
 800edc6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fe fdea 	bl	800d9a4 <ld_word>
 800edd0:	4603      	mov	r3, r0
 800edd2:	461a      	mov	r2, r3
 800edd4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800edd8:	429a      	cmp	r2, r3
 800edda:	d001      	beq.n	800ede0 <check_fs+0x48>
 800eddc:	2303      	movs	r3, #3
 800edde:	e029      	b.n	800ee34 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ede6:	2be9      	cmp	r3, #233	; 0xe9
 800ede8:	d009      	beq.n	800edfe <check_fs+0x66>
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800edf0:	2beb      	cmp	r3, #235	; 0xeb
 800edf2:	d11e      	bne.n	800ee32 <check_fs+0x9a>
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800edfa:	2b90      	cmp	r3, #144	; 0x90
 800edfc:	d119      	bne.n	800ee32 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	3334      	adds	r3, #52	; 0x34
 800ee02:	3336      	adds	r3, #54	; 0x36
 800ee04:	4618      	mov	r0, r3
 800ee06:	f7fe fde5 	bl	800d9d4 <ld_dword>
 800ee0a:	4603      	mov	r3, r0
 800ee0c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ee10:	4a0a      	ldr	r2, [pc, #40]	; (800ee3c <check_fs+0xa4>)
 800ee12:	4293      	cmp	r3, r2
 800ee14:	d101      	bne.n	800ee1a <check_fs+0x82>
 800ee16:	2300      	movs	r3, #0
 800ee18:	e00c      	b.n	800ee34 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	3334      	adds	r3, #52	; 0x34
 800ee1e:	3352      	adds	r3, #82	; 0x52
 800ee20:	4618      	mov	r0, r3
 800ee22:	f7fe fdd7 	bl	800d9d4 <ld_dword>
 800ee26:	4603      	mov	r3, r0
 800ee28:	4a05      	ldr	r2, [pc, #20]	; (800ee40 <check_fs+0xa8>)
 800ee2a:	4293      	cmp	r3, r2
 800ee2c:	d101      	bne.n	800ee32 <check_fs+0x9a>
 800ee2e:	2300      	movs	r3, #0
 800ee30:	e000      	b.n	800ee34 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800ee32:	2302      	movs	r3, #2
}
 800ee34:	4618      	mov	r0, r3
 800ee36:	3708      	adds	r7, #8
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	bd80      	pop	{r7, pc}
 800ee3c:	00544146 	.word	0x00544146
 800ee40:	33544146 	.word	0x33544146

0800ee44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800ee44:	b580      	push	{r7, lr}
 800ee46:	b096      	sub	sp, #88	; 0x58
 800ee48:	af00      	add	r7, sp, #0
 800ee4a:	60f8      	str	r0, [r7, #12]
 800ee4c:	60b9      	str	r1, [r7, #8]
 800ee4e:	4613      	mov	r3, r2
 800ee50:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	2200      	movs	r2, #0
 800ee56:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800ee58:	68f8      	ldr	r0, [r7, #12]
 800ee5a:	f7ff ff58 	bl	800ed0e <get_ldnumber>
 800ee5e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800ee60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	da01      	bge.n	800ee6a <find_volume+0x26>
 800ee66:	230b      	movs	r3, #11
 800ee68:	e236      	b.n	800f2d8 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ee6a:	4aac      	ldr	r2, [pc, #688]	; (800f11c <find_volume+0x2d8>)
 800ee6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee72:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800ee74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d101      	bne.n	800ee7e <find_volume+0x3a>
 800ee7a:	230c      	movs	r3, #12
 800ee7c:	e22c      	b.n	800f2d8 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800ee7e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ee80:	f7fe fe90 	bl	800dba4 <lock_fs>
 800ee84:	4603      	mov	r3, r0
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d101      	bne.n	800ee8e <find_volume+0x4a>
 800ee8a:	230f      	movs	r3, #15
 800ee8c:	e224      	b.n	800f2d8 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800ee8e:	68bb      	ldr	r3, [r7, #8]
 800ee90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee92:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ee94:	79fb      	ldrb	r3, [r7, #7]
 800ee96:	f023 0301 	bic.w	r3, r3, #1
 800ee9a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ee9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee9e:	781b      	ldrb	r3, [r3, #0]
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d01a      	beq.n	800eeda <find_volume+0x96>
		stat = disk_status(fs->drv);
 800eea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eea6:	785b      	ldrb	r3, [r3, #1]
 800eea8:	4618      	mov	r0, r3
 800eeaa:	f7fe fcdd 	bl	800d868 <disk_status>
 800eeae:	4603      	mov	r3, r0
 800eeb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800eeb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eeb8:	f003 0301 	and.w	r3, r3, #1
 800eebc:	2b00      	cmp	r3, #0
 800eebe:	d10c      	bne.n	800eeda <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800eec0:	79fb      	ldrb	r3, [r7, #7]
 800eec2:	2b00      	cmp	r3, #0
 800eec4:	d007      	beq.n	800eed6 <find_volume+0x92>
 800eec6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eeca:	f003 0304 	and.w	r3, r3, #4
 800eece:	2b00      	cmp	r3, #0
 800eed0:	d001      	beq.n	800eed6 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800eed2:	230a      	movs	r3, #10
 800eed4:	e200      	b.n	800f2d8 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800eed6:	2300      	movs	r3, #0
 800eed8:	e1fe      	b.n	800f2d8 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800eeda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eedc:	2200      	movs	r2, #0
 800eede:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800eee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eee2:	b2da      	uxtb	r2, r3
 800eee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eee6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800eee8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eeea:	785b      	ldrb	r3, [r3, #1]
 800eeec:	4618      	mov	r0, r3
 800eeee:	f7fe fcd5 	bl	800d89c <disk_initialize>
 800eef2:	4603      	mov	r3, r0
 800eef4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800eef8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800eefc:	f003 0301 	and.w	r3, r3, #1
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d001      	beq.n	800ef08 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ef04:	2303      	movs	r3, #3
 800ef06:	e1e7      	b.n	800f2d8 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ef08:	79fb      	ldrb	r3, [r7, #7]
 800ef0a:	2b00      	cmp	r3, #0
 800ef0c:	d007      	beq.n	800ef1e <find_volume+0xda>
 800ef0e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ef12:	f003 0304 	and.w	r3, r3, #4
 800ef16:	2b00      	cmp	r3, #0
 800ef18:	d001      	beq.n	800ef1e <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ef1a:	230a      	movs	r3, #10
 800ef1c:	e1dc      	b.n	800f2d8 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ef1e:	2300      	movs	r3, #0
 800ef20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ef22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ef24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef26:	f7ff ff37 	bl	800ed98 <check_fs>
 800ef2a:	4603      	mov	r3, r0
 800ef2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800ef30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef34:	2b02      	cmp	r3, #2
 800ef36:	d14b      	bne.n	800efd0 <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ef38:	2300      	movs	r3, #0
 800ef3a:	643b      	str	r3, [r7, #64]	; 0x40
 800ef3c:	e01f      	b.n	800ef7e <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800ef3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef40:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ef44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef46:	011b      	lsls	r3, r3, #4
 800ef48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800ef4c:	4413      	add	r3, r2
 800ef4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800ef50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef52:	3304      	adds	r3, #4
 800ef54:	781b      	ldrb	r3, [r3, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d006      	beq.n	800ef68 <find_volume+0x124>
 800ef5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef5c:	3308      	adds	r3, #8
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f7fe fd38 	bl	800d9d4 <ld_dword>
 800ef64:	4602      	mov	r2, r0
 800ef66:	e000      	b.n	800ef6a <find_volume+0x126>
 800ef68:	2200      	movs	r2, #0
 800ef6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef6c:	009b      	lsls	r3, r3, #2
 800ef6e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800ef72:	440b      	add	r3, r1
 800ef74:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800ef78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef7a:	3301      	adds	r3, #1
 800ef7c:	643b      	str	r3, [r7, #64]	; 0x40
 800ef7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef80:	2b03      	cmp	r3, #3
 800ef82:	d9dc      	bls.n	800ef3e <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ef84:	2300      	movs	r3, #0
 800ef86:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ef88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d002      	beq.n	800ef94 <find_volume+0x150>
 800ef8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef90:	3b01      	subs	r3, #1
 800ef92:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ef94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef96:	009b      	lsls	r3, r3, #2
 800ef98:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ef9c:	4413      	add	r3, r2
 800ef9e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800efa2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800efa4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800efa6:	2b00      	cmp	r3, #0
 800efa8:	d005      	beq.n	800efb6 <find_volume+0x172>
 800efaa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800efac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800efae:	f7ff fef3 	bl	800ed98 <check_fs>
 800efb2:	4603      	mov	r3, r0
 800efb4:	e000      	b.n	800efb8 <find_volume+0x174>
 800efb6:	2303      	movs	r3, #3
 800efb8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800efbc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800efc0:	2b01      	cmp	r3, #1
 800efc2:	d905      	bls.n	800efd0 <find_volume+0x18c>
 800efc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efc6:	3301      	adds	r3, #1
 800efc8:	643b      	str	r3, [r7, #64]	; 0x40
 800efca:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800efcc:	2b03      	cmp	r3, #3
 800efce:	d9e1      	bls.n	800ef94 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800efd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800efd4:	2b04      	cmp	r3, #4
 800efd6:	d101      	bne.n	800efdc <find_volume+0x198>
 800efd8:	2301      	movs	r3, #1
 800efda:	e17d      	b.n	800f2d8 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800efdc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800efe0:	2b01      	cmp	r3, #1
 800efe2:	d901      	bls.n	800efe8 <find_volume+0x1a4>
 800efe4:	230d      	movs	r3, #13
 800efe6:	e177      	b.n	800f2d8 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800efe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efea:	3334      	adds	r3, #52	; 0x34
 800efec:	330b      	adds	r3, #11
 800efee:	4618      	mov	r0, r3
 800eff0:	f7fe fcd8 	bl	800d9a4 <ld_word>
 800eff4:	4603      	mov	r3, r0
 800eff6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800effa:	d001      	beq.n	800f000 <find_volume+0x1bc>
 800effc:	230d      	movs	r3, #13
 800effe:	e16b      	b.n	800f2d8 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800f000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f002:	3334      	adds	r3, #52	; 0x34
 800f004:	3316      	adds	r3, #22
 800f006:	4618      	mov	r0, r3
 800f008:	f7fe fccc 	bl	800d9a4 <ld_word>
 800f00c:	4603      	mov	r3, r0
 800f00e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800f010:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f012:	2b00      	cmp	r3, #0
 800f014:	d106      	bne.n	800f024 <find_volume+0x1e0>
 800f016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f018:	3334      	adds	r3, #52	; 0x34
 800f01a:	3324      	adds	r3, #36	; 0x24
 800f01c:	4618      	mov	r0, r3
 800f01e:	f7fe fcd9 	bl	800d9d4 <ld_dword>
 800f022:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800f024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f026:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f028:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800f02a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f02c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f030:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f032:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800f034:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f036:	789b      	ldrb	r3, [r3, #2]
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d005      	beq.n	800f048 <find_volume+0x204>
 800f03c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03e:	789b      	ldrb	r3, [r3, #2]
 800f040:	2b02      	cmp	r3, #2
 800f042:	d001      	beq.n	800f048 <find_volume+0x204>
 800f044:	230d      	movs	r3, #13
 800f046:	e147      	b.n	800f2d8 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800f048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f04a:	789b      	ldrb	r3, [r3, #2]
 800f04c:	461a      	mov	r2, r3
 800f04e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f050:	fb02 f303 	mul.w	r3, r2, r3
 800f054:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800f056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f058:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800f05c:	b29a      	uxth	r2, r3
 800f05e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f060:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800f062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f064:	895b      	ldrh	r3, [r3, #10]
 800f066:	2b00      	cmp	r3, #0
 800f068:	d008      	beq.n	800f07c <find_volume+0x238>
 800f06a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f06c:	895b      	ldrh	r3, [r3, #10]
 800f06e:	461a      	mov	r2, r3
 800f070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f072:	895b      	ldrh	r3, [r3, #10]
 800f074:	3b01      	subs	r3, #1
 800f076:	4013      	ands	r3, r2
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d001      	beq.n	800f080 <find_volume+0x23c>
 800f07c:	230d      	movs	r3, #13
 800f07e:	e12b      	b.n	800f2d8 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800f080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f082:	3334      	adds	r3, #52	; 0x34
 800f084:	3311      	adds	r3, #17
 800f086:	4618      	mov	r0, r3
 800f088:	f7fe fc8c 	bl	800d9a4 <ld_word>
 800f08c:	4603      	mov	r3, r0
 800f08e:	461a      	mov	r2, r3
 800f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f092:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f096:	891b      	ldrh	r3, [r3, #8]
 800f098:	f003 030f 	and.w	r3, r3, #15
 800f09c:	b29b      	uxth	r3, r3
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	d001      	beq.n	800f0a6 <find_volume+0x262>
 800f0a2:	230d      	movs	r3, #13
 800f0a4:	e118      	b.n	800f2d8 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f0a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0a8:	3334      	adds	r3, #52	; 0x34
 800f0aa:	3313      	adds	r3, #19
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	f7fe fc79 	bl	800d9a4 <ld_word>
 800f0b2:	4603      	mov	r3, r0
 800f0b4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f0b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f0b8:	2b00      	cmp	r3, #0
 800f0ba:	d106      	bne.n	800f0ca <find_volume+0x286>
 800f0bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0be:	3334      	adds	r3, #52	; 0x34
 800f0c0:	3320      	adds	r3, #32
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fe fc86 	bl	800d9d4 <ld_dword>
 800f0c8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0cc:	3334      	adds	r3, #52	; 0x34
 800f0ce:	330e      	adds	r3, #14
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7fe fc67 	bl	800d9a4 <ld_word>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f0da:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f0dc:	2b00      	cmp	r3, #0
 800f0de:	d101      	bne.n	800f0e4 <find_volume+0x2a0>
 800f0e0:	230d      	movs	r3, #13
 800f0e2:	e0f9      	b.n	800f2d8 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f0e4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f0e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f0e8:	4413      	add	r3, r2
 800f0ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f0ec:	8912      	ldrh	r2, [r2, #8]
 800f0ee:	0912      	lsrs	r2, r2, #4
 800f0f0:	b292      	uxth	r2, r2
 800f0f2:	4413      	add	r3, r2
 800f0f4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f0f6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fa:	429a      	cmp	r2, r3
 800f0fc:	d201      	bcs.n	800f102 <find_volume+0x2be>
 800f0fe:	230d      	movs	r3, #13
 800f100:	e0ea      	b.n	800f2d8 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f102:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f106:	1ad3      	subs	r3, r2, r3
 800f108:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f10a:	8952      	ldrh	r2, [r2, #10]
 800f10c:	fbb3 f3f2 	udiv	r3, r3, r2
 800f110:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f114:	2b00      	cmp	r3, #0
 800f116:	d103      	bne.n	800f120 <find_volume+0x2dc>
 800f118:	230d      	movs	r3, #13
 800f11a:	e0dd      	b.n	800f2d8 <find_volume+0x494>
 800f11c:	20000704 	.word	0x20000704
		fmt = FS_FAT32;
 800f120:	2303      	movs	r3, #3
 800f122:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f128:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f12c:	4293      	cmp	r3, r2
 800f12e:	d802      	bhi.n	800f136 <find_volume+0x2f2>
 800f130:	2302      	movs	r3, #2
 800f132:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f138:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f13c:	4293      	cmp	r3, r2
 800f13e:	d802      	bhi.n	800f146 <find_volume+0x302>
 800f140:	2301      	movs	r3, #1
 800f142:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f148:	1c9a      	adds	r2, r3, #2
 800f14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14c:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f14e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f150:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f152:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f154:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f158:	441a      	add	r2, r3
 800f15a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f15c:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f15e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f162:	441a      	add	r2, r3
 800f164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f166:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f168:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f16c:	2b03      	cmp	r3, #3
 800f16e:	d11e      	bne.n	800f1ae <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f172:	3334      	adds	r3, #52	; 0x34
 800f174:	332a      	adds	r3, #42	; 0x2a
 800f176:	4618      	mov	r0, r3
 800f178:	f7fe fc14 	bl	800d9a4 <ld_word>
 800f17c:	4603      	mov	r3, r0
 800f17e:	2b00      	cmp	r3, #0
 800f180:	d001      	beq.n	800f186 <find_volume+0x342>
 800f182:	230d      	movs	r3, #13
 800f184:	e0a8      	b.n	800f2d8 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f188:	891b      	ldrh	r3, [r3, #8]
 800f18a:	2b00      	cmp	r3, #0
 800f18c:	d001      	beq.n	800f192 <find_volume+0x34e>
 800f18e:	230d      	movs	r3, #13
 800f190:	e0a2      	b.n	800f2d8 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f194:	3334      	adds	r3, #52	; 0x34
 800f196:	332c      	adds	r3, #44	; 0x2c
 800f198:	4618      	mov	r0, r3
 800f19a:	f7fe fc1b 	bl	800d9d4 <ld_dword>
 800f19e:	4602      	mov	r2, r0
 800f1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a2:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f1a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a6:	699b      	ldr	r3, [r3, #24]
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	647b      	str	r3, [r7, #68]	; 0x44
 800f1ac:	e01f      	b.n	800f1ee <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1b0:	891b      	ldrh	r3, [r3, #8]
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d101      	bne.n	800f1ba <find_volume+0x376>
 800f1b6:	230d      	movs	r3, #13
 800f1b8:	e08e      	b.n	800f2d8 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f1ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f1be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f1c0:	441a      	add	r2, r3
 800f1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f1c6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f1ca:	2b02      	cmp	r3, #2
 800f1cc:	d103      	bne.n	800f1d6 <find_volume+0x392>
 800f1ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d0:	699b      	ldr	r3, [r3, #24]
 800f1d2:	005b      	lsls	r3, r3, #1
 800f1d4:	e00a      	b.n	800f1ec <find_volume+0x3a8>
 800f1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d8:	699a      	ldr	r2, [r3, #24]
 800f1da:	4613      	mov	r3, r2
 800f1dc:	005b      	lsls	r3, r3, #1
 800f1de:	4413      	add	r3, r2
 800f1e0:	085a      	lsrs	r2, r3, #1
 800f1e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e4:	699b      	ldr	r3, [r3, #24]
 800f1e6:	f003 0301 	and.w	r3, r3, #1
 800f1ea:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f1ec:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f1ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f0:	69da      	ldr	r2, [r3, #28]
 800f1f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f1f4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f1f8:	0a5b      	lsrs	r3, r3, #9
 800f1fa:	429a      	cmp	r2, r3
 800f1fc:	d201      	bcs.n	800f202 <find_volume+0x3be>
 800f1fe:	230d      	movs	r3, #13
 800f200:	e06a      	b.n	800f2d8 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f204:	f04f 32ff 	mov.w	r2, #4294967295
 800f208:	615a      	str	r2, [r3, #20]
 800f20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20c:	695a      	ldr	r2, [r3, #20]
 800f20e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f210:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f212:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f214:	2280      	movs	r2, #128	; 0x80
 800f216:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f218:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f21c:	2b03      	cmp	r3, #3
 800f21e:	d149      	bne.n	800f2b4 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f222:	3334      	adds	r3, #52	; 0x34
 800f224:	3330      	adds	r3, #48	; 0x30
 800f226:	4618      	mov	r0, r3
 800f228:	f7fe fbbc 	bl	800d9a4 <ld_word>
 800f22c:	4603      	mov	r3, r0
 800f22e:	2b01      	cmp	r3, #1
 800f230:	d140      	bne.n	800f2b4 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f234:	3301      	adds	r3, #1
 800f236:	4619      	mov	r1, r3
 800f238:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f23a:	f7fe fe95 	bl	800df68 <move_window>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	d137      	bne.n	800f2b4 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800f244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f246:	2200      	movs	r2, #0
 800f248:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f24a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24c:	3334      	adds	r3, #52	; 0x34
 800f24e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f252:	4618      	mov	r0, r3
 800f254:	f7fe fba6 	bl	800d9a4 <ld_word>
 800f258:	4603      	mov	r3, r0
 800f25a:	461a      	mov	r2, r3
 800f25c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f260:	429a      	cmp	r2, r3
 800f262:	d127      	bne.n	800f2b4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f266:	3334      	adds	r3, #52	; 0x34
 800f268:	4618      	mov	r0, r3
 800f26a:	f7fe fbb3 	bl	800d9d4 <ld_dword>
 800f26e:	4603      	mov	r3, r0
 800f270:	4a1b      	ldr	r2, [pc, #108]	; (800f2e0 <find_volume+0x49c>)
 800f272:	4293      	cmp	r3, r2
 800f274:	d11e      	bne.n	800f2b4 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f278:	3334      	adds	r3, #52	; 0x34
 800f27a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f27e:	4618      	mov	r0, r3
 800f280:	f7fe fba8 	bl	800d9d4 <ld_dword>
 800f284:	4603      	mov	r3, r0
 800f286:	4a17      	ldr	r2, [pc, #92]	; (800f2e4 <find_volume+0x4a0>)
 800f288:	4293      	cmp	r3, r2
 800f28a:	d113      	bne.n	800f2b4 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f28e:	3334      	adds	r3, #52	; 0x34
 800f290:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f294:	4618      	mov	r0, r3
 800f296:	f7fe fb9d 	bl	800d9d4 <ld_dword>
 800f29a:	4602      	mov	r2, r0
 800f29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f29e:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2a2:	3334      	adds	r3, #52	; 0x34
 800f2a4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7fe fb93 	bl	800d9d4 <ld_dword>
 800f2ae:	4602      	mov	r2, r0
 800f2b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b2:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f2b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2b6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f2ba:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f2bc:	4b0a      	ldr	r3, [pc, #40]	; (800f2e8 <find_volume+0x4a4>)
 800f2be:	881b      	ldrh	r3, [r3, #0]
 800f2c0:	3301      	adds	r3, #1
 800f2c2:	b29a      	uxth	r2, r3
 800f2c4:	4b08      	ldr	r3, [pc, #32]	; (800f2e8 <find_volume+0x4a4>)
 800f2c6:	801a      	strh	r2, [r3, #0]
 800f2c8:	4b07      	ldr	r3, [pc, #28]	; (800f2e8 <find_volume+0x4a4>)
 800f2ca:	881a      	ldrh	r2, [r3, #0]
 800f2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f2ce:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f2d0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f2d2:	f7fe fde1 	bl	800de98 <clear_lock>
#endif
	return FR_OK;
 800f2d6:	2300      	movs	r3, #0
}
 800f2d8:	4618      	mov	r0, r3
 800f2da:	3758      	adds	r7, #88	; 0x58
 800f2dc:	46bd      	mov	sp, r7
 800f2de:	bd80      	pop	{r7, pc}
 800f2e0:	41615252 	.word	0x41615252
 800f2e4:	61417272 	.word	0x61417272
 800f2e8:	20000708 	.word	0x20000708

0800f2ec <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
 800f2f4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f2f6:	2309      	movs	r3, #9
 800f2f8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d02e      	beq.n	800f35e <validate+0x72>
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d02a      	beq.n	800f35e <validate+0x72>
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	781b      	ldrb	r3, [r3, #0]
 800f30e:	2b00      	cmp	r3, #0
 800f310:	d025      	beq.n	800f35e <validate+0x72>
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	889a      	ldrh	r2, [r3, #4]
 800f316:	687b      	ldr	r3, [r7, #4]
 800f318:	681b      	ldr	r3, [r3, #0]
 800f31a:	88db      	ldrh	r3, [r3, #6]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	d11e      	bne.n	800f35e <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	4618      	mov	r0, r3
 800f326:	f7fe fc3d 	bl	800dba4 <lock_fs>
 800f32a:	4603      	mov	r3, r0
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d014      	beq.n	800f35a <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	785b      	ldrb	r3, [r3, #1]
 800f336:	4618      	mov	r0, r3
 800f338:	f7fe fa96 	bl	800d868 <disk_status>
 800f33c:	4603      	mov	r3, r0
 800f33e:	f003 0301 	and.w	r3, r3, #1
 800f342:	2b00      	cmp	r3, #0
 800f344:	d102      	bne.n	800f34c <validate+0x60>
				res = FR_OK;
 800f346:	2300      	movs	r3, #0
 800f348:	73fb      	strb	r3, [r7, #15]
 800f34a:	e008      	b.n	800f35e <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	681b      	ldr	r3, [r3, #0]
 800f350:	2100      	movs	r1, #0
 800f352:	4618      	mov	r0, r3
 800f354:	f7fe fc3c 	bl	800dbd0 <unlock_fs>
 800f358:	e001      	b.n	800f35e <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f35a:	230f      	movs	r3, #15
 800f35c:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f35e:	7bfb      	ldrb	r3, [r7, #15]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d102      	bne.n	800f36a <validate+0x7e>
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	e000      	b.n	800f36c <validate+0x80>
 800f36a:	2300      	movs	r3, #0
 800f36c:	683a      	ldr	r2, [r7, #0]
 800f36e:	6013      	str	r3, [r2, #0]
	return res;
 800f370:	7bfb      	ldrb	r3, [r7, #15]
}
 800f372:	4618      	mov	r0, r3
 800f374:	3710      	adds	r7, #16
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}
	...

0800f37c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f37c:	b580      	push	{r7, lr}
 800f37e:	b088      	sub	sp, #32
 800f380:	af00      	add	r7, sp, #0
 800f382:	60f8      	str	r0, [r7, #12]
 800f384:	60b9      	str	r1, [r7, #8]
 800f386:	4613      	mov	r3, r2
 800f388:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f38e:	f107 0310 	add.w	r3, r7, #16
 800f392:	4618      	mov	r0, r3
 800f394:	f7ff fcbb 	bl	800ed0e <get_ldnumber>
 800f398:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f39a:	69fb      	ldr	r3, [r7, #28]
 800f39c:	2b00      	cmp	r3, #0
 800f39e:	da01      	bge.n	800f3a4 <f_mount+0x28>
 800f3a0:	230b      	movs	r3, #11
 800f3a2:	e048      	b.n	800f436 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f3a4:	4a26      	ldr	r2, [pc, #152]	; (800f440 <f_mount+0xc4>)
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f3ac:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f3ae:	69bb      	ldr	r3, [r7, #24]
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d00f      	beq.n	800f3d4 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f3b4:	69b8      	ldr	r0, [r7, #24]
 800f3b6:	f7fe fd6f 	bl	800de98 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f3ba:	69bb      	ldr	r3, [r7, #24]
 800f3bc:	68db      	ldr	r3, [r3, #12]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f001 f905 	bl	80105ce <ff_del_syncobj>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d101      	bne.n	800f3ce <f_mount+0x52>
 800f3ca:	2302      	movs	r3, #2
 800f3cc:	e033      	b.n	800f436 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f3ce:	69bb      	ldr	r3, [r7, #24]
 800f3d0:	2200      	movs	r2, #0
 800f3d2:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	2b00      	cmp	r3, #0
 800f3d8:	d00f      	beq.n	800f3fa <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	2200      	movs	r2, #0
 800f3de:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f3e0:	69fb      	ldr	r3, [r7, #28]
 800f3e2:	b2da      	uxtb	r2, r3
 800f3e4:	68fb      	ldr	r3, [r7, #12]
 800f3e6:	330c      	adds	r3, #12
 800f3e8:	4619      	mov	r1, r3
 800f3ea:	4610      	mov	r0, r2
 800f3ec:	f001 f8cf 	bl	801058e <ff_cre_syncobj>
 800f3f0:	4603      	mov	r3, r0
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d101      	bne.n	800f3fa <f_mount+0x7e>
 800f3f6:	2302      	movs	r3, #2
 800f3f8:	e01d      	b.n	800f436 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f3fa:	68fa      	ldr	r2, [r7, #12]
 800f3fc:	4910      	ldr	r1, [pc, #64]	; (800f440 <f_mount+0xc4>)
 800f3fe:	69fb      	ldr	r3, [r7, #28]
 800f400:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	2b00      	cmp	r3, #0
 800f408:	d002      	beq.n	800f410 <f_mount+0x94>
 800f40a:	79fb      	ldrb	r3, [r7, #7]
 800f40c:	2b01      	cmp	r3, #1
 800f40e:	d001      	beq.n	800f414 <f_mount+0x98>
 800f410:	2300      	movs	r3, #0
 800f412:	e010      	b.n	800f436 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f414:	f107 010c 	add.w	r1, r7, #12
 800f418:	f107 0308 	add.w	r3, r7, #8
 800f41c:	2200      	movs	r2, #0
 800f41e:	4618      	mov	r0, r3
 800f420:	f7ff fd10 	bl	800ee44 <find_volume>
 800f424:	4603      	mov	r3, r0
 800f426:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f428:	68fb      	ldr	r3, [r7, #12]
 800f42a:	7dfa      	ldrb	r2, [r7, #23]
 800f42c:	4611      	mov	r1, r2
 800f42e:	4618      	mov	r0, r3
 800f430:	f7fe fbce 	bl	800dbd0 <unlock_fs>
 800f434:	7dfb      	ldrb	r3, [r7, #23]
}
 800f436:	4618      	mov	r0, r3
 800f438:	3720      	adds	r7, #32
 800f43a:	46bd      	mov	sp, r7
 800f43c:	bd80      	pop	{r7, pc}
 800f43e:	bf00      	nop
 800f440:	20000704 	.word	0x20000704

0800f444 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f444:	b580      	push	{r7, lr}
 800f446:	b098      	sub	sp, #96	; 0x60
 800f448:	af00      	add	r7, sp, #0
 800f44a:	60f8      	str	r0, [r7, #12]
 800f44c:	60b9      	str	r1, [r7, #8]
 800f44e:	4613      	mov	r3, r2
 800f450:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	2b00      	cmp	r3, #0
 800f456:	d101      	bne.n	800f45c <f_open+0x18>
 800f458:	2309      	movs	r3, #9
 800f45a:	e1b0      	b.n	800f7be <f_open+0x37a>

	/* Get logical drive */
	//mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
	res = find_volume(&path, &fs, mode);
 800f45c:	79fa      	ldrb	r2, [r7, #7]
 800f45e:	f107 0110 	add.w	r1, r7, #16
 800f462:	f107 0308 	add.w	r3, r7, #8
 800f466:	4618      	mov	r0, r3
 800f468:	f7ff fcec 	bl	800ee44 <find_volume>
 800f46c:	4603      	mov	r3, r0
 800f46e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f472:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f476:	2b00      	cmp	r3, #0
 800f478:	f040 8191 	bne.w	800f79e <f_open+0x35a>
		dj.obj.fs = fs;
 800f47c:	693b      	ldr	r3, [r7, #16]
 800f47e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f480:	68ba      	ldr	r2, [r7, #8]
 800f482:	f107 0314 	add.w	r3, r7, #20
 800f486:	4611      	mov	r1, r2
 800f488:	4618      	mov	r0, r3
 800f48a:	f7ff fbcf 	bl	800ec2c <follow_path>
 800f48e:	4603      	mov	r3, r0
 800f490:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f494:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d11a      	bne.n	800f4d2 <f_open+0x8e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f49c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f4a0:	b25b      	sxtb	r3, r3
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	da03      	bge.n	800f4ae <f_open+0x6a>
				res = FR_INVALID_NAME;
 800f4a6:	2306      	movs	r3, #6
 800f4a8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f4ac:	e011      	b.n	800f4d2 <f_open+0x8e>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f4ae:	79fb      	ldrb	r3, [r7, #7]
 800f4b0:	f023 0301 	bic.w	r3, r3, #1
 800f4b4:	2b00      	cmp	r3, #0
 800f4b6:	bf14      	ite	ne
 800f4b8:	2301      	movne	r3, #1
 800f4ba:	2300      	moveq	r3, #0
 800f4bc:	b2db      	uxtb	r3, r3
 800f4be:	461a      	mov	r2, r3
 800f4c0:	f107 0314 	add.w	r3, r7, #20
 800f4c4:	4611      	mov	r1, r2
 800f4c6:	4618      	mov	r0, r3
 800f4c8:	f7fe fb9e 	bl	800dc08 <chk_lock>
 800f4cc:	4603      	mov	r3, r0
 800f4ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f4d2:	79fb      	ldrb	r3, [r7, #7]
 800f4d4:	f003 031c 	and.w	r3, r3, #28
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	d07f      	beq.n	800f5dc <f_open+0x198>
			if (res != FR_OK) {					/* No file, create new */
 800f4dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d017      	beq.n	800f514 <f_open+0xd0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f4e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4e8:	2b04      	cmp	r3, #4
 800f4ea:	d10e      	bne.n	800f50a <f_open+0xc6>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f4ec:	f7fe fbe8 	bl	800dcc0 <enq_lock>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d006      	beq.n	800f504 <f_open+0xc0>
 800f4f6:	f107 0314 	add.w	r3, r7, #20
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f7ff facf 	bl	800ea9e <dir_register>
 800f500:	4603      	mov	r3, r0
 800f502:	e000      	b.n	800f506 <f_open+0xc2>
 800f504:	2312      	movs	r3, #18
 800f506:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f50a:	79fb      	ldrb	r3, [r7, #7]
 800f50c:	f043 0308 	orr.w	r3, r3, #8
 800f510:	71fb      	strb	r3, [r7, #7]
 800f512:	e010      	b.n	800f536 <f_open+0xf2>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f514:	7ebb      	ldrb	r3, [r7, #26]
 800f516:	f003 0311 	and.w	r3, r3, #17
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d003      	beq.n	800f526 <f_open+0xe2>
					res = FR_DENIED;
 800f51e:	2307      	movs	r3, #7
 800f520:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f524:	e007      	b.n	800f536 <f_open+0xf2>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f526:	79fb      	ldrb	r3, [r7, #7]
 800f528:	f003 0304 	and.w	r3, r3, #4
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d002      	beq.n	800f536 <f_open+0xf2>
 800f530:	2308      	movs	r3, #8
 800f532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d168      	bne.n	800f610 <f_open+0x1cc>
 800f53e:	79fb      	ldrb	r3, [r7, #7]
 800f540:	f003 0308 	and.w	r3, r3, #8
 800f544:	2b00      	cmp	r3, #0
 800f546:	d063      	beq.n	800f610 <f_open+0x1cc>
				dw = GET_FATTIME();
 800f548:	f7fd ff1e 	bl	800d388 <get_fattime>
 800f54c:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f54e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f550:	330e      	adds	r3, #14
 800f552:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f554:	4618      	mov	r0, r3
 800f556:	f7fe fa7b 	bl	800da50 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f55c:	3316      	adds	r3, #22
 800f55e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f560:	4618      	mov	r0, r3
 800f562:	f7fe fa75 	bl	800da50 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f568:	330b      	adds	r3, #11
 800f56a:	2220      	movs	r2, #32
 800f56c:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f56e:	693b      	ldr	r3, [r7, #16]
 800f570:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f572:	4611      	mov	r1, r2
 800f574:	4618      	mov	r0, r3
 800f576:	f7ff f9fe 	bl	800e976 <ld_clust>
 800f57a:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f57c:	693b      	ldr	r3, [r7, #16]
 800f57e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f580:	2200      	movs	r2, #0
 800f582:	4618      	mov	r0, r3
 800f584:	f7ff fa16 	bl	800e9b4 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f58a:	331c      	adds	r3, #28
 800f58c:	2100      	movs	r1, #0
 800f58e:	4618      	mov	r0, r3
 800f590:	f7fe fa5e 	bl	800da50 <st_dword>
					fs->wflag = 1;
 800f594:	693b      	ldr	r3, [r7, #16]
 800f596:	2201      	movs	r2, #1
 800f598:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f59a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d037      	beq.n	800f610 <f_open+0x1cc>
						dw = fs->winsect;
 800f5a0:	693b      	ldr	r3, [r7, #16]
 800f5a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f5a4:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f5a6:	f107 0314 	add.w	r3, r7, #20
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7fe ff29 	bl	800e406 <remove_chain>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f5ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5be:	2b00      	cmp	r3, #0
 800f5c0:	d126      	bne.n	800f610 <f_open+0x1cc>
							res = move_window(fs, dw);
 800f5c2:	693b      	ldr	r3, [r7, #16]
 800f5c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	f7fe fcce 	bl	800df68 <move_window>
 800f5cc:	4603      	mov	r3, r0
 800f5ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f5d2:	693b      	ldr	r3, [r7, #16]
 800f5d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f5d6:	3a01      	subs	r2, #1
 800f5d8:	611a      	str	r2, [r3, #16]
 800f5da:	e019      	b.n	800f610 <f_open+0x1cc>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f5dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d115      	bne.n	800f610 <f_open+0x1cc>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f5e4:	7ebb      	ldrb	r3, [r7, #26]
 800f5e6:	f003 0310 	and.w	r3, r3, #16
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	d003      	beq.n	800f5f6 <f_open+0x1b2>
					res = FR_NO_FILE;
 800f5ee:	2304      	movs	r3, #4
 800f5f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f5f4:	e00c      	b.n	800f610 <f_open+0x1cc>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f5f6:	79fb      	ldrb	r3, [r7, #7]
 800f5f8:	f003 0302 	and.w	r3, r3, #2
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d007      	beq.n	800f610 <f_open+0x1cc>
 800f600:	7ebb      	ldrb	r3, [r7, #26]
 800f602:	f003 0301 	and.w	r3, r3, #1
 800f606:	2b00      	cmp	r3, #0
 800f608:	d002      	beq.n	800f610 <f_open+0x1cc>
						res = FR_DENIED;
 800f60a:	2307      	movs	r3, #7
 800f60c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f610:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f614:	2b00      	cmp	r3, #0
 800f616:	d128      	bne.n	800f66a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f618:	79fb      	ldrb	r3, [r7, #7]
 800f61a:	f003 0308 	and.w	r3, r3, #8
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d003      	beq.n	800f62a <f_open+0x1e6>
				mode |= FA_MODIFIED;
 800f622:	79fb      	ldrb	r3, [r7, #7]
 800f624:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f628:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f62a:	693b      	ldr	r3, [r7, #16]
 800f62c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f632:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f638:	79fb      	ldrb	r3, [r7, #7]
 800f63a:	f023 0301 	bic.w	r3, r3, #1
 800f63e:	2b00      	cmp	r3, #0
 800f640:	bf14      	ite	ne
 800f642:	2301      	movne	r3, #1
 800f644:	2300      	moveq	r3, #0
 800f646:	b2db      	uxtb	r3, r3
 800f648:	461a      	mov	r2, r3
 800f64a:	f107 0314 	add.w	r3, r7, #20
 800f64e:	4611      	mov	r1, r2
 800f650:	4618      	mov	r0, r3
 800f652:	f7fe fb57 	bl	800dd04 <inc_lock>
 800f656:	4602      	mov	r2, r0
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	691b      	ldr	r3, [r3, #16]
 800f660:	2b00      	cmp	r3, #0
 800f662:	d102      	bne.n	800f66a <f_open+0x226>
 800f664:	2302      	movs	r3, #2
 800f666:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f66a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f66e:	2b00      	cmp	r3, #0
 800f670:	f040 8095 	bne.w	800f79e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f674:	693b      	ldr	r3, [r7, #16]
 800f676:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f678:	4611      	mov	r1, r2
 800f67a:	4618      	mov	r0, r3
 800f67c:	f7ff f97b 	bl	800e976 <ld_clust>
 800f680:	4602      	mov	r2, r0
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f688:	331c      	adds	r3, #28
 800f68a:	4618      	mov	r0, r3
 800f68c:	f7fe f9a2 	bl	800d9d4 <ld_dword>
 800f690:	4602      	mov	r2, r0
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f696:	68fb      	ldr	r3, [r7, #12]
 800f698:	2200      	movs	r2, #0
 800f69a:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f69c:	693a      	ldr	r2, [r7, #16]
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f6a2:	693b      	ldr	r3, [r7, #16]
 800f6a4:	88da      	ldrh	r2, [r3, #6]
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	79fa      	ldrb	r2, [r7, #7]
 800f6ae:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	2200      	movs	r2, #0
 800f6b4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	2200      	movs	r2, #0
 800f6ba:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	2200      	movs	r2, #0
 800f6c0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	3330      	adds	r3, #48	; 0x30
 800f6c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f6ca:	2100      	movs	r1, #0
 800f6cc:	4618      	mov	r0, r3
 800f6ce:	f7fe fa0c 	bl	800daea <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f6d2:	79fb      	ldrb	r3, [r7, #7]
 800f6d4:	f003 0320 	and.w	r3, r3, #32
 800f6d8:	2b00      	cmp	r3, #0
 800f6da:	d060      	beq.n	800f79e <f_open+0x35a>
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	68db      	ldr	r3, [r3, #12]
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d05c      	beq.n	800f79e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	68da      	ldr	r2, [r3, #12]
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f6ec:	693b      	ldr	r3, [r7, #16]
 800f6ee:	895b      	ldrh	r3, [r3, #10]
 800f6f0:	025b      	lsls	r3, r3, #9
 800f6f2:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	689b      	ldr	r3, [r3, #8]
 800f6f8:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f6fa:	68fb      	ldr	r3, [r7, #12]
 800f6fc:	68db      	ldr	r3, [r3, #12]
 800f6fe:	657b      	str	r3, [r7, #84]	; 0x54
 800f700:	e016      	b.n	800f730 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f706:	4618      	mov	r0, r3
 800f708:	f7fe fce9 	bl	800e0de <get_fat>
 800f70c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f70e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f710:	2b01      	cmp	r3, #1
 800f712:	d802      	bhi.n	800f71a <f_open+0x2d6>
 800f714:	2302      	movs	r3, #2
 800f716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f71a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f71c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f720:	d102      	bne.n	800f728 <f_open+0x2e4>
 800f722:	2301      	movs	r3, #1
 800f724:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f728:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f72a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f72c:	1ad3      	subs	r3, r2, r3
 800f72e:	657b      	str	r3, [r7, #84]	; 0x54
 800f730:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f734:	2b00      	cmp	r3, #0
 800f736:	d103      	bne.n	800f740 <f_open+0x2fc>
 800f738:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f73a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d8e0      	bhi.n	800f702 <f_open+0x2be>
				}
				fp->clust = clst;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f744:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f746:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d127      	bne.n	800f79e <f_open+0x35a>
 800f74e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f750:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f754:	2b00      	cmp	r3, #0
 800f756:	d022      	beq.n	800f79e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f758:	693b      	ldr	r3, [r7, #16]
 800f75a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f75c:	4618      	mov	r0, r3
 800f75e:	f7fe fc9f 	bl	800e0a0 <clust2sect>
 800f762:	6478      	str	r0, [r7, #68]	; 0x44
 800f764:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f766:	2b00      	cmp	r3, #0
 800f768:	d103      	bne.n	800f772 <f_open+0x32e>
						res = FR_INT_ERR;
 800f76a:	2302      	movs	r3, #2
 800f76c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f770:	e015      	b.n	800f79e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f774:	0a5a      	lsrs	r2, r3, #9
 800f776:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f778:	441a      	add	r2, r3
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f77e:	693b      	ldr	r3, [r7, #16]
 800f780:	7858      	ldrb	r0, [r3, #1]
 800f782:	68fb      	ldr	r3, [r7, #12]
 800f784:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f788:	68fb      	ldr	r3, [r7, #12]
 800f78a:	6a1a      	ldr	r2, [r3, #32]
 800f78c:	2301      	movs	r3, #1
 800f78e:	f7fe f8ab 	bl	800d8e8 <disk_read>
 800f792:	4603      	mov	r3, r0
 800f794:	2b00      	cmp	r3, #0
 800f796:	d002      	beq.n	800f79e <f_open+0x35a>
 800f798:	2301      	movs	r3, #1
 800f79a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f79e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d002      	beq.n	800f7ac <f_open+0x368>
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	2200      	movs	r2, #0
 800f7aa:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f7ac:	693b      	ldr	r3, [r7, #16]
 800f7ae:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800f7b2:	4611      	mov	r1, r2
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f7fe fa0b 	bl	800dbd0 <unlock_fs>
 800f7ba:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3760      	adds	r7, #96	; 0x60
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b08c      	sub	sp, #48	; 0x30
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	60f8      	str	r0, [r7, #12]
 800f7ce:	60b9      	str	r1, [r7, #8]
 800f7d0:	607a      	str	r2, [r7, #4]
 800f7d2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f7d4:	68bb      	ldr	r3, [r7, #8]
 800f7d6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f7d8:	683b      	ldr	r3, [r7, #0]
 800f7da:	2200      	movs	r2, #0
 800f7dc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	f107 0210 	add.w	r2, r7, #16
 800f7e4:	4611      	mov	r1, r2
 800f7e6:	4618      	mov	r0, r3
 800f7e8:	f7ff fd80 	bl	800f2ec <validate>
 800f7ec:	4603      	mov	r3, r0
 800f7ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f7f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d107      	bne.n	800f80a <f_write+0x44>
 800f7fa:	68fb      	ldr	r3, [r7, #12]
 800f7fc:	7d5b      	ldrb	r3, [r3, #21]
 800f7fe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f806:	2b00      	cmp	r3, #0
 800f808:	d009      	beq.n	800f81e <f_write+0x58>
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f810:	4611      	mov	r1, r2
 800f812:	4618      	mov	r0, r3
 800f814:	f7fe f9dc 	bl	800dbd0 <unlock_fs>
 800f818:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f81c:	e173      	b.n	800fb06 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	7d1b      	ldrb	r3, [r3, #20]
 800f822:	f003 0302 	and.w	r3, r3, #2
 800f826:	2b00      	cmp	r3, #0
 800f828:	d106      	bne.n	800f838 <f_write+0x72>
 800f82a:	693b      	ldr	r3, [r7, #16]
 800f82c:	2107      	movs	r1, #7
 800f82e:	4618      	mov	r0, r3
 800f830:	f7fe f9ce 	bl	800dbd0 <unlock_fs>
 800f834:	2307      	movs	r3, #7
 800f836:	e166      	b.n	800fb06 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	699a      	ldr	r2, [r3, #24]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	441a      	add	r2, r3
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	699b      	ldr	r3, [r3, #24]
 800f844:	429a      	cmp	r2, r3
 800f846:	f080 814b 	bcs.w	800fae0 <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	699b      	ldr	r3, [r3, #24]
 800f84e:	43db      	mvns	r3, r3
 800f850:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f852:	e145      	b.n	800fae0 <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	699b      	ldr	r3, [r3, #24]
 800f858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	f040 8101 	bne.w	800fa64 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	699b      	ldr	r3, [r3, #24]
 800f866:	0a5b      	lsrs	r3, r3, #9
 800f868:	693a      	ldr	r2, [r7, #16]
 800f86a:	8952      	ldrh	r2, [r2, #10]
 800f86c:	3a01      	subs	r2, #1
 800f86e:	4013      	ands	r3, r2
 800f870:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f872:	69bb      	ldr	r3, [r7, #24]
 800f874:	2b00      	cmp	r3, #0
 800f876:	d14d      	bne.n	800f914 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	699b      	ldr	r3, [r3, #24]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d10c      	bne.n	800f89a <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	689b      	ldr	r3, [r3, #8]
 800f884:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d11a      	bne.n	800f8c2 <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f88c:	68fb      	ldr	r3, [r7, #12]
 800f88e:	2100      	movs	r1, #0
 800f890:	4618      	mov	r0, r3
 800f892:	f7fe fe1d 	bl	800e4d0 <create_chain>
 800f896:	62b8      	str	r0, [r7, #40]	; 0x28
 800f898:	e013      	b.n	800f8c2 <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d007      	beq.n	800f8b2 <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f8a2:	68fb      	ldr	r3, [r7, #12]
 800f8a4:	699b      	ldr	r3, [r3, #24]
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	f7fe fea9 	bl	800e600 <clmt_clust>
 800f8ae:	62b8      	str	r0, [r7, #40]	; 0x28
 800f8b0:	e007      	b.n	800f8c2 <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f8b2:	68fa      	ldr	r2, [r7, #12]
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	69db      	ldr	r3, [r3, #28]
 800f8b8:	4619      	mov	r1, r3
 800f8ba:	4610      	mov	r0, r2
 800f8bc:	f7fe fe08 	bl	800e4d0 <create_chain>
 800f8c0:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	f000 8110 	beq.w	800faea <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8cc:	2b01      	cmp	r3, #1
 800f8ce:	d109      	bne.n	800f8e4 <f_write+0x11e>
 800f8d0:	68fb      	ldr	r3, [r7, #12]
 800f8d2:	2202      	movs	r2, #2
 800f8d4:	755a      	strb	r2, [r3, #21]
 800f8d6:	693b      	ldr	r3, [r7, #16]
 800f8d8:	2102      	movs	r1, #2
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fe f978 	bl	800dbd0 <unlock_fs>
 800f8e0:	2302      	movs	r3, #2
 800f8e2:	e110      	b.n	800fb06 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f8ea:	d109      	bne.n	800f900 <f_write+0x13a>
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2201      	movs	r2, #1
 800f8f0:	755a      	strb	r2, [r3, #21]
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	2101      	movs	r1, #1
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fe f96a 	bl	800dbd0 <unlock_fs>
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	e102      	b.n	800fb06 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f904:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	689b      	ldr	r3, [r3, #8]
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d102      	bne.n	800f914 <f_write+0x14e>
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f912:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	7d1b      	ldrb	r3, [r3, #20]
 800f918:	b25b      	sxtb	r3, r3
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	da1d      	bge.n	800f95a <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f91e:	693b      	ldr	r3, [r7, #16]
 800f920:	7858      	ldrb	r0, [r3, #1]
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f928:	68fb      	ldr	r3, [r7, #12]
 800f92a:	6a1a      	ldr	r2, [r3, #32]
 800f92c:	2301      	movs	r3, #1
 800f92e:	f7fd fffb 	bl	800d928 <disk_write>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d009      	beq.n	800f94c <f_write+0x186>
 800f938:	68fb      	ldr	r3, [r7, #12]
 800f93a:	2201      	movs	r2, #1
 800f93c:	755a      	strb	r2, [r3, #21]
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	2101      	movs	r1, #1
 800f942:	4618      	mov	r0, r3
 800f944:	f7fe f944 	bl	800dbd0 <unlock_fs>
 800f948:	2301      	movs	r3, #1
 800f94a:	e0dc      	b.n	800fb06 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f94c:	68fb      	ldr	r3, [r7, #12]
 800f94e:	7d1b      	ldrb	r3, [r3, #20]
 800f950:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f954:	b2da      	uxtb	r2, r3
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f95a:	693a      	ldr	r2, [r7, #16]
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	69db      	ldr	r3, [r3, #28]
 800f960:	4619      	mov	r1, r3
 800f962:	4610      	mov	r0, r2
 800f964:	f7fe fb9c 	bl	800e0a0 <clust2sect>
 800f968:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f96a:	697b      	ldr	r3, [r7, #20]
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d109      	bne.n	800f984 <f_write+0x1be>
 800f970:	68fb      	ldr	r3, [r7, #12]
 800f972:	2202      	movs	r2, #2
 800f974:	755a      	strb	r2, [r3, #21]
 800f976:	693b      	ldr	r3, [r7, #16]
 800f978:	2102      	movs	r1, #2
 800f97a:	4618      	mov	r0, r3
 800f97c:	f7fe f928 	bl	800dbd0 <unlock_fs>
 800f980:	2302      	movs	r3, #2
 800f982:	e0c0      	b.n	800fb06 <f_write+0x340>
			sect += csect;
 800f984:	697a      	ldr	r2, [r7, #20]
 800f986:	69bb      	ldr	r3, [r7, #24]
 800f988:	4413      	add	r3, r2
 800f98a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	0a5b      	lsrs	r3, r3, #9
 800f990:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f992:	6a3b      	ldr	r3, [r7, #32]
 800f994:	2b00      	cmp	r3, #0
 800f996:	d041      	beq.n	800fa1c <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f998:	69ba      	ldr	r2, [r7, #24]
 800f99a:	6a3b      	ldr	r3, [r7, #32]
 800f99c:	4413      	add	r3, r2
 800f99e:	693a      	ldr	r2, [r7, #16]
 800f9a0:	8952      	ldrh	r2, [r2, #10]
 800f9a2:	4293      	cmp	r3, r2
 800f9a4:	d905      	bls.n	800f9b2 <f_write+0x1ec>
					cc = fs->csize - csect;
 800f9a6:	693b      	ldr	r3, [r7, #16]
 800f9a8:	895b      	ldrh	r3, [r3, #10]
 800f9aa:	461a      	mov	r2, r3
 800f9ac:	69bb      	ldr	r3, [r7, #24]
 800f9ae:	1ad3      	subs	r3, r2, r3
 800f9b0:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f9b2:	693b      	ldr	r3, [r7, #16]
 800f9b4:	7858      	ldrb	r0, [r3, #1]
 800f9b6:	6a3b      	ldr	r3, [r7, #32]
 800f9b8:	697a      	ldr	r2, [r7, #20]
 800f9ba:	69f9      	ldr	r1, [r7, #28]
 800f9bc:	f7fd ffb4 	bl	800d928 <disk_write>
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d009      	beq.n	800f9da <f_write+0x214>
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	755a      	strb	r2, [r3, #21]
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	2101      	movs	r1, #1
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fe f8fd 	bl	800dbd0 <unlock_fs>
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	e095      	b.n	800fb06 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	6a1a      	ldr	r2, [r3, #32]
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	1ad3      	subs	r3, r2, r3
 800f9e2:	6a3a      	ldr	r2, [r7, #32]
 800f9e4:	429a      	cmp	r2, r3
 800f9e6:	d915      	bls.n	800fa14 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f9e8:	68fb      	ldr	r3, [r7, #12]
 800f9ea:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	6a1a      	ldr	r2, [r3, #32]
 800f9f2:	697b      	ldr	r3, [r7, #20]
 800f9f4:	1ad3      	subs	r3, r2, r3
 800f9f6:	025b      	lsls	r3, r3, #9
 800f9f8:	69fa      	ldr	r2, [r7, #28]
 800f9fa:	4413      	add	r3, r2
 800f9fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fa00:	4619      	mov	r1, r3
 800fa02:	f7fe f851 	bl	800daa8 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800fa06:	68fb      	ldr	r3, [r7, #12]
 800fa08:	7d1b      	ldrb	r3, [r3, #20]
 800fa0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fa0e:	b2da      	uxtb	r2, r3
 800fa10:	68fb      	ldr	r3, [r7, #12]
 800fa12:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800fa14:	6a3b      	ldr	r3, [r7, #32]
 800fa16:	025b      	lsls	r3, r3, #9
 800fa18:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800fa1a:	e044      	b.n	800faa6 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa1c:	68fb      	ldr	r3, [r7, #12]
 800fa1e:	6a1b      	ldr	r3, [r3, #32]
 800fa20:	697a      	ldr	r2, [r7, #20]
 800fa22:	429a      	cmp	r2, r3
 800fa24:	d01b      	beq.n	800fa5e <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800fa26:	68fb      	ldr	r3, [r7, #12]
 800fa28:	699a      	ldr	r2, [r3, #24]
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800fa2e:	429a      	cmp	r2, r3
 800fa30:	d215      	bcs.n	800fa5e <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800fa32:	693b      	ldr	r3, [r7, #16]
 800fa34:	7858      	ldrb	r0, [r3, #1]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	697a      	ldr	r2, [r7, #20]
 800fa40:	f7fd ff52 	bl	800d8e8 <disk_read>
 800fa44:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d009      	beq.n	800fa5e <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800fa4a:	68fb      	ldr	r3, [r7, #12]
 800fa4c:	2201      	movs	r2, #1
 800fa4e:	755a      	strb	r2, [r3, #21]
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	2101      	movs	r1, #1
 800fa54:	4618      	mov	r0, r3
 800fa56:	f7fe f8bb 	bl	800dbd0 <unlock_fs>
 800fa5a:	2301      	movs	r3, #1
 800fa5c:	e053      	b.n	800fb06 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800fa5e:	68fb      	ldr	r3, [r7, #12]
 800fa60:	697a      	ldr	r2, [r7, #20]
 800fa62:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	699b      	ldr	r3, [r3, #24]
 800fa68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa6c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800fa70:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800fa72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	429a      	cmp	r2, r3
 800fa78:	d901      	bls.n	800fa7e <f_write+0x2b8>
 800fa7a:	687b      	ldr	r3, [r7, #4]
 800fa7c:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800fa7e:	68fb      	ldr	r3, [r7, #12]
 800fa80:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	699b      	ldr	r3, [r3, #24]
 800fa88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa8c:	4413      	add	r3, r2
 800fa8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa90:	69f9      	ldr	r1, [r7, #28]
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fe f808 	bl	800daa8 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fa98:	68fb      	ldr	r3, [r7, #12]
 800fa9a:	7d1b      	ldrb	r3, [r3, #20]
 800fa9c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800faa0:	b2da      	uxtb	r2, r3
 800faa2:	68fb      	ldr	r3, [r7, #12]
 800faa4:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800faa6:	69fa      	ldr	r2, [r7, #28]
 800faa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800faaa:	4413      	add	r3, r2
 800faac:	61fb      	str	r3, [r7, #28]
 800faae:	68fb      	ldr	r3, [r7, #12]
 800fab0:	699a      	ldr	r2, [r3, #24]
 800fab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fab4:	441a      	add	r2, r3
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	619a      	str	r2, [r3, #24]
 800faba:	68fb      	ldr	r3, [r7, #12]
 800fabc:	68da      	ldr	r2, [r3, #12]
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	699b      	ldr	r3, [r3, #24]
 800fac2:	429a      	cmp	r2, r3
 800fac4:	bf38      	it	cc
 800fac6:	461a      	movcc	r2, r3
 800fac8:	68fb      	ldr	r3, [r7, #12]
 800faca:	60da      	str	r2, [r3, #12]
 800facc:	683b      	ldr	r3, [r7, #0]
 800face:	681a      	ldr	r2, [r3, #0]
 800fad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad2:	441a      	add	r2, r3
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	601a      	str	r2, [r3, #0]
 800fad8:	687a      	ldr	r2, [r7, #4]
 800fada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fadc:	1ad3      	subs	r3, r2, r3
 800fade:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f47f aeb6 	bne.w	800f854 <f_write+0x8e>
 800fae8:	e000      	b.n	800faec <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800faea:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	7d1b      	ldrb	r3, [r3, #20]
 800faf0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800faf4:	b2da      	uxtb	r2, r3
 800faf6:	68fb      	ldr	r3, [r7, #12]
 800faf8:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	2100      	movs	r1, #0
 800fafe:	4618      	mov	r0, r3
 800fb00:	f7fe f866 	bl	800dbd0 <unlock_fs>
 800fb04:	2300      	movs	r3, #0
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3730      	adds	r7, #48	; 0x30
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}

0800fb0e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fb0e:	b580      	push	{r7, lr}
 800fb10:	b086      	sub	sp, #24
 800fb12:	af00      	add	r7, sp, #0
 800fb14:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	f107 0208 	add.w	r2, r7, #8
 800fb1c:	4611      	mov	r1, r2
 800fb1e:	4618      	mov	r0, r3
 800fb20:	f7ff fbe4 	bl	800f2ec <validate>
 800fb24:	4603      	mov	r3, r0
 800fb26:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800fb28:	7dfb      	ldrb	r3, [r7, #23]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d16d      	bne.n	800fc0a <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	7d1b      	ldrb	r3, [r3, #20]
 800fb32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb36:	2b00      	cmp	r3, #0
 800fb38:	d067      	beq.n	800fc0a <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	7d1b      	ldrb	r3, [r3, #20]
 800fb3e:	b25b      	sxtb	r3, r3
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	da1a      	bge.n	800fb7a <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fb44:	68bb      	ldr	r3, [r7, #8]
 800fb46:	7858      	ldrb	r0, [r3, #1]
 800fb48:	687b      	ldr	r3, [r7, #4]
 800fb4a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	6a1a      	ldr	r2, [r3, #32]
 800fb52:	2301      	movs	r3, #1
 800fb54:	f7fd fee8 	bl	800d928 <disk_write>
 800fb58:	4603      	mov	r3, r0
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	d006      	beq.n	800fb6c <f_sync+0x5e>
 800fb5e:	68bb      	ldr	r3, [r7, #8]
 800fb60:	2101      	movs	r1, #1
 800fb62:	4618      	mov	r0, r3
 800fb64:	f7fe f834 	bl	800dbd0 <unlock_fs>
 800fb68:	2301      	movs	r3, #1
 800fb6a:	e055      	b.n	800fc18 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fb6c:	687b      	ldr	r3, [r7, #4]
 800fb6e:	7d1b      	ldrb	r3, [r3, #20]
 800fb70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fb74:	b2da      	uxtb	r2, r3
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800fb7a:	f7fd fc05 	bl	800d388 <get_fattime>
 800fb7e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fb80:	68ba      	ldr	r2, [r7, #8]
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb86:	4619      	mov	r1, r3
 800fb88:	4610      	mov	r0, r2
 800fb8a:	f7fe f9ed 	bl	800df68 <move_window>
 800fb8e:	4603      	mov	r3, r0
 800fb90:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fb92:	7dfb      	ldrb	r3, [r7, #23]
 800fb94:	2b00      	cmp	r3, #0
 800fb96:	d138      	bne.n	800fc0a <f_sync+0xfc>
					dir = fp->dir_ptr;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb9c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	330b      	adds	r3, #11
 800fba2:	781a      	ldrb	r2, [r3, #0]
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	330b      	adds	r3, #11
 800fba8:	f042 0220 	orr.w	r2, r2, #32
 800fbac:	b2d2      	uxtb	r2, r2
 800fbae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6818      	ldr	r0, [r3, #0]
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	689b      	ldr	r3, [r3, #8]
 800fbb8:	461a      	mov	r2, r3
 800fbba:	68f9      	ldr	r1, [r7, #12]
 800fbbc:	f7fe fefa 	bl	800e9b4 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	f103 021c 	add.w	r2, r3, #28
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	68db      	ldr	r3, [r3, #12]
 800fbca:	4619      	mov	r1, r3
 800fbcc:	4610      	mov	r0, r2
 800fbce:	f7fd ff3f 	bl	800da50 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fbd2:	68fb      	ldr	r3, [r7, #12]
 800fbd4:	3316      	adds	r3, #22
 800fbd6:	6939      	ldr	r1, [r7, #16]
 800fbd8:	4618      	mov	r0, r3
 800fbda:	f7fd ff39 	bl	800da50 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fbde:	68fb      	ldr	r3, [r7, #12]
 800fbe0:	3312      	adds	r3, #18
 800fbe2:	2100      	movs	r1, #0
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	f7fd ff18 	bl	800da1a <st_word>
					fs->wflag = 1;
 800fbea:	68bb      	ldr	r3, [r7, #8]
 800fbec:	2201      	movs	r2, #1
 800fbee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	f7fe f9e6 	bl	800dfc4 <sync_fs>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	7d1b      	ldrb	r3, [r3, #20]
 800fc00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fc04:	b2da      	uxtb	r2, r3
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	7dfa      	ldrb	r2, [r7, #23]
 800fc0e:	4611      	mov	r1, r2
 800fc10:	4618      	mov	r0, r3
 800fc12:	f7fd ffdd 	bl	800dbd0 <unlock_fs>
 800fc16:	7dfb      	ldrb	r3, [r7, #23]
}
 800fc18:	4618      	mov	r0, r3
 800fc1a:	3718      	adds	r7, #24
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	bd80      	pop	{r7, pc}

0800fc20 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fc20:	b580      	push	{r7, lr}
 800fc22:	b084      	sub	sp, #16
 800fc24:	af00      	add	r7, sp, #0
 800fc26:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f7ff ff70 	bl	800fb0e <f_sync>
 800fc2e:	4603      	mov	r3, r0
 800fc30:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fc32:	7bfb      	ldrb	r3, [r7, #15]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d11d      	bne.n	800fc74 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f107 0208 	add.w	r2, r7, #8
 800fc3e:	4611      	mov	r1, r2
 800fc40:	4618      	mov	r0, r3
 800fc42:	f7ff fb53 	bl	800f2ec <validate>
 800fc46:	4603      	mov	r3, r0
 800fc48:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fc4a:	7bfb      	ldrb	r3, [r7, #15]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d111      	bne.n	800fc74 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	691b      	ldr	r3, [r3, #16]
 800fc54:	4618      	mov	r0, r3
 800fc56:	f7fe f8e3 	bl	800de20 <dec_lock>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fc5e:	7bfb      	ldrb	r3, [r7, #15]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d102      	bne.n	800fc6a <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2200      	movs	r2, #0
 800fc68:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	4618      	mov	r0, r3
 800fc70:	f7fd ffae 	bl	800dbd0 <unlock_fs>
#endif
		}
	}
	return res;
 800fc74:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}
	...

0800fc80 <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800fc80:	b590      	push	{r4, r7, lr}
 800fc82:	b09d      	sub	sp, #116	; 0x74
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	60f8      	str	r0, [r7, #12]
 800fc88:	607a      	str	r2, [r7, #4]
 800fc8a:	603b      	str	r3, [r7, #0]
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800fc90:	2301      	movs	r3, #1
 800fc92:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800fc94:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc98:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800fc9a:	f107 030c 	add.w	r3, r7, #12
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f7ff f835 	bl	800ed0e <get_ldnumber>
 800fca4:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	da02      	bge.n	800fcb2 <f_mkfs+0x32>
 800fcac:	230b      	movs	r3, #11
 800fcae:	f000 bc0d 	b.w	80104cc <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800fcb2:	4a94      	ldr	r2, [pc, #592]	; (800ff04 <f_mkfs+0x284>)
 800fcb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcba:	2b00      	cmp	r3, #0
 800fcbc:	d005      	beq.n	800fcca <f_mkfs+0x4a>
 800fcbe:	4a91      	ldr	r2, [pc, #580]	; (800ff04 <f_mkfs+0x284>)
 800fcc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fcc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fcc6:	2200      	movs	r2, #0
 800fcc8:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800fcca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fccc:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800fcd0:	2300      	movs	r3, #0
 800fcd2:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800fcd6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7fd fdde 	bl	800d89c <disk_initialize>
 800fce0:	4603      	mov	r3, r0
 800fce2:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800fce6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fcea:	f003 0301 	and.w	r3, r3, #1
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d001      	beq.n	800fcf6 <f_mkfs+0x76>
 800fcf2:	2303      	movs	r3, #3
 800fcf4:	e3ea      	b.n	80104cc <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800fcf6:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fcfa:	f003 0304 	and.w	r3, r3, #4
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d001      	beq.n	800fd06 <f_mkfs+0x86>
 800fd02:	230a      	movs	r3, #10
 800fd04:	e3e2      	b.n	80104cc <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800fd06:	f107 0214 	add.w	r2, r7, #20
 800fd0a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fd0e:	2103      	movs	r1, #3
 800fd10:	4618      	mov	r0, r3
 800fd12:	f7fd fe29 	bl	800d968 <disk_ioctl>
 800fd16:	4603      	mov	r3, r0
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	d10c      	bne.n	800fd36 <f_mkfs+0xb6>
 800fd1c:	697b      	ldr	r3, [r7, #20]
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d009      	beq.n	800fd36 <f_mkfs+0xb6>
 800fd22:	697b      	ldr	r3, [r7, #20]
 800fd24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fd28:	d805      	bhi.n	800fd36 <f_mkfs+0xb6>
 800fd2a:	697b      	ldr	r3, [r7, #20]
 800fd2c:	1e5a      	subs	r2, r3, #1
 800fd2e:	697b      	ldr	r3, [r7, #20]
 800fd30:	4013      	ands	r3, r2
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d001      	beq.n	800fd3a <f_mkfs+0xba>
 800fd36:	2301      	movs	r3, #1
 800fd38:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800fd3a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fd3e:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d003      	beq.n	800fd4e <f_mkfs+0xce>
 800fd46:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fd48:	687a      	ldr	r2, [r7, #4]
 800fd4a:	429a      	cmp	r2, r3
 800fd4c:	d309      	bcc.n	800fd62 <f_mkfs+0xe2>
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fd54:	d805      	bhi.n	800fd62 <f_mkfs+0xe2>
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	1e5a      	subs	r2, r3, #1
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	4013      	ands	r3, r2
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d001      	beq.n	800fd66 <f_mkfs+0xe6>
 800fd62:	2313      	movs	r3, #19
 800fd64:	e3b2      	b.n	80104cc <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800fd66:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fd68:	687a      	ldr	r2, [r7, #4]
 800fd6a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd6e:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800fd70:	683b      	ldr	r3, [r7, #0]
 800fd72:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800fd74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fd76:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fd7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800fd7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800fd80:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd84:	fb02 f303 	mul.w	r3, r2, r3
 800fd88:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800fd8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d101      	bne.n	800fd94 <f_mkfs+0x114>
 800fd90:	230e      	movs	r3, #14
 800fd92:	e39b      	b.n	80104cc <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800fd94:	f107 0210 	add.w	r2, r7, #16
 800fd98:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fd9c:	2101      	movs	r1, #1
 800fd9e:	4618      	mov	r0, r3
 800fda0:	f7fd fde2 	bl	800d968 <disk_ioctl>
 800fda4:	4603      	mov	r3, r0
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d001      	beq.n	800fdae <f_mkfs+0x12e>
 800fdaa:	2301      	movs	r3, #1
 800fdac:	e38e      	b.n	80104cc <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800fdae:	7afb      	ldrb	r3, [r7, #11]
 800fdb0:	f003 0308 	and.w	r3, r3, #8
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d001      	beq.n	800fdbc <f_mkfs+0x13c>
 800fdb8:	2300      	movs	r3, #0
 800fdba:	e000      	b.n	800fdbe <f_mkfs+0x13e>
 800fdbc:	233f      	movs	r3, #63	; 0x3f
 800fdbe:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800fdc0:	693b      	ldr	r3, [r7, #16]
 800fdc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d901      	bls.n	800fdcc <f_mkfs+0x14c>
 800fdc8:	230e      	movs	r3, #14
 800fdca:	e37f      	b.n	80104cc <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800fdcc:	693a      	ldr	r2, [r7, #16]
 800fdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdd0:	1ad3      	subs	r3, r2, r3
 800fdd2:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	2b7f      	cmp	r3, #127	; 0x7f
 800fdd8:	d801      	bhi.n	800fdde <f_mkfs+0x15e>
 800fdda:	230e      	movs	r3, #14
 800fddc:	e376      	b.n	80104cc <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	2b80      	cmp	r3, #128	; 0x80
 800fde2:	d901      	bls.n	800fde8 <f_mkfs+0x168>
 800fde4:	2313      	movs	r3, #19
 800fde6:	e371      	b.n	80104cc <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800fde8:	7afb      	ldrb	r3, [r7, #11]
 800fdea:	f003 0302 	and.w	r3, r3, #2
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d00d      	beq.n	800fe0e <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800fdf2:	7afb      	ldrb	r3, [r7, #11]
 800fdf4:	f003 0307 	and.w	r3, r3, #7
 800fdf8:	2b02      	cmp	r3, #2
 800fdfa:	d004      	beq.n	800fe06 <f_mkfs+0x186>
 800fdfc:	7afb      	ldrb	r3, [r7, #11]
 800fdfe:	f003 0301 	and.w	r3, r3, #1
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d103      	bne.n	800fe0e <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800fe06:	2303      	movs	r3, #3
 800fe08:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fe0c:	e009      	b.n	800fe22 <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800fe0e:	7afb      	ldrb	r3, [r7, #11]
 800fe10:	f003 0301 	and.w	r3, r3, #1
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d101      	bne.n	800fe1c <f_mkfs+0x19c>
 800fe18:	2313      	movs	r3, #19
 800fe1a:	e357      	b.n	80104cc <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800fe1c:	2302      	movs	r3, #2
 800fe1e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800fe26:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fe2a:	2b03      	cmp	r3, #3
 800fe2c:	d13c      	bne.n	800fea8 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800fe2e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d11b      	bne.n	800fe6c <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800fe34:	693b      	ldr	r3, [r7, #16]
 800fe36:	0c5b      	lsrs	r3, r3, #17
 800fe38:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800fe3a:	2300      	movs	r3, #0
 800fe3c:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe3e:	2301      	movs	r3, #1
 800fe40:	653b      	str	r3, [r7, #80]	; 0x50
 800fe42:	e005      	b.n	800fe50 <f_mkfs+0x1d0>
 800fe44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe46:	3301      	adds	r3, #1
 800fe48:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe4c:	005b      	lsls	r3, r3, #1
 800fe4e:	653b      	str	r3, [r7, #80]	; 0x50
 800fe50:	4a2d      	ldr	r2, [pc, #180]	; (800ff08 <f_mkfs+0x288>)
 800fe52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe54:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d007      	beq.n	800fe6c <f_mkfs+0x1ec>
 800fe5c:	4a2a      	ldr	r2, [pc, #168]	; (800ff08 <f_mkfs+0x288>)
 800fe5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe60:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe64:	461a      	mov	r2, r3
 800fe66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe68:	4293      	cmp	r3, r2
 800fe6a:	d2eb      	bcs.n	800fe44 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800fe6c:	693a      	ldr	r2, [r7, #16]
 800fe6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe70:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe74:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800fe76:	6a3b      	ldr	r3, [r7, #32]
 800fe78:	3302      	adds	r3, #2
 800fe7a:	009a      	lsls	r2, r3, #2
 800fe7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fe7e:	4413      	add	r3, r2
 800fe80:	1e5a      	subs	r2, r3, #1
 800fe82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fe84:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe88:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800fe8a:	2320      	movs	r3, #32
 800fe8c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800fe8e:	2300      	movs	r3, #0
 800fe90:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800fe92:	6a3b      	ldr	r3, [r7, #32]
 800fe94:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fe98:	4293      	cmp	r3, r2
 800fe9a:	d903      	bls.n	800fea4 <f_mkfs+0x224>
 800fe9c:	6a3b      	ldr	r3, [r7, #32]
 800fe9e:	4a1b      	ldr	r2, [pc, #108]	; (800ff0c <f_mkfs+0x28c>)
 800fea0:	4293      	cmp	r3, r2
 800fea2:	d952      	bls.n	800ff4a <f_mkfs+0x2ca>
 800fea4:	230e      	movs	r3, #14
 800fea6:	e311      	b.n	80104cc <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800fea8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d11b      	bne.n	800fee6 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800feae:	693b      	ldr	r3, [r7, #16]
 800feb0:	0b1b      	lsrs	r3, r3, #12
 800feb2:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800feb4:	2300      	movs	r3, #0
 800feb6:	64bb      	str	r3, [r7, #72]	; 0x48
 800feb8:	2301      	movs	r3, #1
 800feba:	653b      	str	r3, [r7, #80]	; 0x50
 800febc:	e005      	b.n	800feca <f_mkfs+0x24a>
 800febe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fec0:	3301      	adds	r3, #1
 800fec2:	64bb      	str	r3, [r7, #72]	; 0x48
 800fec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fec6:	005b      	lsls	r3, r3, #1
 800fec8:	653b      	str	r3, [r7, #80]	; 0x50
 800feca:	4a11      	ldr	r2, [pc, #68]	; (800ff10 <f_mkfs+0x290>)
 800fecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fece:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d007      	beq.n	800fee6 <f_mkfs+0x266>
 800fed6:	4a0e      	ldr	r2, [pc, #56]	; (800ff10 <f_mkfs+0x290>)
 800fed8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800feda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fede:	461a      	mov	r2, r3
 800fee0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fee2:	4293      	cmp	r3, r2
 800fee4:	d2eb      	bcs.n	800febe <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800fee6:	693a      	ldr	r2, [r7, #16]
 800fee8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800feea:	fbb2 f3f3 	udiv	r3, r2, r3
 800feee:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800fef0:	6a3b      	ldr	r3, [r7, #32]
 800fef2:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fef6:	4293      	cmp	r3, r2
 800fef8:	d90c      	bls.n	800ff14 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800fefa:	6a3b      	ldr	r3, [r7, #32]
 800fefc:	3302      	adds	r3, #2
 800fefe:	005b      	lsls	r3, r3, #1
 800ff00:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ff02:	e012      	b.n	800ff2a <f_mkfs+0x2aa>
 800ff04:	20000704 	.word	0x20000704
 800ff08:	08015eb4 	.word	0x08015eb4
 800ff0c:	0ffffff5 	.word	0x0ffffff5
 800ff10:	08015ec4 	.word	0x08015ec4
				} else {
					fmt = FS_FAT12;
 800ff14:	2301      	movs	r3, #1
 800ff16:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800ff1a:	6a3a      	ldr	r2, [r7, #32]
 800ff1c:	4613      	mov	r3, r2
 800ff1e:	005b      	lsls	r3, r3, #1
 800ff20:	4413      	add	r3, r2
 800ff22:	3301      	adds	r3, #1
 800ff24:	085b      	lsrs	r3, r3, #1
 800ff26:	3303      	adds	r3, #3
 800ff28:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800ff2a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800ff2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff2e:	4413      	add	r3, r2
 800ff30:	1e5a      	subs	r2, r3, #1
 800ff32:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff34:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff38:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800ff3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ff40:	015a      	lsls	r2, r3, #5
 800ff42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ff44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff48:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800ff4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff4e:	4413      	add	r3, r2
 800ff50:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800ff52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ff56:	fb02 f203 	mul.w	r2, r2, r3
 800ff5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ff5c:	4413      	add	r3, r2
 800ff5e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800ff60:	4413      	add	r3, r2
 800ff62:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800ff64:	697a      	ldr	r2, [r7, #20]
 800ff66:	69fb      	ldr	r3, [r7, #28]
 800ff68:	4413      	add	r3, r2
 800ff6a:	1e5a      	subs	r2, r3, #1
 800ff6c:	697b      	ldr	r3, [r7, #20]
 800ff6e:	425b      	negs	r3, r3
 800ff70:	401a      	ands	r2, r3
 800ff72:	69fb      	ldr	r3, [r7, #28]
 800ff74:	1ad3      	subs	r3, r2, r3
 800ff76:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800ff78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ff7c:	2b03      	cmp	r3, #3
 800ff7e:	d108      	bne.n	800ff92 <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800ff80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ff82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff84:	4413      	add	r3, r2
 800ff86:	657b      	str	r3, [r7, #84]	; 0x54
 800ff88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ff8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff8c:	4413      	add	r3, r2
 800ff8e:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff90:	e006      	b.n	800ffa0 <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800ff92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ff94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff96:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff9a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ff9c:	4413      	add	r3, r2
 800ff9e:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800ffa0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffa2:	011a      	lsls	r2, r3, #4
 800ffa4:	69fb      	ldr	r3, [r7, #28]
 800ffa6:	441a      	add	r2, r3
 800ffa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffaa:	1ad2      	subs	r2, r2, r3
 800ffac:	693b      	ldr	r3, [r7, #16]
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d901      	bls.n	800ffb6 <f_mkfs+0x336>
 800ffb2:	230e      	movs	r3, #14
 800ffb4:	e28a      	b.n	80104cc <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800ffb6:	693a      	ldr	r2, [r7, #16]
 800ffb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ffba:	1ad2      	subs	r2, r2, r3
 800ffbc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ffbe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ffc0:	fb01 f303 	mul.w	r3, r1, r3
 800ffc4:	1ad2      	subs	r2, r2, r3
 800ffc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ffc8:	1ad2      	subs	r2, r2, r3
 800ffca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffcc:	fbb2 f3f3 	udiv	r3, r2, r3
 800ffd0:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800ffd2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ffd6:	2b03      	cmp	r3, #3
 800ffd8:	d10f      	bne.n	800fffa <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800ffda:	6a3b      	ldr	r3, [r7, #32]
 800ffdc:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ffe0:	4293      	cmp	r3, r2
 800ffe2:	d80a      	bhi.n	800fffa <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	2b00      	cmp	r3, #0
 800ffe8:	d105      	bne.n	800fff6 <f_mkfs+0x376>
 800ffea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffec:	085b      	lsrs	r3, r3, #1
 800ffee:	607b      	str	r3, [r7, #4]
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d144      	bne.n	8010080 <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800fff6:	230e      	movs	r3, #14
 800fff8:	e268      	b.n	80104cc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800fffa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fffe:	2b02      	cmp	r3, #2
 8010000:	d133      	bne.n	801006a <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 8010002:	6a3b      	ldr	r3, [r7, #32]
 8010004:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8010008:	4293      	cmp	r3, r2
 801000a:	d91e      	bls.n	801004a <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	2b00      	cmp	r3, #0
 8010010:	d107      	bne.n	8010022 <f_mkfs+0x3a2>
 8010012:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010014:	005b      	lsls	r3, r3, #1
 8010016:	2b40      	cmp	r3, #64	; 0x40
 8010018:	d803      	bhi.n	8010022 <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 801001a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801001c:	005b      	lsls	r3, r3, #1
 801001e:	607b      	str	r3, [r7, #4]
 8010020:	e033      	b.n	801008a <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 8010022:	7afb      	ldrb	r3, [r7, #11]
 8010024:	f003 0302 	and.w	r3, r3, #2
 8010028:	2b00      	cmp	r3, #0
 801002a:	d003      	beq.n	8010034 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 801002c:	2303      	movs	r3, #3
 801002e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8010032:	e02a      	b.n	801008a <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	2b00      	cmp	r3, #0
 8010038:	d105      	bne.n	8010046 <f_mkfs+0x3c6>
 801003a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801003c:	005b      	lsls	r3, r3, #1
 801003e:	607b      	str	r3, [r7, #4]
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	2b80      	cmp	r3, #128	; 0x80
 8010044:	d91e      	bls.n	8010084 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 8010046:	230e      	movs	r3, #14
 8010048:	e240      	b.n	80104cc <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 801004a:	6a3b      	ldr	r3, [r7, #32]
 801004c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010050:	4293      	cmp	r3, r2
 8010052:	d80a      	bhi.n	801006a <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d105      	bne.n	8010066 <f_mkfs+0x3e6>
 801005a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801005c:	005b      	lsls	r3, r3, #1
 801005e:	607b      	str	r3, [r7, #4]
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	2b80      	cmp	r3, #128	; 0x80
 8010064:	d910      	bls.n	8010088 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 8010066:	230e      	movs	r3, #14
 8010068:	e230      	b.n	80104cc <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 801006a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801006e:	2b01      	cmp	r3, #1
 8010070:	d10c      	bne.n	801008c <f_mkfs+0x40c>
 8010072:	6a3b      	ldr	r3, [r7, #32]
 8010074:	f640 72f5 	movw	r2, #4085	; 0xff5
 8010078:	4293      	cmp	r3, r2
 801007a:	d907      	bls.n	801008c <f_mkfs+0x40c>
 801007c:	230e      	movs	r3, #14
 801007e:	e225      	b.n	80104cc <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 8010080:	bf00      	nop
 8010082:	e6ce      	b.n	800fe22 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010084:	bf00      	nop
 8010086:	e6cc      	b.n	800fe22 <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010088:	bf00      	nop
			pau = au;
 801008a:	e6ca      	b.n	800fe22 <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 801008c:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 801008e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010090:	461a      	mov	r2, r3
 8010092:	2100      	movs	r1, #0
 8010094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010096:	f7fd fd28 	bl	800daea <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 801009a:	220b      	movs	r2, #11
 801009c:	49bc      	ldr	r1, [pc, #752]	; (8010390 <f_mkfs+0x710>)
 801009e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100a0:	f7fd fd02 	bl	800daa8 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 80100a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a6:	330b      	adds	r3, #11
 80100a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80100aa:	4611      	mov	r1, r2
 80100ac:	4618      	mov	r0, r3
 80100ae:	f7fd fcb4 	bl	800da1a <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 80100b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100b4:	330d      	adds	r3, #13
 80100b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80100b8:	b2d2      	uxtb	r2, r2
 80100ba:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 80100bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100be:	330e      	adds	r3, #14
 80100c0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80100c2:	b292      	uxth	r2, r2
 80100c4:	4611      	mov	r1, r2
 80100c6:	4618      	mov	r0, r3
 80100c8:	f7fd fca7 	bl	800da1a <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 80100cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ce:	3310      	adds	r3, #16
 80100d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80100d2:	b2d2      	uxtb	r2, r2
 80100d4:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 80100d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d8:	f103 0211 	add.w	r2, r3, #17
 80100dc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80100e0:	2b03      	cmp	r3, #3
 80100e2:	d002      	beq.n	80100ea <f_mkfs+0x46a>
 80100e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80100e6:	b29b      	uxth	r3, r3
 80100e8:	e000      	b.n	80100ec <f_mkfs+0x46c>
 80100ea:	2300      	movs	r3, #0
 80100ec:	4619      	mov	r1, r3
 80100ee:	4610      	mov	r0, r2
 80100f0:	f7fd fc93 	bl	800da1a <st_word>
		if (sz_vol < 0x10000) {
 80100f4:	693b      	ldr	r3, [r7, #16]
 80100f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80100fa:	d208      	bcs.n	801010e <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 80100fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100fe:	3313      	adds	r3, #19
 8010100:	693a      	ldr	r2, [r7, #16]
 8010102:	b292      	uxth	r2, r2
 8010104:	4611      	mov	r1, r2
 8010106:	4618      	mov	r0, r3
 8010108:	f7fd fc87 	bl	800da1a <st_word>
 801010c:	e006      	b.n	801011c <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801010e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010110:	3320      	adds	r3, #32
 8010112:	693a      	ldr	r2, [r7, #16]
 8010114:	4611      	mov	r1, r2
 8010116:	4618      	mov	r0, r3
 8010118:	f7fd fc9a 	bl	800da50 <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 801011c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011e:	3315      	adds	r3, #21
 8010120:	22f8      	movs	r2, #248	; 0xf8
 8010122:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 8010124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010126:	3318      	adds	r3, #24
 8010128:	213f      	movs	r1, #63	; 0x3f
 801012a:	4618      	mov	r0, r3
 801012c:	f7fd fc75 	bl	800da1a <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 8010130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010132:	331a      	adds	r3, #26
 8010134:	21ff      	movs	r1, #255	; 0xff
 8010136:	4618      	mov	r0, r3
 8010138:	f7fd fc6f 	bl	800da1a <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 801013c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013e:	331c      	adds	r3, #28
 8010140:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010142:	4618      	mov	r0, r3
 8010144:	f7fd fc84 	bl	800da50 <st_dword>
		if (fmt == FS_FAT32) {
 8010148:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801014c:	2b03      	cmp	r3, #3
 801014e:	d131      	bne.n	80101b4 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 8010150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010152:	f103 0443 	add.w	r4, r3, #67	; 0x43
 8010156:	f7fd f917 	bl	800d388 <get_fattime>
 801015a:	4603      	mov	r3, r0
 801015c:	4619      	mov	r1, r3
 801015e:	4620      	mov	r0, r4
 8010160:	f7fd fc76 	bl	800da50 <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 8010164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010166:	3324      	adds	r3, #36	; 0x24
 8010168:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801016a:	4618      	mov	r0, r3
 801016c:	f7fd fc70 	bl	800da50 <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 8010170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010172:	332c      	adds	r3, #44	; 0x2c
 8010174:	2102      	movs	r1, #2
 8010176:	4618      	mov	r0, r3
 8010178:	f7fd fc6a 	bl	800da50 <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 801017c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017e:	3330      	adds	r3, #48	; 0x30
 8010180:	2101      	movs	r1, #1
 8010182:	4618      	mov	r0, r3
 8010184:	f7fd fc49 	bl	800da1a <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8010188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801018a:	3332      	adds	r3, #50	; 0x32
 801018c:	2106      	movs	r1, #6
 801018e:	4618      	mov	r0, r3
 8010190:	f7fd fc43 	bl	800da1a <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8010194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010196:	3340      	adds	r3, #64	; 0x40
 8010198:	2280      	movs	r2, #128	; 0x80
 801019a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 801019c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801019e:	3342      	adds	r3, #66	; 0x42
 80101a0:	2229      	movs	r2, #41	; 0x29
 80101a2:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 80101a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a6:	3347      	adds	r3, #71	; 0x47
 80101a8:	2213      	movs	r2, #19
 80101aa:	497a      	ldr	r1, [pc, #488]	; (8010394 <f_mkfs+0x714>)
 80101ac:	4618      	mov	r0, r3
 80101ae:	f7fd fc7b 	bl	800daa8 <mem_cpy>
 80101b2:	e020      	b.n	80101f6 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 80101b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101b6:	f103 0427 	add.w	r4, r3, #39	; 0x27
 80101ba:	f7fd f8e5 	bl	800d388 <get_fattime>
 80101be:	4603      	mov	r3, r0
 80101c0:	4619      	mov	r1, r3
 80101c2:	4620      	mov	r0, r4
 80101c4:	f7fd fc44 	bl	800da50 <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 80101c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ca:	3316      	adds	r3, #22
 80101cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80101ce:	b292      	uxth	r2, r2
 80101d0:	4611      	mov	r1, r2
 80101d2:	4618      	mov	r0, r3
 80101d4:	f7fd fc21 	bl	800da1a <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 80101d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101da:	3324      	adds	r3, #36	; 0x24
 80101dc:	2280      	movs	r2, #128	; 0x80
 80101de:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 80101e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e2:	3326      	adds	r3, #38	; 0x26
 80101e4:	2229      	movs	r2, #41	; 0x29
 80101e6:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 80101e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101ea:	332b      	adds	r3, #43	; 0x2b
 80101ec:	2213      	movs	r2, #19
 80101ee:	496a      	ldr	r1, [pc, #424]	; (8010398 <f_mkfs+0x718>)
 80101f0:	4618      	mov	r0, r3
 80101f2:	f7fd fc59 	bl	800daa8 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 80101f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80101fc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010200:	4618      	mov	r0, r3
 8010202:	f7fd fc0a 	bl	800da1a <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8010206:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801020a:	2301      	movs	r3, #1
 801020c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801020e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010210:	f7fd fb8a 	bl	800d928 <disk_write>
 8010214:	4603      	mov	r3, r0
 8010216:	2b00      	cmp	r3, #0
 8010218:	d001      	beq.n	801021e <f_mkfs+0x59e>
 801021a:	2301      	movs	r3, #1
 801021c:	e156      	b.n	80104cc <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 801021e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010222:	2b03      	cmp	r3, #3
 8010224:	d140      	bne.n	80102a8 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 8010226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010228:	1d9a      	adds	r2, r3, #6
 801022a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801022e:	2301      	movs	r3, #1
 8010230:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010232:	f7fd fb79 	bl	800d928 <disk_write>
			mem_set(buf, 0, ss);
 8010236:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010238:	461a      	mov	r2, r3
 801023a:	2100      	movs	r1, #0
 801023c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801023e:	f7fd fc54 	bl	800daea <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 8010242:	4956      	ldr	r1, [pc, #344]	; (801039c <f_mkfs+0x71c>)
 8010244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010246:	f7fd fc03 	bl	800da50 <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 801024a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801024c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010250:	4953      	ldr	r1, [pc, #332]	; (80103a0 <f_mkfs+0x720>)
 8010252:	4618      	mov	r0, r3
 8010254:	f7fd fbfc 	bl	800da50 <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 8010258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025a:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 801025e:	6a3b      	ldr	r3, [r7, #32]
 8010260:	3b01      	subs	r3, #1
 8010262:	4619      	mov	r1, r3
 8010264:	4610      	mov	r0, r2
 8010266:	f7fd fbf3 	bl	800da50 <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 801026a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801026c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8010270:	2102      	movs	r1, #2
 8010272:	4618      	mov	r0, r3
 8010274:	f7fd fbec 	bl	800da50 <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 8010278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801027a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801027e:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010282:	4618      	mov	r0, r3
 8010284:	f7fd fbc9 	bl	800da1a <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8010288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801028a:	1dda      	adds	r2, r3, #7
 801028c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010290:	2301      	movs	r3, #1
 8010292:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010294:	f7fd fb48 	bl	800d928 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8010298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801029a:	1c5a      	adds	r2, r3, #1
 801029c:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80102a0:	2301      	movs	r3, #1
 80102a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80102a4:	f7fd fb40 	bl	800d928 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 80102a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80102aa:	2100      	movs	r1, #0
 80102ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102ae:	f7fd fc1c 	bl	800daea <mem_set>
		sect = b_fat;		/* FAT start sector */
 80102b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80102b4:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80102b6:	2300      	movs	r3, #0
 80102b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80102ba:	e04b      	b.n	8010354 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 80102bc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80102c0:	2b03      	cmp	r3, #3
 80102c2:	d113      	bne.n	80102ec <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 80102c4:	f06f 0107 	mvn.w	r1, #7
 80102c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102ca:	f7fd fbc1 	bl	800da50 <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 80102ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102d0:	3304      	adds	r3, #4
 80102d2:	f04f 31ff 	mov.w	r1, #4294967295
 80102d6:	4618      	mov	r0, r3
 80102d8:	f7fd fbba 	bl	800da50 <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 80102dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102de:	3308      	adds	r3, #8
 80102e0:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 80102e4:	4618      	mov	r0, r3
 80102e6:	f7fd fbb3 	bl	800da50 <st_dword>
 80102ea:	e00b      	b.n	8010304 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 80102ec:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80102f0:	2b01      	cmp	r3, #1
 80102f2:	d101      	bne.n	80102f8 <f_mkfs+0x678>
 80102f4:	4b2b      	ldr	r3, [pc, #172]	; (80103a4 <f_mkfs+0x724>)
 80102f6:	e001      	b.n	80102fc <f_mkfs+0x67c>
 80102f8:	f06f 0307 	mvn.w	r3, #7
 80102fc:	4619      	mov	r1, r3
 80102fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010300:	f7fd fba6 	bl	800da50 <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8010304:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010306:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8010308:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801030a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801030c:	4293      	cmp	r3, r2
 801030e:	bf28      	it	cs
 8010310:	4613      	movcs	r3, r2
 8010312:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010314:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801031a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801031c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801031e:	f7fd fb03 	bl	800d928 <disk_write>
 8010322:	4603      	mov	r3, r0
 8010324:	2b00      	cmp	r3, #0
 8010326:	d001      	beq.n	801032c <f_mkfs+0x6ac>
 8010328:	2301      	movs	r3, #1
 801032a:	e0cf      	b.n	80104cc <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 801032c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801032e:	461a      	mov	r2, r3
 8010330:	2100      	movs	r1, #0
 8010332:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010334:	f7fd fbd9 	bl	800daea <mem_set>
				sect += n; nsect -= n;
 8010338:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801033a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801033c:	4413      	add	r3, r2
 801033e:	667b      	str	r3, [r7, #100]	; 0x64
 8010340:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010342:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010344:	1ad3      	subs	r3, r2, r3
 8010346:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 8010348:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801034a:	2b00      	cmp	r3, #0
 801034c:	d1dc      	bne.n	8010308 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 801034e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010350:	3301      	adds	r3, #1
 8010352:	64bb      	str	r3, [r7, #72]	; 0x48
 8010354:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010356:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010358:	429a      	cmp	r2, r3
 801035a:	d3af      	bcc.n	80102bc <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 801035c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8010360:	2b03      	cmp	r3, #3
 8010362:	d101      	bne.n	8010368 <f_mkfs+0x6e8>
 8010364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010366:	e000      	b.n	801036a <f_mkfs+0x6ea>
 8010368:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801036a:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 801036c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801036e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010370:	4293      	cmp	r3, r2
 8010372:	bf28      	it	cs
 8010374:	4613      	movcs	r3, r2
 8010376:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010378:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801037c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801037e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010380:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010382:	f7fd fad1 	bl	800d928 <disk_write>
 8010386:	4603      	mov	r3, r0
 8010388:	2b00      	cmp	r3, #0
 801038a:	d00d      	beq.n	80103a8 <f_mkfs+0x728>
 801038c:	2301      	movs	r3, #1
 801038e:	e09d      	b.n	80104cc <f_mkfs+0x84c>
 8010390:	08013e98 	.word	0x08013e98
 8010394:	08013ea4 	.word	0x08013ea4
 8010398:	08013eb8 	.word	0x08013eb8
 801039c:	41615252 	.word	0x41615252
 80103a0:	61417272 	.word	0x61417272
 80103a4:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 80103a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80103aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103ac:	4413      	add	r3, r2
 80103ae:	667b      	str	r3, [r7, #100]	; 0x64
 80103b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80103b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103b4:	1ad3      	subs	r3, r2, r3
 80103b6:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 80103b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d1d6      	bne.n	801036c <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 80103be:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80103c2:	2b03      	cmp	r3, #3
 80103c4:	d103      	bne.n	80103ce <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 80103c6:	230c      	movs	r3, #12
 80103c8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80103cc:	e010      	b.n	80103f0 <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 80103ce:	693b      	ldr	r3, [r7, #16]
 80103d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103d4:	d303      	bcc.n	80103de <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 80103d6:	2306      	movs	r3, #6
 80103d8:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80103dc:	e008      	b.n	80103f0 <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 80103de:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80103e2:	2b02      	cmp	r3, #2
 80103e4:	d101      	bne.n	80103ea <f_mkfs+0x76a>
 80103e6:	2304      	movs	r3, #4
 80103e8:	e000      	b.n	80103ec <f_mkfs+0x76c>
 80103ea:	2301      	movs	r3, #1
 80103ec:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 80103f0:	7afb      	ldrb	r3, [r7, #11]
 80103f2:	f003 0308 	and.w	r3, r3, #8
 80103f6:	2b00      	cmp	r3, #0
 80103f8:	d15b      	bne.n	80104b2 <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 80103fa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80103fc:	461a      	mov	r2, r3
 80103fe:	2100      	movs	r1, #0
 8010400:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010402:	f7fd fb72 	bl	800daea <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8010406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010408:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801040c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010410:	4618      	mov	r0, r3
 8010412:	f7fd fb02 	bl	800da1a <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8010416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010418:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801041c:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801041e:	69bb      	ldr	r3, [r7, #24]
 8010420:	2200      	movs	r2, #0
 8010422:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 8010424:	69bb      	ldr	r3, [r7, #24]
 8010426:	3301      	adds	r3, #1
 8010428:	2201      	movs	r2, #1
 801042a:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 801042c:	69bb      	ldr	r3, [r7, #24]
 801042e:	3302      	adds	r3, #2
 8010430:	2201      	movs	r2, #1
 8010432:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 8010434:	69bb      	ldr	r3, [r7, #24]
 8010436:	3303      	adds	r3, #3
 8010438:	2200      	movs	r2, #0
 801043a:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 801043c:	69bb      	ldr	r3, [r7, #24]
 801043e:	3304      	adds	r3, #4
 8010440:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 8010444:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 8010446:	693a      	ldr	r2, [r7, #16]
 8010448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801044a:	441a      	add	r2, r3
 801044c:	4b21      	ldr	r3, [pc, #132]	; (80104d4 <f_mkfs+0x854>)
 801044e:	fba3 1302 	umull	r1, r3, r3, r2
 8010452:	1ad2      	subs	r2, r2, r3
 8010454:	0852      	lsrs	r2, r2, #1
 8010456:	4413      	add	r3, r2
 8010458:	0b5b      	lsrs	r3, r3, #13
 801045a:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 801045c:	69bb      	ldr	r3, [r7, #24]
 801045e:	3305      	adds	r3, #5
 8010460:	22fe      	movs	r2, #254	; 0xfe
 8010462:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 8010464:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010466:	089b      	lsrs	r3, r3, #2
 8010468:	b2da      	uxtb	r2, r3
 801046a:	69bb      	ldr	r3, [r7, #24]
 801046c:	3306      	adds	r3, #6
 801046e:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 8010472:	b2d2      	uxtb	r2, r2
 8010474:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 8010476:	69bb      	ldr	r3, [r7, #24]
 8010478:	3307      	adds	r3, #7
 801047a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801047c:	b2d2      	uxtb	r2, r2
 801047e:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 8010480:	69bb      	ldr	r3, [r7, #24]
 8010482:	3308      	adds	r3, #8
 8010484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010486:	4618      	mov	r0, r3
 8010488:	f7fd fae2 	bl	800da50 <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 801048c:	69bb      	ldr	r3, [r7, #24]
 801048e:	330c      	adds	r3, #12
 8010490:	693a      	ldr	r2, [r7, #16]
 8010492:	4611      	mov	r1, r2
 8010494:	4618      	mov	r0, r3
 8010496:	f7fd fadb 	bl	800da50 <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 801049a:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801049e:	2301      	movs	r3, #1
 80104a0:	2200      	movs	r2, #0
 80104a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80104a4:	f7fd fa40 	bl	800d928 <disk_write>
 80104a8:	4603      	mov	r3, r0
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d001      	beq.n	80104b2 <f_mkfs+0x832>
 80104ae:	2301      	movs	r3, #1
 80104b0:	e00c      	b.n	80104cc <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 80104b2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80104b6:	2200      	movs	r2, #0
 80104b8:	2100      	movs	r1, #0
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7fd fa54 	bl	800d968 <disk_ioctl>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d001      	beq.n	80104ca <f_mkfs+0x84a>
 80104c6:	2301      	movs	r3, #1
 80104c8:	e000      	b.n	80104cc <f_mkfs+0x84c>

	return FR_OK;
 80104ca:	2300      	movs	r3, #0
}
 80104cc:	4618      	mov	r0, r3
 80104ce:	3774      	adds	r7, #116	; 0x74
 80104d0:	46bd      	mov	sp, r7
 80104d2:	bd90      	pop	{r4, r7, pc}
 80104d4:	0515565b 	.word	0x0515565b

080104d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80104d8:	b480      	push	{r7}
 80104da:	b087      	sub	sp, #28
 80104dc:	af00      	add	r7, sp, #0
 80104de:	60f8      	str	r0, [r7, #12]
 80104e0:	60b9      	str	r1, [r7, #8]
 80104e2:	4613      	mov	r3, r2
 80104e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80104e6:	2301      	movs	r3, #1
 80104e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80104ea:	2300      	movs	r3, #0
 80104ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80104ee:	4b1f      	ldr	r3, [pc, #124]	; (801056c <FATFS_LinkDriverEx+0x94>)
 80104f0:	7a5b      	ldrb	r3, [r3, #9]
 80104f2:	b2db      	uxtb	r3, r3
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d131      	bne.n	801055c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80104f8:	4b1c      	ldr	r3, [pc, #112]	; (801056c <FATFS_LinkDriverEx+0x94>)
 80104fa:	7a5b      	ldrb	r3, [r3, #9]
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	461a      	mov	r2, r3
 8010500:	4b1a      	ldr	r3, [pc, #104]	; (801056c <FATFS_LinkDriverEx+0x94>)
 8010502:	2100      	movs	r1, #0
 8010504:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010506:	4b19      	ldr	r3, [pc, #100]	; (801056c <FATFS_LinkDriverEx+0x94>)
 8010508:	7a5b      	ldrb	r3, [r3, #9]
 801050a:	b2db      	uxtb	r3, r3
 801050c:	4a17      	ldr	r2, [pc, #92]	; (801056c <FATFS_LinkDriverEx+0x94>)
 801050e:	009b      	lsls	r3, r3, #2
 8010510:	4413      	add	r3, r2
 8010512:	68fa      	ldr	r2, [r7, #12]
 8010514:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010516:	4b15      	ldr	r3, [pc, #84]	; (801056c <FATFS_LinkDriverEx+0x94>)
 8010518:	7a5b      	ldrb	r3, [r3, #9]
 801051a:	b2db      	uxtb	r3, r3
 801051c:	461a      	mov	r2, r3
 801051e:	4b13      	ldr	r3, [pc, #76]	; (801056c <FATFS_LinkDriverEx+0x94>)
 8010520:	4413      	add	r3, r2
 8010522:	79fa      	ldrb	r2, [r7, #7]
 8010524:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010526:	4b11      	ldr	r3, [pc, #68]	; (801056c <FATFS_LinkDriverEx+0x94>)
 8010528:	7a5b      	ldrb	r3, [r3, #9]
 801052a:	b2db      	uxtb	r3, r3
 801052c:	1c5a      	adds	r2, r3, #1
 801052e:	b2d1      	uxtb	r1, r2
 8010530:	4a0e      	ldr	r2, [pc, #56]	; (801056c <FATFS_LinkDriverEx+0x94>)
 8010532:	7251      	strb	r1, [r2, #9]
 8010534:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010536:	7dbb      	ldrb	r3, [r7, #22]
 8010538:	3330      	adds	r3, #48	; 0x30
 801053a:	b2da      	uxtb	r2, r3
 801053c:	68bb      	ldr	r3, [r7, #8]
 801053e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	3301      	adds	r3, #1
 8010544:	223a      	movs	r2, #58	; 0x3a
 8010546:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010548:	68bb      	ldr	r3, [r7, #8]
 801054a:	3302      	adds	r3, #2
 801054c:	222f      	movs	r2, #47	; 0x2f
 801054e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010550:	68bb      	ldr	r3, [r7, #8]
 8010552:	3303      	adds	r3, #3
 8010554:	2200      	movs	r2, #0
 8010556:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010558:	2300      	movs	r3, #0
 801055a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801055c:	7dfb      	ldrb	r3, [r7, #23]
}
 801055e:	4618      	mov	r0, r3
 8010560:	371c      	adds	r7, #28
 8010562:	46bd      	mov	sp, r7
 8010564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010568:	4770      	bx	lr
 801056a:	bf00      	nop
 801056c:	2000072c 	.word	0x2000072c

08010570 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010570:	b580      	push	{r7, lr}
 8010572:	b082      	sub	sp, #8
 8010574:	af00      	add	r7, sp, #0
 8010576:	6078      	str	r0, [r7, #4]
 8010578:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801057a:	2200      	movs	r2, #0
 801057c:	6839      	ldr	r1, [r7, #0]
 801057e:	6878      	ldr	r0, [r7, #4]
 8010580:	f7ff ffaa 	bl	80104d8 <FATFS_LinkDriverEx>
 8010584:	4603      	mov	r3, r0
}
 8010586:	4618      	mov	r0, r3
 8010588:	3708      	adds	r7, #8
 801058a:	46bd      	mov	sp, r7
 801058c:	bd80      	pop	{r7, pc}

0801058e <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801058e:	b580      	push	{r7, lr}
 8010590:	b086      	sub	sp, #24
 8010592:	af00      	add	r7, sp, #0
 8010594:	4603      	mov	r3, r0
 8010596:	6039      	str	r1, [r7, #0]
 8010598:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 801059a:	2300      	movs	r3, #0
 801059c:	60fb      	str	r3, [r7, #12]
 801059e:	2300      	movs	r3, #0
 80105a0:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 80105a2:	f107 030c 	add.w	r3, r7, #12
 80105a6:	2101      	movs	r1, #1
 80105a8:	4618      	mov	r0, r3
 80105aa:	f000 f8e9 	bl	8010780 <osSemaphoreCreate>
 80105ae:	4602      	mov	r2, r0
 80105b0:	683b      	ldr	r3, [r7, #0]
 80105b2:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 80105b4:	683b      	ldr	r3, [r7, #0]
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	2b00      	cmp	r3, #0
 80105ba:	bf14      	ite	ne
 80105bc:	2301      	movne	r3, #1
 80105be:	2300      	moveq	r3, #0
 80105c0:	b2db      	uxtb	r3, r3
 80105c2:	617b      	str	r3, [r7, #20]

    return ret;
 80105c4:	697b      	ldr	r3, [r7, #20]
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3718      	adds	r7, #24
 80105ca:	46bd      	mov	sp, r7
 80105cc:	bd80      	pop	{r7, pc}

080105ce <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 80105ce:	b580      	push	{r7, lr}
 80105d0:	b082      	sub	sp, #8
 80105d2:	af00      	add	r7, sp, #0
 80105d4:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 80105d6:	6878      	ldr	r0, [r7, #4]
 80105d8:	f000 f988 	bl	80108ec <osSemaphoreDelete>
#endif
    return 1;
 80105dc:	2301      	movs	r3, #1
}
 80105de:	4618      	mov	r0, r3
 80105e0:	3708      	adds	r7, #8
 80105e2:	46bd      	mov	sp, r7
 80105e4:	bd80      	pop	{r7, pc}

080105e6 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 80105e6:	b580      	push	{r7, lr}
 80105e8:	b084      	sub	sp, #16
 80105ea:	af00      	add	r7, sp, #0
 80105ec:	6078      	str	r0, [r7, #4]
  int ret = 0;
 80105ee:	2300      	movs	r3, #0
 80105f0:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 80105f2:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80105f6:	6878      	ldr	r0, [r7, #4]
 80105f8:	f000 f8f4 	bl	80107e4 <osSemaphoreWait>
 80105fc:	4603      	mov	r3, r0
 80105fe:	2b00      	cmp	r3, #0
 8010600:	d101      	bne.n	8010606 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 8010602:	2301      	movs	r3, #1
 8010604:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010606:	68fb      	ldr	r3, [r7, #12]
}
 8010608:	4618      	mov	r0, r3
 801060a:	3710      	adds	r7, #16
 801060c:	46bd      	mov	sp, r7
 801060e:	bd80      	pop	{r7, pc}

08010610 <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 8010610:	b580      	push	{r7, lr}
 8010612:	b082      	sub	sp, #8
 8010614:	af00      	add	r7, sp, #0
 8010616:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8010618:	6878      	ldr	r0, [r7, #4]
 801061a:	f000 f931 	bl	8010880 <osSemaphoreRelease>
#endif
}
 801061e:	bf00      	nop
 8010620:	3708      	adds	r7, #8
 8010622:	46bd      	mov	sp, r7
 8010624:	bd80      	pop	{r7, pc}

08010626 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8010626:	b480      	push	{r7}
 8010628:	b085      	sub	sp, #20
 801062a:	af00      	add	r7, sp, #0
 801062c:	4603      	mov	r3, r0
 801062e:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8010630:	2300      	movs	r3, #0
 8010632:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8010634:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8010638:	2b84      	cmp	r3, #132	; 0x84
 801063a:	d005      	beq.n	8010648 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801063c:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	4413      	add	r3, r2
 8010644:	3303      	adds	r3, #3
 8010646:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8010648:	68fb      	ldr	r3, [r7, #12]
}
 801064a:	4618      	mov	r0, r3
 801064c:	3714      	adds	r7, #20
 801064e:	46bd      	mov	sp, r7
 8010650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010654:	4770      	bx	lr

08010656 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8010656:	b480      	push	{r7}
 8010658:	b083      	sub	sp, #12
 801065a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 801065c:	f3ef 8305 	mrs	r3, IPSR
 8010660:	607b      	str	r3, [r7, #4]
  return(result);
 8010662:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8010664:	2b00      	cmp	r3, #0
 8010666:	bf14      	ite	ne
 8010668:	2301      	movne	r3, #1
 801066a:	2300      	moveq	r3, #0
 801066c:	b2db      	uxtb	r3, r3
}
 801066e:	4618      	mov	r0, r3
 8010670:	370c      	adds	r7, #12
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr

0801067a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801067a:	b580      	push	{r7, lr}
 801067c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801067e:	f001 fc35 	bl	8011eec <vTaskStartScheduler>
  
  return osOK;
 8010682:	2300      	movs	r3, #0
}
 8010684:	4618      	mov	r0, r3
 8010686:	bd80      	pop	{r7, pc}

08010688 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010688:	b580      	push	{r7, lr}
 801068a:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 801068c:	f002 f888 	bl	80127a0 <xTaskGetSchedulerState>
 8010690:	4603      	mov	r3, r0
 8010692:	2b01      	cmp	r3, #1
 8010694:	d101      	bne.n	801069a <osKernelRunning+0x12>
    return 0;
 8010696:	2300      	movs	r3, #0
 8010698:	e000      	b.n	801069c <osKernelRunning+0x14>
  else
    return 1;
 801069a:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 801069c:	4618      	mov	r0, r3
 801069e:	bd80      	pop	{r7, pc}

080106a0 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80106a4:	f7ff ffd7 	bl	8010656 <inHandlerMode>
 80106a8:	4603      	mov	r3, r0
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d003      	beq.n	80106b6 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80106ae:	f001 fd3d 	bl	801212c <xTaskGetTickCountFromISR>
 80106b2:	4603      	mov	r3, r0
 80106b4:	e002      	b.n	80106bc <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80106b6:	f001 fd29 	bl	801210c <xTaskGetTickCount>
 80106ba:	4603      	mov	r3, r0
  }
}
 80106bc:	4618      	mov	r0, r3
 80106be:	bd80      	pop	{r7, pc}

080106c0 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80106c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106c2:	b089      	sub	sp, #36	; 0x24
 80106c4:	af04      	add	r7, sp, #16
 80106c6:	6078      	str	r0, [r7, #4]
 80106c8:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	695b      	ldr	r3, [r3, #20]
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d020      	beq.n	8010714 <osThreadCreate+0x54>
 80106d2:	687b      	ldr	r3, [r7, #4]
 80106d4:	699b      	ldr	r3, [r3, #24]
 80106d6:	2b00      	cmp	r3, #0
 80106d8:	d01c      	beq.n	8010714 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	685c      	ldr	r4, [r3, #4]
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	681d      	ldr	r5, [r3, #0]
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	691e      	ldr	r6, [r3, #16]
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80106ec:	4618      	mov	r0, r3
 80106ee:	f7ff ff9a 	bl	8010626 <makeFreeRtosPriority>
 80106f2:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	695b      	ldr	r3, [r3, #20]
 80106f8:	687a      	ldr	r2, [r7, #4]
 80106fa:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80106fc:	9202      	str	r2, [sp, #8]
 80106fe:	9301      	str	r3, [sp, #4]
 8010700:	9100      	str	r1, [sp, #0]
 8010702:	683b      	ldr	r3, [r7, #0]
 8010704:	4632      	mov	r2, r6
 8010706:	4629      	mov	r1, r5
 8010708:	4620      	mov	r0, r4
 801070a:	f001 fa15 	bl	8011b38 <xTaskCreateStatic>
 801070e:	4603      	mov	r3, r0
 8010710:	60fb      	str	r3, [r7, #12]
 8010712:	e01c      	b.n	801074e <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	685c      	ldr	r4, [r3, #4]
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010720:	b29e      	uxth	r6, r3
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010728:	4618      	mov	r0, r3
 801072a:	f7ff ff7c 	bl	8010626 <makeFreeRtosPriority>
 801072e:	4602      	mov	r2, r0
 8010730:	f107 030c 	add.w	r3, r7, #12
 8010734:	9301      	str	r3, [sp, #4]
 8010736:	9200      	str	r2, [sp, #0]
 8010738:	683b      	ldr	r3, [r7, #0]
 801073a:	4632      	mov	r2, r6
 801073c:	4629      	mov	r1, r5
 801073e:	4620      	mov	r0, r4
 8010740:	f001 fa5d 	bl	8011bfe <xTaskCreate>
 8010744:	4603      	mov	r3, r0
 8010746:	2b01      	cmp	r3, #1
 8010748:	d001      	beq.n	801074e <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 801074a:	2300      	movs	r3, #0
 801074c:	e000      	b.n	8010750 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 801074e:	68fb      	ldr	r3, [r7, #12]
}
 8010750:	4618      	mov	r0, r3
 8010752:	3714      	adds	r7, #20
 8010754:	46bd      	mov	sp, r7
 8010756:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010758 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8010758:	b580      	push	{r7, lr}
 801075a:	b084      	sub	sp, #16
 801075c:	af00      	add	r7, sp, #0
 801075e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2b00      	cmp	r3, #0
 8010768:	d001      	beq.n	801076e <osDelay+0x16>
 801076a:	68fb      	ldr	r3, [r7, #12]
 801076c:	e000      	b.n	8010770 <osDelay+0x18>
 801076e:	2301      	movs	r3, #1
 8010770:	4618      	mov	r0, r3
 8010772:	f001 fb85 	bl	8011e80 <vTaskDelay>
  
  return osOK;
 8010776:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8010778:	4618      	mov	r0, r3
 801077a:	3710      	adds	r7, #16
 801077c:	46bd      	mov	sp, r7
 801077e:	bd80      	pop	{r7, pc}

08010780 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8010780:	b580      	push	{r7, lr}
 8010782:	b086      	sub	sp, #24
 8010784:	af02      	add	r7, sp, #8
 8010786:	6078      	str	r0, [r7, #4]
 8010788:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 801078a:	687b      	ldr	r3, [r7, #4]
 801078c:	685b      	ldr	r3, [r3, #4]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d00f      	beq.n	80107b2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	2b01      	cmp	r3, #1
 8010796:	d10a      	bne.n	80107ae <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	685b      	ldr	r3, [r3, #4]
 801079c:	2203      	movs	r2, #3
 801079e:	9200      	str	r2, [sp, #0]
 80107a0:	2200      	movs	r2, #0
 80107a2:	2100      	movs	r1, #0
 80107a4:	2001      	movs	r0, #1
 80107a6:	f000 faaf 	bl	8010d08 <xQueueGenericCreateStatic>
 80107aa:	4603      	mov	r3, r0
 80107ac:	e016      	b.n	80107dc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 80107ae:	2300      	movs	r3, #0
 80107b0:	e014      	b.n	80107dc <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 80107b2:	683b      	ldr	r3, [r7, #0]
 80107b4:	2b01      	cmp	r3, #1
 80107b6:	d110      	bne.n	80107da <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 80107b8:	2203      	movs	r2, #3
 80107ba:	2100      	movs	r1, #0
 80107bc:	2001      	movs	r0, #1
 80107be:	f000 fb25 	bl	8010e0c <xQueueGenericCreate>
 80107c2:	60f8      	str	r0, [r7, #12]
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d005      	beq.n	80107d6 <osSemaphoreCreate+0x56>
 80107ca:	2300      	movs	r3, #0
 80107cc:	2200      	movs	r2, #0
 80107ce:	2100      	movs	r1, #0
 80107d0:	68f8      	ldr	r0, [r7, #12]
 80107d2:	f000 fb7d 	bl	8010ed0 <xQueueGenericSend>
      return sema;
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	e000      	b.n	80107dc <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 80107da:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3710      	adds	r7, #16
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}

080107e4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80107e4:	b580      	push	{r7, lr}
 80107e6:	b084      	sub	sp, #16
 80107e8:	af00      	add	r7, sp, #0
 80107ea:	6078      	str	r0, [r7, #4]
 80107ec:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80107ee:	2300      	movs	r3, #0
 80107f0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2b00      	cmp	r3, #0
 80107f6:	d101      	bne.n	80107fc <osSemaphoreWait+0x18>
    return osErrorParameter;
 80107f8:	2380      	movs	r3, #128	; 0x80
 80107fa:	e03a      	b.n	8010872 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80107fc:	2300      	movs	r3, #0
 80107fe:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8010800:	683b      	ldr	r3, [r7, #0]
 8010802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010806:	d103      	bne.n	8010810 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8010808:	f04f 33ff 	mov.w	r3, #4294967295
 801080c:	60fb      	str	r3, [r7, #12]
 801080e:	e009      	b.n	8010824 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8010810:	683b      	ldr	r3, [r7, #0]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d006      	beq.n	8010824 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d101      	bne.n	8010824 <osSemaphoreWait+0x40>
      ticks = 1;
 8010820:	2301      	movs	r3, #1
 8010822:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8010824:	f7ff ff17 	bl	8010656 <inHandlerMode>
 8010828:	4603      	mov	r3, r0
 801082a:	2b00      	cmp	r3, #0
 801082c:	d017      	beq.n	801085e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801082e:	f107 0308 	add.w	r3, r7, #8
 8010832:	461a      	mov	r2, r3
 8010834:	2100      	movs	r1, #0
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f000 ff80 	bl	801173c <xQueueReceiveFromISR>
 801083c:	4603      	mov	r3, r0
 801083e:	2b01      	cmp	r3, #1
 8010840:	d001      	beq.n	8010846 <osSemaphoreWait+0x62>
      return osErrorOS;
 8010842:	23ff      	movs	r3, #255	; 0xff
 8010844:	e015      	b.n	8010872 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d011      	beq.n	8010870 <osSemaphoreWait+0x8c>
 801084c:	4b0b      	ldr	r3, [pc, #44]	; (801087c <osSemaphoreWait+0x98>)
 801084e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010852:	601a      	str	r2, [r3, #0]
 8010854:	f3bf 8f4f 	dsb	sy
 8010858:	f3bf 8f6f 	isb	sy
 801085c:	e008      	b.n	8010870 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801085e:	68f9      	ldr	r1, [r7, #12]
 8010860:	6878      	ldr	r0, [r7, #4]
 8010862:	f000 fe57 	bl	8011514 <xQueueSemaphoreTake>
 8010866:	4603      	mov	r3, r0
 8010868:	2b01      	cmp	r3, #1
 801086a:	d001      	beq.n	8010870 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801086c:	23ff      	movs	r3, #255	; 0xff
 801086e:	e000      	b.n	8010872 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8010870:	2300      	movs	r3, #0
}
 8010872:	4618      	mov	r0, r3
 8010874:	3710      	adds	r7, #16
 8010876:	46bd      	mov	sp, r7
 8010878:	bd80      	pop	{r7, pc}
 801087a:	bf00      	nop
 801087c:	e000ed04 	.word	0xe000ed04

08010880 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010888:	2300      	movs	r3, #0
 801088a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801088c:	2300      	movs	r3, #0
 801088e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8010890:	f7ff fee1 	bl	8010656 <inHandlerMode>
 8010894:	4603      	mov	r3, r0
 8010896:	2b00      	cmp	r3, #0
 8010898:	d016      	beq.n	80108c8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801089a:	f107 0308 	add.w	r3, r7, #8
 801089e:	4619      	mov	r1, r3
 80108a0:	6878      	ldr	r0, [r7, #4]
 80108a2:	f000 fcbb 	bl	801121c <xQueueGiveFromISR>
 80108a6:	4603      	mov	r3, r0
 80108a8:	2b01      	cmp	r3, #1
 80108aa:	d001      	beq.n	80108b0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 80108ac:	23ff      	movs	r3, #255	; 0xff
 80108ae:	e017      	b.n	80108e0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d013      	beq.n	80108de <osSemaphoreRelease+0x5e>
 80108b6:	4b0c      	ldr	r3, [pc, #48]	; (80108e8 <osSemaphoreRelease+0x68>)
 80108b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108bc:	601a      	str	r2, [r3, #0]
 80108be:	f3bf 8f4f 	dsb	sy
 80108c2:	f3bf 8f6f 	isb	sy
 80108c6:	e00a      	b.n	80108de <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80108c8:	2300      	movs	r3, #0
 80108ca:	2200      	movs	r2, #0
 80108cc:	2100      	movs	r1, #0
 80108ce:	6878      	ldr	r0, [r7, #4]
 80108d0:	f000 fafe 	bl	8010ed0 <xQueueGenericSend>
 80108d4:	4603      	mov	r3, r0
 80108d6:	2b01      	cmp	r3, #1
 80108d8:	d001      	beq.n	80108de <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80108da:	23ff      	movs	r3, #255	; 0xff
 80108dc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80108de:	68fb      	ldr	r3, [r7, #12]
}
 80108e0:	4618      	mov	r0, r3
 80108e2:	3710      	adds	r7, #16
 80108e4:	46bd      	mov	sp, r7
 80108e6:	bd80      	pop	{r7, pc}
 80108e8:	e000ed04 	.word	0xe000ed04

080108ec <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b082      	sub	sp, #8
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80108f4:	f7ff feaf 	bl	8010656 <inHandlerMode>
 80108f8:	4603      	mov	r3, r0
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d001      	beq.n	8010902 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80108fe:	2382      	movs	r3, #130	; 0x82
 8010900:	e003      	b.n	801090a <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f000 ffa0 	bl	8011848 <vQueueDelete>

  return osOK; 
 8010908:	2300      	movs	r3, #0
}
 801090a:	4618      	mov	r0, r3
 801090c:	3708      	adds	r7, #8
 801090e:	46bd      	mov	sp, r7
 8010910:	bd80      	pop	{r7, pc}

08010912 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8010912:	b590      	push	{r4, r7, lr}
 8010914:	b085      	sub	sp, #20
 8010916:	af02      	add	r7, sp, #8
 8010918:	6078      	str	r0, [r7, #4]
 801091a:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 801091c:	687b      	ldr	r3, [r7, #4]
 801091e:	689b      	ldr	r3, [r3, #8]
 8010920:	2b00      	cmp	r3, #0
 8010922:	d011      	beq.n	8010948 <osMessageCreate+0x36>
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	68db      	ldr	r3, [r3, #12]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d00d      	beq.n	8010948 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	6818      	ldr	r0, [r3, #0]
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	6859      	ldr	r1, [r3, #4]
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	689a      	ldr	r2, [r3, #8]
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	68db      	ldr	r3, [r3, #12]
 801093c:	2400      	movs	r4, #0
 801093e:	9400      	str	r4, [sp, #0]
 8010940:	f000 f9e2 	bl	8010d08 <xQueueGenericCreateStatic>
 8010944:	4603      	mov	r3, r0
 8010946:	e008      	b.n	801095a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	6818      	ldr	r0, [r3, #0]
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	685b      	ldr	r3, [r3, #4]
 8010950:	2200      	movs	r2, #0
 8010952:	4619      	mov	r1, r3
 8010954:	f000 fa5a 	bl	8010e0c <xQueueGenericCreate>
 8010958:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801095a:	4618      	mov	r0, r3
 801095c:	370c      	adds	r7, #12
 801095e:	46bd      	mov	sp, r7
 8010960:	bd90      	pop	{r4, r7, pc}
	...

08010964 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8010964:	b580      	push	{r7, lr}
 8010966:	b086      	sub	sp, #24
 8010968:	af00      	add	r7, sp, #0
 801096a:	60f8      	str	r0, [r7, #12]
 801096c:	60b9      	str	r1, [r7, #8]
 801096e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8010970:	2300      	movs	r3, #0
 8010972:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8010978:	697b      	ldr	r3, [r7, #20]
 801097a:	2b00      	cmp	r3, #0
 801097c:	d101      	bne.n	8010982 <osMessagePut+0x1e>
    ticks = 1;
 801097e:	2301      	movs	r3, #1
 8010980:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8010982:	f7ff fe68 	bl	8010656 <inHandlerMode>
 8010986:	4603      	mov	r3, r0
 8010988:	2b00      	cmp	r3, #0
 801098a:	d018      	beq.n	80109be <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801098c:	f107 0210 	add.w	r2, r7, #16
 8010990:	f107 0108 	add.w	r1, r7, #8
 8010994:	2300      	movs	r3, #0
 8010996:	68f8      	ldr	r0, [r7, #12]
 8010998:	f000 fba0 	bl	80110dc <xQueueGenericSendFromISR>
 801099c:	4603      	mov	r3, r0
 801099e:	2b01      	cmp	r3, #1
 80109a0:	d001      	beq.n	80109a6 <osMessagePut+0x42>
      return osErrorOS;
 80109a2:	23ff      	movs	r3, #255	; 0xff
 80109a4:	e018      	b.n	80109d8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80109a6:	693b      	ldr	r3, [r7, #16]
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d014      	beq.n	80109d6 <osMessagePut+0x72>
 80109ac:	4b0c      	ldr	r3, [pc, #48]	; (80109e0 <osMessagePut+0x7c>)
 80109ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109b2:	601a      	str	r2, [r3, #0]
 80109b4:	f3bf 8f4f 	dsb	sy
 80109b8:	f3bf 8f6f 	isb	sy
 80109bc:	e00b      	b.n	80109d6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80109be:	f107 0108 	add.w	r1, r7, #8
 80109c2:	2300      	movs	r3, #0
 80109c4:	697a      	ldr	r2, [r7, #20]
 80109c6:	68f8      	ldr	r0, [r7, #12]
 80109c8:	f000 fa82 	bl	8010ed0 <xQueueGenericSend>
 80109cc:	4603      	mov	r3, r0
 80109ce:	2b01      	cmp	r3, #1
 80109d0:	d001      	beq.n	80109d6 <osMessagePut+0x72>
      return osErrorOS;
 80109d2:	23ff      	movs	r3, #255	; 0xff
 80109d4:	e000      	b.n	80109d8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80109d6:	2300      	movs	r3, #0
}
 80109d8:	4618      	mov	r0, r3
 80109da:	3718      	adds	r7, #24
 80109dc:	46bd      	mov	sp, r7
 80109de:	bd80      	pop	{r7, pc}
 80109e0:	e000ed04 	.word	0xe000ed04

080109e4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80109e4:	b590      	push	{r4, r7, lr}
 80109e6:	b08b      	sub	sp, #44	; 0x2c
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	60f8      	str	r0, [r7, #12]
 80109ec:	60b9      	str	r1, [r7, #8]
 80109ee:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80109f0:	68bb      	ldr	r3, [r7, #8]
 80109f2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80109f4:	2300      	movs	r3, #0
 80109f6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80109f8:	68bb      	ldr	r3, [r7, #8]
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d10a      	bne.n	8010a14 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80109fe:	2380      	movs	r3, #128	; 0x80
 8010a00:	617b      	str	r3, [r7, #20]
    return event;
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	461c      	mov	r4, r3
 8010a06:	f107 0314 	add.w	r3, r7, #20
 8010a0a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010a0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010a12:	e054      	b.n	8010abe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010a14:	2300      	movs	r3, #0
 8010a16:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010a18:	2300      	movs	r3, #0
 8010a1a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a22:	d103      	bne.n	8010a2c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8010a24:	f04f 33ff 	mov.w	r3, #4294967295
 8010a28:	627b      	str	r3, [r7, #36]	; 0x24
 8010a2a:	e009      	b.n	8010a40 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8010a2c:	687b      	ldr	r3, [r7, #4]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d006      	beq.n	8010a40 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8010a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d101      	bne.n	8010a40 <osMessageGet+0x5c>
      ticks = 1;
 8010a3c:	2301      	movs	r3, #1
 8010a3e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8010a40:	f7ff fe09 	bl	8010656 <inHandlerMode>
 8010a44:	4603      	mov	r3, r0
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d01c      	beq.n	8010a84 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8010a4a:	f107 0220 	add.w	r2, r7, #32
 8010a4e:	f107 0314 	add.w	r3, r7, #20
 8010a52:	3304      	adds	r3, #4
 8010a54:	4619      	mov	r1, r3
 8010a56:	68b8      	ldr	r0, [r7, #8]
 8010a58:	f000 fe70 	bl	801173c <xQueueReceiveFromISR>
 8010a5c:	4603      	mov	r3, r0
 8010a5e:	2b01      	cmp	r3, #1
 8010a60:	d102      	bne.n	8010a68 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8010a62:	2310      	movs	r3, #16
 8010a64:	617b      	str	r3, [r7, #20]
 8010a66:	e001      	b.n	8010a6c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8010a68:	2300      	movs	r3, #0
 8010a6a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010a6c:	6a3b      	ldr	r3, [r7, #32]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d01d      	beq.n	8010aae <osMessageGet+0xca>
 8010a72:	4b15      	ldr	r3, [pc, #84]	; (8010ac8 <osMessageGet+0xe4>)
 8010a74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a78:	601a      	str	r2, [r3, #0]
 8010a7a:	f3bf 8f4f 	dsb	sy
 8010a7e:	f3bf 8f6f 	isb	sy
 8010a82:	e014      	b.n	8010aae <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010a84:	f107 0314 	add.w	r3, r7, #20
 8010a88:	3304      	adds	r3, #4
 8010a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a8c:	4619      	mov	r1, r3
 8010a8e:	68b8      	ldr	r0, [r7, #8]
 8010a90:	f000 fc5a 	bl	8011348 <xQueueReceive>
 8010a94:	4603      	mov	r3, r0
 8010a96:	2b01      	cmp	r3, #1
 8010a98:	d102      	bne.n	8010aa0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010a9a:	2310      	movs	r3, #16
 8010a9c:	617b      	str	r3, [r7, #20]
 8010a9e:	e006      	b.n	8010aae <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d101      	bne.n	8010aaa <osMessageGet+0xc6>
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	e000      	b.n	8010aac <osMessageGet+0xc8>
 8010aaa:	2340      	movs	r3, #64	; 0x40
 8010aac:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8010aae:	68fb      	ldr	r3, [r7, #12]
 8010ab0:	461c      	mov	r4, r3
 8010ab2:	f107 0314 	add.w	r3, r7, #20
 8010ab6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010aba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010abe:	68f8      	ldr	r0, [r7, #12]
 8010ac0:	372c      	adds	r7, #44	; 0x2c
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	bd90      	pop	{r4, r7, pc}
 8010ac6:	bf00      	nop
 8010ac8:	e000ed04 	.word	0xe000ed04

08010acc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010acc:	b480      	push	{r7}
 8010ace:	b083      	sub	sp, #12
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	f103 0208 	add.w	r2, r3, #8
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8010ae4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010ae6:	687b      	ldr	r3, [r7, #4]
 8010ae8:	f103 0208 	add.w	r2, r3, #8
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010af0:	687b      	ldr	r3, [r7, #4]
 8010af2:	f103 0208 	add.w	r2, r3, #8
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2200      	movs	r2, #0
 8010afe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010b00:	bf00      	nop
 8010b02:	370c      	adds	r7, #12
 8010b04:	46bd      	mov	sp, r7
 8010b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b0a:	4770      	bx	lr

08010b0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b083      	sub	sp, #12
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	2200      	movs	r2, #0
 8010b18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010b1a:	bf00      	nop
 8010b1c:	370c      	adds	r7, #12
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b24:	4770      	bx	lr

08010b26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010b26:	b480      	push	{r7}
 8010b28:	b085      	sub	sp, #20
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	6078      	str	r0, [r7, #4]
 8010b2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	685b      	ldr	r3, [r3, #4]
 8010b34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010b36:	683b      	ldr	r3, [r7, #0]
 8010b38:	68fa      	ldr	r2, [r7, #12]
 8010b3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	689a      	ldr	r2, [r3, #8]
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010b44:	68fb      	ldr	r3, [r7, #12]
 8010b46:	689b      	ldr	r3, [r3, #8]
 8010b48:	683a      	ldr	r2, [r7, #0]
 8010b4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	683a      	ldr	r2, [r7, #0]
 8010b50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010b52:	683b      	ldr	r3, [r7, #0]
 8010b54:	687a      	ldr	r2, [r7, #4]
 8010b56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	1c5a      	adds	r2, r3, #1
 8010b5e:	687b      	ldr	r3, [r7, #4]
 8010b60:	601a      	str	r2, [r3, #0]
}
 8010b62:	bf00      	nop
 8010b64:	3714      	adds	r7, #20
 8010b66:	46bd      	mov	sp, r7
 8010b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b6c:	4770      	bx	lr

08010b6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010b6e:	b480      	push	{r7}
 8010b70:	b085      	sub	sp, #20
 8010b72:	af00      	add	r7, sp, #0
 8010b74:	6078      	str	r0, [r7, #4]
 8010b76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010b78:	683b      	ldr	r3, [r7, #0]
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010b7e:	68bb      	ldr	r3, [r7, #8]
 8010b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b84:	d103      	bne.n	8010b8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	691b      	ldr	r3, [r3, #16]
 8010b8a:	60fb      	str	r3, [r7, #12]
 8010b8c:	e00c      	b.n	8010ba8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	3308      	adds	r3, #8
 8010b92:	60fb      	str	r3, [r7, #12]
 8010b94:	e002      	b.n	8010b9c <vListInsert+0x2e>
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	685b      	ldr	r3, [r3, #4]
 8010b9a:	60fb      	str	r3, [r7, #12]
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	685b      	ldr	r3, [r3, #4]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	68ba      	ldr	r2, [r7, #8]
 8010ba4:	429a      	cmp	r2, r3
 8010ba6:	d2f6      	bcs.n	8010b96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010ba8:	68fb      	ldr	r3, [r7, #12]
 8010baa:	685a      	ldr	r2, [r3, #4]
 8010bac:	683b      	ldr	r3, [r7, #0]
 8010bae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010bb0:	683b      	ldr	r3, [r7, #0]
 8010bb2:	685b      	ldr	r3, [r3, #4]
 8010bb4:	683a      	ldr	r2, [r7, #0]
 8010bb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010bb8:	683b      	ldr	r3, [r7, #0]
 8010bba:	68fa      	ldr	r2, [r7, #12]
 8010bbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	683a      	ldr	r2, [r7, #0]
 8010bc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010bc4:	683b      	ldr	r3, [r7, #0]
 8010bc6:	687a      	ldr	r2, [r7, #4]
 8010bc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	1c5a      	adds	r2, r3, #1
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	601a      	str	r2, [r3, #0]
}
 8010bd4:	bf00      	nop
 8010bd6:	3714      	adds	r7, #20
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bde:	4770      	bx	lr

08010be0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010be0:	b480      	push	{r7}
 8010be2:	b085      	sub	sp, #20
 8010be4:	af00      	add	r7, sp, #0
 8010be6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	691b      	ldr	r3, [r3, #16]
 8010bec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010bee:	687b      	ldr	r3, [r7, #4]
 8010bf0:	685b      	ldr	r3, [r3, #4]
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	6892      	ldr	r2, [r2, #8]
 8010bf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010bf8:	687b      	ldr	r3, [r7, #4]
 8010bfa:	689b      	ldr	r3, [r3, #8]
 8010bfc:	687a      	ldr	r2, [r7, #4]
 8010bfe:	6852      	ldr	r2, [r2, #4]
 8010c00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	685b      	ldr	r3, [r3, #4]
 8010c06:	687a      	ldr	r2, [r7, #4]
 8010c08:	429a      	cmp	r2, r3
 8010c0a:	d103      	bne.n	8010c14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	689a      	ldr	r2, [r3, #8]
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	2200      	movs	r2, #0
 8010c18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	681b      	ldr	r3, [r3, #0]
 8010c1e:	1e5a      	subs	r2, r3, #1
 8010c20:	68fb      	ldr	r3, [r7, #12]
 8010c22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010c24:	68fb      	ldr	r3, [r7, #12]
 8010c26:	681b      	ldr	r3, [r3, #0]
}
 8010c28:	4618      	mov	r0, r3
 8010c2a:	3714      	adds	r7, #20
 8010c2c:	46bd      	mov	sp, r7
 8010c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c32:	4770      	bx	lr

08010c34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010c34:	b580      	push	{r7, lr}
 8010c36:	b084      	sub	sp, #16
 8010c38:	af00      	add	r7, sp, #0
 8010c3a:	6078      	str	r0, [r7, #4]
 8010c3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	2b00      	cmp	r3, #0
 8010c46:	d10c      	bne.n	8010c62 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c4c:	b672      	cpsid	i
 8010c4e:	f383 8811 	msr	BASEPRI, r3
 8010c52:	f3bf 8f6f 	isb	sy
 8010c56:	f3bf 8f4f 	dsb	sy
 8010c5a:	b662      	cpsie	i
 8010c5c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010c5e:	bf00      	nop
 8010c60:	e7fe      	b.n	8010c60 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8010c62:	f002 f8eb 	bl	8012e3c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	681a      	ldr	r2, [r3, #0]
 8010c6a:	68fb      	ldr	r3, [r7, #12]
 8010c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c6e:	68f9      	ldr	r1, [r7, #12]
 8010c70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c72:	fb01 f303 	mul.w	r3, r1, r3
 8010c76:	441a      	add	r2, r3
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010c7c:	68fb      	ldr	r3, [r7, #12]
 8010c7e:	2200      	movs	r2, #0
 8010c80:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010c82:	68fb      	ldr	r3, [r7, #12]
 8010c84:	681a      	ldr	r2, [r3, #0]
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c8a:	68fb      	ldr	r3, [r7, #12]
 8010c8c:	681a      	ldr	r2, [r3, #0]
 8010c8e:	68fb      	ldr	r3, [r7, #12]
 8010c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c92:	3b01      	subs	r3, #1
 8010c94:	68f9      	ldr	r1, [r7, #12]
 8010c96:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c98:	fb01 f303 	mul.w	r3, r1, r3
 8010c9c:	441a      	add	r2, r3
 8010c9e:	68fb      	ldr	r3, [r7, #12]
 8010ca0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010ca2:	68fb      	ldr	r3, [r7, #12]
 8010ca4:	22ff      	movs	r2, #255	; 0xff
 8010ca6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010caa:	68fb      	ldr	r3, [r7, #12]
 8010cac:	22ff      	movs	r2, #255	; 0xff
 8010cae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d114      	bne.n	8010ce2 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	691b      	ldr	r3, [r3, #16]
 8010cbc:	2b00      	cmp	r3, #0
 8010cbe:	d01a      	beq.n	8010cf6 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	3310      	adds	r3, #16
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f001 fba5 	bl	8012414 <xTaskRemoveFromEventList>
 8010cca:	4603      	mov	r3, r0
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d012      	beq.n	8010cf6 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010cd0:	4b0c      	ldr	r3, [pc, #48]	; (8010d04 <xQueueGenericReset+0xd0>)
 8010cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010cd6:	601a      	str	r2, [r3, #0]
 8010cd8:	f3bf 8f4f 	dsb	sy
 8010cdc:	f3bf 8f6f 	isb	sy
 8010ce0:	e009      	b.n	8010cf6 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010ce2:	68fb      	ldr	r3, [r7, #12]
 8010ce4:	3310      	adds	r3, #16
 8010ce6:	4618      	mov	r0, r3
 8010ce8:	f7ff fef0 	bl	8010acc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	3324      	adds	r3, #36	; 0x24
 8010cf0:	4618      	mov	r0, r3
 8010cf2:	f7ff feeb 	bl	8010acc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010cf6:	f002 f8d5 	bl	8012ea4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010cfa:	2301      	movs	r3, #1
}
 8010cfc:	4618      	mov	r0, r3
 8010cfe:	3710      	adds	r7, #16
 8010d00:	46bd      	mov	sp, r7
 8010d02:	bd80      	pop	{r7, pc}
 8010d04:	e000ed04 	.word	0xe000ed04

08010d08 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b08e      	sub	sp, #56	; 0x38
 8010d0c:	af02      	add	r7, sp, #8
 8010d0e:	60f8      	str	r0, [r7, #12]
 8010d10:	60b9      	str	r1, [r7, #8]
 8010d12:	607a      	str	r2, [r7, #4]
 8010d14:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010d16:	68fb      	ldr	r3, [r7, #12]
 8010d18:	2b00      	cmp	r3, #0
 8010d1a:	d10c      	bne.n	8010d36 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8010d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d20:	b672      	cpsid	i
 8010d22:	f383 8811 	msr	BASEPRI, r3
 8010d26:	f3bf 8f6f 	isb	sy
 8010d2a:	f3bf 8f4f 	dsb	sy
 8010d2e:	b662      	cpsie	i
 8010d30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010d32:	bf00      	nop
 8010d34:	e7fe      	b.n	8010d34 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010d36:	683b      	ldr	r3, [r7, #0]
 8010d38:	2b00      	cmp	r3, #0
 8010d3a:	d10c      	bne.n	8010d56 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8010d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d40:	b672      	cpsid	i
 8010d42:	f383 8811 	msr	BASEPRI, r3
 8010d46:	f3bf 8f6f 	isb	sy
 8010d4a:	f3bf 8f4f 	dsb	sy
 8010d4e:	b662      	cpsie	i
 8010d50:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010d52:	bf00      	nop
 8010d54:	e7fe      	b.n	8010d54 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010d56:	687b      	ldr	r3, [r7, #4]
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d002      	beq.n	8010d62 <xQueueGenericCreateStatic+0x5a>
 8010d5c:	68bb      	ldr	r3, [r7, #8]
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d001      	beq.n	8010d66 <xQueueGenericCreateStatic+0x5e>
 8010d62:	2301      	movs	r3, #1
 8010d64:	e000      	b.n	8010d68 <xQueueGenericCreateStatic+0x60>
 8010d66:	2300      	movs	r3, #0
 8010d68:	2b00      	cmp	r3, #0
 8010d6a:	d10c      	bne.n	8010d86 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8010d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d70:	b672      	cpsid	i
 8010d72:	f383 8811 	msr	BASEPRI, r3
 8010d76:	f3bf 8f6f 	isb	sy
 8010d7a:	f3bf 8f4f 	dsb	sy
 8010d7e:	b662      	cpsie	i
 8010d80:	623b      	str	r3, [r7, #32]
}
 8010d82:	bf00      	nop
 8010d84:	e7fe      	b.n	8010d84 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d102      	bne.n	8010d92 <xQueueGenericCreateStatic+0x8a>
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	d101      	bne.n	8010d96 <xQueueGenericCreateStatic+0x8e>
 8010d92:	2301      	movs	r3, #1
 8010d94:	e000      	b.n	8010d98 <xQueueGenericCreateStatic+0x90>
 8010d96:	2300      	movs	r3, #0
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d10c      	bne.n	8010db6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8010d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da0:	b672      	cpsid	i
 8010da2:	f383 8811 	msr	BASEPRI, r3
 8010da6:	f3bf 8f6f 	isb	sy
 8010daa:	f3bf 8f4f 	dsb	sy
 8010dae:	b662      	cpsie	i
 8010db0:	61fb      	str	r3, [r7, #28]
}
 8010db2:	bf00      	nop
 8010db4:	e7fe      	b.n	8010db4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010db6:	2348      	movs	r3, #72	; 0x48
 8010db8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010dba:	697b      	ldr	r3, [r7, #20]
 8010dbc:	2b48      	cmp	r3, #72	; 0x48
 8010dbe:	d00c      	beq.n	8010dda <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8010dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dc4:	b672      	cpsid	i
 8010dc6:	f383 8811 	msr	BASEPRI, r3
 8010dca:	f3bf 8f6f 	isb	sy
 8010dce:	f3bf 8f4f 	dsb	sy
 8010dd2:	b662      	cpsie	i
 8010dd4:	61bb      	str	r3, [r7, #24]
}
 8010dd6:	bf00      	nop
 8010dd8:	e7fe      	b.n	8010dd8 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010dda:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010ddc:	683b      	ldr	r3, [r7, #0]
 8010dde:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de2:	2b00      	cmp	r3, #0
 8010de4:	d00d      	beq.n	8010e02 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de8:	2201      	movs	r2, #1
 8010dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010dee:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df4:	9300      	str	r3, [sp, #0]
 8010df6:	4613      	mov	r3, r2
 8010df8:	687a      	ldr	r2, [r7, #4]
 8010dfa:	68b9      	ldr	r1, [r7, #8]
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f000 f847 	bl	8010e90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3730      	adds	r7, #48	; 0x30
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b08a      	sub	sp, #40	; 0x28
 8010e10:	af02      	add	r7, sp, #8
 8010e12:	60f8      	str	r0, [r7, #12]
 8010e14:	60b9      	str	r1, [r7, #8]
 8010e16:	4613      	mov	r3, r2
 8010e18:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010e1a:	68fb      	ldr	r3, [r7, #12]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d10c      	bne.n	8010e3a <xQueueGenericCreate+0x2e>
	__asm volatile
 8010e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e24:	b672      	cpsid	i
 8010e26:	f383 8811 	msr	BASEPRI, r3
 8010e2a:	f3bf 8f6f 	isb	sy
 8010e2e:	f3bf 8f4f 	dsb	sy
 8010e32:	b662      	cpsie	i
 8010e34:	613b      	str	r3, [r7, #16]
}
 8010e36:	bf00      	nop
 8010e38:	e7fe      	b.n	8010e38 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010e3a:	68bb      	ldr	r3, [r7, #8]
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d102      	bne.n	8010e46 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010e40:	2300      	movs	r3, #0
 8010e42:	61fb      	str	r3, [r7, #28]
 8010e44:	e004      	b.n	8010e50 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	68ba      	ldr	r2, [r7, #8]
 8010e4a:	fb02 f303 	mul.w	r3, r2, r3
 8010e4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010e50:	69fb      	ldr	r3, [r7, #28]
 8010e52:	3348      	adds	r3, #72	; 0x48
 8010e54:	4618      	mov	r0, r3
 8010e56:	f002 f91d 	bl	8013094 <pvPortMalloc>
 8010e5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010e5c:	69bb      	ldr	r3, [r7, #24]
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d011      	beq.n	8010e86 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010e62:	69bb      	ldr	r3, [r7, #24]
 8010e64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010e66:	697b      	ldr	r3, [r7, #20]
 8010e68:	3348      	adds	r3, #72	; 0x48
 8010e6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010e6c:	69bb      	ldr	r3, [r7, #24]
 8010e6e:	2200      	movs	r2, #0
 8010e70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010e74:	79fa      	ldrb	r2, [r7, #7]
 8010e76:	69bb      	ldr	r3, [r7, #24]
 8010e78:	9300      	str	r3, [sp, #0]
 8010e7a:	4613      	mov	r3, r2
 8010e7c:	697a      	ldr	r2, [r7, #20]
 8010e7e:	68b9      	ldr	r1, [r7, #8]
 8010e80:	68f8      	ldr	r0, [r7, #12]
 8010e82:	f000 f805 	bl	8010e90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010e86:	69bb      	ldr	r3, [r7, #24]
	}
 8010e88:	4618      	mov	r0, r3
 8010e8a:	3720      	adds	r7, #32
 8010e8c:	46bd      	mov	sp, r7
 8010e8e:	bd80      	pop	{r7, pc}

08010e90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010e90:	b580      	push	{r7, lr}
 8010e92:	b084      	sub	sp, #16
 8010e94:	af00      	add	r7, sp, #0
 8010e96:	60f8      	str	r0, [r7, #12]
 8010e98:	60b9      	str	r1, [r7, #8]
 8010e9a:	607a      	str	r2, [r7, #4]
 8010e9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010e9e:	68bb      	ldr	r3, [r7, #8]
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d103      	bne.n	8010eac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010ea4:	69bb      	ldr	r3, [r7, #24]
 8010ea6:	69ba      	ldr	r2, [r7, #24]
 8010ea8:	601a      	str	r2, [r3, #0]
 8010eaa:	e002      	b.n	8010eb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010eac:	69bb      	ldr	r3, [r7, #24]
 8010eae:	687a      	ldr	r2, [r7, #4]
 8010eb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010eb2:	69bb      	ldr	r3, [r7, #24]
 8010eb4:	68fa      	ldr	r2, [r7, #12]
 8010eb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010eb8:	69bb      	ldr	r3, [r7, #24]
 8010eba:	68ba      	ldr	r2, [r7, #8]
 8010ebc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010ebe:	2101      	movs	r1, #1
 8010ec0:	69b8      	ldr	r0, [r7, #24]
 8010ec2:	f7ff feb7 	bl	8010c34 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010ec6:	bf00      	nop
 8010ec8:	3710      	adds	r7, #16
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	bd80      	pop	{r7, pc}
	...

08010ed0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010ed0:	b580      	push	{r7, lr}
 8010ed2:	b08e      	sub	sp, #56	; 0x38
 8010ed4:	af00      	add	r7, sp, #0
 8010ed6:	60f8      	str	r0, [r7, #12]
 8010ed8:	60b9      	str	r1, [r7, #8]
 8010eda:	607a      	str	r2, [r7, #4]
 8010edc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010ede:	2300      	movs	r3, #0
 8010ee0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010ee2:	68fb      	ldr	r3, [r7, #12]
 8010ee4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d10c      	bne.n	8010f06 <xQueueGenericSend+0x36>
	__asm volatile
 8010eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef0:	b672      	cpsid	i
 8010ef2:	f383 8811 	msr	BASEPRI, r3
 8010ef6:	f3bf 8f6f 	isb	sy
 8010efa:	f3bf 8f4f 	dsb	sy
 8010efe:	b662      	cpsie	i
 8010f00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010f02:	bf00      	nop
 8010f04:	e7fe      	b.n	8010f04 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010f06:	68bb      	ldr	r3, [r7, #8]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d103      	bne.n	8010f14 <xQueueGenericSend+0x44>
 8010f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d101      	bne.n	8010f18 <xQueueGenericSend+0x48>
 8010f14:	2301      	movs	r3, #1
 8010f16:	e000      	b.n	8010f1a <xQueueGenericSend+0x4a>
 8010f18:	2300      	movs	r3, #0
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d10c      	bne.n	8010f38 <xQueueGenericSend+0x68>
	__asm volatile
 8010f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f22:	b672      	cpsid	i
 8010f24:	f383 8811 	msr	BASEPRI, r3
 8010f28:	f3bf 8f6f 	isb	sy
 8010f2c:	f3bf 8f4f 	dsb	sy
 8010f30:	b662      	cpsie	i
 8010f32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010f34:	bf00      	nop
 8010f36:	e7fe      	b.n	8010f36 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010f38:	683b      	ldr	r3, [r7, #0]
 8010f3a:	2b02      	cmp	r3, #2
 8010f3c:	d103      	bne.n	8010f46 <xQueueGenericSend+0x76>
 8010f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f42:	2b01      	cmp	r3, #1
 8010f44:	d101      	bne.n	8010f4a <xQueueGenericSend+0x7a>
 8010f46:	2301      	movs	r3, #1
 8010f48:	e000      	b.n	8010f4c <xQueueGenericSend+0x7c>
 8010f4a:	2300      	movs	r3, #0
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d10c      	bne.n	8010f6a <xQueueGenericSend+0x9a>
	__asm volatile
 8010f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f54:	b672      	cpsid	i
 8010f56:	f383 8811 	msr	BASEPRI, r3
 8010f5a:	f3bf 8f6f 	isb	sy
 8010f5e:	f3bf 8f4f 	dsb	sy
 8010f62:	b662      	cpsie	i
 8010f64:	623b      	str	r3, [r7, #32]
}
 8010f66:	bf00      	nop
 8010f68:	e7fe      	b.n	8010f68 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010f6a:	f001 fc19 	bl	80127a0 <xTaskGetSchedulerState>
 8010f6e:	4603      	mov	r3, r0
 8010f70:	2b00      	cmp	r3, #0
 8010f72:	d102      	bne.n	8010f7a <xQueueGenericSend+0xaa>
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d101      	bne.n	8010f7e <xQueueGenericSend+0xae>
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	e000      	b.n	8010f80 <xQueueGenericSend+0xb0>
 8010f7e:	2300      	movs	r3, #0
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d10c      	bne.n	8010f9e <xQueueGenericSend+0xce>
	__asm volatile
 8010f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f88:	b672      	cpsid	i
 8010f8a:	f383 8811 	msr	BASEPRI, r3
 8010f8e:	f3bf 8f6f 	isb	sy
 8010f92:	f3bf 8f4f 	dsb	sy
 8010f96:	b662      	cpsie	i
 8010f98:	61fb      	str	r3, [r7, #28]
}
 8010f9a:	bf00      	nop
 8010f9c:	e7fe      	b.n	8010f9c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f9e:	f001 ff4d 	bl	8012e3c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010faa:	429a      	cmp	r2, r3
 8010fac:	d302      	bcc.n	8010fb4 <xQueueGenericSend+0xe4>
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	2b02      	cmp	r3, #2
 8010fb2:	d129      	bne.n	8011008 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010fb4:	683a      	ldr	r2, [r7, #0]
 8010fb6:	68b9      	ldr	r1, [r7, #8]
 8010fb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fba:	f000 fc82 	bl	80118c2 <prvCopyDataToQueue>
 8010fbe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010fc4:	2b00      	cmp	r3, #0
 8010fc6:	d010      	beq.n	8010fea <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fca:	3324      	adds	r3, #36	; 0x24
 8010fcc:	4618      	mov	r0, r3
 8010fce:	f001 fa21 	bl	8012414 <xTaskRemoveFromEventList>
 8010fd2:	4603      	mov	r3, r0
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d013      	beq.n	8011000 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010fd8:	4b3f      	ldr	r3, [pc, #252]	; (80110d8 <xQueueGenericSend+0x208>)
 8010fda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010fde:	601a      	str	r2, [r3, #0]
 8010fe0:	f3bf 8f4f 	dsb	sy
 8010fe4:	f3bf 8f6f 	isb	sy
 8010fe8:	e00a      	b.n	8011000 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d007      	beq.n	8011000 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010ff0:	4b39      	ldr	r3, [pc, #228]	; (80110d8 <xQueueGenericSend+0x208>)
 8010ff2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ff6:	601a      	str	r2, [r3, #0]
 8010ff8:	f3bf 8f4f 	dsb	sy
 8010ffc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011000:	f001 ff50 	bl	8012ea4 <vPortExitCritical>
				return pdPASS;
 8011004:	2301      	movs	r3, #1
 8011006:	e063      	b.n	80110d0 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	2b00      	cmp	r3, #0
 801100c:	d103      	bne.n	8011016 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 801100e:	f001 ff49 	bl	8012ea4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011012:	2300      	movs	r3, #0
 8011014:	e05c      	b.n	80110d0 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011018:	2b00      	cmp	r3, #0
 801101a:	d106      	bne.n	801102a <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801101c:	f107 0314 	add.w	r3, r7, #20
 8011020:	4618      	mov	r0, r3
 8011022:	f001 fa5b 	bl	80124dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011026:	2301      	movs	r3, #1
 8011028:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801102a:	f001 ff3b 	bl	8012ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 801102e:	f000 ffc1 	bl	8011fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011032:	f001 ff03 	bl	8012e3c <vPortEnterCritical>
 8011036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011038:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801103c:	b25b      	sxtb	r3, r3
 801103e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011042:	d103      	bne.n	801104c <xQueueGenericSend+0x17c>
 8011044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011046:	2200      	movs	r2, #0
 8011048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801104c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011052:	b25b      	sxtb	r3, r3
 8011054:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011058:	d103      	bne.n	8011062 <xQueueGenericSend+0x192>
 801105a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801105c:	2200      	movs	r2, #0
 801105e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011062:	f001 ff1f 	bl	8012ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011066:	1d3a      	adds	r2, r7, #4
 8011068:	f107 0314 	add.w	r3, r7, #20
 801106c:	4611      	mov	r1, r2
 801106e:	4618      	mov	r0, r3
 8011070:	f001 fa4a 	bl	8012508 <xTaskCheckForTimeOut>
 8011074:	4603      	mov	r3, r0
 8011076:	2b00      	cmp	r3, #0
 8011078:	d124      	bne.n	80110c4 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 801107a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801107c:	f000 fd19 	bl	8011ab2 <prvIsQueueFull>
 8011080:	4603      	mov	r3, r0
 8011082:	2b00      	cmp	r3, #0
 8011084:	d018      	beq.n	80110b8 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011088:	3310      	adds	r3, #16
 801108a:	687a      	ldr	r2, [r7, #4]
 801108c:	4611      	mov	r1, r2
 801108e:	4618      	mov	r0, r3
 8011090:	f001 f99a 	bl	80123c8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011094:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011096:	f000 fca4 	bl	80119e2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 801109a:	f000 ff99 	bl	8011fd0 <xTaskResumeAll>
 801109e:	4603      	mov	r3, r0
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	f47f af7c 	bne.w	8010f9e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80110a6:	4b0c      	ldr	r3, [pc, #48]	; (80110d8 <xQueueGenericSend+0x208>)
 80110a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110ac:	601a      	str	r2, [r3, #0]
 80110ae:	f3bf 8f4f 	dsb	sy
 80110b2:	f3bf 8f6f 	isb	sy
 80110b6:	e772      	b.n	8010f9e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80110b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110ba:	f000 fc92 	bl	80119e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80110be:	f000 ff87 	bl	8011fd0 <xTaskResumeAll>
 80110c2:	e76c      	b.n	8010f9e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80110c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80110c6:	f000 fc8c 	bl	80119e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80110ca:	f000 ff81 	bl	8011fd0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80110ce:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3738      	adds	r7, #56	; 0x38
 80110d4:	46bd      	mov	sp, r7
 80110d6:	bd80      	pop	{r7, pc}
 80110d8:	e000ed04 	.word	0xe000ed04

080110dc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80110dc:	b580      	push	{r7, lr}
 80110de:	b08e      	sub	sp, #56	; 0x38
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	607a      	str	r2, [r7, #4]
 80110e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80110ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d10c      	bne.n	801110e <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80110f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110f8:	b672      	cpsid	i
 80110fa:	f383 8811 	msr	BASEPRI, r3
 80110fe:	f3bf 8f6f 	isb	sy
 8011102:	f3bf 8f4f 	dsb	sy
 8011106:	b662      	cpsie	i
 8011108:	627b      	str	r3, [r7, #36]	; 0x24
}
 801110a:	bf00      	nop
 801110c:	e7fe      	b.n	801110c <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801110e:	68bb      	ldr	r3, [r7, #8]
 8011110:	2b00      	cmp	r3, #0
 8011112:	d103      	bne.n	801111c <xQueueGenericSendFromISR+0x40>
 8011114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011118:	2b00      	cmp	r3, #0
 801111a:	d101      	bne.n	8011120 <xQueueGenericSendFromISR+0x44>
 801111c:	2301      	movs	r3, #1
 801111e:	e000      	b.n	8011122 <xQueueGenericSendFromISR+0x46>
 8011120:	2300      	movs	r3, #0
 8011122:	2b00      	cmp	r3, #0
 8011124:	d10c      	bne.n	8011140 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8011126:	f04f 0350 	mov.w	r3, #80	; 0x50
 801112a:	b672      	cpsid	i
 801112c:	f383 8811 	msr	BASEPRI, r3
 8011130:	f3bf 8f6f 	isb	sy
 8011134:	f3bf 8f4f 	dsb	sy
 8011138:	b662      	cpsie	i
 801113a:	623b      	str	r3, [r7, #32]
}
 801113c:	bf00      	nop
 801113e:	e7fe      	b.n	801113e <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011140:	683b      	ldr	r3, [r7, #0]
 8011142:	2b02      	cmp	r3, #2
 8011144:	d103      	bne.n	801114e <xQueueGenericSendFromISR+0x72>
 8011146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801114a:	2b01      	cmp	r3, #1
 801114c:	d101      	bne.n	8011152 <xQueueGenericSendFromISR+0x76>
 801114e:	2301      	movs	r3, #1
 8011150:	e000      	b.n	8011154 <xQueueGenericSendFromISR+0x78>
 8011152:	2300      	movs	r3, #0
 8011154:	2b00      	cmp	r3, #0
 8011156:	d10c      	bne.n	8011172 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8011158:	f04f 0350 	mov.w	r3, #80	; 0x50
 801115c:	b672      	cpsid	i
 801115e:	f383 8811 	msr	BASEPRI, r3
 8011162:	f3bf 8f6f 	isb	sy
 8011166:	f3bf 8f4f 	dsb	sy
 801116a:	b662      	cpsie	i
 801116c:	61fb      	str	r3, [r7, #28]
}
 801116e:	bf00      	nop
 8011170:	e7fe      	b.n	8011170 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011172:	f001 ff4b 	bl	801300c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011176:	f3ef 8211 	mrs	r2, BASEPRI
 801117a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801117e:	b672      	cpsid	i
 8011180:	f383 8811 	msr	BASEPRI, r3
 8011184:	f3bf 8f6f 	isb	sy
 8011188:	f3bf 8f4f 	dsb	sy
 801118c:	b662      	cpsie	i
 801118e:	61ba      	str	r2, [r7, #24]
 8011190:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011192:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011194:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011198:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801119a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801119c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801119e:	429a      	cmp	r2, r3
 80111a0:	d302      	bcc.n	80111a8 <xQueueGenericSendFromISR+0xcc>
 80111a2:	683b      	ldr	r3, [r7, #0]
 80111a4:	2b02      	cmp	r3, #2
 80111a6:	d12c      	bne.n	8011202 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80111a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80111ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80111b2:	683a      	ldr	r2, [r7, #0]
 80111b4:	68b9      	ldr	r1, [r7, #8]
 80111b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111b8:	f000 fb83 	bl	80118c2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80111bc:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80111c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111c4:	d112      	bne.n	80111ec <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80111c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d016      	beq.n	80111fc <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80111ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111d0:	3324      	adds	r3, #36	; 0x24
 80111d2:	4618      	mov	r0, r3
 80111d4:	f001 f91e 	bl	8012414 <xTaskRemoveFromEventList>
 80111d8:	4603      	mov	r3, r0
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d00e      	beq.n	80111fc <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	2b00      	cmp	r3, #0
 80111e2:	d00b      	beq.n	80111fc <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2201      	movs	r2, #1
 80111e8:	601a      	str	r2, [r3, #0]
 80111ea:	e007      	b.n	80111fc <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80111ec:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80111f0:	3301      	adds	r3, #1
 80111f2:	b2db      	uxtb	r3, r3
 80111f4:	b25a      	sxtb	r2, r3
 80111f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80111fc:	2301      	movs	r3, #1
 80111fe:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8011200:	e001      	b.n	8011206 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011202:	2300      	movs	r3, #0
 8011204:	637b      	str	r3, [r7, #52]	; 0x34
 8011206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011208:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801120a:	693b      	ldr	r3, [r7, #16]
 801120c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011210:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011212:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011214:	4618      	mov	r0, r3
 8011216:	3738      	adds	r7, #56	; 0x38
 8011218:	46bd      	mov	sp, r7
 801121a:	bd80      	pop	{r7, pc}

0801121c <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b08e      	sub	sp, #56	; 0x38
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
 8011224:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011226:	687b      	ldr	r3, [r7, #4]
 8011228:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 801122a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122c:	2b00      	cmp	r3, #0
 801122e:	d10c      	bne.n	801124a <xQueueGiveFromISR+0x2e>
	__asm volatile
 8011230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011234:	b672      	cpsid	i
 8011236:	f383 8811 	msr	BASEPRI, r3
 801123a:	f3bf 8f6f 	isb	sy
 801123e:	f3bf 8f4f 	dsb	sy
 8011242:	b662      	cpsie	i
 8011244:	623b      	str	r3, [r7, #32]
}
 8011246:	bf00      	nop
 8011248:	e7fe      	b.n	8011248 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801124a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801124e:	2b00      	cmp	r3, #0
 8011250:	d00c      	beq.n	801126c <xQueueGiveFromISR+0x50>
	__asm volatile
 8011252:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011256:	b672      	cpsid	i
 8011258:	f383 8811 	msr	BASEPRI, r3
 801125c:	f3bf 8f6f 	isb	sy
 8011260:	f3bf 8f4f 	dsb	sy
 8011264:	b662      	cpsie	i
 8011266:	61fb      	str	r3, [r7, #28]
}
 8011268:	bf00      	nop
 801126a:	e7fe      	b.n	801126a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 801126c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	2b00      	cmp	r3, #0
 8011272:	d103      	bne.n	801127c <xQueueGiveFromISR+0x60>
 8011274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011276:	689b      	ldr	r3, [r3, #8]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d101      	bne.n	8011280 <xQueueGiveFromISR+0x64>
 801127c:	2301      	movs	r3, #1
 801127e:	e000      	b.n	8011282 <xQueueGiveFromISR+0x66>
 8011280:	2300      	movs	r3, #0
 8011282:	2b00      	cmp	r3, #0
 8011284:	d10c      	bne.n	80112a0 <xQueueGiveFromISR+0x84>
	__asm volatile
 8011286:	f04f 0350 	mov.w	r3, #80	; 0x50
 801128a:	b672      	cpsid	i
 801128c:	f383 8811 	msr	BASEPRI, r3
 8011290:	f3bf 8f6f 	isb	sy
 8011294:	f3bf 8f4f 	dsb	sy
 8011298:	b662      	cpsie	i
 801129a:	61bb      	str	r3, [r7, #24]
}
 801129c:	bf00      	nop
 801129e:	e7fe      	b.n	801129e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80112a0:	f001 feb4 	bl	801300c <vPortValidateInterruptPriority>
	__asm volatile
 80112a4:	f3ef 8211 	mrs	r2, BASEPRI
 80112a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ac:	b672      	cpsid	i
 80112ae:	f383 8811 	msr	BASEPRI, r3
 80112b2:	f3bf 8f6f 	isb	sy
 80112b6:	f3bf 8f4f 	dsb	sy
 80112ba:	b662      	cpsie	i
 80112bc:	617a      	str	r2, [r7, #20]
 80112be:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80112c0:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80112c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80112c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80112c8:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80112ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80112ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80112d0:	429a      	cmp	r2, r3
 80112d2:	d22b      	bcs.n	801132c <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80112d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80112da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80112de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112e0:	1c5a      	adds	r2, r3, #1
 80112e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112e4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80112e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80112ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112ee:	d112      	bne.n	8011316 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80112f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112f4:	2b00      	cmp	r3, #0
 80112f6:	d016      	beq.n	8011326 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80112f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80112fa:	3324      	adds	r3, #36	; 0x24
 80112fc:	4618      	mov	r0, r3
 80112fe:	f001 f889 	bl	8012414 <xTaskRemoveFromEventList>
 8011302:	4603      	mov	r3, r0
 8011304:	2b00      	cmp	r3, #0
 8011306:	d00e      	beq.n	8011326 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011308:	683b      	ldr	r3, [r7, #0]
 801130a:	2b00      	cmp	r3, #0
 801130c:	d00b      	beq.n	8011326 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801130e:	683b      	ldr	r3, [r7, #0]
 8011310:	2201      	movs	r2, #1
 8011312:	601a      	str	r2, [r3, #0]
 8011314:	e007      	b.n	8011326 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801131a:	3301      	adds	r3, #1
 801131c:	b2db      	uxtb	r3, r3
 801131e:	b25a      	sxtb	r2, r3
 8011320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011322:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011326:	2301      	movs	r3, #1
 8011328:	637b      	str	r3, [r7, #52]	; 0x34
 801132a:	e001      	b.n	8011330 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801132c:	2300      	movs	r3, #0
 801132e:	637b      	str	r3, [r7, #52]	; 0x34
 8011330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011332:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	f383 8811 	msr	BASEPRI, r3
}
 801133a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801133c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 801133e:	4618      	mov	r0, r3
 8011340:	3738      	adds	r7, #56	; 0x38
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
	...

08011348 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011348:	b580      	push	{r7, lr}
 801134a:	b08c      	sub	sp, #48	; 0x30
 801134c:	af00      	add	r7, sp, #0
 801134e:	60f8      	str	r0, [r7, #12]
 8011350:	60b9      	str	r1, [r7, #8]
 8011352:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011354:	2300      	movs	r3, #0
 8011356:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801135c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801135e:	2b00      	cmp	r3, #0
 8011360:	d10c      	bne.n	801137c <xQueueReceive+0x34>
	__asm volatile
 8011362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011366:	b672      	cpsid	i
 8011368:	f383 8811 	msr	BASEPRI, r3
 801136c:	f3bf 8f6f 	isb	sy
 8011370:	f3bf 8f4f 	dsb	sy
 8011374:	b662      	cpsie	i
 8011376:	623b      	str	r3, [r7, #32]
}
 8011378:	bf00      	nop
 801137a:	e7fe      	b.n	801137a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801137c:	68bb      	ldr	r3, [r7, #8]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d103      	bne.n	801138a <xQueueReceive+0x42>
 8011382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011386:	2b00      	cmp	r3, #0
 8011388:	d101      	bne.n	801138e <xQueueReceive+0x46>
 801138a:	2301      	movs	r3, #1
 801138c:	e000      	b.n	8011390 <xQueueReceive+0x48>
 801138e:	2300      	movs	r3, #0
 8011390:	2b00      	cmp	r3, #0
 8011392:	d10c      	bne.n	80113ae <xQueueReceive+0x66>
	__asm volatile
 8011394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011398:	b672      	cpsid	i
 801139a:	f383 8811 	msr	BASEPRI, r3
 801139e:	f3bf 8f6f 	isb	sy
 80113a2:	f3bf 8f4f 	dsb	sy
 80113a6:	b662      	cpsie	i
 80113a8:	61fb      	str	r3, [r7, #28]
}
 80113aa:	bf00      	nop
 80113ac:	e7fe      	b.n	80113ac <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80113ae:	f001 f9f7 	bl	80127a0 <xTaskGetSchedulerState>
 80113b2:	4603      	mov	r3, r0
 80113b4:	2b00      	cmp	r3, #0
 80113b6:	d102      	bne.n	80113be <xQueueReceive+0x76>
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d101      	bne.n	80113c2 <xQueueReceive+0x7a>
 80113be:	2301      	movs	r3, #1
 80113c0:	e000      	b.n	80113c4 <xQueueReceive+0x7c>
 80113c2:	2300      	movs	r3, #0
 80113c4:	2b00      	cmp	r3, #0
 80113c6:	d10c      	bne.n	80113e2 <xQueueReceive+0x9a>
	__asm volatile
 80113c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113cc:	b672      	cpsid	i
 80113ce:	f383 8811 	msr	BASEPRI, r3
 80113d2:	f3bf 8f6f 	isb	sy
 80113d6:	f3bf 8f4f 	dsb	sy
 80113da:	b662      	cpsie	i
 80113dc:	61bb      	str	r3, [r7, #24]
}
 80113de:	bf00      	nop
 80113e0:	e7fe      	b.n	80113e0 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80113e2:	f001 fd2b 	bl	8012e3c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80113e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80113ea:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80113ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d01f      	beq.n	8011432 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80113f2:	68b9      	ldr	r1, [r7, #8]
 80113f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80113f6:	f000 face 	bl	8011996 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80113fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113fc:	1e5a      	subs	r2, r3, #1
 80113fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011400:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011404:	691b      	ldr	r3, [r3, #16]
 8011406:	2b00      	cmp	r3, #0
 8011408:	d00f      	beq.n	801142a <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801140a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801140c:	3310      	adds	r3, #16
 801140e:	4618      	mov	r0, r3
 8011410:	f001 f800 	bl	8012414 <xTaskRemoveFromEventList>
 8011414:	4603      	mov	r3, r0
 8011416:	2b00      	cmp	r3, #0
 8011418:	d007      	beq.n	801142a <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801141a:	4b3d      	ldr	r3, [pc, #244]	; (8011510 <xQueueReceive+0x1c8>)
 801141c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011420:	601a      	str	r2, [r3, #0]
 8011422:	f3bf 8f4f 	dsb	sy
 8011426:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801142a:	f001 fd3b 	bl	8012ea4 <vPortExitCritical>
				return pdPASS;
 801142e:	2301      	movs	r3, #1
 8011430:	e069      	b.n	8011506 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	2b00      	cmp	r3, #0
 8011436:	d103      	bne.n	8011440 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011438:	f001 fd34 	bl	8012ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 801143c:	2300      	movs	r3, #0
 801143e:	e062      	b.n	8011506 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011442:	2b00      	cmp	r3, #0
 8011444:	d106      	bne.n	8011454 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011446:	f107 0310 	add.w	r3, r7, #16
 801144a:	4618      	mov	r0, r3
 801144c:	f001 f846 	bl	80124dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011450:	2301      	movs	r3, #1
 8011452:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011454:	f001 fd26 	bl	8012ea4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011458:	f000 fdac 	bl	8011fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 801145c:	f001 fcee 	bl	8012e3c <vPortEnterCritical>
 8011460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011462:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011466:	b25b      	sxtb	r3, r3
 8011468:	f1b3 3fff 	cmp.w	r3, #4294967295
 801146c:	d103      	bne.n	8011476 <xQueueReceive+0x12e>
 801146e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011470:	2200      	movs	r2, #0
 8011472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8011476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011478:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801147c:	b25b      	sxtb	r3, r3
 801147e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011482:	d103      	bne.n	801148c <xQueueReceive+0x144>
 8011484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011486:	2200      	movs	r2, #0
 8011488:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801148c:	f001 fd0a 	bl	8012ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011490:	1d3a      	adds	r2, r7, #4
 8011492:	f107 0310 	add.w	r3, r7, #16
 8011496:	4611      	mov	r1, r2
 8011498:	4618      	mov	r0, r3
 801149a:	f001 f835 	bl	8012508 <xTaskCheckForTimeOut>
 801149e:	4603      	mov	r3, r0
 80114a0:	2b00      	cmp	r3, #0
 80114a2:	d123      	bne.n	80114ec <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80114a4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114a6:	f000 faee 	bl	8011a86 <prvIsQueueEmpty>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d017      	beq.n	80114e0 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80114b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114b2:	3324      	adds	r3, #36	; 0x24
 80114b4:	687a      	ldr	r2, [r7, #4]
 80114b6:	4611      	mov	r1, r2
 80114b8:	4618      	mov	r0, r3
 80114ba:	f000 ff85 	bl	80123c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80114be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114c0:	f000 fa8f 	bl	80119e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80114c4:	f000 fd84 	bl	8011fd0 <xTaskResumeAll>
 80114c8:	4603      	mov	r3, r0
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d189      	bne.n	80113e2 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80114ce:	4b10      	ldr	r3, [pc, #64]	; (8011510 <xQueueReceive+0x1c8>)
 80114d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114d4:	601a      	str	r2, [r3, #0]
 80114d6:	f3bf 8f4f 	dsb	sy
 80114da:	f3bf 8f6f 	isb	sy
 80114de:	e780      	b.n	80113e2 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80114e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114e2:	f000 fa7e 	bl	80119e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80114e6:	f000 fd73 	bl	8011fd0 <xTaskResumeAll>
 80114ea:	e77a      	b.n	80113e2 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80114ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114ee:	f000 fa78 	bl	80119e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80114f2:	f000 fd6d 	bl	8011fd0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80114f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80114f8:	f000 fac5 	bl	8011a86 <prvIsQueueEmpty>
 80114fc:	4603      	mov	r3, r0
 80114fe:	2b00      	cmp	r3, #0
 8011500:	f43f af6f 	beq.w	80113e2 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011504:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011506:	4618      	mov	r0, r3
 8011508:	3730      	adds	r7, #48	; 0x30
 801150a:	46bd      	mov	sp, r7
 801150c:	bd80      	pop	{r7, pc}
 801150e:	bf00      	nop
 8011510:	e000ed04 	.word	0xe000ed04

08011514 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011514:	b580      	push	{r7, lr}
 8011516:	b08e      	sub	sp, #56	; 0x38
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
 801151c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801151e:	2300      	movs	r3, #0
 8011520:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011522:	687b      	ldr	r3, [r7, #4]
 8011524:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8011526:	2300      	movs	r3, #0
 8011528:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 801152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152c:	2b00      	cmp	r3, #0
 801152e:	d10c      	bne.n	801154a <xQueueSemaphoreTake+0x36>
	__asm volatile
 8011530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011534:	b672      	cpsid	i
 8011536:	f383 8811 	msr	BASEPRI, r3
 801153a:	f3bf 8f6f 	isb	sy
 801153e:	f3bf 8f4f 	dsb	sy
 8011542:	b662      	cpsie	i
 8011544:	623b      	str	r3, [r7, #32]
}
 8011546:	bf00      	nop
 8011548:	e7fe      	b.n	8011548 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 801154a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801154e:	2b00      	cmp	r3, #0
 8011550:	d00c      	beq.n	801156c <xQueueSemaphoreTake+0x58>
	__asm volatile
 8011552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011556:	b672      	cpsid	i
 8011558:	f383 8811 	msr	BASEPRI, r3
 801155c:	f3bf 8f6f 	isb	sy
 8011560:	f3bf 8f4f 	dsb	sy
 8011564:	b662      	cpsie	i
 8011566:	61fb      	str	r3, [r7, #28]
}
 8011568:	bf00      	nop
 801156a:	e7fe      	b.n	801156a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801156c:	f001 f918 	bl	80127a0 <xTaskGetSchedulerState>
 8011570:	4603      	mov	r3, r0
 8011572:	2b00      	cmp	r3, #0
 8011574:	d102      	bne.n	801157c <xQueueSemaphoreTake+0x68>
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d101      	bne.n	8011580 <xQueueSemaphoreTake+0x6c>
 801157c:	2301      	movs	r3, #1
 801157e:	e000      	b.n	8011582 <xQueueSemaphoreTake+0x6e>
 8011580:	2300      	movs	r3, #0
 8011582:	2b00      	cmp	r3, #0
 8011584:	d10c      	bne.n	80115a0 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8011586:	f04f 0350 	mov.w	r3, #80	; 0x50
 801158a:	b672      	cpsid	i
 801158c:	f383 8811 	msr	BASEPRI, r3
 8011590:	f3bf 8f6f 	isb	sy
 8011594:	f3bf 8f4f 	dsb	sy
 8011598:	b662      	cpsie	i
 801159a:	61bb      	str	r3, [r7, #24]
}
 801159c:	bf00      	nop
 801159e:	e7fe      	b.n	801159e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80115a0:	f001 fc4c 	bl	8012e3c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80115a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80115a8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80115aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ac:	2b00      	cmp	r3, #0
 80115ae:	d024      	beq.n	80115fa <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80115b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115b2:	1e5a      	subs	r2, r3, #1
 80115b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115b6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80115b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ba:	681b      	ldr	r3, [r3, #0]
 80115bc:	2b00      	cmp	r3, #0
 80115be:	d104      	bne.n	80115ca <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80115c0:	f001 fab4 	bl	8012b2c <pvTaskIncrementMutexHeldCount>
 80115c4:	4602      	mov	r2, r0
 80115c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80115ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115cc:	691b      	ldr	r3, [r3, #16]
 80115ce:	2b00      	cmp	r3, #0
 80115d0:	d00f      	beq.n	80115f2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80115d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d4:	3310      	adds	r3, #16
 80115d6:	4618      	mov	r0, r3
 80115d8:	f000 ff1c 	bl	8012414 <xTaskRemoveFromEventList>
 80115dc:	4603      	mov	r3, r0
 80115de:	2b00      	cmp	r3, #0
 80115e0:	d007      	beq.n	80115f2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80115e2:	4b55      	ldr	r3, [pc, #340]	; (8011738 <xQueueSemaphoreTake+0x224>)
 80115e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80115e8:	601a      	str	r2, [r3, #0]
 80115ea:	f3bf 8f4f 	dsb	sy
 80115ee:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80115f2:	f001 fc57 	bl	8012ea4 <vPortExitCritical>
				return pdPASS;
 80115f6:	2301      	movs	r3, #1
 80115f8:	e099      	b.n	801172e <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80115fa:	683b      	ldr	r3, [r7, #0]
 80115fc:	2b00      	cmp	r3, #0
 80115fe:	d113      	bne.n	8011628 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8011600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011602:	2b00      	cmp	r3, #0
 8011604:	d00c      	beq.n	8011620 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8011606:	f04f 0350 	mov.w	r3, #80	; 0x50
 801160a:	b672      	cpsid	i
 801160c:	f383 8811 	msr	BASEPRI, r3
 8011610:	f3bf 8f6f 	isb	sy
 8011614:	f3bf 8f4f 	dsb	sy
 8011618:	b662      	cpsie	i
 801161a:	617b      	str	r3, [r7, #20]
}
 801161c:	bf00      	nop
 801161e:	e7fe      	b.n	801161e <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8011620:	f001 fc40 	bl	8012ea4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011624:	2300      	movs	r3, #0
 8011626:	e082      	b.n	801172e <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011628:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801162a:	2b00      	cmp	r3, #0
 801162c:	d106      	bne.n	801163c <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 801162e:	f107 030c 	add.w	r3, r7, #12
 8011632:	4618      	mov	r0, r3
 8011634:	f000 ff52 	bl	80124dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011638:	2301      	movs	r3, #1
 801163a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 801163c:	f001 fc32 	bl	8012ea4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011640:	f000 fcb8 	bl	8011fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011644:	f001 fbfa 	bl	8012e3c <vPortEnterCritical>
 8011648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801164a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801164e:	b25b      	sxtb	r3, r3
 8011650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011654:	d103      	bne.n	801165e <xQueueSemaphoreTake+0x14a>
 8011656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011658:	2200      	movs	r2, #0
 801165a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801165e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011660:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011664:	b25b      	sxtb	r3, r3
 8011666:	f1b3 3fff 	cmp.w	r3, #4294967295
 801166a:	d103      	bne.n	8011674 <xQueueSemaphoreTake+0x160>
 801166c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801166e:	2200      	movs	r2, #0
 8011670:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011674:	f001 fc16 	bl	8012ea4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011678:	463a      	mov	r2, r7
 801167a:	f107 030c 	add.w	r3, r7, #12
 801167e:	4611      	mov	r1, r2
 8011680:	4618      	mov	r0, r3
 8011682:	f000 ff41 	bl	8012508 <xTaskCheckForTimeOut>
 8011686:	4603      	mov	r3, r0
 8011688:	2b00      	cmp	r3, #0
 801168a:	d132      	bne.n	80116f2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 801168c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801168e:	f000 f9fa 	bl	8011a86 <prvIsQueueEmpty>
 8011692:	4603      	mov	r3, r0
 8011694:	2b00      	cmp	r3, #0
 8011696:	d026      	beq.n	80116e6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	2b00      	cmp	r3, #0
 801169e:	d109      	bne.n	80116b4 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 80116a0:	f001 fbcc 	bl	8012e3c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80116a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116a6:	689b      	ldr	r3, [r3, #8]
 80116a8:	4618      	mov	r0, r3
 80116aa:	f001 f897 	bl	80127dc <xTaskPriorityInherit>
 80116ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80116b0:	f001 fbf8 	bl	8012ea4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80116b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80116b6:	3324      	adds	r3, #36	; 0x24
 80116b8:	683a      	ldr	r2, [r7, #0]
 80116ba:	4611      	mov	r1, r2
 80116bc:	4618      	mov	r0, r3
 80116be:	f000 fe83 	bl	80123c8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80116c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80116c4:	f000 f98d 	bl	80119e2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80116c8:	f000 fc82 	bl	8011fd0 <xTaskResumeAll>
 80116cc:	4603      	mov	r3, r0
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	f47f af66 	bne.w	80115a0 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 80116d4:	4b18      	ldr	r3, [pc, #96]	; (8011738 <xQueueSemaphoreTake+0x224>)
 80116d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80116da:	601a      	str	r2, [r3, #0]
 80116dc:	f3bf 8f4f 	dsb	sy
 80116e0:	f3bf 8f6f 	isb	sy
 80116e4:	e75c      	b.n	80115a0 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80116e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80116e8:	f000 f97b 	bl	80119e2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80116ec:	f000 fc70 	bl	8011fd0 <xTaskResumeAll>
 80116f0:	e756      	b.n	80115a0 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80116f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80116f4:	f000 f975 	bl	80119e2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80116f8:	f000 fc6a 	bl	8011fd0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80116fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80116fe:	f000 f9c2 	bl	8011a86 <prvIsQueueEmpty>
 8011702:	4603      	mov	r3, r0
 8011704:	2b00      	cmp	r3, #0
 8011706:	f43f af4b 	beq.w	80115a0 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 801170a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801170c:	2b00      	cmp	r3, #0
 801170e:	d00d      	beq.n	801172c <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8011710:	f001 fb94 	bl	8012e3c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011714:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011716:	f000 f8bc 	bl	8011892 <prvGetDisinheritPriorityAfterTimeout>
 801171a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 801171c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801171e:	689b      	ldr	r3, [r3, #8]
 8011720:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011722:	4618      	mov	r0, r3
 8011724:	f001 f964 	bl	80129f0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8011728:	f001 fbbc 	bl	8012ea4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 801172c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 801172e:	4618      	mov	r0, r3
 8011730:	3738      	adds	r7, #56	; 0x38
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
 8011736:	bf00      	nop
 8011738:	e000ed04 	.word	0xe000ed04

0801173c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 801173c:	b580      	push	{r7, lr}
 801173e:	b08e      	sub	sp, #56	; 0x38
 8011740:	af00      	add	r7, sp, #0
 8011742:	60f8      	str	r0, [r7, #12]
 8011744:	60b9      	str	r1, [r7, #8]
 8011746:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011748:	68fb      	ldr	r3, [r7, #12]
 801174a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801174c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174e:	2b00      	cmp	r3, #0
 8011750:	d10c      	bne.n	801176c <xQueueReceiveFromISR+0x30>
	__asm volatile
 8011752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011756:	b672      	cpsid	i
 8011758:	f383 8811 	msr	BASEPRI, r3
 801175c:	f3bf 8f6f 	isb	sy
 8011760:	f3bf 8f4f 	dsb	sy
 8011764:	b662      	cpsie	i
 8011766:	623b      	str	r3, [r7, #32]
}
 8011768:	bf00      	nop
 801176a:	e7fe      	b.n	801176a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801176c:	68bb      	ldr	r3, [r7, #8]
 801176e:	2b00      	cmp	r3, #0
 8011770:	d103      	bne.n	801177a <xQueueReceiveFromISR+0x3e>
 8011772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011776:	2b00      	cmp	r3, #0
 8011778:	d101      	bne.n	801177e <xQueueReceiveFromISR+0x42>
 801177a:	2301      	movs	r3, #1
 801177c:	e000      	b.n	8011780 <xQueueReceiveFromISR+0x44>
 801177e:	2300      	movs	r3, #0
 8011780:	2b00      	cmp	r3, #0
 8011782:	d10c      	bne.n	801179e <xQueueReceiveFromISR+0x62>
	__asm volatile
 8011784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011788:	b672      	cpsid	i
 801178a:	f383 8811 	msr	BASEPRI, r3
 801178e:	f3bf 8f6f 	isb	sy
 8011792:	f3bf 8f4f 	dsb	sy
 8011796:	b662      	cpsie	i
 8011798:	61fb      	str	r3, [r7, #28]
}
 801179a:	bf00      	nop
 801179c:	e7fe      	b.n	801179c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801179e:	f001 fc35 	bl	801300c <vPortValidateInterruptPriority>
	__asm volatile
 80117a2:	f3ef 8211 	mrs	r2, BASEPRI
 80117a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117aa:	b672      	cpsid	i
 80117ac:	f383 8811 	msr	BASEPRI, r3
 80117b0:	f3bf 8f6f 	isb	sy
 80117b4:	f3bf 8f4f 	dsb	sy
 80117b8:	b662      	cpsie	i
 80117ba:	61ba      	str	r2, [r7, #24]
 80117bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80117be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80117c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80117c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80117c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d02f      	beq.n	801182e <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80117ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80117d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80117d8:	68b9      	ldr	r1, [r7, #8]
 80117da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80117dc:	f000 f8db 	bl	8011996 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80117e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e2:	1e5a      	subs	r2, r3, #1
 80117e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80117e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80117ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117f0:	d112      	bne.n	8011818 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80117f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117f4:	691b      	ldr	r3, [r3, #16]
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d016      	beq.n	8011828 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80117fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117fc:	3310      	adds	r3, #16
 80117fe:	4618      	mov	r0, r3
 8011800:	f000 fe08 	bl	8012414 <xTaskRemoveFromEventList>
 8011804:	4603      	mov	r3, r0
 8011806:	2b00      	cmp	r3, #0
 8011808:	d00e      	beq.n	8011828 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	2b00      	cmp	r3, #0
 801180e:	d00b      	beq.n	8011828 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	2201      	movs	r2, #1
 8011814:	601a      	str	r2, [r3, #0]
 8011816:	e007      	b.n	8011828 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801181c:	3301      	adds	r3, #1
 801181e:	b2db      	uxtb	r3, r3
 8011820:	b25a      	sxtb	r2, r3
 8011822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8011828:	2301      	movs	r3, #1
 801182a:	637b      	str	r3, [r7, #52]	; 0x34
 801182c:	e001      	b.n	8011832 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 801182e:	2300      	movs	r3, #0
 8011830:	637b      	str	r3, [r7, #52]	; 0x34
 8011832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011834:	613b      	str	r3, [r7, #16]
	__asm volatile
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	f383 8811 	msr	BASEPRI, r3
}
 801183c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801183e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011840:	4618      	mov	r0, r3
 8011842:	3738      	adds	r7, #56	; 0x38
 8011844:	46bd      	mov	sp, r7
 8011846:	bd80      	pop	{r7, pc}

08011848 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8011848:	b580      	push	{r7, lr}
 801184a:	b084      	sub	sp, #16
 801184c:	af00      	add	r7, sp, #0
 801184e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8011850:	687b      	ldr	r3, [r7, #4]
 8011852:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	2b00      	cmp	r3, #0
 8011858:	d10c      	bne.n	8011874 <vQueueDelete+0x2c>
	__asm volatile
 801185a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801185e:	b672      	cpsid	i
 8011860:	f383 8811 	msr	BASEPRI, r3
 8011864:	f3bf 8f6f 	isb	sy
 8011868:	f3bf 8f4f 	dsb	sy
 801186c:	b662      	cpsie	i
 801186e:	60bb      	str	r3, [r7, #8]
}
 8011870:	bf00      	nop
 8011872:	e7fe      	b.n	8011872 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8011874:	68f8      	ldr	r0, [r7, #12]
 8011876:	f000 f935 	bl	8011ae4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 801187a:	68fb      	ldr	r3, [r7, #12]
 801187c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8011880:	2b00      	cmp	r3, #0
 8011882:	d102      	bne.n	801188a <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8011884:	68f8      	ldr	r0, [r7, #12]
 8011886:	f001 fcd5 	bl	8013234 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 801188a:	bf00      	nop
 801188c:	3710      	adds	r7, #16
 801188e:	46bd      	mov	sp, r7
 8011890:	bd80      	pop	{r7, pc}

08011892 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8011892:	b480      	push	{r7}
 8011894:	b085      	sub	sp, #20
 8011896:	af00      	add	r7, sp, #0
 8011898:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d006      	beq.n	80118b0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80118a2:	687b      	ldr	r3, [r7, #4]
 80118a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f1c3 0307 	rsb	r3, r3, #7
 80118ac:	60fb      	str	r3, [r7, #12]
 80118ae:	e001      	b.n	80118b4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80118b0:	2300      	movs	r3, #0
 80118b2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80118b4:	68fb      	ldr	r3, [r7, #12]
	}
 80118b6:	4618      	mov	r0, r3
 80118b8:	3714      	adds	r7, #20
 80118ba:	46bd      	mov	sp, r7
 80118bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c0:	4770      	bx	lr

080118c2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80118c2:	b580      	push	{r7, lr}
 80118c4:	b086      	sub	sp, #24
 80118c6:	af00      	add	r7, sp, #0
 80118c8:	60f8      	str	r0, [r7, #12]
 80118ca:	60b9      	str	r1, [r7, #8]
 80118cc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80118ce:	2300      	movs	r3, #0
 80118d0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80118d6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80118d8:	68fb      	ldr	r3, [r7, #12]
 80118da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118dc:	2b00      	cmp	r3, #0
 80118de:	d10d      	bne.n	80118fc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	2b00      	cmp	r3, #0
 80118e6:	d14d      	bne.n	8011984 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80118e8:	68fb      	ldr	r3, [r7, #12]
 80118ea:	689b      	ldr	r3, [r3, #8]
 80118ec:	4618      	mov	r0, r3
 80118ee:	f000 fff5 	bl	80128dc <xTaskPriorityDisinherit>
 80118f2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	2200      	movs	r2, #0
 80118f8:	609a      	str	r2, [r3, #8]
 80118fa:	e043      	b.n	8011984 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d119      	bne.n	8011936 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011902:	68fb      	ldr	r3, [r7, #12]
 8011904:	6858      	ldr	r0, [r3, #4]
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801190a:	461a      	mov	r2, r3
 801190c:	68b9      	ldr	r1, [r7, #8]
 801190e:	f001 fdd5 	bl	80134bc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011912:	68fb      	ldr	r3, [r7, #12]
 8011914:	685a      	ldr	r2, [r3, #4]
 8011916:	68fb      	ldr	r3, [r7, #12]
 8011918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801191a:	441a      	add	r2, r3
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	685a      	ldr	r2, [r3, #4]
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	689b      	ldr	r3, [r3, #8]
 8011928:	429a      	cmp	r2, r3
 801192a:	d32b      	bcc.n	8011984 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	681a      	ldr	r2, [r3, #0]
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	605a      	str	r2, [r3, #4]
 8011934:	e026      	b.n	8011984 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	68d8      	ldr	r0, [r3, #12]
 801193a:	68fb      	ldr	r3, [r7, #12]
 801193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801193e:	461a      	mov	r2, r3
 8011940:	68b9      	ldr	r1, [r7, #8]
 8011942:	f001 fdbb 	bl	80134bc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	68da      	ldr	r2, [r3, #12]
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801194e:	425b      	negs	r3, r3
 8011950:	441a      	add	r2, r3
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	68da      	ldr	r2, [r3, #12]
 801195a:	68fb      	ldr	r3, [r7, #12]
 801195c:	681b      	ldr	r3, [r3, #0]
 801195e:	429a      	cmp	r2, r3
 8011960:	d207      	bcs.n	8011972 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8011962:	68fb      	ldr	r3, [r7, #12]
 8011964:	689a      	ldr	r2, [r3, #8]
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801196a:	425b      	negs	r3, r3
 801196c:	441a      	add	r2, r3
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	2b02      	cmp	r3, #2
 8011976:	d105      	bne.n	8011984 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011978:	693b      	ldr	r3, [r7, #16]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d002      	beq.n	8011984 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 801197e:	693b      	ldr	r3, [r7, #16]
 8011980:	3b01      	subs	r3, #1
 8011982:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011984:	693b      	ldr	r3, [r7, #16]
 8011986:	1c5a      	adds	r2, r3, #1
 8011988:	68fb      	ldr	r3, [r7, #12]
 801198a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 801198c:	697b      	ldr	r3, [r7, #20]
}
 801198e:	4618      	mov	r0, r3
 8011990:	3718      	adds	r7, #24
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}

08011996 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011996:	b580      	push	{r7, lr}
 8011998:	b082      	sub	sp, #8
 801199a:	af00      	add	r7, sp, #0
 801199c:	6078      	str	r0, [r7, #4]
 801199e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d018      	beq.n	80119da <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80119a8:	687b      	ldr	r3, [r7, #4]
 80119aa:	68da      	ldr	r2, [r3, #12]
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119b0:	441a      	add	r2, r3
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	68da      	ldr	r2, [r3, #12]
 80119ba:	687b      	ldr	r3, [r7, #4]
 80119bc:	689b      	ldr	r3, [r3, #8]
 80119be:	429a      	cmp	r2, r3
 80119c0:	d303      	bcc.n	80119ca <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	681a      	ldr	r2, [r3, #0]
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	68d9      	ldr	r1, [r3, #12]
 80119ce:	687b      	ldr	r3, [r7, #4]
 80119d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80119d2:	461a      	mov	r2, r3
 80119d4:	6838      	ldr	r0, [r7, #0]
 80119d6:	f001 fd71 	bl	80134bc <memcpy>
	}
}
 80119da:	bf00      	nop
 80119dc:	3708      	adds	r7, #8
 80119de:	46bd      	mov	sp, r7
 80119e0:	bd80      	pop	{r7, pc}

080119e2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80119e2:	b580      	push	{r7, lr}
 80119e4:	b084      	sub	sp, #16
 80119e6:	af00      	add	r7, sp, #0
 80119e8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80119ea:	f001 fa27 	bl	8012e3c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80119f4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80119f6:	e011      	b.n	8011a1c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	d012      	beq.n	8011a26 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	3324      	adds	r3, #36	; 0x24
 8011a04:	4618      	mov	r0, r3
 8011a06:	f000 fd05 	bl	8012414 <xTaskRemoveFromEventList>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d001      	beq.n	8011a14 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8011a10:	f000 fde0 	bl	80125d4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011a14:	7bfb      	ldrb	r3, [r7, #15]
 8011a16:	3b01      	subs	r3, #1
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011a1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	dce9      	bgt.n	80119f8 <prvUnlockQueue+0x16>
 8011a24:	e000      	b.n	8011a28 <prvUnlockQueue+0x46>
					break;
 8011a26:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8011a28:	687b      	ldr	r3, [r7, #4]
 8011a2a:	22ff      	movs	r2, #255	; 0xff
 8011a2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8011a30:	f001 fa38 	bl	8012ea4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8011a34:	f001 fa02 	bl	8012e3c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8011a38:	687b      	ldr	r3, [r7, #4]
 8011a3a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011a3e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011a40:	e011      	b.n	8011a66 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011a42:	687b      	ldr	r3, [r7, #4]
 8011a44:	691b      	ldr	r3, [r3, #16]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d012      	beq.n	8011a70 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011a4a:	687b      	ldr	r3, [r7, #4]
 8011a4c:	3310      	adds	r3, #16
 8011a4e:	4618      	mov	r0, r3
 8011a50:	f000 fce0 	bl	8012414 <xTaskRemoveFromEventList>
 8011a54:	4603      	mov	r3, r0
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d001      	beq.n	8011a5e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8011a5a:	f000 fdbb 	bl	80125d4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8011a5e:	7bbb      	ldrb	r3, [r7, #14]
 8011a60:	3b01      	subs	r3, #1
 8011a62:	b2db      	uxtb	r3, r3
 8011a64:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8011a66:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8011a6a:	2b00      	cmp	r3, #0
 8011a6c:	dce9      	bgt.n	8011a42 <prvUnlockQueue+0x60>
 8011a6e:	e000      	b.n	8011a72 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8011a70:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	22ff      	movs	r2, #255	; 0xff
 8011a76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8011a7a:	f001 fa13 	bl	8012ea4 <vPortExitCritical>
}
 8011a7e:	bf00      	nop
 8011a80:	3710      	adds	r7, #16
 8011a82:	46bd      	mov	sp, r7
 8011a84:	bd80      	pop	{r7, pc}

08011a86 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011a86:	b580      	push	{r7, lr}
 8011a88:	b084      	sub	sp, #16
 8011a8a:	af00      	add	r7, sp, #0
 8011a8c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011a8e:	f001 f9d5 	bl	8012e3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d102      	bne.n	8011aa0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011a9a:	2301      	movs	r3, #1
 8011a9c:	60fb      	str	r3, [r7, #12]
 8011a9e:	e001      	b.n	8011aa4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011aa0:	2300      	movs	r3, #0
 8011aa2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011aa4:	f001 f9fe 	bl	8012ea4 <vPortExitCritical>

	return xReturn;
 8011aa8:	68fb      	ldr	r3, [r7, #12]
}
 8011aaa:	4618      	mov	r0, r3
 8011aac:	3710      	adds	r7, #16
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	bd80      	pop	{r7, pc}

08011ab2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011ab2:	b580      	push	{r7, lr}
 8011ab4:	b084      	sub	sp, #16
 8011ab6:	af00      	add	r7, sp, #0
 8011ab8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011aba:	f001 f9bf 	bl	8012e3c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011abe:	687b      	ldr	r3, [r7, #4]
 8011ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011ac2:	687b      	ldr	r3, [r7, #4]
 8011ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ac6:	429a      	cmp	r2, r3
 8011ac8:	d102      	bne.n	8011ad0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011aca:	2301      	movs	r3, #1
 8011acc:	60fb      	str	r3, [r7, #12]
 8011ace:	e001      	b.n	8011ad4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011ad4:	f001 f9e6 	bl	8012ea4 <vPortExitCritical>

	return xReturn;
 8011ad8:	68fb      	ldr	r3, [r7, #12]
}
 8011ada:	4618      	mov	r0, r3
 8011adc:	3710      	adds	r7, #16
 8011ade:	46bd      	mov	sp, r7
 8011ae0:	bd80      	pop	{r7, pc}
	...

08011ae4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011ae4:	b480      	push	{r7}
 8011ae6:	b085      	sub	sp, #20
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011aec:	2300      	movs	r3, #0
 8011aee:	60fb      	str	r3, [r7, #12]
 8011af0:	e016      	b.n	8011b20 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011af2:	4a10      	ldr	r2, [pc, #64]	; (8011b34 <vQueueUnregisterQueue+0x50>)
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	00db      	lsls	r3, r3, #3
 8011af8:	4413      	add	r3, r2
 8011afa:	685b      	ldr	r3, [r3, #4]
 8011afc:	687a      	ldr	r2, [r7, #4]
 8011afe:	429a      	cmp	r2, r3
 8011b00:	d10b      	bne.n	8011b1a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011b02:	4a0c      	ldr	r2, [pc, #48]	; (8011b34 <vQueueUnregisterQueue+0x50>)
 8011b04:	68fb      	ldr	r3, [r7, #12]
 8011b06:	2100      	movs	r1, #0
 8011b08:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011b0c:	4a09      	ldr	r2, [pc, #36]	; (8011b34 <vQueueUnregisterQueue+0x50>)
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	00db      	lsls	r3, r3, #3
 8011b12:	4413      	add	r3, r2
 8011b14:	2200      	movs	r2, #0
 8011b16:	605a      	str	r2, [r3, #4]
				break;
 8011b18:	e006      	b.n	8011b28 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011b1a:	68fb      	ldr	r3, [r7, #12]
 8011b1c:	3301      	adds	r3, #1
 8011b1e:	60fb      	str	r3, [r7, #12]
 8011b20:	68fb      	ldr	r3, [r7, #12]
 8011b22:	2b07      	cmp	r3, #7
 8011b24:	d9e5      	bls.n	8011af2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011b26:	bf00      	nop
 8011b28:	bf00      	nop
 8011b2a:	3714      	adds	r7, #20
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b32:	4770      	bx	lr
 8011b34:	2000973c 	.word	0x2000973c

08011b38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011b38:	b580      	push	{r7, lr}
 8011b3a:	b08e      	sub	sp, #56	; 0x38
 8011b3c:	af04      	add	r7, sp, #16
 8011b3e:	60f8      	str	r0, [r7, #12]
 8011b40:	60b9      	str	r1, [r7, #8]
 8011b42:	607a      	str	r2, [r7, #4]
 8011b44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b48:	2b00      	cmp	r3, #0
 8011b4a:	d10c      	bne.n	8011b66 <xTaskCreateStatic+0x2e>
	__asm volatile
 8011b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b50:	b672      	cpsid	i
 8011b52:	f383 8811 	msr	BASEPRI, r3
 8011b56:	f3bf 8f6f 	isb	sy
 8011b5a:	f3bf 8f4f 	dsb	sy
 8011b5e:	b662      	cpsie	i
 8011b60:	623b      	str	r3, [r7, #32]
}
 8011b62:	bf00      	nop
 8011b64:	e7fe      	b.n	8011b64 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8011b66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d10c      	bne.n	8011b86 <xTaskCreateStatic+0x4e>
	__asm volatile
 8011b6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b70:	b672      	cpsid	i
 8011b72:	f383 8811 	msr	BASEPRI, r3
 8011b76:	f3bf 8f6f 	isb	sy
 8011b7a:	f3bf 8f4f 	dsb	sy
 8011b7e:	b662      	cpsie	i
 8011b80:	61fb      	str	r3, [r7, #28]
}
 8011b82:	bf00      	nop
 8011b84:	e7fe      	b.n	8011b84 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011b86:	2354      	movs	r3, #84	; 0x54
 8011b88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011b8a:	693b      	ldr	r3, [r7, #16]
 8011b8c:	2b54      	cmp	r3, #84	; 0x54
 8011b8e:	d00c      	beq.n	8011baa <xTaskCreateStatic+0x72>
	__asm volatile
 8011b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b94:	b672      	cpsid	i
 8011b96:	f383 8811 	msr	BASEPRI, r3
 8011b9a:	f3bf 8f6f 	isb	sy
 8011b9e:	f3bf 8f4f 	dsb	sy
 8011ba2:	b662      	cpsie	i
 8011ba4:	61bb      	str	r3, [r7, #24]
}
 8011ba6:	bf00      	nop
 8011ba8:	e7fe      	b.n	8011ba8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011baa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bae:	2b00      	cmp	r3, #0
 8011bb0:	d01e      	beq.n	8011bf0 <xTaskCreateStatic+0xb8>
 8011bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d01b      	beq.n	8011bf0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011bba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011bc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bc4:	2202      	movs	r2, #2
 8011bc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011bca:	2300      	movs	r3, #0
 8011bcc:	9303      	str	r3, [sp, #12]
 8011bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bd0:	9302      	str	r3, [sp, #8]
 8011bd2:	f107 0314 	add.w	r3, r7, #20
 8011bd6:	9301      	str	r3, [sp, #4]
 8011bd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bda:	9300      	str	r3, [sp, #0]
 8011bdc:	683b      	ldr	r3, [r7, #0]
 8011bde:	687a      	ldr	r2, [r7, #4]
 8011be0:	68b9      	ldr	r1, [r7, #8]
 8011be2:	68f8      	ldr	r0, [r7, #12]
 8011be4:	f000 f850 	bl	8011c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011be8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011bea:	f000 f8df 	bl	8011dac <prvAddNewTaskToReadyList>
 8011bee:	e001      	b.n	8011bf4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011bf4:	697b      	ldr	r3, [r7, #20]
	}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3728      	adds	r7, #40	; 0x28
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011bfe:	b580      	push	{r7, lr}
 8011c00:	b08c      	sub	sp, #48	; 0x30
 8011c02:	af04      	add	r7, sp, #16
 8011c04:	60f8      	str	r0, [r7, #12]
 8011c06:	60b9      	str	r1, [r7, #8]
 8011c08:	603b      	str	r3, [r7, #0]
 8011c0a:	4613      	mov	r3, r2
 8011c0c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011c0e:	88fb      	ldrh	r3, [r7, #6]
 8011c10:	009b      	lsls	r3, r3, #2
 8011c12:	4618      	mov	r0, r3
 8011c14:	f001 fa3e 	bl	8013094 <pvPortMalloc>
 8011c18:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011c1a:	697b      	ldr	r3, [r7, #20]
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d00e      	beq.n	8011c3e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011c20:	2054      	movs	r0, #84	; 0x54
 8011c22:	f001 fa37 	bl	8013094 <pvPortMalloc>
 8011c26:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011c28:	69fb      	ldr	r3, [r7, #28]
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	d003      	beq.n	8011c36 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011c2e:	69fb      	ldr	r3, [r7, #28]
 8011c30:	697a      	ldr	r2, [r7, #20]
 8011c32:	631a      	str	r2, [r3, #48]	; 0x30
 8011c34:	e005      	b.n	8011c42 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011c36:	6978      	ldr	r0, [r7, #20]
 8011c38:	f001 fafc 	bl	8013234 <vPortFree>
 8011c3c:	e001      	b.n	8011c42 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011c3e:	2300      	movs	r3, #0
 8011c40:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011c42:	69fb      	ldr	r3, [r7, #28]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d017      	beq.n	8011c78 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011c48:	69fb      	ldr	r3, [r7, #28]
 8011c4a:	2200      	movs	r2, #0
 8011c4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011c50:	88fa      	ldrh	r2, [r7, #6]
 8011c52:	2300      	movs	r3, #0
 8011c54:	9303      	str	r3, [sp, #12]
 8011c56:	69fb      	ldr	r3, [r7, #28]
 8011c58:	9302      	str	r3, [sp, #8]
 8011c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011c5c:	9301      	str	r3, [sp, #4]
 8011c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011c60:	9300      	str	r3, [sp, #0]
 8011c62:	683b      	ldr	r3, [r7, #0]
 8011c64:	68b9      	ldr	r1, [r7, #8]
 8011c66:	68f8      	ldr	r0, [r7, #12]
 8011c68:	f000 f80e 	bl	8011c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011c6c:	69f8      	ldr	r0, [r7, #28]
 8011c6e:	f000 f89d 	bl	8011dac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011c72:	2301      	movs	r3, #1
 8011c74:	61bb      	str	r3, [r7, #24]
 8011c76:	e002      	b.n	8011c7e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011c78:	f04f 33ff 	mov.w	r3, #4294967295
 8011c7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011c7e:	69bb      	ldr	r3, [r7, #24]
	}
 8011c80:	4618      	mov	r0, r3
 8011c82:	3720      	adds	r7, #32
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd80      	pop	{r7, pc}

08011c88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b088      	sub	sp, #32
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	60f8      	str	r0, [r7, #12]
 8011c90:	60b9      	str	r1, [r7, #8]
 8011c92:	607a      	str	r2, [r7, #4]
 8011c94:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c98:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	009b      	lsls	r3, r3, #2
 8011c9e:	461a      	mov	r2, r3
 8011ca0:	21a5      	movs	r1, #165	; 0xa5
 8011ca2:	f001 fc19 	bl	80134d8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011caa:	6879      	ldr	r1, [r7, #4]
 8011cac:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011cb0:	440b      	add	r3, r1
 8011cb2:	009b      	lsls	r3, r3, #2
 8011cb4:	4413      	add	r3, r2
 8011cb6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011cb8:	69bb      	ldr	r3, [r7, #24]
 8011cba:	f023 0307 	bic.w	r3, r3, #7
 8011cbe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011cc0:	69bb      	ldr	r3, [r7, #24]
 8011cc2:	f003 0307 	and.w	r3, r3, #7
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	d00c      	beq.n	8011ce4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8011cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011cce:	b672      	cpsid	i
 8011cd0:	f383 8811 	msr	BASEPRI, r3
 8011cd4:	f3bf 8f6f 	isb	sy
 8011cd8:	f3bf 8f4f 	dsb	sy
 8011cdc:	b662      	cpsie	i
 8011cde:	617b      	str	r3, [r7, #20]
}
 8011ce0:	bf00      	nop
 8011ce2:	e7fe      	b.n	8011ce2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011ce4:	68bb      	ldr	r3, [r7, #8]
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d01f      	beq.n	8011d2a <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011cea:	2300      	movs	r3, #0
 8011cec:	61fb      	str	r3, [r7, #28]
 8011cee:	e012      	b.n	8011d16 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	69fb      	ldr	r3, [r7, #28]
 8011cf4:	4413      	add	r3, r2
 8011cf6:	7819      	ldrb	r1, [r3, #0]
 8011cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cfa:	69fb      	ldr	r3, [r7, #28]
 8011cfc:	4413      	add	r3, r2
 8011cfe:	3334      	adds	r3, #52	; 0x34
 8011d00:	460a      	mov	r2, r1
 8011d02:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011d04:	68ba      	ldr	r2, [r7, #8]
 8011d06:	69fb      	ldr	r3, [r7, #28]
 8011d08:	4413      	add	r3, r2
 8011d0a:	781b      	ldrb	r3, [r3, #0]
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d006      	beq.n	8011d1e <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011d10:	69fb      	ldr	r3, [r7, #28]
 8011d12:	3301      	adds	r3, #1
 8011d14:	61fb      	str	r3, [r7, #28]
 8011d16:	69fb      	ldr	r3, [r7, #28]
 8011d18:	2b0f      	cmp	r3, #15
 8011d1a:	d9e9      	bls.n	8011cf0 <prvInitialiseNewTask+0x68>
 8011d1c:	e000      	b.n	8011d20 <prvInitialiseNewTask+0x98>
			{
				break;
 8011d1e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011d20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d22:	2200      	movs	r2, #0
 8011d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011d28:	e003      	b.n	8011d32 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d2c:	2200      	movs	r2, #0
 8011d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d34:	2b06      	cmp	r3, #6
 8011d36:	d901      	bls.n	8011d3c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011d38:	2306      	movs	r3, #6
 8011d3a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d40:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011d46:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d4a:	2200      	movs	r2, #0
 8011d4c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d50:	3304      	adds	r3, #4
 8011d52:	4618      	mov	r0, r3
 8011d54:	f7fe feda 	bl	8010b0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d5a:	3318      	adds	r3, #24
 8011d5c:	4618      	mov	r0, r3
 8011d5e:	f7fe fed5 	bl	8010b0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d66:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011d6a:	f1c3 0207 	rsb	r2, r3, #7
 8011d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d70:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d76:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d7a:	2200      	movs	r2, #0
 8011d7c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d80:	2200      	movs	r2, #0
 8011d82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011d86:	683a      	ldr	r2, [r7, #0]
 8011d88:	68f9      	ldr	r1, [r7, #12]
 8011d8a:	69b8      	ldr	r0, [r7, #24]
 8011d8c:	f000 ff48 	bl	8012c20 <pxPortInitialiseStack>
 8011d90:	4602      	mov	r2, r0
 8011d92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d94:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011d96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d98:	2b00      	cmp	r3, #0
 8011d9a:	d002      	beq.n	8011da2 <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011da0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011da2:	bf00      	nop
 8011da4:	3720      	adds	r7, #32
 8011da6:	46bd      	mov	sp, r7
 8011da8:	bd80      	pop	{r7, pc}
	...

08011dac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011dac:	b580      	push	{r7, lr}
 8011dae:	b082      	sub	sp, #8
 8011db0:	af00      	add	r7, sp, #0
 8011db2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011db4:	f001 f842 	bl	8012e3c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011db8:	4b2a      	ldr	r3, [pc, #168]	; (8011e64 <prvAddNewTaskToReadyList+0xb8>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	3301      	adds	r3, #1
 8011dbe:	4a29      	ldr	r2, [pc, #164]	; (8011e64 <prvAddNewTaskToReadyList+0xb8>)
 8011dc0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011dc2:	4b29      	ldr	r3, [pc, #164]	; (8011e68 <prvAddNewTaskToReadyList+0xbc>)
 8011dc4:	681b      	ldr	r3, [r3, #0]
 8011dc6:	2b00      	cmp	r3, #0
 8011dc8:	d109      	bne.n	8011dde <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011dca:	4a27      	ldr	r2, [pc, #156]	; (8011e68 <prvAddNewTaskToReadyList+0xbc>)
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011dd0:	4b24      	ldr	r3, [pc, #144]	; (8011e64 <prvAddNewTaskToReadyList+0xb8>)
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	2b01      	cmp	r3, #1
 8011dd6:	d110      	bne.n	8011dfa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011dd8:	f000 fc22 	bl	8012620 <prvInitialiseTaskLists>
 8011ddc:	e00d      	b.n	8011dfa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011dde:	4b23      	ldr	r3, [pc, #140]	; (8011e6c <prvAddNewTaskToReadyList+0xc0>)
 8011de0:	681b      	ldr	r3, [r3, #0]
 8011de2:	2b00      	cmp	r3, #0
 8011de4:	d109      	bne.n	8011dfa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011de6:	4b20      	ldr	r3, [pc, #128]	; (8011e68 <prvAddNewTaskToReadyList+0xbc>)
 8011de8:	681b      	ldr	r3, [r3, #0]
 8011dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d802      	bhi.n	8011dfa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011df4:	4a1c      	ldr	r2, [pc, #112]	; (8011e68 <prvAddNewTaskToReadyList+0xbc>)
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011dfa:	4b1d      	ldr	r3, [pc, #116]	; (8011e70 <prvAddNewTaskToReadyList+0xc4>)
 8011dfc:	681b      	ldr	r3, [r3, #0]
 8011dfe:	3301      	adds	r3, #1
 8011e00:	4a1b      	ldr	r2, [pc, #108]	; (8011e70 <prvAddNewTaskToReadyList+0xc4>)
 8011e02:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e08:	2201      	movs	r2, #1
 8011e0a:	409a      	lsls	r2, r3
 8011e0c:	4b19      	ldr	r3, [pc, #100]	; (8011e74 <prvAddNewTaskToReadyList+0xc8>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	4313      	orrs	r3, r2
 8011e12:	4a18      	ldr	r2, [pc, #96]	; (8011e74 <prvAddNewTaskToReadyList+0xc8>)
 8011e14:	6013      	str	r3, [r2, #0]
 8011e16:	687b      	ldr	r3, [r7, #4]
 8011e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e1a:	4613      	mov	r3, r2
 8011e1c:	009b      	lsls	r3, r3, #2
 8011e1e:	4413      	add	r3, r2
 8011e20:	009b      	lsls	r3, r3, #2
 8011e22:	4a15      	ldr	r2, [pc, #84]	; (8011e78 <prvAddNewTaskToReadyList+0xcc>)
 8011e24:	441a      	add	r2, r3
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	3304      	adds	r3, #4
 8011e2a:	4619      	mov	r1, r3
 8011e2c:	4610      	mov	r0, r2
 8011e2e:	f7fe fe7a 	bl	8010b26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011e32:	f001 f837 	bl	8012ea4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011e36:	4b0d      	ldr	r3, [pc, #52]	; (8011e6c <prvAddNewTaskToReadyList+0xc0>)
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	2b00      	cmp	r3, #0
 8011e3c:	d00e      	beq.n	8011e5c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011e3e:	4b0a      	ldr	r3, [pc, #40]	; (8011e68 <prvAddNewTaskToReadyList+0xbc>)
 8011e40:	681b      	ldr	r3, [r3, #0]
 8011e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011e48:	429a      	cmp	r2, r3
 8011e4a:	d207      	bcs.n	8011e5c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011e4c:	4b0b      	ldr	r3, [pc, #44]	; (8011e7c <prvAddNewTaskToReadyList+0xd0>)
 8011e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e52:	601a      	str	r2, [r3, #0]
 8011e54:	f3bf 8f4f 	dsb	sy
 8011e58:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011e5c:	bf00      	nop
 8011e5e:	3708      	adds	r7, #8
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	20000838 	.word	0x20000838
 8011e68:	20000738 	.word	0x20000738
 8011e6c:	20000844 	.word	0x20000844
 8011e70:	20000854 	.word	0x20000854
 8011e74:	20000840 	.word	0x20000840
 8011e78:	2000073c 	.word	0x2000073c
 8011e7c:	e000ed04 	.word	0xe000ed04

08011e80 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011e80:	b580      	push	{r7, lr}
 8011e82:	b084      	sub	sp, #16
 8011e84:	af00      	add	r7, sp, #0
 8011e86:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011e88:	2300      	movs	r3, #0
 8011e8a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d019      	beq.n	8011ec6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011e92:	4b14      	ldr	r3, [pc, #80]	; (8011ee4 <vTaskDelay+0x64>)
 8011e94:	681b      	ldr	r3, [r3, #0]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d00c      	beq.n	8011eb4 <vTaskDelay+0x34>
	__asm volatile
 8011e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e9e:	b672      	cpsid	i
 8011ea0:	f383 8811 	msr	BASEPRI, r3
 8011ea4:	f3bf 8f6f 	isb	sy
 8011ea8:	f3bf 8f4f 	dsb	sy
 8011eac:	b662      	cpsie	i
 8011eae:	60bb      	str	r3, [r7, #8]
}
 8011eb0:	bf00      	nop
 8011eb2:	e7fe      	b.n	8011eb2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8011eb4:	f000 f87e 	bl	8011fb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011eb8:	2100      	movs	r1, #0
 8011eba:	6878      	ldr	r0, [r7, #4]
 8011ebc:	f000 fe4a 	bl	8012b54 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011ec0:	f000 f886 	bl	8011fd0 <xTaskResumeAll>
 8011ec4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011ec6:	68fb      	ldr	r3, [r7, #12]
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d107      	bne.n	8011edc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8011ecc:	4b06      	ldr	r3, [pc, #24]	; (8011ee8 <vTaskDelay+0x68>)
 8011ece:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011ed2:	601a      	str	r2, [r3, #0]
 8011ed4:	f3bf 8f4f 	dsb	sy
 8011ed8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011edc:	bf00      	nop
 8011ede:	3710      	adds	r7, #16
 8011ee0:	46bd      	mov	sp, r7
 8011ee2:	bd80      	pop	{r7, pc}
 8011ee4:	20000860 	.word	0x20000860
 8011ee8:	e000ed04 	.word	0xe000ed04

08011eec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b08a      	sub	sp, #40	; 0x28
 8011ef0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011efa:	463a      	mov	r2, r7
 8011efc:	1d39      	adds	r1, r7, #4
 8011efe:	f107 0308 	add.w	r3, r7, #8
 8011f02:	4618      	mov	r0, r3
 8011f04:	f7ee fd1e 	bl	8000944 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011f08:	6839      	ldr	r1, [r7, #0]
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	68ba      	ldr	r2, [r7, #8]
 8011f0e:	9202      	str	r2, [sp, #8]
 8011f10:	9301      	str	r3, [sp, #4]
 8011f12:	2300      	movs	r3, #0
 8011f14:	9300      	str	r3, [sp, #0]
 8011f16:	2300      	movs	r3, #0
 8011f18:	460a      	mov	r2, r1
 8011f1a:	4920      	ldr	r1, [pc, #128]	; (8011f9c <vTaskStartScheduler+0xb0>)
 8011f1c:	4820      	ldr	r0, [pc, #128]	; (8011fa0 <vTaskStartScheduler+0xb4>)
 8011f1e:	f7ff fe0b 	bl	8011b38 <xTaskCreateStatic>
 8011f22:	4603      	mov	r3, r0
 8011f24:	4a1f      	ldr	r2, [pc, #124]	; (8011fa4 <vTaskStartScheduler+0xb8>)
 8011f26:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011f28:	4b1e      	ldr	r3, [pc, #120]	; (8011fa4 <vTaskStartScheduler+0xb8>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d002      	beq.n	8011f36 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011f30:	2301      	movs	r3, #1
 8011f32:	617b      	str	r3, [r7, #20]
 8011f34:	e001      	b.n	8011f3a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011f36:	2300      	movs	r3, #0
 8011f38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	2b01      	cmp	r3, #1
 8011f3e:	d118      	bne.n	8011f72 <vTaskStartScheduler+0x86>
	__asm volatile
 8011f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f44:	b672      	cpsid	i
 8011f46:	f383 8811 	msr	BASEPRI, r3
 8011f4a:	f3bf 8f6f 	isb	sy
 8011f4e:	f3bf 8f4f 	dsb	sy
 8011f52:	b662      	cpsie	i
 8011f54:	613b      	str	r3, [r7, #16]
}
 8011f56:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011f58:	4b13      	ldr	r3, [pc, #76]	; (8011fa8 <vTaskStartScheduler+0xbc>)
 8011f5a:	f04f 32ff 	mov.w	r2, #4294967295
 8011f5e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011f60:	4b12      	ldr	r3, [pc, #72]	; (8011fac <vTaskStartScheduler+0xc0>)
 8011f62:	2201      	movs	r2, #1
 8011f64:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011f66:	4b12      	ldr	r3, [pc, #72]	; (8011fb0 <vTaskStartScheduler+0xc4>)
 8011f68:	2200      	movs	r2, #0
 8011f6a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011f6c:	f000 fee8 	bl	8012d40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011f70:	e010      	b.n	8011f94 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011f72:	697b      	ldr	r3, [r7, #20]
 8011f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f78:	d10c      	bne.n	8011f94 <vTaskStartScheduler+0xa8>
	__asm volatile
 8011f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f7e:	b672      	cpsid	i
 8011f80:	f383 8811 	msr	BASEPRI, r3
 8011f84:	f3bf 8f6f 	isb	sy
 8011f88:	f3bf 8f4f 	dsb	sy
 8011f8c:	b662      	cpsie	i
 8011f8e:	60fb      	str	r3, [r7, #12]
}
 8011f90:	bf00      	nop
 8011f92:	e7fe      	b.n	8011f92 <vTaskStartScheduler+0xa6>
}
 8011f94:	bf00      	nop
 8011f96:	3718      	adds	r7, #24
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	08013ecc 	.word	0x08013ecc
 8011fa0:	080125ed 	.word	0x080125ed
 8011fa4:	2000085c 	.word	0x2000085c
 8011fa8:	20000858 	.word	0x20000858
 8011fac:	20000844 	.word	0x20000844
 8011fb0:	2000083c 	.word	0x2000083c

08011fb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011fb4:	b480      	push	{r7}
 8011fb6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011fb8:	4b04      	ldr	r3, [pc, #16]	; (8011fcc <vTaskSuspendAll+0x18>)
 8011fba:	681b      	ldr	r3, [r3, #0]
 8011fbc:	3301      	adds	r3, #1
 8011fbe:	4a03      	ldr	r2, [pc, #12]	; (8011fcc <vTaskSuspendAll+0x18>)
 8011fc0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011fc2:	bf00      	nop
 8011fc4:	46bd      	mov	sp, r7
 8011fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fca:	4770      	bx	lr
 8011fcc:	20000860 	.word	0x20000860

08011fd0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011fd0:	b580      	push	{r7, lr}
 8011fd2:	b084      	sub	sp, #16
 8011fd4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011fda:	2300      	movs	r3, #0
 8011fdc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011fde:	4b42      	ldr	r3, [pc, #264]	; (80120e8 <xTaskResumeAll+0x118>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d10c      	bne.n	8012000 <xTaskResumeAll+0x30>
	__asm volatile
 8011fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fea:	b672      	cpsid	i
 8011fec:	f383 8811 	msr	BASEPRI, r3
 8011ff0:	f3bf 8f6f 	isb	sy
 8011ff4:	f3bf 8f4f 	dsb	sy
 8011ff8:	b662      	cpsie	i
 8011ffa:	603b      	str	r3, [r7, #0]
}
 8011ffc:	bf00      	nop
 8011ffe:	e7fe      	b.n	8011ffe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8012000:	f000 ff1c 	bl	8012e3c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8012004:	4b38      	ldr	r3, [pc, #224]	; (80120e8 <xTaskResumeAll+0x118>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	3b01      	subs	r3, #1
 801200a:	4a37      	ldr	r2, [pc, #220]	; (80120e8 <xTaskResumeAll+0x118>)
 801200c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801200e:	4b36      	ldr	r3, [pc, #216]	; (80120e8 <xTaskResumeAll+0x118>)
 8012010:	681b      	ldr	r3, [r3, #0]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d161      	bne.n	80120da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8012016:	4b35      	ldr	r3, [pc, #212]	; (80120ec <xTaskResumeAll+0x11c>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	2b00      	cmp	r3, #0
 801201c:	d05d      	beq.n	80120da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801201e:	e02e      	b.n	801207e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012020:	4b33      	ldr	r3, [pc, #204]	; (80120f0 <xTaskResumeAll+0x120>)
 8012022:	68db      	ldr	r3, [r3, #12]
 8012024:	68db      	ldr	r3, [r3, #12]
 8012026:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	3318      	adds	r3, #24
 801202c:	4618      	mov	r0, r3
 801202e:	f7fe fdd7 	bl	8010be0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	3304      	adds	r3, #4
 8012036:	4618      	mov	r0, r3
 8012038:	f7fe fdd2 	bl	8010be0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012040:	2201      	movs	r2, #1
 8012042:	409a      	lsls	r2, r3
 8012044:	4b2b      	ldr	r3, [pc, #172]	; (80120f4 <xTaskResumeAll+0x124>)
 8012046:	681b      	ldr	r3, [r3, #0]
 8012048:	4313      	orrs	r3, r2
 801204a:	4a2a      	ldr	r2, [pc, #168]	; (80120f4 <xTaskResumeAll+0x124>)
 801204c:	6013      	str	r3, [r2, #0]
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012052:	4613      	mov	r3, r2
 8012054:	009b      	lsls	r3, r3, #2
 8012056:	4413      	add	r3, r2
 8012058:	009b      	lsls	r3, r3, #2
 801205a:	4a27      	ldr	r2, [pc, #156]	; (80120f8 <xTaskResumeAll+0x128>)
 801205c:	441a      	add	r2, r3
 801205e:	68fb      	ldr	r3, [r7, #12]
 8012060:	3304      	adds	r3, #4
 8012062:	4619      	mov	r1, r3
 8012064:	4610      	mov	r0, r2
 8012066:	f7fe fd5e 	bl	8010b26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801206e:	4b23      	ldr	r3, [pc, #140]	; (80120fc <xTaskResumeAll+0x12c>)
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012074:	429a      	cmp	r2, r3
 8012076:	d302      	bcc.n	801207e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8012078:	4b21      	ldr	r3, [pc, #132]	; (8012100 <xTaskResumeAll+0x130>)
 801207a:	2201      	movs	r2, #1
 801207c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801207e:	4b1c      	ldr	r3, [pc, #112]	; (80120f0 <xTaskResumeAll+0x120>)
 8012080:	681b      	ldr	r3, [r3, #0]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d1cc      	bne.n	8012020 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	2b00      	cmp	r3, #0
 801208a:	d001      	beq.n	8012090 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801208c:	f000 fb68 	bl	8012760 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8012090:	4b1c      	ldr	r3, [pc, #112]	; (8012104 <xTaskResumeAll+0x134>)
 8012092:	681b      	ldr	r3, [r3, #0]
 8012094:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d010      	beq.n	80120be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801209c:	f000 f858 	bl	8012150 <xTaskIncrementTick>
 80120a0:	4603      	mov	r3, r0
 80120a2:	2b00      	cmp	r3, #0
 80120a4:	d002      	beq.n	80120ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80120a6:	4b16      	ldr	r3, [pc, #88]	; (8012100 <xTaskResumeAll+0x130>)
 80120a8:	2201      	movs	r2, #1
 80120aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80120ac:	687b      	ldr	r3, [r7, #4]
 80120ae:	3b01      	subs	r3, #1
 80120b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d1f1      	bne.n	801209c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 80120b8:	4b12      	ldr	r3, [pc, #72]	; (8012104 <xTaskResumeAll+0x134>)
 80120ba:	2200      	movs	r2, #0
 80120bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80120be:	4b10      	ldr	r3, [pc, #64]	; (8012100 <xTaskResumeAll+0x130>)
 80120c0:	681b      	ldr	r3, [r3, #0]
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d009      	beq.n	80120da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80120c6:	2301      	movs	r3, #1
 80120c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80120ca:	4b0f      	ldr	r3, [pc, #60]	; (8012108 <xTaskResumeAll+0x138>)
 80120cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80120d0:	601a      	str	r2, [r3, #0]
 80120d2:	f3bf 8f4f 	dsb	sy
 80120d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80120da:	f000 fee3 	bl	8012ea4 <vPortExitCritical>

	return xAlreadyYielded;
 80120de:	68bb      	ldr	r3, [r7, #8]
}
 80120e0:	4618      	mov	r0, r3
 80120e2:	3710      	adds	r7, #16
 80120e4:	46bd      	mov	sp, r7
 80120e6:	bd80      	pop	{r7, pc}
 80120e8:	20000860 	.word	0x20000860
 80120ec:	20000838 	.word	0x20000838
 80120f0:	200007f8 	.word	0x200007f8
 80120f4:	20000840 	.word	0x20000840
 80120f8:	2000073c 	.word	0x2000073c
 80120fc:	20000738 	.word	0x20000738
 8012100:	2000084c 	.word	0x2000084c
 8012104:	20000848 	.word	0x20000848
 8012108:	e000ed04 	.word	0xe000ed04

0801210c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 801210c:	b480      	push	{r7}
 801210e:	b083      	sub	sp, #12
 8012110:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8012112:	4b05      	ldr	r3, [pc, #20]	; (8012128 <xTaskGetTickCount+0x1c>)
 8012114:	681b      	ldr	r3, [r3, #0]
 8012116:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012118:	687b      	ldr	r3, [r7, #4]
}
 801211a:	4618      	mov	r0, r3
 801211c:	370c      	adds	r7, #12
 801211e:	46bd      	mov	sp, r7
 8012120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012124:	4770      	bx	lr
 8012126:	bf00      	nop
 8012128:	2000083c 	.word	0x2000083c

0801212c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 801212c:	b580      	push	{r7, lr}
 801212e:	b082      	sub	sp, #8
 8012130:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012132:	f000 ff6b 	bl	801300c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8012136:	2300      	movs	r3, #0
 8012138:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801213a:	4b04      	ldr	r3, [pc, #16]	; (801214c <xTaskGetTickCountFromISR+0x20>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012140:	683b      	ldr	r3, [r7, #0]
}
 8012142:	4618      	mov	r0, r3
 8012144:	3708      	adds	r7, #8
 8012146:	46bd      	mov	sp, r7
 8012148:	bd80      	pop	{r7, pc}
 801214a:	bf00      	nop
 801214c:	2000083c 	.word	0x2000083c

08012150 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8012150:	b580      	push	{r7, lr}
 8012152:	b086      	sub	sp, #24
 8012154:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8012156:	2300      	movs	r3, #0
 8012158:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801215a:	4b4f      	ldr	r3, [pc, #316]	; (8012298 <xTaskIncrementTick+0x148>)
 801215c:	681b      	ldr	r3, [r3, #0]
 801215e:	2b00      	cmp	r3, #0
 8012160:	f040 808a 	bne.w	8012278 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8012164:	4b4d      	ldr	r3, [pc, #308]	; (801229c <xTaskIncrementTick+0x14c>)
 8012166:	681b      	ldr	r3, [r3, #0]
 8012168:	3301      	adds	r3, #1
 801216a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801216c:	4a4b      	ldr	r2, [pc, #300]	; (801229c <xTaskIncrementTick+0x14c>)
 801216e:	693b      	ldr	r3, [r7, #16]
 8012170:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8012172:	693b      	ldr	r3, [r7, #16]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d122      	bne.n	80121be <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8012178:	4b49      	ldr	r3, [pc, #292]	; (80122a0 <xTaskIncrementTick+0x150>)
 801217a:	681b      	ldr	r3, [r3, #0]
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	2b00      	cmp	r3, #0
 8012180:	d00c      	beq.n	801219c <xTaskIncrementTick+0x4c>
	__asm volatile
 8012182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012186:	b672      	cpsid	i
 8012188:	f383 8811 	msr	BASEPRI, r3
 801218c:	f3bf 8f6f 	isb	sy
 8012190:	f3bf 8f4f 	dsb	sy
 8012194:	b662      	cpsie	i
 8012196:	603b      	str	r3, [r7, #0]
}
 8012198:	bf00      	nop
 801219a:	e7fe      	b.n	801219a <xTaskIncrementTick+0x4a>
 801219c:	4b40      	ldr	r3, [pc, #256]	; (80122a0 <xTaskIncrementTick+0x150>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	60fb      	str	r3, [r7, #12]
 80121a2:	4b40      	ldr	r3, [pc, #256]	; (80122a4 <xTaskIncrementTick+0x154>)
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	4a3e      	ldr	r2, [pc, #248]	; (80122a0 <xTaskIncrementTick+0x150>)
 80121a8:	6013      	str	r3, [r2, #0]
 80121aa:	4a3e      	ldr	r2, [pc, #248]	; (80122a4 <xTaskIncrementTick+0x154>)
 80121ac:	68fb      	ldr	r3, [r7, #12]
 80121ae:	6013      	str	r3, [r2, #0]
 80121b0:	4b3d      	ldr	r3, [pc, #244]	; (80122a8 <xTaskIncrementTick+0x158>)
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	3301      	adds	r3, #1
 80121b6:	4a3c      	ldr	r2, [pc, #240]	; (80122a8 <xTaskIncrementTick+0x158>)
 80121b8:	6013      	str	r3, [r2, #0]
 80121ba:	f000 fad1 	bl	8012760 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80121be:	4b3b      	ldr	r3, [pc, #236]	; (80122ac <xTaskIncrementTick+0x15c>)
 80121c0:	681b      	ldr	r3, [r3, #0]
 80121c2:	693a      	ldr	r2, [r7, #16]
 80121c4:	429a      	cmp	r2, r3
 80121c6:	d348      	bcc.n	801225a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80121c8:	4b35      	ldr	r3, [pc, #212]	; (80122a0 <xTaskIncrementTick+0x150>)
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d104      	bne.n	80121dc <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80121d2:	4b36      	ldr	r3, [pc, #216]	; (80122ac <xTaskIncrementTick+0x15c>)
 80121d4:	f04f 32ff 	mov.w	r2, #4294967295
 80121d8:	601a      	str	r2, [r3, #0]
					break;
 80121da:	e03e      	b.n	801225a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80121dc:	4b30      	ldr	r3, [pc, #192]	; (80122a0 <xTaskIncrementTick+0x150>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	68db      	ldr	r3, [r3, #12]
 80121e2:	68db      	ldr	r3, [r3, #12]
 80121e4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80121e6:	68bb      	ldr	r3, [r7, #8]
 80121e8:	685b      	ldr	r3, [r3, #4]
 80121ea:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80121ec:	693a      	ldr	r2, [r7, #16]
 80121ee:	687b      	ldr	r3, [r7, #4]
 80121f0:	429a      	cmp	r2, r3
 80121f2:	d203      	bcs.n	80121fc <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80121f4:	4a2d      	ldr	r2, [pc, #180]	; (80122ac <xTaskIncrementTick+0x15c>)
 80121f6:	687b      	ldr	r3, [r7, #4]
 80121f8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80121fa:	e02e      	b.n	801225a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80121fc:	68bb      	ldr	r3, [r7, #8]
 80121fe:	3304      	adds	r3, #4
 8012200:	4618      	mov	r0, r3
 8012202:	f7fe fced 	bl	8010be0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012206:	68bb      	ldr	r3, [r7, #8]
 8012208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801220a:	2b00      	cmp	r3, #0
 801220c:	d004      	beq.n	8012218 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801220e:	68bb      	ldr	r3, [r7, #8]
 8012210:	3318      	adds	r3, #24
 8012212:	4618      	mov	r0, r3
 8012214:	f7fe fce4 	bl	8010be0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012218:	68bb      	ldr	r3, [r7, #8]
 801221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801221c:	2201      	movs	r2, #1
 801221e:	409a      	lsls	r2, r3
 8012220:	4b23      	ldr	r3, [pc, #140]	; (80122b0 <xTaskIncrementTick+0x160>)
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	4313      	orrs	r3, r2
 8012226:	4a22      	ldr	r2, [pc, #136]	; (80122b0 <xTaskIncrementTick+0x160>)
 8012228:	6013      	str	r3, [r2, #0]
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801222e:	4613      	mov	r3, r2
 8012230:	009b      	lsls	r3, r3, #2
 8012232:	4413      	add	r3, r2
 8012234:	009b      	lsls	r3, r3, #2
 8012236:	4a1f      	ldr	r2, [pc, #124]	; (80122b4 <xTaskIncrementTick+0x164>)
 8012238:	441a      	add	r2, r3
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	3304      	adds	r3, #4
 801223e:	4619      	mov	r1, r3
 8012240:	4610      	mov	r0, r2
 8012242:	f7fe fc70 	bl	8010b26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801224a:	4b1b      	ldr	r3, [pc, #108]	; (80122b8 <xTaskIncrementTick+0x168>)
 801224c:	681b      	ldr	r3, [r3, #0]
 801224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012250:	429a      	cmp	r2, r3
 8012252:	d3b9      	bcc.n	80121c8 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8012254:	2301      	movs	r3, #1
 8012256:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012258:	e7b6      	b.n	80121c8 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801225a:	4b17      	ldr	r3, [pc, #92]	; (80122b8 <xTaskIncrementTick+0x168>)
 801225c:	681b      	ldr	r3, [r3, #0]
 801225e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012260:	4914      	ldr	r1, [pc, #80]	; (80122b4 <xTaskIncrementTick+0x164>)
 8012262:	4613      	mov	r3, r2
 8012264:	009b      	lsls	r3, r3, #2
 8012266:	4413      	add	r3, r2
 8012268:	009b      	lsls	r3, r3, #2
 801226a:	440b      	add	r3, r1
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	2b01      	cmp	r3, #1
 8012270:	d907      	bls.n	8012282 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8012272:	2301      	movs	r3, #1
 8012274:	617b      	str	r3, [r7, #20]
 8012276:	e004      	b.n	8012282 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8012278:	4b10      	ldr	r3, [pc, #64]	; (80122bc <xTaskIncrementTick+0x16c>)
 801227a:	681b      	ldr	r3, [r3, #0]
 801227c:	3301      	adds	r3, #1
 801227e:	4a0f      	ldr	r2, [pc, #60]	; (80122bc <xTaskIncrementTick+0x16c>)
 8012280:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8012282:	4b0f      	ldr	r3, [pc, #60]	; (80122c0 <xTaskIncrementTick+0x170>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d001      	beq.n	801228e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 801228a:	2301      	movs	r3, #1
 801228c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801228e:	697b      	ldr	r3, [r7, #20]
}
 8012290:	4618      	mov	r0, r3
 8012292:	3718      	adds	r7, #24
 8012294:	46bd      	mov	sp, r7
 8012296:	bd80      	pop	{r7, pc}
 8012298:	20000860 	.word	0x20000860
 801229c:	2000083c 	.word	0x2000083c
 80122a0:	200007f0 	.word	0x200007f0
 80122a4:	200007f4 	.word	0x200007f4
 80122a8:	20000850 	.word	0x20000850
 80122ac:	20000858 	.word	0x20000858
 80122b0:	20000840 	.word	0x20000840
 80122b4:	2000073c 	.word	0x2000073c
 80122b8:	20000738 	.word	0x20000738
 80122bc:	20000848 	.word	0x20000848
 80122c0:	2000084c 	.word	0x2000084c

080122c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80122c4:	b580      	push	{r7, lr}
 80122c6:	b088      	sub	sp, #32
 80122c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80122ca:	4b3a      	ldr	r3, [pc, #232]	; (80123b4 <vTaskSwitchContext+0xf0>)
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	2b00      	cmp	r3, #0
 80122d0:	d003      	beq.n	80122da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80122d2:	4b39      	ldr	r3, [pc, #228]	; (80123b8 <vTaskSwitchContext+0xf4>)
 80122d4:	2201      	movs	r2, #1
 80122d6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80122d8:	e068      	b.n	80123ac <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 80122da:	4b37      	ldr	r3, [pc, #220]	; (80123b8 <vTaskSwitchContext+0xf4>)
 80122dc:	2200      	movs	r2, #0
 80122de:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80122e0:	4b36      	ldr	r3, [pc, #216]	; (80123bc <vTaskSwitchContext+0xf8>)
 80122e2:	681b      	ldr	r3, [r3, #0]
 80122e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122e6:	61fb      	str	r3, [r7, #28]
 80122e8:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80122ec:	61bb      	str	r3, [r7, #24]
 80122ee:	69fb      	ldr	r3, [r7, #28]
 80122f0:	681b      	ldr	r3, [r3, #0]
 80122f2:	69ba      	ldr	r2, [r7, #24]
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d111      	bne.n	801231c <vTaskSwitchContext+0x58>
 80122f8:	69fb      	ldr	r3, [r7, #28]
 80122fa:	3304      	adds	r3, #4
 80122fc:	681b      	ldr	r3, [r3, #0]
 80122fe:	69ba      	ldr	r2, [r7, #24]
 8012300:	429a      	cmp	r2, r3
 8012302:	d10b      	bne.n	801231c <vTaskSwitchContext+0x58>
 8012304:	69fb      	ldr	r3, [r7, #28]
 8012306:	3308      	adds	r3, #8
 8012308:	681b      	ldr	r3, [r3, #0]
 801230a:	69ba      	ldr	r2, [r7, #24]
 801230c:	429a      	cmp	r2, r3
 801230e:	d105      	bne.n	801231c <vTaskSwitchContext+0x58>
 8012310:	69fb      	ldr	r3, [r7, #28]
 8012312:	330c      	adds	r3, #12
 8012314:	681b      	ldr	r3, [r3, #0]
 8012316:	69ba      	ldr	r2, [r7, #24]
 8012318:	429a      	cmp	r2, r3
 801231a:	d008      	beq.n	801232e <vTaskSwitchContext+0x6a>
 801231c:	4b27      	ldr	r3, [pc, #156]	; (80123bc <vTaskSwitchContext+0xf8>)
 801231e:	681a      	ldr	r2, [r3, #0]
 8012320:	4b26      	ldr	r3, [pc, #152]	; (80123bc <vTaskSwitchContext+0xf8>)
 8012322:	681b      	ldr	r3, [r3, #0]
 8012324:	3334      	adds	r3, #52	; 0x34
 8012326:	4619      	mov	r1, r3
 8012328:	4610      	mov	r0, r2
 801232a:	f7ee faf8 	bl	800091e <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801232e:	4b24      	ldr	r3, [pc, #144]	; (80123c0 <vTaskSwitchContext+0xfc>)
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	fab3 f383 	clz	r3, r3
 801233a:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801233c:	7afb      	ldrb	r3, [r7, #11]
 801233e:	f1c3 031f 	rsb	r3, r3, #31
 8012342:	617b      	str	r3, [r7, #20]
 8012344:	491f      	ldr	r1, [pc, #124]	; (80123c4 <vTaskSwitchContext+0x100>)
 8012346:	697a      	ldr	r2, [r7, #20]
 8012348:	4613      	mov	r3, r2
 801234a:	009b      	lsls	r3, r3, #2
 801234c:	4413      	add	r3, r2
 801234e:	009b      	lsls	r3, r3, #2
 8012350:	440b      	add	r3, r1
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	2b00      	cmp	r3, #0
 8012356:	d10c      	bne.n	8012372 <vTaskSwitchContext+0xae>
	__asm volatile
 8012358:	f04f 0350 	mov.w	r3, #80	; 0x50
 801235c:	b672      	cpsid	i
 801235e:	f383 8811 	msr	BASEPRI, r3
 8012362:	f3bf 8f6f 	isb	sy
 8012366:	f3bf 8f4f 	dsb	sy
 801236a:	b662      	cpsie	i
 801236c:	607b      	str	r3, [r7, #4]
}
 801236e:	bf00      	nop
 8012370:	e7fe      	b.n	8012370 <vTaskSwitchContext+0xac>
 8012372:	697a      	ldr	r2, [r7, #20]
 8012374:	4613      	mov	r3, r2
 8012376:	009b      	lsls	r3, r3, #2
 8012378:	4413      	add	r3, r2
 801237a:	009b      	lsls	r3, r3, #2
 801237c:	4a11      	ldr	r2, [pc, #68]	; (80123c4 <vTaskSwitchContext+0x100>)
 801237e:	4413      	add	r3, r2
 8012380:	613b      	str	r3, [r7, #16]
 8012382:	693b      	ldr	r3, [r7, #16]
 8012384:	685b      	ldr	r3, [r3, #4]
 8012386:	685a      	ldr	r2, [r3, #4]
 8012388:	693b      	ldr	r3, [r7, #16]
 801238a:	605a      	str	r2, [r3, #4]
 801238c:	693b      	ldr	r3, [r7, #16]
 801238e:	685a      	ldr	r2, [r3, #4]
 8012390:	693b      	ldr	r3, [r7, #16]
 8012392:	3308      	adds	r3, #8
 8012394:	429a      	cmp	r2, r3
 8012396:	d104      	bne.n	80123a2 <vTaskSwitchContext+0xde>
 8012398:	693b      	ldr	r3, [r7, #16]
 801239a:	685b      	ldr	r3, [r3, #4]
 801239c:	685a      	ldr	r2, [r3, #4]
 801239e:	693b      	ldr	r3, [r7, #16]
 80123a0:	605a      	str	r2, [r3, #4]
 80123a2:	693b      	ldr	r3, [r7, #16]
 80123a4:	685b      	ldr	r3, [r3, #4]
 80123a6:	68db      	ldr	r3, [r3, #12]
 80123a8:	4a04      	ldr	r2, [pc, #16]	; (80123bc <vTaskSwitchContext+0xf8>)
 80123aa:	6013      	str	r3, [r2, #0]
}
 80123ac:	bf00      	nop
 80123ae:	3720      	adds	r7, #32
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}
 80123b4:	20000860 	.word	0x20000860
 80123b8:	2000084c 	.word	0x2000084c
 80123bc:	20000738 	.word	0x20000738
 80123c0:	20000840 	.word	0x20000840
 80123c4:	2000073c 	.word	0x2000073c

080123c8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80123c8:	b580      	push	{r7, lr}
 80123ca:	b084      	sub	sp, #16
 80123cc:	af00      	add	r7, sp, #0
 80123ce:	6078      	str	r0, [r7, #4]
 80123d0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d10c      	bne.n	80123f2 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80123d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123dc:	b672      	cpsid	i
 80123de:	f383 8811 	msr	BASEPRI, r3
 80123e2:	f3bf 8f6f 	isb	sy
 80123e6:	f3bf 8f4f 	dsb	sy
 80123ea:	b662      	cpsie	i
 80123ec:	60fb      	str	r3, [r7, #12]
}
 80123ee:	bf00      	nop
 80123f0:	e7fe      	b.n	80123f0 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80123f2:	4b07      	ldr	r3, [pc, #28]	; (8012410 <vTaskPlaceOnEventList+0x48>)
 80123f4:	681b      	ldr	r3, [r3, #0]
 80123f6:	3318      	adds	r3, #24
 80123f8:	4619      	mov	r1, r3
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	f7fe fbb7 	bl	8010b6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012400:	2101      	movs	r1, #1
 8012402:	6838      	ldr	r0, [r7, #0]
 8012404:	f000 fba6 	bl	8012b54 <prvAddCurrentTaskToDelayedList>
}
 8012408:	bf00      	nop
 801240a:	3710      	adds	r7, #16
 801240c:	46bd      	mov	sp, r7
 801240e:	bd80      	pop	{r7, pc}
 8012410:	20000738 	.word	0x20000738

08012414 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b086      	sub	sp, #24
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	68db      	ldr	r3, [r3, #12]
 8012420:	68db      	ldr	r3, [r3, #12]
 8012422:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012424:	693b      	ldr	r3, [r7, #16]
 8012426:	2b00      	cmp	r3, #0
 8012428:	d10c      	bne.n	8012444 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801242a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801242e:	b672      	cpsid	i
 8012430:	f383 8811 	msr	BASEPRI, r3
 8012434:	f3bf 8f6f 	isb	sy
 8012438:	f3bf 8f4f 	dsb	sy
 801243c:	b662      	cpsie	i
 801243e:	60fb      	str	r3, [r7, #12]
}
 8012440:	bf00      	nop
 8012442:	e7fe      	b.n	8012442 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012444:	693b      	ldr	r3, [r7, #16]
 8012446:	3318      	adds	r3, #24
 8012448:	4618      	mov	r0, r3
 801244a:	f7fe fbc9 	bl	8010be0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801244e:	4b1d      	ldr	r3, [pc, #116]	; (80124c4 <xTaskRemoveFromEventList+0xb0>)
 8012450:	681b      	ldr	r3, [r3, #0]
 8012452:	2b00      	cmp	r3, #0
 8012454:	d11c      	bne.n	8012490 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012456:	693b      	ldr	r3, [r7, #16]
 8012458:	3304      	adds	r3, #4
 801245a:	4618      	mov	r0, r3
 801245c:	f7fe fbc0 	bl	8010be0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012460:	693b      	ldr	r3, [r7, #16]
 8012462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012464:	2201      	movs	r2, #1
 8012466:	409a      	lsls	r2, r3
 8012468:	4b17      	ldr	r3, [pc, #92]	; (80124c8 <xTaskRemoveFromEventList+0xb4>)
 801246a:	681b      	ldr	r3, [r3, #0]
 801246c:	4313      	orrs	r3, r2
 801246e:	4a16      	ldr	r2, [pc, #88]	; (80124c8 <xTaskRemoveFromEventList+0xb4>)
 8012470:	6013      	str	r3, [r2, #0]
 8012472:	693b      	ldr	r3, [r7, #16]
 8012474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012476:	4613      	mov	r3, r2
 8012478:	009b      	lsls	r3, r3, #2
 801247a:	4413      	add	r3, r2
 801247c:	009b      	lsls	r3, r3, #2
 801247e:	4a13      	ldr	r2, [pc, #76]	; (80124cc <xTaskRemoveFromEventList+0xb8>)
 8012480:	441a      	add	r2, r3
 8012482:	693b      	ldr	r3, [r7, #16]
 8012484:	3304      	adds	r3, #4
 8012486:	4619      	mov	r1, r3
 8012488:	4610      	mov	r0, r2
 801248a:	f7fe fb4c 	bl	8010b26 <vListInsertEnd>
 801248e:	e005      	b.n	801249c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012490:	693b      	ldr	r3, [r7, #16]
 8012492:	3318      	adds	r3, #24
 8012494:	4619      	mov	r1, r3
 8012496:	480e      	ldr	r0, [pc, #56]	; (80124d0 <xTaskRemoveFromEventList+0xbc>)
 8012498:	f7fe fb45 	bl	8010b26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 801249c:	693b      	ldr	r3, [r7, #16]
 801249e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80124a0:	4b0c      	ldr	r3, [pc, #48]	; (80124d4 <xTaskRemoveFromEventList+0xc0>)
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124a6:	429a      	cmp	r2, r3
 80124a8:	d905      	bls.n	80124b6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80124aa:	2301      	movs	r3, #1
 80124ac:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80124ae:	4b0a      	ldr	r3, [pc, #40]	; (80124d8 <xTaskRemoveFromEventList+0xc4>)
 80124b0:	2201      	movs	r2, #1
 80124b2:	601a      	str	r2, [r3, #0]
 80124b4:	e001      	b.n	80124ba <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80124b6:	2300      	movs	r3, #0
 80124b8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80124ba:	697b      	ldr	r3, [r7, #20]
}
 80124bc:	4618      	mov	r0, r3
 80124be:	3718      	adds	r7, #24
 80124c0:	46bd      	mov	sp, r7
 80124c2:	bd80      	pop	{r7, pc}
 80124c4:	20000860 	.word	0x20000860
 80124c8:	20000840 	.word	0x20000840
 80124cc:	2000073c 	.word	0x2000073c
 80124d0:	200007f8 	.word	0x200007f8
 80124d4:	20000738 	.word	0x20000738
 80124d8:	2000084c 	.word	0x2000084c

080124dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80124dc:	b480      	push	{r7}
 80124de:	b083      	sub	sp, #12
 80124e0:	af00      	add	r7, sp, #0
 80124e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80124e4:	4b06      	ldr	r3, [pc, #24]	; (8012500 <vTaskInternalSetTimeOutState+0x24>)
 80124e6:	681a      	ldr	r2, [r3, #0]
 80124e8:	687b      	ldr	r3, [r7, #4]
 80124ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80124ec:	4b05      	ldr	r3, [pc, #20]	; (8012504 <vTaskInternalSetTimeOutState+0x28>)
 80124ee:	681a      	ldr	r2, [r3, #0]
 80124f0:	687b      	ldr	r3, [r7, #4]
 80124f2:	605a      	str	r2, [r3, #4]
}
 80124f4:	bf00      	nop
 80124f6:	370c      	adds	r7, #12
 80124f8:	46bd      	mov	sp, r7
 80124fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fe:	4770      	bx	lr
 8012500:	20000850 	.word	0x20000850
 8012504:	2000083c 	.word	0x2000083c

08012508 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012508:	b580      	push	{r7, lr}
 801250a:	b088      	sub	sp, #32
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
 8012510:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2b00      	cmp	r3, #0
 8012516:	d10c      	bne.n	8012532 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8012518:	f04f 0350 	mov.w	r3, #80	; 0x50
 801251c:	b672      	cpsid	i
 801251e:	f383 8811 	msr	BASEPRI, r3
 8012522:	f3bf 8f6f 	isb	sy
 8012526:	f3bf 8f4f 	dsb	sy
 801252a:	b662      	cpsie	i
 801252c:	613b      	str	r3, [r7, #16]
}
 801252e:	bf00      	nop
 8012530:	e7fe      	b.n	8012530 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8012532:	683b      	ldr	r3, [r7, #0]
 8012534:	2b00      	cmp	r3, #0
 8012536:	d10c      	bne.n	8012552 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8012538:	f04f 0350 	mov.w	r3, #80	; 0x50
 801253c:	b672      	cpsid	i
 801253e:	f383 8811 	msr	BASEPRI, r3
 8012542:	f3bf 8f6f 	isb	sy
 8012546:	f3bf 8f4f 	dsb	sy
 801254a:	b662      	cpsie	i
 801254c:	60fb      	str	r3, [r7, #12]
}
 801254e:	bf00      	nop
 8012550:	e7fe      	b.n	8012550 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8012552:	f000 fc73 	bl	8012e3c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012556:	4b1d      	ldr	r3, [pc, #116]	; (80125cc <xTaskCheckForTimeOut+0xc4>)
 8012558:	681b      	ldr	r3, [r3, #0]
 801255a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	685b      	ldr	r3, [r3, #4]
 8012560:	69ba      	ldr	r2, [r7, #24]
 8012562:	1ad3      	subs	r3, r2, r3
 8012564:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012566:	683b      	ldr	r3, [r7, #0]
 8012568:	681b      	ldr	r3, [r3, #0]
 801256a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801256e:	d102      	bne.n	8012576 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012570:	2300      	movs	r3, #0
 8012572:	61fb      	str	r3, [r7, #28]
 8012574:	e023      	b.n	80125be <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012576:	687b      	ldr	r3, [r7, #4]
 8012578:	681a      	ldr	r2, [r3, #0]
 801257a:	4b15      	ldr	r3, [pc, #84]	; (80125d0 <xTaskCheckForTimeOut+0xc8>)
 801257c:	681b      	ldr	r3, [r3, #0]
 801257e:	429a      	cmp	r2, r3
 8012580:	d007      	beq.n	8012592 <xTaskCheckForTimeOut+0x8a>
 8012582:	687b      	ldr	r3, [r7, #4]
 8012584:	685b      	ldr	r3, [r3, #4]
 8012586:	69ba      	ldr	r2, [r7, #24]
 8012588:	429a      	cmp	r2, r3
 801258a:	d302      	bcc.n	8012592 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 801258c:	2301      	movs	r3, #1
 801258e:	61fb      	str	r3, [r7, #28]
 8012590:	e015      	b.n	80125be <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	681b      	ldr	r3, [r3, #0]
 8012596:	697a      	ldr	r2, [r7, #20]
 8012598:	429a      	cmp	r2, r3
 801259a:	d20b      	bcs.n	80125b4 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 801259c:	683b      	ldr	r3, [r7, #0]
 801259e:	681a      	ldr	r2, [r3, #0]
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	1ad2      	subs	r2, r2, r3
 80125a4:	683b      	ldr	r3, [r7, #0]
 80125a6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f7ff ff97 	bl	80124dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80125ae:	2300      	movs	r3, #0
 80125b0:	61fb      	str	r3, [r7, #28]
 80125b2:	e004      	b.n	80125be <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	2200      	movs	r2, #0
 80125b8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80125ba:	2301      	movs	r3, #1
 80125bc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80125be:	f000 fc71 	bl	8012ea4 <vPortExitCritical>

	return xReturn;
 80125c2:	69fb      	ldr	r3, [r7, #28]
}
 80125c4:	4618      	mov	r0, r3
 80125c6:	3720      	adds	r7, #32
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}
 80125cc:	2000083c 	.word	0x2000083c
 80125d0:	20000850 	.word	0x20000850

080125d4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80125d4:	b480      	push	{r7}
 80125d6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80125d8:	4b03      	ldr	r3, [pc, #12]	; (80125e8 <vTaskMissedYield+0x14>)
 80125da:	2201      	movs	r2, #1
 80125dc:	601a      	str	r2, [r3, #0]
}
 80125de:	bf00      	nop
 80125e0:	46bd      	mov	sp, r7
 80125e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125e6:	4770      	bx	lr
 80125e8:	2000084c 	.word	0x2000084c

080125ec <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b082      	sub	sp, #8
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80125f4:	f000 f854 	bl	80126a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80125f8:	4b07      	ldr	r3, [pc, #28]	; (8012618 <prvIdleTask+0x2c>)
 80125fa:	681b      	ldr	r3, [r3, #0]
 80125fc:	2b01      	cmp	r3, #1
 80125fe:	d907      	bls.n	8012610 <prvIdleTask+0x24>
			{
				taskYIELD();
 8012600:	4b06      	ldr	r3, [pc, #24]	; (801261c <prvIdleTask+0x30>)
 8012602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012606:	601a      	str	r2, [r3, #0]
 8012608:	f3bf 8f4f 	dsb	sy
 801260c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 8012610:	f7ee f97e 	bl	8000910 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012614:	e7ee      	b.n	80125f4 <prvIdleTask+0x8>
 8012616:	bf00      	nop
 8012618:	2000073c 	.word	0x2000073c
 801261c:	e000ed04 	.word	0xe000ed04

08012620 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b082      	sub	sp, #8
 8012624:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012626:	2300      	movs	r3, #0
 8012628:	607b      	str	r3, [r7, #4]
 801262a:	e00c      	b.n	8012646 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801262c:	687a      	ldr	r2, [r7, #4]
 801262e:	4613      	mov	r3, r2
 8012630:	009b      	lsls	r3, r3, #2
 8012632:	4413      	add	r3, r2
 8012634:	009b      	lsls	r3, r3, #2
 8012636:	4a12      	ldr	r2, [pc, #72]	; (8012680 <prvInitialiseTaskLists+0x60>)
 8012638:	4413      	add	r3, r2
 801263a:	4618      	mov	r0, r3
 801263c:	f7fe fa46 	bl	8010acc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012640:	687b      	ldr	r3, [r7, #4]
 8012642:	3301      	adds	r3, #1
 8012644:	607b      	str	r3, [r7, #4]
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	2b06      	cmp	r3, #6
 801264a:	d9ef      	bls.n	801262c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801264c:	480d      	ldr	r0, [pc, #52]	; (8012684 <prvInitialiseTaskLists+0x64>)
 801264e:	f7fe fa3d 	bl	8010acc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012652:	480d      	ldr	r0, [pc, #52]	; (8012688 <prvInitialiseTaskLists+0x68>)
 8012654:	f7fe fa3a 	bl	8010acc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012658:	480c      	ldr	r0, [pc, #48]	; (801268c <prvInitialiseTaskLists+0x6c>)
 801265a:	f7fe fa37 	bl	8010acc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801265e:	480c      	ldr	r0, [pc, #48]	; (8012690 <prvInitialiseTaskLists+0x70>)
 8012660:	f7fe fa34 	bl	8010acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012664:	480b      	ldr	r0, [pc, #44]	; (8012694 <prvInitialiseTaskLists+0x74>)
 8012666:	f7fe fa31 	bl	8010acc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801266a:	4b0b      	ldr	r3, [pc, #44]	; (8012698 <prvInitialiseTaskLists+0x78>)
 801266c:	4a05      	ldr	r2, [pc, #20]	; (8012684 <prvInitialiseTaskLists+0x64>)
 801266e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012670:	4b0a      	ldr	r3, [pc, #40]	; (801269c <prvInitialiseTaskLists+0x7c>)
 8012672:	4a05      	ldr	r2, [pc, #20]	; (8012688 <prvInitialiseTaskLists+0x68>)
 8012674:	601a      	str	r2, [r3, #0]
}
 8012676:	bf00      	nop
 8012678:	3708      	adds	r7, #8
 801267a:	46bd      	mov	sp, r7
 801267c:	bd80      	pop	{r7, pc}
 801267e:	bf00      	nop
 8012680:	2000073c 	.word	0x2000073c
 8012684:	200007c8 	.word	0x200007c8
 8012688:	200007dc 	.word	0x200007dc
 801268c:	200007f8 	.word	0x200007f8
 8012690:	2000080c 	.word	0x2000080c
 8012694:	20000824 	.word	0x20000824
 8012698:	200007f0 	.word	0x200007f0
 801269c:	200007f4 	.word	0x200007f4

080126a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80126a6:	e019      	b.n	80126dc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80126a8:	f000 fbc8 	bl	8012e3c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126ac:	4b10      	ldr	r3, [pc, #64]	; (80126f0 <prvCheckTasksWaitingTermination+0x50>)
 80126ae:	68db      	ldr	r3, [r3, #12]
 80126b0:	68db      	ldr	r3, [r3, #12]
 80126b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	3304      	adds	r3, #4
 80126b8:	4618      	mov	r0, r3
 80126ba:	f7fe fa91 	bl	8010be0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80126be:	4b0d      	ldr	r3, [pc, #52]	; (80126f4 <prvCheckTasksWaitingTermination+0x54>)
 80126c0:	681b      	ldr	r3, [r3, #0]
 80126c2:	3b01      	subs	r3, #1
 80126c4:	4a0b      	ldr	r2, [pc, #44]	; (80126f4 <prvCheckTasksWaitingTermination+0x54>)
 80126c6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80126c8:	4b0b      	ldr	r3, [pc, #44]	; (80126f8 <prvCheckTasksWaitingTermination+0x58>)
 80126ca:	681b      	ldr	r3, [r3, #0]
 80126cc:	3b01      	subs	r3, #1
 80126ce:	4a0a      	ldr	r2, [pc, #40]	; (80126f8 <prvCheckTasksWaitingTermination+0x58>)
 80126d0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80126d2:	f000 fbe7 	bl	8012ea4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80126d6:	6878      	ldr	r0, [r7, #4]
 80126d8:	f000 f810 	bl	80126fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80126dc:	4b06      	ldr	r3, [pc, #24]	; (80126f8 <prvCheckTasksWaitingTermination+0x58>)
 80126de:	681b      	ldr	r3, [r3, #0]
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d1e1      	bne.n	80126a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80126e4:	bf00      	nop
 80126e6:	bf00      	nop
 80126e8:	3708      	adds	r7, #8
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bd80      	pop	{r7, pc}
 80126ee:	bf00      	nop
 80126f0:	2000080c 	.word	0x2000080c
 80126f4:	20000838 	.word	0x20000838
 80126f8:	20000820 	.word	0x20000820

080126fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80126fc:	b580      	push	{r7, lr}
 80126fe:	b084      	sub	sp, #16
 8012700:	af00      	add	r7, sp, #0
 8012702:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801270a:	2b00      	cmp	r3, #0
 801270c:	d108      	bne.n	8012720 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012712:	4618      	mov	r0, r3
 8012714:	f000 fd8e 	bl	8013234 <vPortFree>
				vPortFree( pxTCB );
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 fd8b 	bl	8013234 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801271e:	e01a      	b.n	8012756 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8012720:	687b      	ldr	r3, [r7, #4]
 8012722:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012726:	2b01      	cmp	r3, #1
 8012728:	d103      	bne.n	8012732 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f000 fd82 	bl	8013234 <vPortFree>
	}
 8012730:	e011      	b.n	8012756 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012738:	2b02      	cmp	r3, #2
 801273a:	d00c      	beq.n	8012756 <prvDeleteTCB+0x5a>
	__asm volatile
 801273c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012740:	b672      	cpsid	i
 8012742:	f383 8811 	msr	BASEPRI, r3
 8012746:	f3bf 8f6f 	isb	sy
 801274a:	f3bf 8f4f 	dsb	sy
 801274e:	b662      	cpsie	i
 8012750:	60fb      	str	r3, [r7, #12]
}
 8012752:	bf00      	nop
 8012754:	e7fe      	b.n	8012754 <prvDeleteTCB+0x58>
	}
 8012756:	bf00      	nop
 8012758:	3710      	adds	r7, #16
 801275a:	46bd      	mov	sp, r7
 801275c:	bd80      	pop	{r7, pc}
	...

08012760 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012760:	b480      	push	{r7}
 8012762:	b083      	sub	sp, #12
 8012764:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012766:	4b0c      	ldr	r3, [pc, #48]	; (8012798 <prvResetNextTaskUnblockTime+0x38>)
 8012768:	681b      	ldr	r3, [r3, #0]
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d104      	bne.n	801277a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012770:	4b0a      	ldr	r3, [pc, #40]	; (801279c <prvResetNextTaskUnblockTime+0x3c>)
 8012772:	f04f 32ff 	mov.w	r2, #4294967295
 8012776:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012778:	e008      	b.n	801278c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801277a:	4b07      	ldr	r3, [pc, #28]	; (8012798 <prvResetNextTaskUnblockTime+0x38>)
 801277c:	681b      	ldr	r3, [r3, #0]
 801277e:	68db      	ldr	r3, [r3, #12]
 8012780:	68db      	ldr	r3, [r3, #12]
 8012782:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	685b      	ldr	r3, [r3, #4]
 8012788:	4a04      	ldr	r2, [pc, #16]	; (801279c <prvResetNextTaskUnblockTime+0x3c>)
 801278a:	6013      	str	r3, [r2, #0]
}
 801278c:	bf00      	nop
 801278e:	370c      	adds	r7, #12
 8012790:	46bd      	mov	sp, r7
 8012792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012796:	4770      	bx	lr
 8012798:	200007f0 	.word	0x200007f0
 801279c:	20000858 	.word	0x20000858

080127a0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80127a0:	b480      	push	{r7}
 80127a2:	b083      	sub	sp, #12
 80127a4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80127a6:	4b0b      	ldr	r3, [pc, #44]	; (80127d4 <xTaskGetSchedulerState+0x34>)
 80127a8:	681b      	ldr	r3, [r3, #0]
 80127aa:	2b00      	cmp	r3, #0
 80127ac:	d102      	bne.n	80127b4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80127ae:	2301      	movs	r3, #1
 80127b0:	607b      	str	r3, [r7, #4]
 80127b2:	e008      	b.n	80127c6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80127b4:	4b08      	ldr	r3, [pc, #32]	; (80127d8 <xTaskGetSchedulerState+0x38>)
 80127b6:	681b      	ldr	r3, [r3, #0]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d102      	bne.n	80127c2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80127bc:	2302      	movs	r3, #2
 80127be:	607b      	str	r3, [r7, #4]
 80127c0:	e001      	b.n	80127c6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80127c2:	2300      	movs	r3, #0
 80127c4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80127c6:	687b      	ldr	r3, [r7, #4]
	}
 80127c8:	4618      	mov	r0, r3
 80127ca:	370c      	adds	r7, #12
 80127cc:	46bd      	mov	sp, r7
 80127ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d2:	4770      	bx	lr
 80127d4:	20000844 	.word	0x20000844
 80127d8:	20000860 	.word	0x20000860

080127dc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80127dc:	b580      	push	{r7, lr}
 80127de:	b084      	sub	sp, #16
 80127e0:	af00      	add	r7, sp, #0
 80127e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80127e4:	687b      	ldr	r3, [r7, #4]
 80127e6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80127e8:	2300      	movs	r3, #0
 80127ea:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d069      	beq.n	80128c6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127f6:	4b36      	ldr	r3, [pc, #216]	; (80128d0 <xTaskPriorityInherit+0xf4>)
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127fc:	429a      	cmp	r2, r3
 80127fe:	d259      	bcs.n	80128b4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012800:	68bb      	ldr	r3, [r7, #8]
 8012802:	699b      	ldr	r3, [r3, #24]
 8012804:	2b00      	cmp	r3, #0
 8012806:	db06      	blt.n	8012816 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012808:	4b31      	ldr	r3, [pc, #196]	; (80128d0 <xTaskPriorityInherit+0xf4>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801280e:	f1c3 0207 	rsb	r2, r3, #7
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012816:	68bb      	ldr	r3, [r7, #8]
 8012818:	6959      	ldr	r1, [r3, #20]
 801281a:	68bb      	ldr	r3, [r7, #8]
 801281c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801281e:	4613      	mov	r3, r2
 8012820:	009b      	lsls	r3, r3, #2
 8012822:	4413      	add	r3, r2
 8012824:	009b      	lsls	r3, r3, #2
 8012826:	4a2b      	ldr	r2, [pc, #172]	; (80128d4 <xTaskPriorityInherit+0xf8>)
 8012828:	4413      	add	r3, r2
 801282a:	4299      	cmp	r1, r3
 801282c:	d13a      	bne.n	80128a4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	3304      	adds	r3, #4
 8012832:	4618      	mov	r0, r3
 8012834:	f7fe f9d4 	bl	8010be0 <uxListRemove>
 8012838:	4603      	mov	r3, r0
 801283a:	2b00      	cmp	r3, #0
 801283c:	d115      	bne.n	801286a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801283e:	68bb      	ldr	r3, [r7, #8]
 8012840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012842:	4924      	ldr	r1, [pc, #144]	; (80128d4 <xTaskPriorityInherit+0xf8>)
 8012844:	4613      	mov	r3, r2
 8012846:	009b      	lsls	r3, r3, #2
 8012848:	4413      	add	r3, r2
 801284a:	009b      	lsls	r3, r3, #2
 801284c:	440b      	add	r3, r1
 801284e:	681b      	ldr	r3, [r3, #0]
 8012850:	2b00      	cmp	r3, #0
 8012852:	d10a      	bne.n	801286a <xTaskPriorityInherit+0x8e>
 8012854:	68bb      	ldr	r3, [r7, #8]
 8012856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012858:	2201      	movs	r2, #1
 801285a:	fa02 f303 	lsl.w	r3, r2, r3
 801285e:	43da      	mvns	r2, r3
 8012860:	4b1d      	ldr	r3, [pc, #116]	; (80128d8 <xTaskPriorityInherit+0xfc>)
 8012862:	681b      	ldr	r3, [r3, #0]
 8012864:	4013      	ands	r3, r2
 8012866:	4a1c      	ldr	r2, [pc, #112]	; (80128d8 <xTaskPriorityInherit+0xfc>)
 8012868:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 801286a:	4b19      	ldr	r3, [pc, #100]	; (80128d0 <xTaskPriorityInherit+0xf4>)
 801286c:	681b      	ldr	r3, [r3, #0]
 801286e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012870:	68bb      	ldr	r3, [r7, #8]
 8012872:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012878:	2201      	movs	r2, #1
 801287a:	409a      	lsls	r2, r3
 801287c:	4b16      	ldr	r3, [pc, #88]	; (80128d8 <xTaskPriorityInherit+0xfc>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4313      	orrs	r3, r2
 8012882:	4a15      	ldr	r2, [pc, #84]	; (80128d8 <xTaskPriorityInherit+0xfc>)
 8012884:	6013      	str	r3, [r2, #0]
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801288a:	4613      	mov	r3, r2
 801288c:	009b      	lsls	r3, r3, #2
 801288e:	4413      	add	r3, r2
 8012890:	009b      	lsls	r3, r3, #2
 8012892:	4a10      	ldr	r2, [pc, #64]	; (80128d4 <xTaskPriorityInherit+0xf8>)
 8012894:	441a      	add	r2, r3
 8012896:	68bb      	ldr	r3, [r7, #8]
 8012898:	3304      	adds	r3, #4
 801289a:	4619      	mov	r1, r3
 801289c:	4610      	mov	r0, r2
 801289e:	f7fe f942 	bl	8010b26 <vListInsertEnd>
 80128a2:	e004      	b.n	80128ae <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80128a4:	4b0a      	ldr	r3, [pc, #40]	; (80128d0 <xTaskPriorityInherit+0xf4>)
 80128a6:	681b      	ldr	r3, [r3, #0]
 80128a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128aa:	68bb      	ldr	r3, [r7, #8]
 80128ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80128ae:	2301      	movs	r3, #1
 80128b0:	60fb      	str	r3, [r7, #12]
 80128b2:	e008      	b.n	80128c6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80128b4:	68bb      	ldr	r3, [r7, #8]
 80128b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80128b8:	4b05      	ldr	r3, [pc, #20]	; (80128d0 <xTaskPriorityInherit+0xf4>)
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128be:	429a      	cmp	r2, r3
 80128c0:	d201      	bcs.n	80128c6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80128c2:	2301      	movs	r3, #1
 80128c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80128c6:	68fb      	ldr	r3, [r7, #12]
	}
 80128c8:	4618      	mov	r0, r3
 80128ca:	3710      	adds	r7, #16
 80128cc:	46bd      	mov	sp, r7
 80128ce:	bd80      	pop	{r7, pc}
 80128d0:	20000738 	.word	0x20000738
 80128d4:	2000073c 	.word	0x2000073c
 80128d8:	20000840 	.word	0x20000840

080128dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80128dc:	b580      	push	{r7, lr}
 80128de:	b086      	sub	sp, #24
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80128e4:	687b      	ldr	r3, [r7, #4]
 80128e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80128e8:	2300      	movs	r3, #0
 80128ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d072      	beq.n	80129d8 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80128f2:	4b3c      	ldr	r3, [pc, #240]	; (80129e4 <xTaskPriorityDisinherit+0x108>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	693a      	ldr	r2, [r7, #16]
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d00c      	beq.n	8012916 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 80128fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012900:	b672      	cpsid	i
 8012902:	f383 8811 	msr	BASEPRI, r3
 8012906:	f3bf 8f6f 	isb	sy
 801290a:	f3bf 8f4f 	dsb	sy
 801290e:	b662      	cpsie	i
 8012910:	60fb      	str	r3, [r7, #12]
}
 8012912:	bf00      	nop
 8012914:	e7fe      	b.n	8012914 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801291a:	2b00      	cmp	r3, #0
 801291c:	d10c      	bne.n	8012938 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801291e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012922:	b672      	cpsid	i
 8012924:	f383 8811 	msr	BASEPRI, r3
 8012928:	f3bf 8f6f 	isb	sy
 801292c:	f3bf 8f4f 	dsb	sy
 8012930:	b662      	cpsie	i
 8012932:	60bb      	str	r3, [r7, #8]
}
 8012934:	bf00      	nop
 8012936:	e7fe      	b.n	8012936 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8012938:	693b      	ldr	r3, [r7, #16]
 801293a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801293c:	1e5a      	subs	r2, r3, #1
 801293e:	693b      	ldr	r3, [r7, #16]
 8012940:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012946:	693b      	ldr	r3, [r7, #16]
 8012948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801294a:	429a      	cmp	r2, r3
 801294c:	d044      	beq.n	80129d8 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801294e:	693b      	ldr	r3, [r7, #16]
 8012950:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012952:	2b00      	cmp	r3, #0
 8012954:	d140      	bne.n	80129d8 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012956:	693b      	ldr	r3, [r7, #16]
 8012958:	3304      	adds	r3, #4
 801295a:	4618      	mov	r0, r3
 801295c:	f7fe f940 	bl	8010be0 <uxListRemove>
 8012960:	4603      	mov	r3, r0
 8012962:	2b00      	cmp	r3, #0
 8012964:	d115      	bne.n	8012992 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012966:	693b      	ldr	r3, [r7, #16]
 8012968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801296a:	491f      	ldr	r1, [pc, #124]	; (80129e8 <xTaskPriorityDisinherit+0x10c>)
 801296c:	4613      	mov	r3, r2
 801296e:	009b      	lsls	r3, r3, #2
 8012970:	4413      	add	r3, r2
 8012972:	009b      	lsls	r3, r3, #2
 8012974:	440b      	add	r3, r1
 8012976:	681b      	ldr	r3, [r3, #0]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d10a      	bne.n	8012992 <xTaskPriorityDisinherit+0xb6>
 801297c:	693b      	ldr	r3, [r7, #16]
 801297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012980:	2201      	movs	r2, #1
 8012982:	fa02 f303 	lsl.w	r3, r2, r3
 8012986:	43da      	mvns	r2, r3
 8012988:	4b18      	ldr	r3, [pc, #96]	; (80129ec <xTaskPriorityDisinherit+0x110>)
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	4013      	ands	r3, r2
 801298e:	4a17      	ldr	r2, [pc, #92]	; (80129ec <xTaskPriorityDisinherit+0x110>)
 8012990:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8012992:	693b      	ldr	r3, [r7, #16]
 8012994:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012996:	693b      	ldr	r3, [r7, #16]
 8012998:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801299a:	693b      	ldr	r3, [r7, #16]
 801299c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801299e:	f1c3 0207 	rsb	r2, r3, #7
 80129a2:	693b      	ldr	r3, [r7, #16]
 80129a4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80129a6:	693b      	ldr	r3, [r7, #16]
 80129a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129aa:	2201      	movs	r2, #1
 80129ac:	409a      	lsls	r2, r3
 80129ae:	4b0f      	ldr	r3, [pc, #60]	; (80129ec <xTaskPriorityDisinherit+0x110>)
 80129b0:	681b      	ldr	r3, [r3, #0]
 80129b2:	4313      	orrs	r3, r2
 80129b4:	4a0d      	ldr	r2, [pc, #52]	; (80129ec <xTaskPriorityDisinherit+0x110>)
 80129b6:	6013      	str	r3, [r2, #0]
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80129bc:	4613      	mov	r3, r2
 80129be:	009b      	lsls	r3, r3, #2
 80129c0:	4413      	add	r3, r2
 80129c2:	009b      	lsls	r3, r3, #2
 80129c4:	4a08      	ldr	r2, [pc, #32]	; (80129e8 <xTaskPriorityDisinherit+0x10c>)
 80129c6:	441a      	add	r2, r3
 80129c8:	693b      	ldr	r3, [r7, #16]
 80129ca:	3304      	adds	r3, #4
 80129cc:	4619      	mov	r1, r3
 80129ce:	4610      	mov	r0, r2
 80129d0:	f7fe f8a9 	bl	8010b26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80129d4:	2301      	movs	r3, #1
 80129d6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80129d8:	697b      	ldr	r3, [r7, #20]
	}
 80129da:	4618      	mov	r0, r3
 80129dc:	3718      	adds	r7, #24
 80129de:	46bd      	mov	sp, r7
 80129e0:	bd80      	pop	{r7, pc}
 80129e2:	bf00      	nop
 80129e4:	20000738 	.word	0x20000738
 80129e8:	2000073c 	.word	0x2000073c
 80129ec:	20000840 	.word	0x20000840

080129f0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b088      	sub	sp, #32
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80129fe:	2301      	movs	r3, #1
 8012a00:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	f000 8087 	beq.w	8012b18 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012a0a:	69bb      	ldr	r3, [r7, #24]
 8012a0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d10c      	bne.n	8012a2c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8012a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a16:	b672      	cpsid	i
 8012a18:	f383 8811 	msr	BASEPRI, r3
 8012a1c:	f3bf 8f6f 	isb	sy
 8012a20:	f3bf 8f4f 	dsb	sy
 8012a24:	b662      	cpsie	i
 8012a26:	60fb      	str	r3, [r7, #12]
}
 8012a28:	bf00      	nop
 8012a2a:	e7fe      	b.n	8012a2a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8012a2c:	69bb      	ldr	r3, [r7, #24]
 8012a2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a30:	683a      	ldr	r2, [r7, #0]
 8012a32:	429a      	cmp	r2, r3
 8012a34:	d902      	bls.n	8012a3c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8012a36:	683b      	ldr	r3, [r7, #0]
 8012a38:	61fb      	str	r3, [r7, #28]
 8012a3a:	e002      	b.n	8012a42 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8012a3c:	69bb      	ldr	r3, [r7, #24]
 8012a3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012a40:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8012a42:	69bb      	ldr	r3, [r7, #24]
 8012a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a46:	69fa      	ldr	r2, [r7, #28]
 8012a48:	429a      	cmp	r2, r3
 8012a4a:	d065      	beq.n	8012b18 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8012a4c:	69bb      	ldr	r3, [r7, #24]
 8012a4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012a50:	697a      	ldr	r2, [r7, #20]
 8012a52:	429a      	cmp	r2, r3
 8012a54:	d160      	bne.n	8012b18 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8012a56:	4b32      	ldr	r3, [pc, #200]	; (8012b20 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8012a58:	681b      	ldr	r3, [r3, #0]
 8012a5a:	69ba      	ldr	r2, [r7, #24]
 8012a5c:	429a      	cmp	r2, r3
 8012a5e:	d10c      	bne.n	8012a7a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8012a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a64:	b672      	cpsid	i
 8012a66:	f383 8811 	msr	BASEPRI, r3
 8012a6a:	f3bf 8f6f 	isb	sy
 8012a6e:	f3bf 8f4f 	dsb	sy
 8012a72:	b662      	cpsie	i
 8012a74:	60bb      	str	r3, [r7, #8]
}
 8012a76:	bf00      	nop
 8012a78:	e7fe      	b.n	8012a78 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8012a7a:	69bb      	ldr	r3, [r7, #24]
 8012a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a7e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8012a80:	69bb      	ldr	r3, [r7, #24]
 8012a82:	69fa      	ldr	r2, [r7, #28]
 8012a84:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012a86:	69bb      	ldr	r3, [r7, #24]
 8012a88:	699b      	ldr	r3, [r3, #24]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	db04      	blt.n	8012a98 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a8e:	69fb      	ldr	r3, [r7, #28]
 8012a90:	f1c3 0207 	rsb	r2, r3, #7
 8012a94:	69bb      	ldr	r3, [r7, #24]
 8012a96:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012a98:	69bb      	ldr	r3, [r7, #24]
 8012a9a:	6959      	ldr	r1, [r3, #20]
 8012a9c:	693a      	ldr	r2, [r7, #16]
 8012a9e:	4613      	mov	r3, r2
 8012aa0:	009b      	lsls	r3, r3, #2
 8012aa2:	4413      	add	r3, r2
 8012aa4:	009b      	lsls	r3, r3, #2
 8012aa6:	4a1f      	ldr	r2, [pc, #124]	; (8012b24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012aa8:	4413      	add	r3, r2
 8012aaa:	4299      	cmp	r1, r3
 8012aac:	d134      	bne.n	8012b18 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012aae:	69bb      	ldr	r3, [r7, #24]
 8012ab0:	3304      	adds	r3, #4
 8012ab2:	4618      	mov	r0, r3
 8012ab4:	f7fe f894 	bl	8010be0 <uxListRemove>
 8012ab8:	4603      	mov	r3, r0
 8012aba:	2b00      	cmp	r3, #0
 8012abc:	d115      	bne.n	8012aea <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012abe:	69bb      	ldr	r3, [r7, #24]
 8012ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012ac2:	4918      	ldr	r1, [pc, #96]	; (8012b24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012ac4:	4613      	mov	r3, r2
 8012ac6:	009b      	lsls	r3, r3, #2
 8012ac8:	4413      	add	r3, r2
 8012aca:	009b      	lsls	r3, r3, #2
 8012acc:	440b      	add	r3, r1
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	2b00      	cmp	r3, #0
 8012ad2:	d10a      	bne.n	8012aea <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8012ad4:	69bb      	ldr	r3, [r7, #24]
 8012ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012ad8:	2201      	movs	r2, #1
 8012ada:	fa02 f303 	lsl.w	r3, r2, r3
 8012ade:	43da      	mvns	r2, r3
 8012ae0:	4b11      	ldr	r3, [pc, #68]	; (8012b28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	4013      	ands	r3, r2
 8012ae6:	4a10      	ldr	r2, [pc, #64]	; (8012b28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012ae8:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012aea:	69bb      	ldr	r3, [r7, #24]
 8012aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012aee:	2201      	movs	r2, #1
 8012af0:	409a      	lsls	r2, r3
 8012af2:	4b0d      	ldr	r3, [pc, #52]	; (8012b28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	4313      	orrs	r3, r2
 8012af8:	4a0b      	ldr	r2, [pc, #44]	; (8012b28 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012afa:	6013      	str	r3, [r2, #0]
 8012afc:	69bb      	ldr	r3, [r7, #24]
 8012afe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012b00:	4613      	mov	r3, r2
 8012b02:	009b      	lsls	r3, r3, #2
 8012b04:	4413      	add	r3, r2
 8012b06:	009b      	lsls	r3, r3, #2
 8012b08:	4a06      	ldr	r2, [pc, #24]	; (8012b24 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012b0a:	441a      	add	r2, r3
 8012b0c:	69bb      	ldr	r3, [r7, #24]
 8012b0e:	3304      	adds	r3, #4
 8012b10:	4619      	mov	r1, r3
 8012b12:	4610      	mov	r0, r2
 8012b14:	f7fe f807 	bl	8010b26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012b18:	bf00      	nop
 8012b1a:	3720      	adds	r7, #32
 8012b1c:	46bd      	mov	sp, r7
 8012b1e:	bd80      	pop	{r7, pc}
 8012b20:	20000738 	.word	0x20000738
 8012b24:	2000073c 	.word	0x2000073c
 8012b28:	20000840 	.word	0x20000840

08012b2c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012b2c:	b480      	push	{r7}
 8012b2e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012b30:	4b07      	ldr	r3, [pc, #28]	; (8012b50 <pvTaskIncrementMutexHeldCount+0x24>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d004      	beq.n	8012b42 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012b38:	4b05      	ldr	r3, [pc, #20]	; (8012b50 <pvTaskIncrementMutexHeldCount+0x24>)
 8012b3a:	681b      	ldr	r3, [r3, #0]
 8012b3c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012b3e:	3201      	adds	r2, #1
 8012b40:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012b42:	4b03      	ldr	r3, [pc, #12]	; (8012b50 <pvTaskIncrementMutexHeldCount+0x24>)
 8012b44:	681b      	ldr	r3, [r3, #0]
	}
 8012b46:	4618      	mov	r0, r3
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b4e:	4770      	bx	lr
 8012b50:	20000738 	.word	0x20000738

08012b54 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b084      	sub	sp, #16
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	6078      	str	r0, [r7, #4]
 8012b5c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012b5e:	4b29      	ldr	r3, [pc, #164]	; (8012c04 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012b64:	4b28      	ldr	r3, [pc, #160]	; (8012c08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b66:	681b      	ldr	r3, [r3, #0]
 8012b68:	3304      	adds	r3, #4
 8012b6a:	4618      	mov	r0, r3
 8012b6c:	f7fe f838 	bl	8010be0 <uxListRemove>
 8012b70:	4603      	mov	r3, r0
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d10b      	bne.n	8012b8e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012b76:	4b24      	ldr	r3, [pc, #144]	; (8012c08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b78:	681b      	ldr	r3, [r3, #0]
 8012b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b7c:	2201      	movs	r2, #1
 8012b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8012b82:	43da      	mvns	r2, r3
 8012b84:	4b21      	ldr	r3, [pc, #132]	; (8012c0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8012b86:	681b      	ldr	r3, [r3, #0]
 8012b88:	4013      	ands	r3, r2
 8012b8a:	4a20      	ldr	r2, [pc, #128]	; (8012c0c <prvAddCurrentTaskToDelayedList+0xb8>)
 8012b8c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b94:	d10a      	bne.n	8012bac <prvAddCurrentTaskToDelayedList+0x58>
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d007      	beq.n	8012bac <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b9c:	4b1a      	ldr	r3, [pc, #104]	; (8012c08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	3304      	adds	r3, #4
 8012ba2:	4619      	mov	r1, r3
 8012ba4:	481a      	ldr	r0, [pc, #104]	; (8012c10 <prvAddCurrentTaskToDelayedList+0xbc>)
 8012ba6:	f7fd ffbe 	bl	8010b26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012baa:	e026      	b.n	8012bfa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012bac:	68fa      	ldr	r2, [r7, #12]
 8012bae:	687b      	ldr	r3, [r7, #4]
 8012bb0:	4413      	add	r3, r2
 8012bb2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012bb4:	4b14      	ldr	r3, [pc, #80]	; (8012c08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012bb6:	681b      	ldr	r3, [r3, #0]
 8012bb8:	68ba      	ldr	r2, [r7, #8]
 8012bba:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012bbc:	68ba      	ldr	r2, [r7, #8]
 8012bbe:	68fb      	ldr	r3, [r7, #12]
 8012bc0:	429a      	cmp	r2, r3
 8012bc2:	d209      	bcs.n	8012bd8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012bc4:	4b13      	ldr	r3, [pc, #76]	; (8012c14 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012bc6:	681a      	ldr	r2, [r3, #0]
 8012bc8:	4b0f      	ldr	r3, [pc, #60]	; (8012c08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	3304      	adds	r3, #4
 8012bce:	4619      	mov	r1, r3
 8012bd0:	4610      	mov	r0, r2
 8012bd2:	f7fd ffcc 	bl	8010b6e <vListInsert>
}
 8012bd6:	e010      	b.n	8012bfa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012bd8:	4b0f      	ldr	r3, [pc, #60]	; (8012c18 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012bda:	681a      	ldr	r2, [r3, #0]
 8012bdc:	4b0a      	ldr	r3, [pc, #40]	; (8012c08 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012bde:	681b      	ldr	r3, [r3, #0]
 8012be0:	3304      	adds	r3, #4
 8012be2:	4619      	mov	r1, r3
 8012be4:	4610      	mov	r0, r2
 8012be6:	f7fd ffc2 	bl	8010b6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012bea:	4b0c      	ldr	r3, [pc, #48]	; (8012c1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	68ba      	ldr	r2, [r7, #8]
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d202      	bcs.n	8012bfa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012bf4:	4a09      	ldr	r2, [pc, #36]	; (8012c1c <prvAddCurrentTaskToDelayedList+0xc8>)
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	6013      	str	r3, [r2, #0]
}
 8012bfa:	bf00      	nop
 8012bfc:	3710      	adds	r7, #16
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
 8012c02:	bf00      	nop
 8012c04:	2000083c 	.word	0x2000083c
 8012c08:	20000738 	.word	0x20000738
 8012c0c:	20000840 	.word	0x20000840
 8012c10:	20000824 	.word	0x20000824
 8012c14:	200007f4 	.word	0x200007f4
 8012c18:	200007f0 	.word	0x200007f0
 8012c1c:	20000858 	.word	0x20000858

08012c20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012c20:	b480      	push	{r7}
 8012c22:	b085      	sub	sp, #20
 8012c24:	af00      	add	r7, sp, #0
 8012c26:	60f8      	str	r0, [r7, #12]
 8012c28:	60b9      	str	r1, [r7, #8]
 8012c2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	3b04      	subs	r3, #4
 8012c30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012c32:	68fb      	ldr	r3, [r7, #12]
 8012c34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012c38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c3a:	68fb      	ldr	r3, [r7, #12]
 8012c3c:	3b04      	subs	r3, #4
 8012c3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	f023 0201 	bic.w	r2, r3, #1
 8012c46:	68fb      	ldr	r3, [r7, #12]
 8012c48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	3b04      	subs	r3, #4
 8012c4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012c50:	4a0c      	ldr	r2, [pc, #48]	; (8012c84 <pxPortInitialiseStack+0x64>)
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012c56:	68fb      	ldr	r3, [r7, #12]
 8012c58:	3b14      	subs	r3, #20
 8012c5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012c5c:	687a      	ldr	r2, [r7, #4]
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	3b04      	subs	r3, #4
 8012c66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012c68:	68fb      	ldr	r3, [r7, #12]
 8012c6a:	f06f 0202 	mvn.w	r2, #2
 8012c6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	3b20      	subs	r3, #32
 8012c74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012c76:	68fb      	ldr	r3, [r7, #12]
}
 8012c78:	4618      	mov	r0, r3
 8012c7a:	3714      	adds	r7, #20
 8012c7c:	46bd      	mov	sp, r7
 8012c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c82:	4770      	bx	lr
 8012c84:	08012c89 	.word	0x08012c89

08012c88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012c88:	b480      	push	{r7}
 8012c8a:	b085      	sub	sp, #20
 8012c8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012c8e:	2300      	movs	r3, #0
 8012c90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012c92:	4b14      	ldr	r3, [pc, #80]	; (8012ce4 <prvTaskExitError+0x5c>)
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c9a:	d00c      	beq.n	8012cb6 <prvTaskExitError+0x2e>
	__asm volatile
 8012c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ca0:	b672      	cpsid	i
 8012ca2:	f383 8811 	msr	BASEPRI, r3
 8012ca6:	f3bf 8f6f 	isb	sy
 8012caa:	f3bf 8f4f 	dsb	sy
 8012cae:	b662      	cpsie	i
 8012cb0:	60fb      	str	r3, [r7, #12]
}
 8012cb2:	bf00      	nop
 8012cb4:	e7fe      	b.n	8012cb4 <prvTaskExitError+0x2c>
	__asm volatile
 8012cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012cba:	b672      	cpsid	i
 8012cbc:	f383 8811 	msr	BASEPRI, r3
 8012cc0:	f3bf 8f6f 	isb	sy
 8012cc4:	f3bf 8f4f 	dsb	sy
 8012cc8:	b662      	cpsie	i
 8012cca:	60bb      	str	r3, [r7, #8]
}
 8012ccc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012cce:	bf00      	nop
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d0fc      	beq.n	8012cd0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012cd6:	bf00      	nop
 8012cd8:	bf00      	nop
 8012cda:	3714      	adds	r7, #20
 8012cdc:	46bd      	mov	sp, r7
 8012cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ce2:	4770      	bx	lr
 8012ce4:	20000080 	.word	0x20000080
	...

08012cf0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012cf0:	4b07      	ldr	r3, [pc, #28]	; (8012d10 <pxCurrentTCBConst2>)
 8012cf2:	6819      	ldr	r1, [r3, #0]
 8012cf4:	6808      	ldr	r0, [r1, #0]
 8012cf6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012cfa:	f380 8809 	msr	PSP, r0
 8012cfe:	f3bf 8f6f 	isb	sy
 8012d02:	f04f 0000 	mov.w	r0, #0
 8012d06:	f380 8811 	msr	BASEPRI, r0
 8012d0a:	4770      	bx	lr
 8012d0c:	f3af 8000 	nop.w

08012d10 <pxCurrentTCBConst2>:
 8012d10:	20000738 	.word	0x20000738
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012d14:	bf00      	nop
 8012d16:	bf00      	nop

08012d18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012d18:	4808      	ldr	r0, [pc, #32]	; (8012d3c <prvPortStartFirstTask+0x24>)
 8012d1a:	6800      	ldr	r0, [r0, #0]
 8012d1c:	6800      	ldr	r0, [r0, #0]
 8012d1e:	f380 8808 	msr	MSP, r0
 8012d22:	f04f 0000 	mov.w	r0, #0
 8012d26:	f380 8814 	msr	CONTROL, r0
 8012d2a:	b662      	cpsie	i
 8012d2c:	b661      	cpsie	f
 8012d2e:	f3bf 8f4f 	dsb	sy
 8012d32:	f3bf 8f6f 	isb	sy
 8012d36:	df00      	svc	0
 8012d38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012d3a:	bf00      	nop
 8012d3c:	e000ed08 	.word	0xe000ed08

08012d40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012d40:	b580      	push	{r7, lr}
 8012d42:	b084      	sub	sp, #16
 8012d44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012d46:	4b37      	ldr	r3, [pc, #220]	; (8012e24 <xPortStartScheduler+0xe4>)
 8012d48:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	781b      	ldrb	r3, [r3, #0]
 8012d4e:	b2db      	uxtb	r3, r3
 8012d50:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012d52:	68fb      	ldr	r3, [r7, #12]
 8012d54:	22ff      	movs	r2, #255	; 0xff
 8012d56:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012d58:	68fb      	ldr	r3, [r7, #12]
 8012d5a:	781b      	ldrb	r3, [r3, #0]
 8012d5c:	b2db      	uxtb	r3, r3
 8012d5e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012d60:	78fb      	ldrb	r3, [r7, #3]
 8012d62:	b2db      	uxtb	r3, r3
 8012d64:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012d68:	b2da      	uxtb	r2, r3
 8012d6a:	4b2f      	ldr	r3, [pc, #188]	; (8012e28 <xPortStartScheduler+0xe8>)
 8012d6c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012d6e:	4b2f      	ldr	r3, [pc, #188]	; (8012e2c <xPortStartScheduler+0xec>)
 8012d70:	2207      	movs	r2, #7
 8012d72:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d74:	e009      	b.n	8012d8a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012d76:	4b2d      	ldr	r3, [pc, #180]	; (8012e2c <xPortStartScheduler+0xec>)
 8012d78:	681b      	ldr	r3, [r3, #0]
 8012d7a:	3b01      	subs	r3, #1
 8012d7c:	4a2b      	ldr	r2, [pc, #172]	; (8012e2c <xPortStartScheduler+0xec>)
 8012d7e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012d80:	78fb      	ldrb	r3, [r7, #3]
 8012d82:	b2db      	uxtb	r3, r3
 8012d84:	005b      	lsls	r3, r3, #1
 8012d86:	b2db      	uxtb	r3, r3
 8012d88:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d8a:	78fb      	ldrb	r3, [r7, #3]
 8012d8c:	b2db      	uxtb	r3, r3
 8012d8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d92:	2b80      	cmp	r3, #128	; 0x80
 8012d94:	d0ef      	beq.n	8012d76 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012d96:	4b25      	ldr	r3, [pc, #148]	; (8012e2c <xPortStartScheduler+0xec>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	f1c3 0307 	rsb	r3, r3, #7
 8012d9e:	2b04      	cmp	r3, #4
 8012da0:	d00c      	beq.n	8012dbc <xPortStartScheduler+0x7c>
	__asm volatile
 8012da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012da6:	b672      	cpsid	i
 8012da8:	f383 8811 	msr	BASEPRI, r3
 8012dac:	f3bf 8f6f 	isb	sy
 8012db0:	f3bf 8f4f 	dsb	sy
 8012db4:	b662      	cpsie	i
 8012db6:	60bb      	str	r3, [r7, #8]
}
 8012db8:	bf00      	nop
 8012dba:	e7fe      	b.n	8012dba <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012dbc:	4b1b      	ldr	r3, [pc, #108]	; (8012e2c <xPortStartScheduler+0xec>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	021b      	lsls	r3, r3, #8
 8012dc2:	4a1a      	ldr	r2, [pc, #104]	; (8012e2c <xPortStartScheduler+0xec>)
 8012dc4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012dc6:	4b19      	ldr	r3, [pc, #100]	; (8012e2c <xPortStartScheduler+0xec>)
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012dce:	4a17      	ldr	r2, [pc, #92]	; (8012e2c <xPortStartScheduler+0xec>)
 8012dd0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012dd2:	687b      	ldr	r3, [r7, #4]
 8012dd4:	b2da      	uxtb	r2, r3
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012dda:	4b15      	ldr	r3, [pc, #84]	; (8012e30 <xPortStartScheduler+0xf0>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4a14      	ldr	r2, [pc, #80]	; (8012e30 <xPortStartScheduler+0xf0>)
 8012de0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012de4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012de6:	4b12      	ldr	r3, [pc, #72]	; (8012e30 <xPortStartScheduler+0xf0>)
 8012de8:	681b      	ldr	r3, [r3, #0]
 8012dea:	4a11      	ldr	r2, [pc, #68]	; (8012e30 <xPortStartScheduler+0xf0>)
 8012dec:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012df0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012df2:	f000 f8dd 	bl	8012fb0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012df6:	4b0f      	ldr	r3, [pc, #60]	; (8012e34 <xPortStartScheduler+0xf4>)
 8012df8:	2200      	movs	r2, #0
 8012dfa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012dfc:	f000 f8fc 	bl	8012ff8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012e00:	4b0d      	ldr	r3, [pc, #52]	; (8012e38 <xPortStartScheduler+0xf8>)
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	4a0c      	ldr	r2, [pc, #48]	; (8012e38 <xPortStartScheduler+0xf8>)
 8012e06:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012e0a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012e0c:	f7ff ff84 	bl	8012d18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012e10:	f7ff fa58 	bl	80122c4 <vTaskSwitchContext>
	prvTaskExitError();
 8012e14:	f7ff ff38 	bl	8012c88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012e18:	2300      	movs	r3, #0
}
 8012e1a:	4618      	mov	r0, r3
 8012e1c:	3710      	adds	r7, #16
 8012e1e:	46bd      	mov	sp, r7
 8012e20:	bd80      	pop	{r7, pc}
 8012e22:	bf00      	nop
 8012e24:	e000e400 	.word	0xe000e400
 8012e28:	20000864 	.word	0x20000864
 8012e2c:	20000868 	.word	0x20000868
 8012e30:	e000ed20 	.word	0xe000ed20
 8012e34:	20000080 	.word	0x20000080
 8012e38:	e000ef34 	.word	0xe000ef34

08012e3c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012e3c:	b480      	push	{r7}
 8012e3e:	b083      	sub	sp, #12
 8012e40:	af00      	add	r7, sp, #0
	__asm volatile
 8012e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e46:	b672      	cpsid	i
 8012e48:	f383 8811 	msr	BASEPRI, r3
 8012e4c:	f3bf 8f6f 	isb	sy
 8012e50:	f3bf 8f4f 	dsb	sy
 8012e54:	b662      	cpsie	i
 8012e56:	607b      	str	r3, [r7, #4]
}
 8012e58:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012e5a:	4b10      	ldr	r3, [pc, #64]	; (8012e9c <vPortEnterCritical+0x60>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	3301      	adds	r3, #1
 8012e60:	4a0e      	ldr	r2, [pc, #56]	; (8012e9c <vPortEnterCritical+0x60>)
 8012e62:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012e64:	4b0d      	ldr	r3, [pc, #52]	; (8012e9c <vPortEnterCritical+0x60>)
 8012e66:	681b      	ldr	r3, [r3, #0]
 8012e68:	2b01      	cmp	r3, #1
 8012e6a:	d111      	bne.n	8012e90 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012e6c:	4b0c      	ldr	r3, [pc, #48]	; (8012ea0 <vPortEnterCritical+0x64>)
 8012e6e:	681b      	ldr	r3, [r3, #0]
 8012e70:	b2db      	uxtb	r3, r3
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d00c      	beq.n	8012e90 <vPortEnterCritical+0x54>
	__asm volatile
 8012e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e7a:	b672      	cpsid	i
 8012e7c:	f383 8811 	msr	BASEPRI, r3
 8012e80:	f3bf 8f6f 	isb	sy
 8012e84:	f3bf 8f4f 	dsb	sy
 8012e88:	b662      	cpsie	i
 8012e8a:	603b      	str	r3, [r7, #0]
}
 8012e8c:	bf00      	nop
 8012e8e:	e7fe      	b.n	8012e8e <vPortEnterCritical+0x52>
	}
}
 8012e90:	bf00      	nop
 8012e92:	370c      	adds	r7, #12
 8012e94:	46bd      	mov	sp, r7
 8012e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9a:	4770      	bx	lr
 8012e9c:	20000080 	.word	0x20000080
 8012ea0:	e000ed04 	.word	0xe000ed04

08012ea4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012ea4:	b480      	push	{r7}
 8012ea6:	b083      	sub	sp, #12
 8012ea8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012eaa:	4b13      	ldr	r3, [pc, #76]	; (8012ef8 <vPortExitCritical+0x54>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d10c      	bne.n	8012ecc <vPortExitCritical+0x28>
	__asm volatile
 8012eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012eb6:	b672      	cpsid	i
 8012eb8:	f383 8811 	msr	BASEPRI, r3
 8012ebc:	f3bf 8f6f 	isb	sy
 8012ec0:	f3bf 8f4f 	dsb	sy
 8012ec4:	b662      	cpsie	i
 8012ec6:	607b      	str	r3, [r7, #4]
}
 8012ec8:	bf00      	nop
 8012eca:	e7fe      	b.n	8012eca <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012ecc:	4b0a      	ldr	r3, [pc, #40]	; (8012ef8 <vPortExitCritical+0x54>)
 8012ece:	681b      	ldr	r3, [r3, #0]
 8012ed0:	3b01      	subs	r3, #1
 8012ed2:	4a09      	ldr	r2, [pc, #36]	; (8012ef8 <vPortExitCritical+0x54>)
 8012ed4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012ed6:	4b08      	ldr	r3, [pc, #32]	; (8012ef8 <vPortExitCritical+0x54>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d105      	bne.n	8012eea <vPortExitCritical+0x46>
 8012ede:	2300      	movs	r3, #0
 8012ee0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012ee2:	683b      	ldr	r3, [r7, #0]
 8012ee4:	f383 8811 	msr	BASEPRI, r3
}
 8012ee8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012eea:	bf00      	nop
 8012eec:	370c      	adds	r7, #12
 8012eee:	46bd      	mov	sp, r7
 8012ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ef4:	4770      	bx	lr
 8012ef6:	bf00      	nop
 8012ef8:	20000080 	.word	0x20000080
 8012efc:	00000000 	.word	0x00000000

08012f00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012f00:	f3ef 8009 	mrs	r0, PSP
 8012f04:	f3bf 8f6f 	isb	sy
 8012f08:	4b15      	ldr	r3, [pc, #84]	; (8012f60 <pxCurrentTCBConst>)
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	f01e 0f10 	tst.w	lr, #16
 8012f10:	bf08      	it	eq
 8012f12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012f16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f1a:	6010      	str	r0, [r2, #0]
 8012f1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012f20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012f24:	b672      	cpsid	i
 8012f26:	f380 8811 	msr	BASEPRI, r0
 8012f2a:	f3bf 8f4f 	dsb	sy
 8012f2e:	f3bf 8f6f 	isb	sy
 8012f32:	b662      	cpsie	i
 8012f34:	f7ff f9c6 	bl	80122c4 <vTaskSwitchContext>
 8012f38:	f04f 0000 	mov.w	r0, #0
 8012f3c:	f380 8811 	msr	BASEPRI, r0
 8012f40:	bc09      	pop	{r0, r3}
 8012f42:	6819      	ldr	r1, [r3, #0]
 8012f44:	6808      	ldr	r0, [r1, #0]
 8012f46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f4a:	f01e 0f10 	tst.w	lr, #16
 8012f4e:	bf08      	it	eq
 8012f50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012f54:	f380 8809 	msr	PSP, r0
 8012f58:	f3bf 8f6f 	isb	sy
 8012f5c:	4770      	bx	lr
 8012f5e:	bf00      	nop

08012f60 <pxCurrentTCBConst>:
 8012f60:	20000738 	.word	0x20000738
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012f64:	bf00      	nop
 8012f66:	bf00      	nop

08012f68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012f68:	b580      	push	{r7, lr}
 8012f6a:	b082      	sub	sp, #8
 8012f6c:	af00      	add	r7, sp, #0
	__asm volatile
 8012f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012f72:	b672      	cpsid	i
 8012f74:	f383 8811 	msr	BASEPRI, r3
 8012f78:	f3bf 8f6f 	isb	sy
 8012f7c:	f3bf 8f4f 	dsb	sy
 8012f80:	b662      	cpsie	i
 8012f82:	607b      	str	r3, [r7, #4]
}
 8012f84:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012f86:	f7ff f8e3 	bl	8012150 <xTaskIncrementTick>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d003      	beq.n	8012f98 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012f90:	4b06      	ldr	r3, [pc, #24]	; (8012fac <SysTick_Handler+0x44>)
 8012f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f96:	601a      	str	r2, [r3, #0]
 8012f98:	2300      	movs	r3, #0
 8012f9a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f9c:	683b      	ldr	r3, [r7, #0]
 8012f9e:	f383 8811 	msr	BASEPRI, r3
}
 8012fa2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012fa4:	bf00      	nop
 8012fa6:	3708      	adds	r7, #8
 8012fa8:	46bd      	mov	sp, r7
 8012faa:	bd80      	pop	{r7, pc}
 8012fac:	e000ed04 	.word	0xe000ed04

08012fb0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012fb0:	b480      	push	{r7}
 8012fb2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012fb4:	4b0b      	ldr	r3, [pc, #44]	; (8012fe4 <vPortSetupTimerInterrupt+0x34>)
 8012fb6:	2200      	movs	r2, #0
 8012fb8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012fba:	4b0b      	ldr	r3, [pc, #44]	; (8012fe8 <vPortSetupTimerInterrupt+0x38>)
 8012fbc:	2200      	movs	r2, #0
 8012fbe:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012fc0:	4b0a      	ldr	r3, [pc, #40]	; (8012fec <vPortSetupTimerInterrupt+0x3c>)
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	4a0a      	ldr	r2, [pc, #40]	; (8012ff0 <vPortSetupTimerInterrupt+0x40>)
 8012fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8012fca:	099b      	lsrs	r3, r3, #6
 8012fcc:	4a09      	ldr	r2, [pc, #36]	; (8012ff4 <vPortSetupTimerInterrupt+0x44>)
 8012fce:	3b01      	subs	r3, #1
 8012fd0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012fd2:	4b04      	ldr	r3, [pc, #16]	; (8012fe4 <vPortSetupTimerInterrupt+0x34>)
 8012fd4:	2207      	movs	r2, #7
 8012fd6:	601a      	str	r2, [r3, #0]
}
 8012fd8:	bf00      	nop
 8012fda:	46bd      	mov	sp, r7
 8012fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fe0:	4770      	bx	lr
 8012fe2:	bf00      	nop
 8012fe4:	e000e010 	.word	0xe000e010
 8012fe8:	e000e018 	.word	0xe000e018
 8012fec:	20000040 	.word	0x20000040
 8012ff0:	10624dd3 	.word	0x10624dd3
 8012ff4:	e000e014 	.word	0xe000e014

08012ff8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012ff8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8013008 <vPortEnableVFP+0x10>
 8012ffc:	6801      	ldr	r1, [r0, #0]
 8012ffe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8013002:	6001      	str	r1, [r0, #0]
 8013004:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8013006:	bf00      	nop
 8013008:	e000ed88 	.word	0xe000ed88

0801300c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801300c:	b480      	push	{r7}
 801300e:	b085      	sub	sp, #20
 8013010:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8013012:	f3ef 8305 	mrs	r3, IPSR
 8013016:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	2b0f      	cmp	r3, #15
 801301c:	d916      	bls.n	801304c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801301e:	4a19      	ldr	r2, [pc, #100]	; (8013084 <vPortValidateInterruptPriority+0x78>)
 8013020:	68fb      	ldr	r3, [r7, #12]
 8013022:	4413      	add	r3, r2
 8013024:	781b      	ldrb	r3, [r3, #0]
 8013026:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8013028:	4b17      	ldr	r3, [pc, #92]	; (8013088 <vPortValidateInterruptPriority+0x7c>)
 801302a:	781b      	ldrb	r3, [r3, #0]
 801302c:	7afa      	ldrb	r2, [r7, #11]
 801302e:	429a      	cmp	r2, r3
 8013030:	d20c      	bcs.n	801304c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8013032:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013036:	b672      	cpsid	i
 8013038:	f383 8811 	msr	BASEPRI, r3
 801303c:	f3bf 8f6f 	isb	sy
 8013040:	f3bf 8f4f 	dsb	sy
 8013044:	b662      	cpsie	i
 8013046:	607b      	str	r3, [r7, #4]
}
 8013048:	bf00      	nop
 801304a:	e7fe      	b.n	801304a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801304c:	4b0f      	ldr	r3, [pc, #60]	; (801308c <vPortValidateInterruptPriority+0x80>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8013054:	4b0e      	ldr	r3, [pc, #56]	; (8013090 <vPortValidateInterruptPriority+0x84>)
 8013056:	681b      	ldr	r3, [r3, #0]
 8013058:	429a      	cmp	r2, r3
 801305a:	d90c      	bls.n	8013076 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801305c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013060:	b672      	cpsid	i
 8013062:	f383 8811 	msr	BASEPRI, r3
 8013066:	f3bf 8f6f 	isb	sy
 801306a:	f3bf 8f4f 	dsb	sy
 801306e:	b662      	cpsie	i
 8013070:	603b      	str	r3, [r7, #0]
}
 8013072:	bf00      	nop
 8013074:	e7fe      	b.n	8013074 <vPortValidateInterruptPriority+0x68>
	}
 8013076:	bf00      	nop
 8013078:	3714      	adds	r7, #20
 801307a:	46bd      	mov	sp, r7
 801307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013080:	4770      	bx	lr
 8013082:	bf00      	nop
 8013084:	e000e3f0 	.word	0xe000e3f0
 8013088:	20000864 	.word	0x20000864
 801308c:	e000ed0c 	.word	0xe000ed0c
 8013090:	20000868 	.word	0x20000868

08013094 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013094:	b580      	push	{r7, lr}
 8013096:	b08a      	sub	sp, #40	; 0x28
 8013098:	af00      	add	r7, sp, #0
 801309a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801309c:	2300      	movs	r3, #0
 801309e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80130a0:	f7fe ff88 	bl	8011fb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80130a4:	4b5e      	ldr	r3, [pc, #376]	; (8013220 <pvPortMalloc+0x18c>)
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	2b00      	cmp	r3, #0
 80130aa:	d101      	bne.n	80130b0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80130ac:	f000 f920 	bl	80132f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80130b0:	4b5c      	ldr	r3, [pc, #368]	; (8013224 <pvPortMalloc+0x190>)
 80130b2:	681a      	ldr	r2, [r3, #0]
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	4013      	ands	r3, r2
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f040 8092 	bne.w	80131e2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d01f      	beq.n	8013104 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80130c4:	2208      	movs	r2, #8
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	4413      	add	r3, r2
 80130ca:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	f003 0307 	and.w	r3, r3, #7
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d016      	beq.n	8013104 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	f023 0307 	bic.w	r3, r3, #7
 80130dc:	3308      	adds	r3, #8
 80130de:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f003 0307 	and.w	r3, r3, #7
 80130e6:	2b00      	cmp	r3, #0
 80130e8:	d00c      	beq.n	8013104 <pvPortMalloc+0x70>
	__asm volatile
 80130ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130ee:	b672      	cpsid	i
 80130f0:	f383 8811 	msr	BASEPRI, r3
 80130f4:	f3bf 8f6f 	isb	sy
 80130f8:	f3bf 8f4f 	dsb	sy
 80130fc:	b662      	cpsie	i
 80130fe:	617b      	str	r3, [r7, #20]
}
 8013100:	bf00      	nop
 8013102:	e7fe      	b.n	8013102 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013104:	687b      	ldr	r3, [r7, #4]
 8013106:	2b00      	cmp	r3, #0
 8013108:	d06b      	beq.n	80131e2 <pvPortMalloc+0x14e>
 801310a:	4b47      	ldr	r3, [pc, #284]	; (8013228 <pvPortMalloc+0x194>)
 801310c:	681b      	ldr	r3, [r3, #0]
 801310e:	687a      	ldr	r2, [r7, #4]
 8013110:	429a      	cmp	r2, r3
 8013112:	d866      	bhi.n	80131e2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013114:	4b45      	ldr	r3, [pc, #276]	; (801322c <pvPortMalloc+0x198>)
 8013116:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013118:	4b44      	ldr	r3, [pc, #272]	; (801322c <pvPortMalloc+0x198>)
 801311a:	681b      	ldr	r3, [r3, #0]
 801311c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801311e:	e004      	b.n	801312a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8013120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013122:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8013124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801312c:	685b      	ldr	r3, [r3, #4]
 801312e:	687a      	ldr	r2, [r7, #4]
 8013130:	429a      	cmp	r2, r3
 8013132:	d903      	bls.n	801313c <pvPortMalloc+0xa8>
 8013134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	2b00      	cmp	r3, #0
 801313a:	d1f1      	bne.n	8013120 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801313c:	4b38      	ldr	r3, [pc, #224]	; (8013220 <pvPortMalloc+0x18c>)
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013142:	429a      	cmp	r2, r3
 8013144:	d04d      	beq.n	80131e2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8013146:	6a3b      	ldr	r3, [r7, #32]
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	2208      	movs	r2, #8
 801314c:	4413      	add	r3, r2
 801314e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8013150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013152:	681a      	ldr	r2, [r3, #0]
 8013154:	6a3b      	ldr	r3, [r7, #32]
 8013156:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8013158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315a:	685a      	ldr	r2, [r3, #4]
 801315c:	687b      	ldr	r3, [r7, #4]
 801315e:	1ad2      	subs	r2, r2, r3
 8013160:	2308      	movs	r3, #8
 8013162:	005b      	lsls	r3, r3, #1
 8013164:	429a      	cmp	r2, r3
 8013166:	d921      	bls.n	80131ac <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8013168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	4413      	add	r3, r2
 801316e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013170:	69bb      	ldr	r3, [r7, #24]
 8013172:	f003 0307 	and.w	r3, r3, #7
 8013176:	2b00      	cmp	r3, #0
 8013178:	d00c      	beq.n	8013194 <pvPortMalloc+0x100>
	__asm volatile
 801317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801317e:	b672      	cpsid	i
 8013180:	f383 8811 	msr	BASEPRI, r3
 8013184:	f3bf 8f6f 	isb	sy
 8013188:	f3bf 8f4f 	dsb	sy
 801318c:	b662      	cpsie	i
 801318e:	613b      	str	r3, [r7, #16]
}
 8013190:	bf00      	nop
 8013192:	e7fe      	b.n	8013192 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013196:	685a      	ldr	r2, [r3, #4]
 8013198:	687b      	ldr	r3, [r7, #4]
 801319a:	1ad2      	subs	r2, r2, r3
 801319c:	69bb      	ldr	r3, [r7, #24]
 801319e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80131a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a2:	687a      	ldr	r2, [r7, #4]
 80131a4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80131a6:	69b8      	ldr	r0, [r7, #24]
 80131a8:	f000 f904 	bl	80133b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80131ac:	4b1e      	ldr	r3, [pc, #120]	; (8013228 <pvPortMalloc+0x194>)
 80131ae:	681a      	ldr	r2, [r3, #0]
 80131b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b2:	685b      	ldr	r3, [r3, #4]
 80131b4:	1ad3      	subs	r3, r2, r3
 80131b6:	4a1c      	ldr	r2, [pc, #112]	; (8013228 <pvPortMalloc+0x194>)
 80131b8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80131ba:	4b1b      	ldr	r3, [pc, #108]	; (8013228 <pvPortMalloc+0x194>)
 80131bc:	681a      	ldr	r2, [r3, #0]
 80131be:	4b1c      	ldr	r3, [pc, #112]	; (8013230 <pvPortMalloc+0x19c>)
 80131c0:	681b      	ldr	r3, [r3, #0]
 80131c2:	429a      	cmp	r2, r3
 80131c4:	d203      	bcs.n	80131ce <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80131c6:	4b18      	ldr	r3, [pc, #96]	; (8013228 <pvPortMalloc+0x194>)
 80131c8:	681b      	ldr	r3, [r3, #0]
 80131ca:	4a19      	ldr	r2, [pc, #100]	; (8013230 <pvPortMalloc+0x19c>)
 80131cc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80131ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131d0:	685a      	ldr	r2, [r3, #4]
 80131d2:	4b14      	ldr	r3, [pc, #80]	; (8013224 <pvPortMalloc+0x190>)
 80131d4:	681b      	ldr	r3, [r3, #0]
 80131d6:	431a      	orrs	r2, r3
 80131d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131da:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80131dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131de:	2200      	movs	r2, #0
 80131e0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80131e2:	f7fe fef5 	bl	8011fd0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 80131e6:	69fb      	ldr	r3, [r7, #28]
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d101      	bne.n	80131f0 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 80131ec:	f7ed fba2 	bl	8000934 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80131f0:	69fb      	ldr	r3, [r7, #28]
 80131f2:	f003 0307 	and.w	r3, r3, #7
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d00c      	beq.n	8013214 <pvPortMalloc+0x180>
	__asm volatile
 80131fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131fe:	b672      	cpsid	i
 8013200:	f383 8811 	msr	BASEPRI, r3
 8013204:	f3bf 8f6f 	isb	sy
 8013208:	f3bf 8f4f 	dsb	sy
 801320c:	b662      	cpsie	i
 801320e:	60fb      	str	r3, [r7, #12]
}
 8013210:	bf00      	nop
 8013212:	e7fe      	b.n	8013212 <pvPortMalloc+0x17e>
	return pvReturn;
 8013214:	69fb      	ldr	r3, [r7, #28]
}
 8013216:	4618      	mov	r0, r3
 8013218:	3728      	adds	r7, #40	; 0x28
 801321a:	46bd      	mov	sp, r7
 801321c:	bd80      	pop	{r7, pc}
 801321e:	bf00      	nop
 8013220:	20008874 	.word	0x20008874
 8013224:	20008880 	.word	0x20008880
 8013228:	20008878 	.word	0x20008878
 801322c:	2000886c 	.word	0x2000886c
 8013230:	2000887c 	.word	0x2000887c

08013234 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b086      	sub	sp, #24
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	2b00      	cmp	r3, #0
 8013244:	d04c      	beq.n	80132e0 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8013246:	2308      	movs	r3, #8
 8013248:	425b      	negs	r3, r3
 801324a:	697a      	ldr	r2, [r7, #20]
 801324c:	4413      	add	r3, r2
 801324e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8013250:	697b      	ldr	r3, [r7, #20]
 8013252:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8013254:	693b      	ldr	r3, [r7, #16]
 8013256:	685a      	ldr	r2, [r3, #4]
 8013258:	4b23      	ldr	r3, [pc, #140]	; (80132e8 <vPortFree+0xb4>)
 801325a:	681b      	ldr	r3, [r3, #0]
 801325c:	4013      	ands	r3, r2
 801325e:	2b00      	cmp	r3, #0
 8013260:	d10c      	bne.n	801327c <vPortFree+0x48>
	__asm volatile
 8013262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013266:	b672      	cpsid	i
 8013268:	f383 8811 	msr	BASEPRI, r3
 801326c:	f3bf 8f6f 	isb	sy
 8013270:	f3bf 8f4f 	dsb	sy
 8013274:	b662      	cpsie	i
 8013276:	60fb      	str	r3, [r7, #12]
}
 8013278:	bf00      	nop
 801327a:	e7fe      	b.n	801327a <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801327c:	693b      	ldr	r3, [r7, #16]
 801327e:	681b      	ldr	r3, [r3, #0]
 8013280:	2b00      	cmp	r3, #0
 8013282:	d00c      	beq.n	801329e <vPortFree+0x6a>
	__asm volatile
 8013284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013288:	b672      	cpsid	i
 801328a:	f383 8811 	msr	BASEPRI, r3
 801328e:	f3bf 8f6f 	isb	sy
 8013292:	f3bf 8f4f 	dsb	sy
 8013296:	b662      	cpsie	i
 8013298:	60bb      	str	r3, [r7, #8]
}
 801329a:	bf00      	nop
 801329c:	e7fe      	b.n	801329c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801329e:	693b      	ldr	r3, [r7, #16]
 80132a0:	685a      	ldr	r2, [r3, #4]
 80132a2:	4b11      	ldr	r3, [pc, #68]	; (80132e8 <vPortFree+0xb4>)
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	4013      	ands	r3, r2
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d019      	beq.n	80132e0 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80132ac:	693b      	ldr	r3, [r7, #16]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d115      	bne.n	80132e0 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	685a      	ldr	r2, [r3, #4]
 80132b8:	4b0b      	ldr	r3, [pc, #44]	; (80132e8 <vPortFree+0xb4>)
 80132ba:	681b      	ldr	r3, [r3, #0]
 80132bc:	43db      	mvns	r3, r3
 80132be:	401a      	ands	r2, r3
 80132c0:	693b      	ldr	r3, [r7, #16]
 80132c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80132c4:	f7fe fe76 	bl	8011fb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80132c8:	693b      	ldr	r3, [r7, #16]
 80132ca:	685a      	ldr	r2, [r3, #4]
 80132cc:	4b07      	ldr	r3, [pc, #28]	; (80132ec <vPortFree+0xb8>)
 80132ce:	681b      	ldr	r3, [r3, #0]
 80132d0:	4413      	add	r3, r2
 80132d2:	4a06      	ldr	r2, [pc, #24]	; (80132ec <vPortFree+0xb8>)
 80132d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80132d6:	6938      	ldr	r0, [r7, #16]
 80132d8:	f000 f86c 	bl	80133b4 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80132dc:	f7fe fe78 	bl	8011fd0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80132e0:	bf00      	nop
 80132e2:	3718      	adds	r7, #24
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}
 80132e8:	20008880 	.word	0x20008880
 80132ec:	20008878 	.word	0x20008878

080132f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80132f0:	b480      	push	{r7}
 80132f2:	b085      	sub	sp, #20
 80132f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80132f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80132fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80132fc:	4b27      	ldr	r3, [pc, #156]	; (801339c <prvHeapInit+0xac>)
 80132fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	f003 0307 	and.w	r3, r3, #7
 8013306:	2b00      	cmp	r3, #0
 8013308:	d00c      	beq.n	8013324 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801330a:	68fb      	ldr	r3, [r7, #12]
 801330c:	3307      	adds	r3, #7
 801330e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	f023 0307 	bic.w	r3, r3, #7
 8013316:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013318:	68ba      	ldr	r2, [r7, #8]
 801331a:	68fb      	ldr	r3, [r7, #12]
 801331c:	1ad3      	subs	r3, r2, r3
 801331e:	4a1f      	ldr	r2, [pc, #124]	; (801339c <prvHeapInit+0xac>)
 8013320:	4413      	add	r3, r2
 8013322:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8013324:	68fb      	ldr	r3, [r7, #12]
 8013326:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8013328:	4a1d      	ldr	r2, [pc, #116]	; (80133a0 <prvHeapInit+0xb0>)
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 801332e:	4b1c      	ldr	r3, [pc, #112]	; (80133a0 <prvHeapInit+0xb0>)
 8013330:	2200      	movs	r2, #0
 8013332:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	68ba      	ldr	r2, [r7, #8]
 8013338:	4413      	add	r3, r2
 801333a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801333c:	2208      	movs	r2, #8
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	1a9b      	subs	r3, r3, r2
 8013342:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013344:	68fb      	ldr	r3, [r7, #12]
 8013346:	f023 0307 	bic.w	r3, r3, #7
 801334a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801334c:	68fb      	ldr	r3, [r7, #12]
 801334e:	4a15      	ldr	r2, [pc, #84]	; (80133a4 <prvHeapInit+0xb4>)
 8013350:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8013352:	4b14      	ldr	r3, [pc, #80]	; (80133a4 <prvHeapInit+0xb4>)
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	2200      	movs	r2, #0
 8013358:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801335a:	4b12      	ldr	r3, [pc, #72]	; (80133a4 <prvHeapInit+0xb4>)
 801335c:	681b      	ldr	r3, [r3, #0]
 801335e:	2200      	movs	r2, #0
 8013360:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013366:	683b      	ldr	r3, [r7, #0]
 8013368:	68fa      	ldr	r2, [r7, #12]
 801336a:	1ad2      	subs	r2, r2, r3
 801336c:	683b      	ldr	r3, [r7, #0]
 801336e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013370:	4b0c      	ldr	r3, [pc, #48]	; (80133a4 <prvHeapInit+0xb4>)
 8013372:	681a      	ldr	r2, [r3, #0]
 8013374:	683b      	ldr	r3, [r7, #0]
 8013376:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013378:	683b      	ldr	r3, [r7, #0]
 801337a:	685b      	ldr	r3, [r3, #4]
 801337c:	4a0a      	ldr	r2, [pc, #40]	; (80133a8 <prvHeapInit+0xb8>)
 801337e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	685b      	ldr	r3, [r3, #4]
 8013384:	4a09      	ldr	r2, [pc, #36]	; (80133ac <prvHeapInit+0xbc>)
 8013386:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013388:	4b09      	ldr	r3, [pc, #36]	; (80133b0 <prvHeapInit+0xc0>)
 801338a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801338e:	601a      	str	r2, [r3, #0]
}
 8013390:	bf00      	nop
 8013392:	3714      	adds	r7, #20
 8013394:	46bd      	mov	sp, r7
 8013396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801339a:	4770      	bx	lr
 801339c:	2000086c 	.word	0x2000086c
 80133a0:	2000886c 	.word	0x2000886c
 80133a4:	20008874 	.word	0x20008874
 80133a8:	2000887c 	.word	0x2000887c
 80133ac:	20008878 	.word	0x20008878
 80133b0:	20008880 	.word	0x20008880

080133b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80133b4:	b480      	push	{r7}
 80133b6:	b085      	sub	sp, #20
 80133b8:	af00      	add	r7, sp, #0
 80133ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80133bc:	4b28      	ldr	r3, [pc, #160]	; (8013460 <prvInsertBlockIntoFreeList+0xac>)
 80133be:	60fb      	str	r3, [r7, #12]
 80133c0:	e002      	b.n	80133c8 <prvInsertBlockIntoFreeList+0x14>
 80133c2:	68fb      	ldr	r3, [r7, #12]
 80133c4:	681b      	ldr	r3, [r3, #0]
 80133c6:	60fb      	str	r3, [r7, #12]
 80133c8:	68fb      	ldr	r3, [r7, #12]
 80133ca:	681b      	ldr	r3, [r3, #0]
 80133cc:	687a      	ldr	r2, [r7, #4]
 80133ce:	429a      	cmp	r2, r3
 80133d0:	d8f7      	bhi.n	80133c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80133d2:	68fb      	ldr	r3, [r7, #12]
 80133d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80133d6:	68fb      	ldr	r3, [r7, #12]
 80133d8:	685b      	ldr	r3, [r3, #4]
 80133da:	68ba      	ldr	r2, [r7, #8]
 80133dc:	4413      	add	r3, r2
 80133de:	687a      	ldr	r2, [r7, #4]
 80133e0:	429a      	cmp	r2, r3
 80133e2:	d108      	bne.n	80133f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80133e4:	68fb      	ldr	r3, [r7, #12]
 80133e6:	685a      	ldr	r2, [r3, #4]
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	685b      	ldr	r3, [r3, #4]
 80133ec:	441a      	add	r2, r3
 80133ee:	68fb      	ldr	r3, [r7, #12]
 80133f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80133f6:	687b      	ldr	r3, [r7, #4]
 80133f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	685b      	ldr	r3, [r3, #4]
 80133fe:	68ba      	ldr	r2, [r7, #8]
 8013400:	441a      	add	r2, r3
 8013402:	68fb      	ldr	r3, [r7, #12]
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	429a      	cmp	r2, r3
 8013408:	d118      	bne.n	801343c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801340a:	68fb      	ldr	r3, [r7, #12]
 801340c:	681a      	ldr	r2, [r3, #0]
 801340e:	4b15      	ldr	r3, [pc, #84]	; (8013464 <prvInsertBlockIntoFreeList+0xb0>)
 8013410:	681b      	ldr	r3, [r3, #0]
 8013412:	429a      	cmp	r2, r3
 8013414:	d00d      	beq.n	8013432 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	685a      	ldr	r2, [r3, #4]
 801341a:	68fb      	ldr	r3, [r7, #12]
 801341c:	681b      	ldr	r3, [r3, #0]
 801341e:	685b      	ldr	r3, [r3, #4]
 8013420:	441a      	add	r2, r3
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8013426:	68fb      	ldr	r3, [r7, #12]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	681a      	ldr	r2, [r3, #0]
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	601a      	str	r2, [r3, #0]
 8013430:	e008      	b.n	8013444 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8013432:	4b0c      	ldr	r3, [pc, #48]	; (8013464 <prvInsertBlockIntoFreeList+0xb0>)
 8013434:	681a      	ldr	r2, [r3, #0]
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	601a      	str	r2, [r3, #0]
 801343a:	e003      	b.n	8013444 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 801343c:	68fb      	ldr	r3, [r7, #12]
 801343e:	681a      	ldr	r2, [r3, #0]
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8013444:	68fa      	ldr	r2, [r7, #12]
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	429a      	cmp	r2, r3
 801344a:	d002      	beq.n	8013452 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 801344c:	68fb      	ldr	r3, [r7, #12]
 801344e:	687a      	ldr	r2, [r7, #4]
 8013450:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8013452:	bf00      	nop
 8013454:	3714      	adds	r7, #20
 8013456:	46bd      	mov	sp, r7
 8013458:	f85d 7b04 	ldr.w	r7, [sp], #4
 801345c:	4770      	bx	lr
 801345e:	bf00      	nop
 8013460:	2000886c 	.word	0x2000886c
 8013464:	20008874 	.word	0x20008874

08013468 <__errno>:
 8013468:	4b01      	ldr	r3, [pc, #4]	; (8013470 <__errno+0x8>)
 801346a:	6818      	ldr	r0, [r3, #0]
 801346c:	4770      	bx	lr
 801346e:	bf00      	nop
 8013470:	20000084 	.word	0x20000084

08013474 <__libc_init_array>:
 8013474:	b570      	push	{r4, r5, r6, lr}
 8013476:	4d0d      	ldr	r5, [pc, #52]	; (80134ac <__libc_init_array+0x38>)
 8013478:	4c0d      	ldr	r4, [pc, #52]	; (80134b0 <__libc_init_array+0x3c>)
 801347a:	1b64      	subs	r4, r4, r5
 801347c:	10a4      	asrs	r4, r4, #2
 801347e:	2600      	movs	r6, #0
 8013480:	42a6      	cmp	r6, r4
 8013482:	d109      	bne.n	8013498 <__libc_init_array+0x24>
 8013484:	4d0b      	ldr	r5, [pc, #44]	; (80134b4 <__libc_init_array+0x40>)
 8013486:	4c0c      	ldr	r4, [pc, #48]	; (80134b8 <__libc_init_array+0x44>)
 8013488:	f000 fc4e 	bl	8013d28 <_init>
 801348c:	1b64      	subs	r4, r4, r5
 801348e:	10a4      	asrs	r4, r4, #2
 8013490:	2600      	movs	r6, #0
 8013492:	42a6      	cmp	r6, r4
 8013494:	d105      	bne.n	80134a2 <__libc_init_array+0x2e>
 8013496:	bd70      	pop	{r4, r5, r6, pc}
 8013498:	f855 3b04 	ldr.w	r3, [r5], #4
 801349c:	4798      	blx	r3
 801349e:	3601      	adds	r6, #1
 80134a0:	e7ee      	b.n	8013480 <__libc_init_array+0xc>
 80134a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80134a6:	4798      	blx	r3
 80134a8:	3601      	adds	r6, #1
 80134aa:	e7f2      	b.n	8013492 <__libc_init_array+0x1e>
 80134ac:	08015f10 	.word	0x08015f10
 80134b0:	08015f10 	.word	0x08015f10
 80134b4:	08015f10 	.word	0x08015f10
 80134b8:	08015f14 	.word	0x08015f14

080134bc <memcpy>:
 80134bc:	440a      	add	r2, r1
 80134be:	4291      	cmp	r1, r2
 80134c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80134c4:	d100      	bne.n	80134c8 <memcpy+0xc>
 80134c6:	4770      	bx	lr
 80134c8:	b510      	push	{r4, lr}
 80134ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80134ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80134d2:	4291      	cmp	r1, r2
 80134d4:	d1f9      	bne.n	80134ca <memcpy+0xe>
 80134d6:	bd10      	pop	{r4, pc}

080134d8 <memset>:
 80134d8:	4402      	add	r2, r0
 80134da:	4603      	mov	r3, r0
 80134dc:	4293      	cmp	r3, r2
 80134de:	d100      	bne.n	80134e2 <memset+0xa>
 80134e0:	4770      	bx	lr
 80134e2:	f803 1b01 	strb.w	r1, [r3], #1
 80134e6:	e7f9      	b.n	80134dc <memset+0x4>

080134e8 <siprintf>:
 80134e8:	b40e      	push	{r1, r2, r3}
 80134ea:	b500      	push	{lr}
 80134ec:	b09c      	sub	sp, #112	; 0x70
 80134ee:	ab1d      	add	r3, sp, #116	; 0x74
 80134f0:	9002      	str	r0, [sp, #8]
 80134f2:	9006      	str	r0, [sp, #24]
 80134f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80134f8:	4809      	ldr	r0, [pc, #36]	; (8013520 <siprintf+0x38>)
 80134fa:	9107      	str	r1, [sp, #28]
 80134fc:	9104      	str	r1, [sp, #16]
 80134fe:	4909      	ldr	r1, [pc, #36]	; (8013524 <siprintf+0x3c>)
 8013500:	f853 2b04 	ldr.w	r2, [r3], #4
 8013504:	9105      	str	r1, [sp, #20]
 8013506:	6800      	ldr	r0, [r0, #0]
 8013508:	9301      	str	r3, [sp, #4]
 801350a:	a902      	add	r1, sp, #8
 801350c:	f000 f868 	bl	80135e0 <_svfiprintf_r>
 8013510:	9b02      	ldr	r3, [sp, #8]
 8013512:	2200      	movs	r2, #0
 8013514:	701a      	strb	r2, [r3, #0]
 8013516:	b01c      	add	sp, #112	; 0x70
 8013518:	f85d eb04 	ldr.w	lr, [sp], #4
 801351c:	b003      	add	sp, #12
 801351e:	4770      	bx	lr
 8013520:	20000084 	.word	0x20000084
 8013524:	ffff0208 	.word	0xffff0208

08013528 <__ssputs_r>:
 8013528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801352c:	688e      	ldr	r6, [r1, #8]
 801352e:	429e      	cmp	r6, r3
 8013530:	4682      	mov	sl, r0
 8013532:	460c      	mov	r4, r1
 8013534:	4690      	mov	r8, r2
 8013536:	461f      	mov	r7, r3
 8013538:	d838      	bhi.n	80135ac <__ssputs_r+0x84>
 801353a:	898a      	ldrh	r2, [r1, #12]
 801353c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8013540:	d032      	beq.n	80135a8 <__ssputs_r+0x80>
 8013542:	6825      	ldr	r5, [r4, #0]
 8013544:	6909      	ldr	r1, [r1, #16]
 8013546:	eba5 0901 	sub.w	r9, r5, r1
 801354a:	6965      	ldr	r5, [r4, #20]
 801354c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8013550:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8013554:	3301      	adds	r3, #1
 8013556:	444b      	add	r3, r9
 8013558:	106d      	asrs	r5, r5, #1
 801355a:	429d      	cmp	r5, r3
 801355c:	bf38      	it	cc
 801355e:	461d      	movcc	r5, r3
 8013560:	0553      	lsls	r3, r2, #21
 8013562:	d531      	bpl.n	80135c8 <__ssputs_r+0xa0>
 8013564:	4629      	mov	r1, r5
 8013566:	f000 fb39 	bl	8013bdc <_malloc_r>
 801356a:	4606      	mov	r6, r0
 801356c:	b950      	cbnz	r0, 8013584 <__ssputs_r+0x5c>
 801356e:	230c      	movs	r3, #12
 8013570:	f8ca 3000 	str.w	r3, [sl]
 8013574:	89a3      	ldrh	r3, [r4, #12]
 8013576:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801357a:	81a3      	strh	r3, [r4, #12]
 801357c:	f04f 30ff 	mov.w	r0, #4294967295
 8013580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013584:	6921      	ldr	r1, [r4, #16]
 8013586:	464a      	mov	r2, r9
 8013588:	f7ff ff98 	bl	80134bc <memcpy>
 801358c:	89a3      	ldrh	r3, [r4, #12]
 801358e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013592:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013596:	81a3      	strh	r3, [r4, #12]
 8013598:	6126      	str	r6, [r4, #16]
 801359a:	6165      	str	r5, [r4, #20]
 801359c:	444e      	add	r6, r9
 801359e:	eba5 0509 	sub.w	r5, r5, r9
 80135a2:	6026      	str	r6, [r4, #0]
 80135a4:	60a5      	str	r5, [r4, #8]
 80135a6:	463e      	mov	r6, r7
 80135a8:	42be      	cmp	r6, r7
 80135aa:	d900      	bls.n	80135ae <__ssputs_r+0x86>
 80135ac:	463e      	mov	r6, r7
 80135ae:	4632      	mov	r2, r6
 80135b0:	6820      	ldr	r0, [r4, #0]
 80135b2:	4641      	mov	r1, r8
 80135b4:	f000 faa8 	bl	8013b08 <memmove>
 80135b8:	68a3      	ldr	r3, [r4, #8]
 80135ba:	6822      	ldr	r2, [r4, #0]
 80135bc:	1b9b      	subs	r3, r3, r6
 80135be:	4432      	add	r2, r6
 80135c0:	60a3      	str	r3, [r4, #8]
 80135c2:	6022      	str	r2, [r4, #0]
 80135c4:	2000      	movs	r0, #0
 80135c6:	e7db      	b.n	8013580 <__ssputs_r+0x58>
 80135c8:	462a      	mov	r2, r5
 80135ca:	f000 fb61 	bl	8013c90 <_realloc_r>
 80135ce:	4606      	mov	r6, r0
 80135d0:	2800      	cmp	r0, #0
 80135d2:	d1e1      	bne.n	8013598 <__ssputs_r+0x70>
 80135d4:	6921      	ldr	r1, [r4, #16]
 80135d6:	4650      	mov	r0, sl
 80135d8:	f000 fab0 	bl	8013b3c <_free_r>
 80135dc:	e7c7      	b.n	801356e <__ssputs_r+0x46>
	...

080135e0 <_svfiprintf_r>:
 80135e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e4:	4698      	mov	r8, r3
 80135e6:	898b      	ldrh	r3, [r1, #12]
 80135e8:	061b      	lsls	r3, r3, #24
 80135ea:	b09d      	sub	sp, #116	; 0x74
 80135ec:	4607      	mov	r7, r0
 80135ee:	460d      	mov	r5, r1
 80135f0:	4614      	mov	r4, r2
 80135f2:	d50e      	bpl.n	8013612 <_svfiprintf_r+0x32>
 80135f4:	690b      	ldr	r3, [r1, #16]
 80135f6:	b963      	cbnz	r3, 8013612 <_svfiprintf_r+0x32>
 80135f8:	2140      	movs	r1, #64	; 0x40
 80135fa:	f000 faef 	bl	8013bdc <_malloc_r>
 80135fe:	6028      	str	r0, [r5, #0]
 8013600:	6128      	str	r0, [r5, #16]
 8013602:	b920      	cbnz	r0, 801360e <_svfiprintf_r+0x2e>
 8013604:	230c      	movs	r3, #12
 8013606:	603b      	str	r3, [r7, #0]
 8013608:	f04f 30ff 	mov.w	r0, #4294967295
 801360c:	e0d1      	b.n	80137b2 <_svfiprintf_r+0x1d2>
 801360e:	2340      	movs	r3, #64	; 0x40
 8013610:	616b      	str	r3, [r5, #20]
 8013612:	2300      	movs	r3, #0
 8013614:	9309      	str	r3, [sp, #36]	; 0x24
 8013616:	2320      	movs	r3, #32
 8013618:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801361c:	f8cd 800c 	str.w	r8, [sp, #12]
 8013620:	2330      	movs	r3, #48	; 0x30
 8013622:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80137cc <_svfiprintf_r+0x1ec>
 8013626:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801362a:	f04f 0901 	mov.w	r9, #1
 801362e:	4623      	mov	r3, r4
 8013630:	469a      	mov	sl, r3
 8013632:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013636:	b10a      	cbz	r2, 801363c <_svfiprintf_r+0x5c>
 8013638:	2a25      	cmp	r2, #37	; 0x25
 801363a:	d1f9      	bne.n	8013630 <_svfiprintf_r+0x50>
 801363c:	ebba 0b04 	subs.w	fp, sl, r4
 8013640:	d00b      	beq.n	801365a <_svfiprintf_r+0x7a>
 8013642:	465b      	mov	r3, fp
 8013644:	4622      	mov	r2, r4
 8013646:	4629      	mov	r1, r5
 8013648:	4638      	mov	r0, r7
 801364a:	f7ff ff6d 	bl	8013528 <__ssputs_r>
 801364e:	3001      	adds	r0, #1
 8013650:	f000 80aa 	beq.w	80137a8 <_svfiprintf_r+0x1c8>
 8013654:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013656:	445a      	add	r2, fp
 8013658:	9209      	str	r2, [sp, #36]	; 0x24
 801365a:	f89a 3000 	ldrb.w	r3, [sl]
 801365e:	2b00      	cmp	r3, #0
 8013660:	f000 80a2 	beq.w	80137a8 <_svfiprintf_r+0x1c8>
 8013664:	2300      	movs	r3, #0
 8013666:	f04f 32ff 	mov.w	r2, #4294967295
 801366a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801366e:	f10a 0a01 	add.w	sl, sl, #1
 8013672:	9304      	str	r3, [sp, #16]
 8013674:	9307      	str	r3, [sp, #28]
 8013676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801367a:	931a      	str	r3, [sp, #104]	; 0x68
 801367c:	4654      	mov	r4, sl
 801367e:	2205      	movs	r2, #5
 8013680:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013684:	4851      	ldr	r0, [pc, #324]	; (80137cc <_svfiprintf_r+0x1ec>)
 8013686:	f7ec fdcb 	bl	8000220 <memchr>
 801368a:	9a04      	ldr	r2, [sp, #16]
 801368c:	b9d8      	cbnz	r0, 80136c6 <_svfiprintf_r+0xe6>
 801368e:	06d0      	lsls	r0, r2, #27
 8013690:	bf44      	itt	mi
 8013692:	2320      	movmi	r3, #32
 8013694:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013698:	0711      	lsls	r1, r2, #28
 801369a:	bf44      	itt	mi
 801369c:	232b      	movmi	r3, #43	; 0x2b
 801369e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80136a2:	f89a 3000 	ldrb.w	r3, [sl]
 80136a6:	2b2a      	cmp	r3, #42	; 0x2a
 80136a8:	d015      	beq.n	80136d6 <_svfiprintf_r+0xf6>
 80136aa:	9a07      	ldr	r2, [sp, #28]
 80136ac:	4654      	mov	r4, sl
 80136ae:	2000      	movs	r0, #0
 80136b0:	f04f 0c0a 	mov.w	ip, #10
 80136b4:	4621      	mov	r1, r4
 80136b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80136ba:	3b30      	subs	r3, #48	; 0x30
 80136bc:	2b09      	cmp	r3, #9
 80136be:	d94e      	bls.n	801375e <_svfiprintf_r+0x17e>
 80136c0:	b1b0      	cbz	r0, 80136f0 <_svfiprintf_r+0x110>
 80136c2:	9207      	str	r2, [sp, #28]
 80136c4:	e014      	b.n	80136f0 <_svfiprintf_r+0x110>
 80136c6:	eba0 0308 	sub.w	r3, r0, r8
 80136ca:	fa09 f303 	lsl.w	r3, r9, r3
 80136ce:	4313      	orrs	r3, r2
 80136d0:	9304      	str	r3, [sp, #16]
 80136d2:	46a2      	mov	sl, r4
 80136d4:	e7d2      	b.n	801367c <_svfiprintf_r+0x9c>
 80136d6:	9b03      	ldr	r3, [sp, #12]
 80136d8:	1d19      	adds	r1, r3, #4
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	9103      	str	r1, [sp, #12]
 80136de:	2b00      	cmp	r3, #0
 80136e0:	bfbb      	ittet	lt
 80136e2:	425b      	neglt	r3, r3
 80136e4:	f042 0202 	orrlt.w	r2, r2, #2
 80136e8:	9307      	strge	r3, [sp, #28]
 80136ea:	9307      	strlt	r3, [sp, #28]
 80136ec:	bfb8      	it	lt
 80136ee:	9204      	strlt	r2, [sp, #16]
 80136f0:	7823      	ldrb	r3, [r4, #0]
 80136f2:	2b2e      	cmp	r3, #46	; 0x2e
 80136f4:	d10c      	bne.n	8013710 <_svfiprintf_r+0x130>
 80136f6:	7863      	ldrb	r3, [r4, #1]
 80136f8:	2b2a      	cmp	r3, #42	; 0x2a
 80136fa:	d135      	bne.n	8013768 <_svfiprintf_r+0x188>
 80136fc:	9b03      	ldr	r3, [sp, #12]
 80136fe:	1d1a      	adds	r2, r3, #4
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	9203      	str	r2, [sp, #12]
 8013704:	2b00      	cmp	r3, #0
 8013706:	bfb8      	it	lt
 8013708:	f04f 33ff 	movlt.w	r3, #4294967295
 801370c:	3402      	adds	r4, #2
 801370e:	9305      	str	r3, [sp, #20]
 8013710:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80137dc <_svfiprintf_r+0x1fc>
 8013714:	7821      	ldrb	r1, [r4, #0]
 8013716:	2203      	movs	r2, #3
 8013718:	4650      	mov	r0, sl
 801371a:	f7ec fd81 	bl	8000220 <memchr>
 801371e:	b140      	cbz	r0, 8013732 <_svfiprintf_r+0x152>
 8013720:	2340      	movs	r3, #64	; 0x40
 8013722:	eba0 000a 	sub.w	r0, r0, sl
 8013726:	fa03 f000 	lsl.w	r0, r3, r0
 801372a:	9b04      	ldr	r3, [sp, #16]
 801372c:	4303      	orrs	r3, r0
 801372e:	3401      	adds	r4, #1
 8013730:	9304      	str	r3, [sp, #16]
 8013732:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013736:	4826      	ldr	r0, [pc, #152]	; (80137d0 <_svfiprintf_r+0x1f0>)
 8013738:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801373c:	2206      	movs	r2, #6
 801373e:	f7ec fd6f 	bl	8000220 <memchr>
 8013742:	2800      	cmp	r0, #0
 8013744:	d038      	beq.n	80137b8 <_svfiprintf_r+0x1d8>
 8013746:	4b23      	ldr	r3, [pc, #140]	; (80137d4 <_svfiprintf_r+0x1f4>)
 8013748:	bb1b      	cbnz	r3, 8013792 <_svfiprintf_r+0x1b2>
 801374a:	9b03      	ldr	r3, [sp, #12]
 801374c:	3307      	adds	r3, #7
 801374e:	f023 0307 	bic.w	r3, r3, #7
 8013752:	3308      	adds	r3, #8
 8013754:	9303      	str	r3, [sp, #12]
 8013756:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013758:	4433      	add	r3, r6
 801375a:	9309      	str	r3, [sp, #36]	; 0x24
 801375c:	e767      	b.n	801362e <_svfiprintf_r+0x4e>
 801375e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013762:	460c      	mov	r4, r1
 8013764:	2001      	movs	r0, #1
 8013766:	e7a5      	b.n	80136b4 <_svfiprintf_r+0xd4>
 8013768:	2300      	movs	r3, #0
 801376a:	3401      	adds	r4, #1
 801376c:	9305      	str	r3, [sp, #20]
 801376e:	4619      	mov	r1, r3
 8013770:	f04f 0c0a 	mov.w	ip, #10
 8013774:	4620      	mov	r0, r4
 8013776:	f810 2b01 	ldrb.w	r2, [r0], #1
 801377a:	3a30      	subs	r2, #48	; 0x30
 801377c:	2a09      	cmp	r2, #9
 801377e:	d903      	bls.n	8013788 <_svfiprintf_r+0x1a8>
 8013780:	2b00      	cmp	r3, #0
 8013782:	d0c5      	beq.n	8013710 <_svfiprintf_r+0x130>
 8013784:	9105      	str	r1, [sp, #20]
 8013786:	e7c3      	b.n	8013710 <_svfiprintf_r+0x130>
 8013788:	fb0c 2101 	mla	r1, ip, r1, r2
 801378c:	4604      	mov	r4, r0
 801378e:	2301      	movs	r3, #1
 8013790:	e7f0      	b.n	8013774 <_svfiprintf_r+0x194>
 8013792:	ab03      	add	r3, sp, #12
 8013794:	9300      	str	r3, [sp, #0]
 8013796:	462a      	mov	r2, r5
 8013798:	4b0f      	ldr	r3, [pc, #60]	; (80137d8 <_svfiprintf_r+0x1f8>)
 801379a:	a904      	add	r1, sp, #16
 801379c:	4638      	mov	r0, r7
 801379e:	f3af 8000 	nop.w
 80137a2:	1c42      	adds	r2, r0, #1
 80137a4:	4606      	mov	r6, r0
 80137a6:	d1d6      	bne.n	8013756 <_svfiprintf_r+0x176>
 80137a8:	89ab      	ldrh	r3, [r5, #12]
 80137aa:	065b      	lsls	r3, r3, #25
 80137ac:	f53f af2c 	bmi.w	8013608 <_svfiprintf_r+0x28>
 80137b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80137b2:	b01d      	add	sp, #116	; 0x74
 80137b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137b8:	ab03      	add	r3, sp, #12
 80137ba:	9300      	str	r3, [sp, #0]
 80137bc:	462a      	mov	r2, r5
 80137be:	4b06      	ldr	r3, [pc, #24]	; (80137d8 <_svfiprintf_r+0x1f8>)
 80137c0:	a904      	add	r1, sp, #16
 80137c2:	4638      	mov	r0, r7
 80137c4:	f000 f87a 	bl	80138bc <_printf_i>
 80137c8:	e7eb      	b.n	80137a2 <_svfiprintf_r+0x1c2>
 80137ca:	bf00      	nop
 80137cc:	08015ed2 	.word	0x08015ed2
 80137d0:	08015edc 	.word	0x08015edc
 80137d4:	00000000 	.word	0x00000000
 80137d8:	08013529 	.word	0x08013529
 80137dc:	08015ed8 	.word	0x08015ed8

080137e0 <_printf_common>:
 80137e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80137e4:	4616      	mov	r6, r2
 80137e6:	4699      	mov	r9, r3
 80137e8:	688a      	ldr	r2, [r1, #8]
 80137ea:	690b      	ldr	r3, [r1, #16]
 80137ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80137f0:	4293      	cmp	r3, r2
 80137f2:	bfb8      	it	lt
 80137f4:	4613      	movlt	r3, r2
 80137f6:	6033      	str	r3, [r6, #0]
 80137f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80137fc:	4607      	mov	r7, r0
 80137fe:	460c      	mov	r4, r1
 8013800:	b10a      	cbz	r2, 8013806 <_printf_common+0x26>
 8013802:	3301      	adds	r3, #1
 8013804:	6033      	str	r3, [r6, #0]
 8013806:	6823      	ldr	r3, [r4, #0]
 8013808:	0699      	lsls	r1, r3, #26
 801380a:	bf42      	ittt	mi
 801380c:	6833      	ldrmi	r3, [r6, #0]
 801380e:	3302      	addmi	r3, #2
 8013810:	6033      	strmi	r3, [r6, #0]
 8013812:	6825      	ldr	r5, [r4, #0]
 8013814:	f015 0506 	ands.w	r5, r5, #6
 8013818:	d106      	bne.n	8013828 <_printf_common+0x48>
 801381a:	f104 0a19 	add.w	sl, r4, #25
 801381e:	68e3      	ldr	r3, [r4, #12]
 8013820:	6832      	ldr	r2, [r6, #0]
 8013822:	1a9b      	subs	r3, r3, r2
 8013824:	42ab      	cmp	r3, r5
 8013826:	dc26      	bgt.n	8013876 <_printf_common+0x96>
 8013828:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801382c:	1e13      	subs	r3, r2, #0
 801382e:	6822      	ldr	r2, [r4, #0]
 8013830:	bf18      	it	ne
 8013832:	2301      	movne	r3, #1
 8013834:	0692      	lsls	r2, r2, #26
 8013836:	d42b      	bmi.n	8013890 <_printf_common+0xb0>
 8013838:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801383c:	4649      	mov	r1, r9
 801383e:	4638      	mov	r0, r7
 8013840:	47c0      	blx	r8
 8013842:	3001      	adds	r0, #1
 8013844:	d01e      	beq.n	8013884 <_printf_common+0xa4>
 8013846:	6823      	ldr	r3, [r4, #0]
 8013848:	68e5      	ldr	r5, [r4, #12]
 801384a:	6832      	ldr	r2, [r6, #0]
 801384c:	f003 0306 	and.w	r3, r3, #6
 8013850:	2b04      	cmp	r3, #4
 8013852:	bf08      	it	eq
 8013854:	1aad      	subeq	r5, r5, r2
 8013856:	68a3      	ldr	r3, [r4, #8]
 8013858:	6922      	ldr	r2, [r4, #16]
 801385a:	bf0c      	ite	eq
 801385c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013860:	2500      	movne	r5, #0
 8013862:	4293      	cmp	r3, r2
 8013864:	bfc4      	itt	gt
 8013866:	1a9b      	subgt	r3, r3, r2
 8013868:	18ed      	addgt	r5, r5, r3
 801386a:	2600      	movs	r6, #0
 801386c:	341a      	adds	r4, #26
 801386e:	42b5      	cmp	r5, r6
 8013870:	d11a      	bne.n	80138a8 <_printf_common+0xc8>
 8013872:	2000      	movs	r0, #0
 8013874:	e008      	b.n	8013888 <_printf_common+0xa8>
 8013876:	2301      	movs	r3, #1
 8013878:	4652      	mov	r2, sl
 801387a:	4649      	mov	r1, r9
 801387c:	4638      	mov	r0, r7
 801387e:	47c0      	blx	r8
 8013880:	3001      	adds	r0, #1
 8013882:	d103      	bne.n	801388c <_printf_common+0xac>
 8013884:	f04f 30ff 	mov.w	r0, #4294967295
 8013888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801388c:	3501      	adds	r5, #1
 801388e:	e7c6      	b.n	801381e <_printf_common+0x3e>
 8013890:	18e1      	adds	r1, r4, r3
 8013892:	1c5a      	adds	r2, r3, #1
 8013894:	2030      	movs	r0, #48	; 0x30
 8013896:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801389a:	4422      	add	r2, r4
 801389c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80138a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80138a4:	3302      	adds	r3, #2
 80138a6:	e7c7      	b.n	8013838 <_printf_common+0x58>
 80138a8:	2301      	movs	r3, #1
 80138aa:	4622      	mov	r2, r4
 80138ac:	4649      	mov	r1, r9
 80138ae:	4638      	mov	r0, r7
 80138b0:	47c0      	blx	r8
 80138b2:	3001      	adds	r0, #1
 80138b4:	d0e6      	beq.n	8013884 <_printf_common+0xa4>
 80138b6:	3601      	adds	r6, #1
 80138b8:	e7d9      	b.n	801386e <_printf_common+0x8e>
	...

080138bc <_printf_i>:
 80138bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80138c0:	460c      	mov	r4, r1
 80138c2:	4691      	mov	r9, r2
 80138c4:	7e27      	ldrb	r7, [r4, #24]
 80138c6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80138c8:	2f78      	cmp	r7, #120	; 0x78
 80138ca:	4680      	mov	r8, r0
 80138cc:	469a      	mov	sl, r3
 80138ce:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80138d2:	d807      	bhi.n	80138e4 <_printf_i+0x28>
 80138d4:	2f62      	cmp	r7, #98	; 0x62
 80138d6:	d80a      	bhi.n	80138ee <_printf_i+0x32>
 80138d8:	2f00      	cmp	r7, #0
 80138da:	f000 80d8 	beq.w	8013a8e <_printf_i+0x1d2>
 80138de:	2f58      	cmp	r7, #88	; 0x58
 80138e0:	f000 80a3 	beq.w	8013a2a <_printf_i+0x16e>
 80138e4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80138e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80138ec:	e03a      	b.n	8013964 <_printf_i+0xa8>
 80138ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80138f2:	2b15      	cmp	r3, #21
 80138f4:	d8f6      	bhi.n	80138e4 <_printf_i+0x28>
 80138f6:	a001      	add	r0, pc, #4	; (adr r0, 80138fc <_printf_i+0x40>)
 80138f8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80138fc:	08013955 	.word	0x08013955
 8013900:	08013969 	.word	0x08013969
 8013904:	080138e5 	.word	0x080138e5
 8013908:	080138e5 	.word	0x080138e5
 801390c:	080138e5 	.word	0x080138e5
 8013910:	080138e5 	.word	0x080138e5
 8013914:	08013969 	.word	0x08013969
 8013918:	080138e5 	.word	0x080138e5
 801391c:	080138e5 	.word	0x080138e5
 8013920:	080138e5 	.word	0x080138e5
 8013924:	080138e5 	.word	0x080138e5
 8013928:	08013a75 	.word	0x08013a75
 801392c:	08013999 	.word	0x08013999
 8013930:	08013a57 	.word	0x08013a57
 8013934:	080138e5 	.word	0x080138e5
 8013938:	080138e5 	.word	0x080138e5
 801393c:	08013a97 	.word	0x08013a97
 8013940:	080138e5 	.word	0x080138e5
 8013944:	08013999 	.word	0x08013999
 8013948:	080138e5 	.word	0x080138e5
 801394c:	080138e5 	.word	0x080138e5
 8013950:	08013a5f 	.word	0x08013a5f
 8013954:	680b      	ldr	r3, [r1, #0]
 8013956:	1d1a      	adds	r2, r3, #4
 8013958:	681b      	ldr	r3, [r3, #0]
 801395a:	600a      	str	r2, [r1, #0]
 801395c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013960:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013964:	2301      	movs	r3, #1
 8013966:	e0a3      	b.n	8013ab0 <_printf_i+0x1f4>
 8013968:	6825      	ldr	r5, [r4, #0]
 801396a:	6808      	ldr	r0, [r1, #0]
 801396c:	062e      	lsls	r6, r5, #24
 801396e:	f100 0304 	add.w	r3, r0, #4
 8013972:	d50a      	bpl.n	801398a <_printf_i+0xce>
 8013974:	6805      	ldr	r5, [r0, #0]
 8013976:	600b      	str	r3, [r1, #0]
 8013978:	2d00      	cmp	r5, #0
 801397a:	da03      	bge.n	8013984 <_printf_i+0xc8>
 801397c:	232d      	movs	r3, #45	; 0x2d
 801397e:	426d      	negs	r5, r5
 8013980:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013984:	485e      	ldr	r0, [pc, #376]	; (8013b00 <_printf_i+0x244>)
 8013986:	230a      	movs	r3, #10
 8013988:	e019      	b.n	80139be <_printf_i+0x102>
 801398a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801398e:	6805      	ldr	r5, [r0, #0]
 8013990:	600b      	str	r3, [r1, #0]
 8013992:	bf18      	it	ne
 8013994:	b22d      	sxthne	r5, r5
 8013996:	e7ef      	b.n	8013978 <_printf_i+0xbc>
 8013998:	680b      	ldr	r3, [r1, #0]
 801399a:	6825      	ldr	r5, [r4, #0]
 801399c:	1d18      	adds	r0, r3, #4
 801399e:	6008      	str	r0, [r1, #0]
 80139a0:	0628      	lsls	r0, r5, #24
 80139a2:	d501      	bpl.n	80139a8 <_printf_i+0xec>
 80139a4:	681d      	ldr	r5, [r3, #0]
 80139a6:	e002      	b.n	80139ae <_printf_i+0xf2>
 80139a8:	0669      	lsls	r1, r5, #25
 80139aa:	d5fb      	bpl.n	80139a4 <_printf_i+0xe8>
 80139ac:	881d      	ldrh	r5, [r3, #0]
 80139ae:	4854      	ldr	r0, [pc, #336]	; (8013b00 <_printf_i+0x244>)
 80139b0:	2f6f      	cmp	r7, #111	; 0x6f
 80139b2:	bf0c      	ite	eq
 80139b4:	2308      	moveq	r3, #8
 80139b6:	230a      	movne	r3, #10
 80139b8:	2100      	movs	r1, #0
 80139ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80139be:	6866      	ldr	r6, [r4, #4]
 80139c0:	60a6      	str	r6, [r4, #8]
 80139c2:	2e00      	cmp	r6, #0
 80139c4:	bfa2      	ittt	ge
 80139c6:	6821      	ldrge	r1, [r4, #0]
 80139c8:	f021 0104 	bicge.w	r1, r1, #4
 80139cc:	6021      	strge	r1, [r4, #0]
 80139ce:	b90d      	cbnz	r5, 80139d4 <_printf_i+0x118>
 80139d0:	2e00      	cmp	r6, #0
 80139d2:	d04d      	beq.n	8013a70 <_printf_i+0x1b4>
 80139d4:	4616      	mov	r6, r2
 80139d6:	fbb5 f1f3 	udiv	r1, r5, r3
 80139da:	fb03 5711 	mls	r7, r3, r1, r5
 80139de:	5dc7      	ldrb	r7, [r0, r7]
 80139e0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80139e4:	462f      	mov	r7, r5
 80139e6:	42bb      	cmp	r3, r7
 80139e8:	460d      	mov	r5, r1
 80139ea:	d9f4      	bls.n	80139d6 <_printf_i+0x11a>
 80139ec:	2b08      	cmp	r3, #8
 80139ee:	d10b      	bne.n	8013a08 <_printf_i+0x14c>
 80139f0:	6823      	ldr	r3, [r4, #0]
 80139f2:	07df      	lsls	r7, r3, #31
 80139f4:	d508      	bpl.n	8013a08 <_printf_i+0x14c>
 80139f6:	6923      	ldr	r3, [r4, #16]
 80139f8:	6861      	ldr	r1, [r4, #4]
 80139fa:	4299      	cmp	r1, r3
 80139fc:	bfde      	ittt	le
 80139fe:	2330      	movle	r3, #48	; 0x30
 8013a00:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013a04:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013a08:	1b92      	subs	r2, r2, r6
 8013a0a:	6122      	str	r2, [r4, #16]
 8013a0c:	f8cd a000 	str.w	sl, [sp]
 8013a10:	464b      	mov	r3, r9
 8013a12:	aa03      	add	r2, sp, #12
 8013a14:	4621      	mov	r1, r4
 8013a16:	4640      	mov	r0, r8
 8013a18:	f7ff fee2 	bl	80137e0 <_printf_common>
 8013a1c:	3001      	adds	r0, #1
 8013a1e:	d14c      	bne.n	8013aba <_printf_i+0x1fe>
 8013a20:	f04f 30ff 	mov.w	r0, #4294967295
 8013a24:	b004      	add	sp, #16
 8013a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a2a:	4835      	ldr	r0, [pc, #212]	; (8013b00 <_printf_i+0x244>)
 8013a2c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013a30:	6823      	ldr	r3, [r4, #0]
 8013a32:	680e      	ldr	r6, [r1, #0]
 8013a34:	061f      	lsls	r7, r3, #24
 8013a36:	f856 5b04 	ldr.w	r5, [r6], #4
 8013a3a:	600e      	str	r6, [r1, #0]
 8013a3c:	d514      	bpl.n	8013a68 <_printf_i+0x1ac>
 8013a3e:	07d9      	lsls	r1, r3, #31
 8013a40:	bf44      	itt	mi
 8013a42:	f043 0320 	orrmi.w	r3, r3, #32
 8013a46:	6023      	strmi	r3, [r4, #0]
 8013a48:	b91d      	cbnz	r5, 8013a52 <_printf_i+0x196>
 8013a4a:	6823      	ldr	r3, [r4, #0]
 8013a4c:	f023 0320 	bic.w	r3, r3, #32
 8013a50:	6023      	str	r3, [r4, #0]
 8013a52:	2310      	movs	r3, #16
 8013a54:	e7b0      	b.n	80139b8 <_printf_i+0xfc>
 8013a56:	6823      	ldr	r3, [r4, #0]
 8013a58:	f043 0320 	orr.w	r3, r3, #32
 8013a5c:	6023      	str	r3, [r4, #0]
 8013a5e:	2378      	movs	r3, #120	; 0x78
 8013a60:	4828      	ldr	r0, [pc, #160]	; (8013b04 <_printf_i+0x248>)
 8013a62:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013a66:	e7e3      	b.n	8013a30 <_printf_i+0x174>
 8013a68:	065e      	lsls	r6, r3, #25
 8013a6a:	bf48      	it	mi
 8013a6c:	b2ad      	uxthmi	r5, r5
 8013a6e:	e7e6      	b.n	8013a3e <_printf_i+0x182>
 8013a70:	4616      	mov	r6, r2
 8013a72:	e7bb      	b.n	80139ec <_printf_i+0x130>
 8013a74:	680b      	ldr	r3, [r1, #0]
 8013a76:	6826      	ldr	r6, [r4, #0]
 8013a78:	6960      	ldr	r0, [r4, #20]
 8013a7a:	1d1d      	adds	r5, r3, #4
 8013a7c:	600d      	str	r5, [r1, #0]
 8013a7e:	0635      	lsls	r5, r6, #24
 8013a80:	681b      	ldr	r3, [r3, #0]
 8013a82:	d501      	bpl.n	8013a88 <_printf_i+0x1cc>
 8013a84:	6018      	str	r0, [r3, #0]
 8013a86:	e002      	b.n	8013a8e <_printf_i+0x1d2>
 8013a88:	0671      	lsls	r1, r6, #25
 8013a8a:	d5fb      	bpl.n	8013a84 <_printf_i+0x1c8>
 8013a8c:	8018      	strh	r0, [r3, #0]
 8013a8e:	2300      	movs	r3, #0
 8013a90:	6123      	str	r3, [r4, #16]
 8013a92:	4616      	mov	r6, r2
 8013a94:	e7ba      	b.n	8013a0c <_printf_i+0x150>
 8013a96:	680b      	ldr	r3, [r1, #0]
 8013a98:	1d1a      	adds	r2, r3, #4
 8013a9a:	600a      	str	r2, [r1, #0]
 8013a9c:	681e      	ldr	r6, [r3, #0]
 8013a9e:	6862      	ldr	r2, [r4, #4]
 8013aa0:	2100      	movs	r1, #0
 8013aa2:	4630      	mov	r0, r6
 8013aa4:	f7ec fbbc 	bl	8000220 <memchr>
 8013aa8:	b108      	cbz	r0, 8013aae <_printf_i+0x1f2>
 8013aaa:	1b80      	subs	r0, r0, r6
 8013aac:	6060      	str	r0, [r4, #4]
 8013aae:	6863      	ldr	r3, [r4, #4]
 8013ab0:	6123      	str	r3, [r4, #16]
 8013ab2:	2300      	movs	r3, #0
 8013ab4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ab8:	e7a8      	b.n	8013a0c <_printf_i+0x150>
 8013aba:	6923      	ldr	r3, [r4, #16]
 8013abc:	4632      	mov	r2, r6
 8013abe:	4649      	mov	r1, r9
 8013ac0:	4640      	mov	r0, r8
 8013ac2:	47d0      	blx	sl
 8013ac4:	3001      	adds	r0, #1
 8013ac6:	d0ab      	beq.n	8013a20 <_printf_i+0x164>
 8013ac8:	6823      	ldr	r3, [r4, #0]
 8013aca:	079b      	lsls	r3, r3, #30
 8013acc:	d413      	bmi.n	8013af6 <_printf_i+0x23a>
 8013ace:	68e0      	ldr	r0, [r4, #12]
 8013ad0:	9b03      	ldr	r3, [sp, #12]
 8013ad2:	4298      	cmp	r0, r3
 8013ad4:	bfb8      	it	lt
 8013ad6:	4618      	movlt	r0, r3
 8013ad8:	e7a4      	b.n	8013a24 <_printf_i+0x168>
 8013ada:	2301      	movs	r3, #1
 8013adc:	4632      	mov	r2, r6
 8013ade:	4649      	mov	r1, r9
 8013ae0:	4640      	mov	r0, r8
 8013ae2:	47d0      	blx	sl
 8013ae4:	3001      	adds	r0, #1
 8013ae6:	d09b      	beq.n	8013a20 <_printf_i+0x164>
 8013ae8:	3501      	adds	r5, #1
 8013aea:	68e3      	ldr	r3, [r4, #12]
 8013aec:	9903      	ldr	r1, [sp, #12]
 8013aee:	1a5b      	subs	r3, r3, r1
 8013af0:	42ab      	cmp	r3, r5
 8013af2:	dcf2      	bgt.n	8013ada <_printf_i+0x21e>
 8013af4:	e7eb      	b.n	8013ace <_printf_i+0x212>
 8013af6:	2500      	movs	r5, #0
 8013af8:	f104 0619 	add.w	r6, r4, #25
 8013afc:	e7f5      	b.n	8013aea <_printf_i+0x22e>
 8013afe:	bf00      	nop
 8013b00:	08015ee3 	.word	0x08015ee3
 8013b04:	08015ef4 	.word	0x08015ef4

08013b08 <memmove>:
 8013b08:	4288      	cmp	r0, r1
 8013b0a:	b510      	push	{r4, lr}
 8013b0c:	eb01 0402 	add.w	r4, r1, r2
 8013b10:	d902      	bls.n	8013b18 <memmove+0x10>
 8013b12:	4284      	cmp	r4, r0
 8013b14:	4623      	mov	r3, r4
 8013b16:	d807      	bhi.n	8013b28 <memmove+0x20>
 8013b18:	1e43      	subs	r3, r0, #1
 8013b1a:	42a1      	cmp	r1, r4
 8013b1c:	d008      	beq.n	8013b30 <memmove+0x28>
 8013b1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013b22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013b26:	e7f8      	b.n	8013b1a <memmove+0x12>
 8013b28:	4402      	add	r2, r0
 8013b2a:	4601      	mov	r1, r0
 8013b2c:	428a      	cmp	r2, r1
 8013b2e:	d100      	bne.n	8013b32 <memmove+0x2a>
 8013b30:	bd10      	pop	{r4, pc}
 8013b32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013b36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013b3a:	e7f7      	b.n	8013b2c <memmove+0x24>

08013b3c <_free_r>:
 8013b3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013b3e:	2900      	cmp	r1, #0
 8013b40:	d048      	beq.n	8013bd4 <_free_r+0x98>
 8013b42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013b46:	9001      	str	r0, [sp, #4]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	f1a1 0404 	sub.w	r4, r1, #4
 8013b4e:	bfb8      	it	lt
 8013b50:	18e4      	addlt	r4, r4, r3
 8013b52:	f000 f8d3 	bl	8013cfc <__malloc_lock>
 8013b56:	4a20      	ldr	r2, [pc, #128]	; (8013bd8 <_free_r+0x9c>)
 8013b58:	9801      	ldr	r0, [sp, #4]
 8013b5a:	6813      	ldr	r3, [r2, #0]
 8013b5c:	4615      	mov	r5, r2
 8013b5e:	b933      	cbnz	r3, 8013b6e <_free_r+0x32>
 8013b60:	6063      	str	r3, [r4, #4]
 8013b62:	6014      	str	r4, [r2, #0]
 8013b64:	b003      	add	sp, #12
 8013b66:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013b6a:	f000 b8cd 	b.w	8013d08 <__malloc_unlock>
 8013b6e:	42a3      	cmp	r3, r4
 8013b70:	d90b      	bls.n	8013b8a <_free_r+0x4e>
 8013b72:	6821      	ldr	r1, [r4, #0]
 8013b74:	1862      	adds	r2, r4, r1
 8013b76:	4293      	cmp	r3, r2
 8013b78:	bf04      	itt	eq
 8013b7a:	681a      	ldreq	r2, [r3, #0]
 8013b7c:	685b      	ldreq	r3, [r3, #4]
 8013b7e:	6063      	str	r3, [r4, #4]
 8013b80:	bf04      	itt	eq
 8013b82:	1852      	addeq	r2, r2, r1
 8013b84:	6022      	streq	r2, [r4, #0]
 8013b86:	602c      	str	r4, [r5, #0]
 8013b88:	e7ec      	b.n	8013b64 <_free_r+0x28>
 8013b8a:	461a      	mov	r2, r3
 8013b8c:	685b      	ldr	r3, [r3, #4]
 8013b8e:	b10b      	cbz	r3, 8013b94 <_free_r+0x58>
 8013b90:	42a3      	cmp	r3, r4
 8013b92:	d9fa      	bls.n	8013b8a <_free_r+0x4e>
 8013b94:	6811      	ldr	r1, [r2, #0]
 8013b96:	1855      	adds	r5, r2, r1
 8013b98:	42a5      	cmp	r5, r4
 8013b9a:	d10b      	bne.n	8013bb4 <_free_r+0x78>
 8013b9c:	6824      	ldr	r4, [r4, #0]
 8013b9e:	4421      	add	r1, r4
 8013ba0:	1854      	adds	r4, r2, r1
 8013ba2:	42a3      	cmp	r3, r4
 8013ba4:	6011      	str	r1, [r2, #0]
 8013ba6:	d1dd      	bne.n	8013b64 <_free_r+0x28>
 8013ba8:	681c      	ldr	r4, [r3, #0]
 8013baa:	685b      	ldr	r3, [r3, #4]
 8013bac:	6053      	str	r3, [r2, #4]
 8013bae:	4421      	add	r1, r4
 8013bb0:	6011      	str	r1, [r2, #0]
 8013bb2:	e7d7      	b.n	8013b64 <_free_r+0x28>
 8013bb4:	d902      	bls.n	8013bbc <_free_r+0x80>
 8013bb6:	230c      	movs	r3, #12
 8013bb8:	6003      	str	r3, [r0, #0]
 8013bba:	e7d3      	b.n	8013b64 <_free_r+0x28>
 8013bbc:	6825      	ldr	r5, [r4, #0]
 8013bbe:	1961      	adds	r1, r4, r5
 8013bc0:	428b      	cmp	r3, r1
 8013bc2:	bf04      	itt	eq
 8013bc4:	6819      	ldreq	r1, [r3, #0]
 8013bc6:	685b      	ldreq	r3, [r3, #4]
 8013bc8:	6063      	str	r3, [r4, #4]
 8013bca:	bf04      	itt	eq
 8013bcc:	1949      	addeq	r1, r1, r5
 8013bce:	6021      	streq	r1, [r4, #0]
 8013bd0:	6054      	str	r4, [r2, #4]
 8013bd2:	e7c7      	b.n	8013b64 <_free_r+0x28>
 8013bd4:	b003      	add	sp, #12
 8013bd6:	bd30      	pop	{r4, r5, pc}
 8013bd8:	20008884 	.word	0x20008884

08013bdc <_malloc_r>:
 8013bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013bde:	1ccd      	adds	r5, r1, #3
 8013be0:	f025 0503 	bic.w	r5, r5, #3
 8013be4:	3508      	adds	r5, #8
 8013be6:	2d0c      	cmp	r5, #12
 8013be8:	bf38      	it	cc
 8013bea:	250c      	movcc	r5, #12
 8013bec:	2d00      	cmp	r5, #0
 8013bee:	4606      	mov	r6, r0
 8013bf0:	db01      	blt.n	8013bf6 <_malloc_r+0x1a>
 8013bf2:	42a9      	cmp	r1, r5
 8013bf4:	d903      	bls.n	8013bfe <_malloc_r+0x22>
 8013bf6:	230c      	movs	r3, #12
 8013bf8:	6033      	str	r3, [r6, #0]
 8013bfa:	2000      	movs	r0, #0
 8013bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013bfe:	f000 f87d 	bl	8013cfc <__malloc_lock>
 8013c02:	4921      	ldr	r1, [pc, #132]	; (8013c88 <_malloc_r+0xac>)
 8013c04:	680a      	ldr	r2, [r1, #0]
 8013c06:	4614      	mov	r4, r2
 8013c08:	b99c      	cbnz	r4, 8013c32 <_malloc_r+0x56>
 8013c0a:	4f20      	ldr	r7, [pc, #128]	; (8013c8c <_malloc_r+0xb0>)
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	b923      	cbnz	r3, 8013c1a <_malloc_r+0x3e>
 8013c10:	4621      	mov	r1, r4
 8013c12:	4630      	mov	r0, r6
 8013c14:	f000 f862 	bl	8013cdc <_sbrk_r>
 8013c18:	6038      	str	r0, [r7, #0]
 8013c1a:	4629      	mov	r1, r5
 8013c1c:	4630      	mov	r0, r6
 8013c1e:	f000 f85d 	bl	8013cdc <_sbrk_r>
 8013c22:	1c43      	adds	r3, r0, #1
 8013c24:	d123      	bne.n	8013c6e <_malloc_r+0x92>
 8013c26:	230c      	movs	r3, #12
 8013c28:	6033      	str	r3, [r6, #0]
 8013c2a:	4630      	mov	r0, r6
 8013c2c:	f000 f86c 	bl	8013d08 <__malloc_unlock>
 8013c30:	e7e3      	b.n	8013bfa <_malloc_r+0x1e>
 8013c32:	6823      	ldr	r3, [r4, #0]
 8013c34:	1b5b      	subs	r3, r3, r5
 8013c36:	d417      	bmi.n	8013c68 <_malloc_r+0x8c>
 8013c38:	2b0b      	cmp	r3, #11
 8013c3a:	d903      	bls.n	8013c44 <_malloc_r+0x68>
 8013c3c:	6023      	str	r3, [r4, #0]
 8013c3e:	441c      	add	r4, r3
 8013c40:	6025      	str	r5, [r4, #0]
 8013c42:	e004      	b.n	8013c4e <_malloc_r+0x72>
 8013c44:	6863      	ldr	r3, [r4, #4]
 8013c46:	42a2      	cmp	r2, r4
 8013c48:	bf0c      	ite	eq
 8013c4a:	600b      	streq	r3, [r1, #0]
 8013c4c:	6053      	strne	r3, [r2, #4]
 8013c4e:	4630      	mov	r0, r6
 8013c50:	f000 f85a 	bl	8013d08 <__malloc_unlock>
 8013c54:	f104 000b 	add.w	r0, r4, #11
 8013c58:	1d23      	adds	r3, r4, #4
 8013c5a:	f020 0007 	bic.w	r0, r0, #7
 8013c5e:	1ac2      	subs	r2, r0, r3
 8013c60:	d0cc      	beq.n	8013bfc <_malloc_r+0x20>
 8013c62:	1a1b      	subs	r3, r3, r0
 8013c64:	50a3      	str	r3, [r4, r2]
 8013c66:	e7c9      	b.n	8013bfc <_malloc_r+0x20>
 8013c68:	4622      	mov	r2, r4
 8013c6a:	6864      	ldr	r4, [r4, #4]
 8013c6c:	e7cc      	b.n	8013c08 <_malloc_r+0x2c>
 8013c6e:	1cc4      	adds	r4, r0, #3
 8013c70:	f024 0403 	bic.w	r4, r4, #3
 8013c74:	42a0      	cmp	r0, r4
 8013c76:	d0e3      	beq.n	8013c40 <_malloc_r+0x64>
 8013c78:	1a21      	subs	r1, r4, r0
 8013c7a:	4630      	mov	r0, r6
 8013c7c:	f000 f82e 	bl	8013cdc <_sbrk_r>
 8013c80:	3001      	adds	r0, #1
 8013c82:	d1dd      	bne.n	8013c40 <_malloc_r+0x64>
 8013c84:	e7cf      	b.n	8013c26 <_malloc_r+0x4a>
 8013c86:	bf00      	nop
 8013c88:	20008884 	.word	0x20008884
 8013c8c:	20008888 	.word	0x20008888

08013c90 <_realloc_r>:
 8013c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c92:	4607      	mov	r7, r0
 8013c94:	4614      	mov	r4, r2
 8013c96:	460e      	mov	r6, r1
 8013c98:	b921      	cbnz	r1, 8013ca4 <_realloc_r+0x14>
 8013c9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013c9e:	4611      	mov	r1, r2
 8013ca0:	f7ff bf9c 	b.w	8013bdc <_malloc_r>
 8013ca4:	b922      	cbnz	r2, 8013cb0 <_realloc_r+0x20>
 8013ca6:	f7ff ff49 	bl	8013b3c <_free_r>
 8013caa:	4625      	mov	r5, r4
 8013cac:	4628      	mov	r0, r5
 8013cae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013cb0:	f000 f830 	bl	8013d14 <_malloc_usable_size_r>
 8013cb4:	42a0      	cmp	r0, r4
 8013cb6:	d20f      	bcs.n	8013cd8 <_realloc_r+0x48>
 8013cb8:	4621      	mov	r1, r4
 8013cba:	4638      	mov	r0, r7
 8013cbc:	f7ff ff8e 	bl	8013bdc <_malloc_r>
 8013cc0:	4605      	mov	r5, r0
 8013cc2:	2800      	cmp	r0, #0
 8013cc4:	d0f2      	beq.n	8013cac <_realloc_r+0x1c>
 8013cc6:	4631      	mov	r1, r6
 8013cc8:	4622      	mov	r2, r4
 8013cca:	f7ff fbf7 	bl	80134bc <memcpy>
 8013cce:	4631      	mov	r1, r6
 8013cd0:	4638      	mov	r0, r7
 8013cd2:	f7ff ff33 	bl	8013b3c <_free_r>
 8013cd6:	e7e9      	b.n	8013cac <_realloc_r+0x1c>
 8013cd8:	4635      	mov	r5, r6
 8013cda:	e7e7      	b.n	8013cac <_realloc_r+0x1c>

08013cdc <_sbrk_r>:
 8013cdc:	b538      	push	{r3, r4, r5, lr}
 8013cde:	4d06      	ldr	r5, [pc, #24]	; (8013cf8 <_sbrk_r+0x1c>)
 8013ce0:	2300      	movs	r3, #0
 8013ce2:	4604      	mov	r4, r0
 8013ce4:	4608      	mov	r0, r1
 8013ce6:	602b      	str	r3, [r5, #0]
 8013ce8:	f7f0 fbaa 	bl	8004440 <_sbrk>
 8013cec:	1c43      	adds	r3, r0, #1
 8013cee:	d102      	bne.n	8013cf6 <_sbrk_r+0x1a>
 8013cf0:	682b      	ldr	r3, [r5, #0]
 8013cf2:	b103      	cbz	r3, 8013cf6 <_sbrk_r+0x1a>
 8013cf4:	6023      	str	r3, [r4, #0]
 8013cf6:	bd38      	pop	{r3, r4, r5, pc}
 8013cf8:	2000977c 	.word	0x2000977c

08013cfc <__malloc_lock>:
 8013cfc:	4801      	ldr	r0, [pc, #4]	; (8013d04 <__malloc_lock+0x8>)
 8013cfe:	f000 b811 	b.w	8013d24 <__retarget_lock_acquire_recursive>
 8013d02:	bf00      	nop
 8013d04:	20009784 	.word	0x20009784

08013d08 <__malloc_unlock>:
 8013d08:	4801      	ldr	r0, [pc, #4]	; (8013d10 <__malloc_unlock+0x8>)
 8013d0a:	f000 b80c 	b.w	8013d26 <__retarget_lock_release_recursive>
 8013d0e:	bf00      	nop
 8013d10:	20009784 	.word	0x20009784

08013d14 <_malloc_usable_size_r>:
 8013d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013d18:	1f18      	subs	r0, r3, #4
 8013d1a:	2b00      	cmp	r3, #0
 8013d1c:	bfbc      	itt	lt
 8013d1e:	580b      	ldrlt	r3, [r1, r0]
 8013d20:	18c0      	addlt	r0, r0, r3
 8013d22:	4770      	bx	lr

08013d24 <__retarget_lock_acquire_recursive>:
 8013d24:	4770      	bx	lr

08013d26 <__retarget_lock_release_recursive>:
 8013d26:	4770      	bx	lr

08013d28 <_init>:
 8013d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d2a:	bf00      	nop
 8013d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d2e:	bc08      	pop	{r3}
 8013d30:	469e      	mov	lr, r3
 8013d32:	4770      	bx	lr

08013d34 <_fini>:
 8013d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d36:	bf00      	nop
 8013d38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013d3a:	bc08      	pop	{r3}
 8013d3c:	469e      	mov	lr, r3
 8013d3e:	4770      	bx	lr
