
Looper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013af0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c8  08013cc0  08013cc0  00023cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015e88  08015e88  000300e8  2**0
                  CONTENTS
  4 .ARM          00000008  08015e88  08015e88  00025e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08015e90  08015e90  000300e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08015e90  08015e90  00025e90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015e94  08015e94  00025e94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000e8  20000000  08015e98  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000096a4  200000e8  08015f80  000300e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  2000978c  08015f80  0003978c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000358e6  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006c90  00000000  00000000  000659fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002a50  00000000  00000000  0006c690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000027c0  00000000  00000000  0006f0e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00030474  00000000  00000000  000718a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003261b  00000000  00000000  000a1d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112f4c  00000000  00000000  000d432f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001e727b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b524  00000000  00000000  001e72d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000e8 	.word	0x200000e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08013ca8 	.word	0x08013ca8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000ec 	.word	0x200000ec
 800020c:	08013ca8 	.word	0x08013ca8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <uint32toArray>:

/*--------------------------------*/
char data_char[5];
uint8_t data_uint[4];

void uint32toArray(uint32_t v, uint8_t *data) {
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	//little endian
	data[0] = (v & 0xff);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	b2da      	uxtb	r2, r3
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	701a      	strb	r2, [r3, #0]
	data[1] = (v & 0xff00) >> 8;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	0a1a      	lsrs	r2, r3, #8
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	3301      	adds	r3, #1
 80005d2:	b2d2      	uxtb	r2, r2
 80005d4:	701a      	strb	r2, [r3, #0]
	data[3] = (v & 0xff0000) >> 16;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	0c1a      	lsrs	r2, r3, #16
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	3303      	adds	r3, #3
 80005de:	b2d2      	uxtb	r2, r2
 80005e0:	701a      	strb	r2, [r3, #0]
	data[4] = (v & 0xff000000) >> 24;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	0e1a      	lsrs	r2, r3, #24
 80005e6:	683b      	ldr	r3, [r7, #0]
 80005e8:	3304      	adds	r3, #4
 80005ea:	b2d2      	uxtb	r2, r2
 80005ec:	701a      	strb	r2, [r3, #0]
}
 80005ee:	bf00      	nop
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <uint16toArray>:

void uint16toArray(uint32_t v, uint8_t *data) {
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
 8000602:	6039      	str	r1, [r7, #0]
	//little endian
	data[0] = (v & 0xff);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	b2da      	uxtb	r2, r3
 8000608:	683b      	ldr	r3, [r7, #0]
 800060a:	701a      	strb	r2, [r3, #0]
	data[1] = (v & 0xff00) >> 8;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	0a1a      	lsrs	r2, r3, #8
 8000610:	683b      	ldr	r3, [r7, #0]
 8000612:	3301      	adds	r3, #1
 8000614:	b2d2      	uxtb	r2, r2
 8000616:	701a      	strb	r2, [r3, #0]
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr

08000624 <CreateWaveFile>:

void CreateWaveFile(Sample *sample) {
 8000624:	b5b0      	push	{r4, r5, r7, lr}
 8000626:	b090      	sub	sp, #64	; 0x40
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */
	//Create file
	if (f_open(&(sample->fichier), strcat(sample->nom, ".WAV"),
 800062c:	687d      	ldr	r5, [r7, #4]
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	f503 740c 	add.w	r4, r3, #560	; 0x230
 8000634:	4620      	mov	r0, r4
 8000636:	f7ff fdeb 	bl	8000210 <strlen>
 800063a:	4603      	mov	r3, r0
 800063c:	4423      	add	r3, r4
 800063e:	4a68      	ldr	r2, [pc, #416]	; (80007e0 <CreateWaveFile+0x1bc>)
 8000640:	6810      	ldr	r0, [r2, #0]
 8000642:	6018      	str	r0, [r3, #0]
 8000644:	7912      	ldrb	r2, [r2, #4]
 8000646:	711a      	strb	r2, [r3, #4]
 8000648:	220a      	movs	r2, #10
 800064a:	4621      	mov	r1, r4
 800064c:	4628      	mov	r0, r5
 800064e:	f00e feb7 	bl	800f3c0 <f_open>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d002      	beq.n	800065e <CreateWaveFile+0x3a>
	FA_CREATE_ALWAYS | FA_WRITE) != FR_OK) {
		Error_Handler();
 8000658:	f001 fcbe 	bl	8001fd8 <Error_Handler>
			Error_Handler();
		} else {
			f_close(&(sample->fichier));
		}
	}
}
 800065c:	e0bc      	b.n	80007d8 <CreateWaveFile+0x1b4>
		sprintf(data_char, "RIFF");
 800065e:	4961      	ldr	r1, [pc, #388]	; (80007e4 <CreateWaveFile+0x1c0>)
 8000660:	4861      	ldr	r0, [pc, #388]	; (80007e8 <CreateWaveFile+0x1c4>)
 8000662:	f012 ff01 	bl	8013468 <siprintf>
 8000666:	4b60      	ldr	r3, [pc, #384]	; (80007e8 <CreateWaveFile+0x1c4>)
 8000668:	681b      	ldr	r3, [r3, #0]
		memcpy(wtext, (uint8_t*) data_char, 4);
 800066a:	60fb      	str	r3, [r7, #12]
		uint32toArray((uint32_t) 36, data_uint);
 800066c:	495f      	ldr	r1, [pc, #380]	; (80007ec <CreateWaveFile+0x1c8>)
 800066e:	2024      	movs	r0, #36	; 0x24
 8000670:	f7ff ffa2 	bl	80005b8 <uint32toArray>
		memcpy(wtext + 4, data_uint, 4);
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	3304      	adds	r3, #4
 800067a:	4a5c      	ldr	r2, [pc, #368]	; (80007ec <CreateWaveFile+0x1c8>)
 800067c:	6812      	ldr	r2, [r2, #0]
 800067e:	601a      	str	r2, [r3, #0]
		sprintf(data_char, "WAVE");
 8000680:	495b      	ldr	r1, [pc, #364]	; (80007f0 <CreateWaveFile+0x1cc>)
 8000682:	4859      	ldr	r0, [pc, #356]	; (80007e8 <CreateWaveFile+0x1c4>)
 8000684:	f012 fef0 	bl	8013468 <siprintf>
		memcpy(wtext + 8, (uint8_t*) data_char, 4);
 8000688:	f107 030c 	add.w	r3, r7, #12
 800068c:	3308      	adds	r3, #8
 800068e:	4a56      	ldr	r2, [pc, #344]	; (80007e8 <CreateWaveFile+0x1c4>)
 8000690:	6812      	ldr	r2, [r2, #0]
 8000692:	601a      	str	r2, [r3, #0]
		sprintf(data_char, "fmt ");
 8000694:	4957      	ldr	r1, [pc, #348]	; (80007f4 <CreateWaveFile+0x1d0>)
 8000696:	4854      	ldr	r0, [pc, #336]	; (80007e8 <CreateWaveFile+0x1c4>)
 8000698:	f012 fee6 	bl	8013468 <siprintf>
		memcpy(wtext + 12, (uint8_t*) data_char, 4);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	330c      	adds	r3, #12
 80006a2:	4a51      	ldr	r2, [pc, #324]	; (80007e8 <CreateWaveFile+0x1c4>)
 80006a4:	6812      	ldr	r2, [r2, #0]
 80006a6:	601a      	str	r2, [r3, #0]
		uint32toArray((uint32_t) 16, data_uint);
 80006a8:	4950      	ldr	r1, [pc, #320]	; (80007ec <CreateWaveFile+0x1c8>)
 80006aa:	2010      	movs	r0, #16
 80006ac:	f7ff ff84 	bl	80005b8 <uint32toArray>
		memcpy(wtext + 16, data_uint, 4);
 80006b0:	f107 030c 	add.w	r3, r7, #12
 80006b4:	3310      	adds	r3, #16
 80006b6:	4a4d      	ldr	r2, [pc, #308]	; (80007ec <CreateWaveFile+0x1c8>)
 80006b8:	6812      	ldr	r2, [r2, #0]
 80006ba:	601a      	str	r2, [r3, #0]
		uint16toArray((uint16_t) 1, data_uint);
 80006bc:	494b      	ldr	r1, [pc, #300]	; (80007ec <CreateWaveFile+0x1c8>)
 80006be:	2001      	movs	r0, #1
 80006c0:	f7ff ff9b 	bl	80005fa <uint16toArray>
		memcpy(wtext + 20, data_uint, 2);
 80006c4:	f107 030c 	add.w	r3, r7, #12
 80006c8:	3314      	adds	r3, #20
 80006ca:	4a48      	ldr	r2, [pc, #288]	; (80007ec <CreateWaveFile+0x1c8>)
 80006cc:	8812      	ldrh	r2, [r2, #0]
 80006ce:	b292      	uxth	r2, r2
 80006d0:	801a      	strh	r2, [r3, #0]
		uint16toArray((uint16_t) sample->numchannels, data_uint);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 80006d8:	4944      	ldr	r1, [pc, #272]	; (80007ec <CreateWaveFile+0x1c8>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff ff8d 	bl	80005fa <uint16toArray>
		memcpy(wtext + 22, data_uint, 2);
 80006e0:	f107 030c 	add.w	r3, r7, #12
 80006e4:	3316      	adds	r3, #22
 80006e6:	4a41      	ldr	r2, [pc, #260]	; (80007ec <CreateWaveFile+0x1c8>)
 80006e8:	8812      	ldrh	r2, [r2, #0]
 80006ea:	b292      	uxth	r2, r2
 80006ec:	801a      	strh	r2, [r3, #0]
		uint32toArray((uint32_t) sample->samplerate, data_uint);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 80006f4:	493d      	ldr	r1, [pc, #244]	; (80007ec <CreateWaveFile+0x1c8>)
 80006f6:	4618      	mov	r0, r3
 80006f8:	f7ff ff5e 	bl	80005b8 <uint32toArray>
		memcpy(wtext + 24, data_uint, 4);
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	3318      	adds	r3, #24
 8000702:	4a3a      	ldr	r2, [pc, #232]	; (80007ec <CreateWaveFile+0x1c8>)
 8000704:	6812      	ldr	r2, [r2, #0]
 8000706:	601a      	str	r2, [r3, #0]
				(uint32_t) sample->samplerate * sample->samplelength
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8b3 323a 	ldrh.w	r3, [r3, #570]	; 0x23a
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8000716:	fb03 f302 	mul.w	r3, r3, r2
						* sample->numchannels, data_uint);
 800071a:	687a      	ldr	r2, [r7, #4]
 800071c:	f892 223d 	ldrb.w	r2, [r2, #573]	; 0x23d
		uint32toArray(
 8000720:	fb02 f303 	mul.w	r3, r2, r3
 8000724:	4931      	ldr	r1, [pc, #196]	; (80007ec <CreateWaveFile+0x1c8>)
 8000726:	4618      	mov	r0, r3
 8000728:	f7ff ff46 	bl	80005b8 <uint32toArray>
		memcpy(wtext + 28, data_uint, 4);
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	331c      	adds	r3, #28
 8000732:	4a2e      	ldr	r2, [pc, #184]	; (80007ec <CreateWaveFile+0x1c8>)
 8000734:	6812      	ldr	r2, [r2, #0]
 8000736:	601a      	str	r2, [r3, #0]
		uint16toArray((uint16_t) sample->samplelength * sample->numchannels,
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 800073e:	461a      	mov	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 8000746:	fb03 f302 	mul.w	r3, r3, r2
 800074a:	4928      	ldr	r1, [pc, #160]	; (80007ec <CreateWaveFile+0x1c8>)
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ff54 	bl	80005fa <uint16toArray>
		memcpy(wtext + 32, data_uint, 2);
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	3320      	adds	r3, #32
 8000758:	4a24      	ldr	r2, [pc, #144]	; (80007ec <CreateWaveFile+0x1c8>)
 800075a:	8812      	ldrh	r2, [r2, #0]
 800075c:	b292      	uxth	r2, r2
 800075e:	801a      	strh	r2, [r3, #0]
		uint16toArray((uint16_t) 8 * sample->samplelength, data_uint);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8000766:	00db      	lsls	r3, r3, #3
 8000768:	4920      	ldr	r1, [pc, #128]	; (80007ec <CreateWaveFile+0x1c8>)
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff45 	bl	80005fa <uint16toArray>
		memcpy(wtext + 34, data_uint, 2);
 8000770:	f107 030c 	add.w	r3, r7, #12
 8000774:	3322      	adds	r3, #34	; 0x22
 8000776:	4a1d      	ldr	r2, [pc, #116]	; (80007ec <CreateWaveFile+0x1c8>)
 8000778:	8812      	ldrh	r2, [r2, #0]
 800077a:	b292      	uxth	r2, r2
 800077c:	801a      	strh	r2, [r3, #0]
		sprintf(data_char, "data");
 800077e:	491e      	ldr	r1, [pc, #120]	; (80007f8 <CreateWaveFile+0x1d4>)
 8000780:	4819      	ldr	r0, [pc, #100]	; (80007e8 <CreateWaveFile+0x1c4>)
 8000782:	f012 fe71 	bl	8013468 <siprintf>
		memcpy(wtext + 36, (uint8_t*) data_char, 4);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	3324      	adds	r3, #36	; 0x24
 800078c:	4a16      	ldr	r2, [pc, #88]	; (80007e8 <CreateWaveFile+0x1c4>)
 800078e:	6812      	ldr	r2, [r2, #0]
 8000790:	601a      	str	r2, [r3, #0]
		uint32toArray((uint32_t) 0, data_uint);
 8000792:	4916      	ldr	r1, [pc, #88]	; (80007ec <CreateWaveFile+0x1c8>)
 8000794:	2000      	movs	r0, #0
 8000796:	f7ff ff0f 	bl	80005b8 <uint32toArray>
		memcpy(wtext + 40, data_uint, 4);
 800079a:	f107 030c 	add.w	r3, r7, #12
 800079e:	3328      	adds	r3, #40	; 0x28
 80007a0:	4a12      	ldr	r2, [pc, #72]	; (80007ec <CreateWaveFile+0x1c8>)
 80007a2:	6812      	ldr	r2, [r2, #0]
 80007a4:	601a      	str	r2, [r3, #0]
		res = f_write(&(sample->fichier), wtext, 44, (void*) &byteswritten);
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80007ac:	f107 010c 	add.w	r1, r7, #12
 80007b0:	222c      	movs	r2, #44	; 0x2c
 80007b2:	f00e ffc6 	bl	800f742 <f_write>
 80007b6:	4603      	mov	r3, r0
 80007b8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if ((byteswritten == 0) || (res != FR_OK)) {
 80007bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d003      	beq.n	80007ca <CreateWaveFile+0x1a6>
 80007c2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d002      	beq.n	80007d0 <CreateWaveFile+0x1ac>
			Error_Handler();
 80007ca:	f001 fc05 	bl	8001fd8 <Error_Handler>
}
 80007ce:	e003      	b.n	80007d8 <CreateWaveFile+0x1b4>
			f_close(&(sample->fichier));
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	4618      	mov	r0, r3
 80007d4:	f00f f9e2 	bl	800fb9c <f_close>
}
 80007d8:	bf00      	nop
 80007da:	3740      	adds	r7, #64	; 0x40
 80007dc:	46bd      	mov	sp, r7
 80007de:	bdb0      	pop	{r4, r5, r7, pc}
 80007e0:	08013cc0 	.word	0x08013cc0
 80007e4:	08013cc8 	.word	0x08013cc8
 80007e8:	20008890 	.word	0x20008890
 80007ec:	2000888c 	.word	0x2000888c
 80007f0:	08013cd0 	.word	0x08013cd0
 80007f4:	08013cd8 	.word	0x08013cd8
 80007f8:	08013ce0 	.word	0x08013ce0

080007fc <AddData>:

void AddData(Sample* sample, uint8_t* data) {
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	6039      	str	r1, [r7, #0]

	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */
	if (f_open(&(sample->fichier), sample->nom,
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f503 730c 	add.w	r3, r3, #560	; 0x230
 800080e:	2232      	movs	r2, #50	; 0x32
 8000810:	4619      	mov	r1, r3
 8000812:	f00e fdd5 	bl	800f3c0 <f_open>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d002      	beq.n	8000822 <AddData+0x26>
	FA_OPEN_APPEND | FA_WRITE) != FR_OK) {
		Error_Handler();
 800081c:	f001 fbdc 	bl	8001fd8 <Error_Handler>
			sample->numsamples += strlen((char*) data)
					/ (sample->numchannels * sample->samplelength);
			f_close(&(sample->fichier));
		}
	}
}
 8000820:	e034      	b.n	800088c <AddData+0x90>
		uint16_t a = strlen((char*) data);
 8000822:	6838      	ldr	r0, [r7, #0]
 8000824:	f7ff fcf4 	bl	8000210 <strlen>
 8000828:	4603      	mov	r3, r0
 800082a:	81fb      	strh	r3, [r7, #14]
		res = f_write(&(sample->fichier), data, strlen((char*) data),
 800082c:	687c      	ldr	r4, [r7, #4]
 800082e:	6838      	ldr	r0, [r7, #0]
 8000830:	f7ff fcee 	bl	8000210 <strlen>
 8000834:	4602      	mov	r2, r0
 8000836:	f107 0308 	add.w	r3, r7, #8
 800083a:	6839      	ldr	r1, [r7, #0]
 800083c:	4620      	mov	r0, r4
 800083e:	f00e ff80 	bl	800f742 <f_write>
 8000842:	4603      	mov	r3, r0
 8000844:	737b      	strb	r3, [r7, #13]
		if ((byteswritten == 0) || (res != FR_OK)) {
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d002      	beq.n	8000852 <AddData+0x56>
 800084c:	7b7b      	ldrb	r3, [r7, #13]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d002      	beq.n	8000858 <AddData+0x5c>
			Error_Handler();
 8000852:	f001 fbc1 	bl	8001fd8 <Error_Handler>
}
 8000856:	e019      	b.n	800088c <AddData+0x90>
			sample->numsamples += strlen((char*) data)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f8d3 4240 	ldr.w	r4, [r3, #576]	; 0x240
 800085e:	6838      	ldr	r0, [r7, #0]
 8000860:	f7ff fcd6 	bl	8000210 <strlen>
 8000864:	4602      	mov	r2, r0
					/ (sample->numchannels * sample->samplelength);
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	f893 323d 	ldrb.w	r3, [r3, #573]	; 0x23d
 800086c:	4619      	mov	r1, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f893 323c 	ldrb.w	r3, [r3, #572]	; 0x23c
 8000874:	fb03 f301 	mul.w	r3, r3, r1
 8000878:	fbb2 f3f3 	udiv	r3, r2, r3
			sample->numsamples += strlen((char*) data)
 800087c:	18e2      	adds	r2, r4, r3
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
			f_close(&(sample->fichier));
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4618      	mov	r0, r3
 8000888:	f00f f988 	bl	800fb9c <f_close>
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	bd90      	pop	{r4, r7, pc}

08000894 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80008a2:	b480      	push	{r7}
 80008a4:	b083      	sub	sp, #12
 80008a6:	af00      	add	r7, sp, #0
 80008a8:	6078      	str	r0, [r7, #4]
 80008aa:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80008ac:	bf00      	nop
 80008ae:	370c      	adds	r7, #12
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
	...

080008c8 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	4a07      	ldr	r2, [pc, #28]	; (80008f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80008d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80008da:	68bb      	ldr	r3, [r7, #8]
 80008dc:	4a06      	ldr	r2, [pc, #24]	; (80008f8 <vApplicationGetIdleTaskMemory+0x30>)
 80008de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2280      	movs	r2, #128	; 0x80
 80008e4:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 80008e6:	bf00      	nop
 80008e8:	3714      	adds	r7, #20
 80008ea:	46bd      	mov	sp, r7
 80008ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	20000104 	.word	0x20000104
 80008f8:	20000158 	.word	0x20000158

080008fc <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000906:	20c8      	movs	r0, #200	; 0xc8
 8000908:	f001 fd78 	bl	80023fc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 800090c:	f000 f9b4 	bl	8000c78 <ft5336_I2C_InitializeIfRequired>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}

08000918 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
 800091e:	4603      	mov	r3, r0
 8000920:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000922:	bf00      	nop
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b084      	sub	sp, #16
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000938:	2300      	movs	r3, #0
 800093a:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000940:	2300      	movs	r3, #0
 8000942:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000944:	f000 f998 	bl	8000c78 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000948:	2300      	movs	r3, #0
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e010      	b.n	8000970 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800094e:	88fb      	ldrh	r3, [r7, #6]
 8000950:	b2db      	uxtb	r3, r3
 8000952:	21a8      	movs	r1, #168	; 0xa8
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fd33 	bl	80023c0 <TS_IO_Read>
 800095a:	4603      	mov	r3, r0
 800095c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800095e:	7b7b      	ldrb	r3, [r7, #13]
 8000960:	b2db      	uxtb	r3, r3
 8000962:	2b51      	cmp	r3, #81	; 0x51
 8000964:	d101      	bne.n	800096a <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000966:	2301      	movs	r3, #1
 8000968:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800096a:	7bfb      	ldrb	r3, [r7, #15]
 800096c:	3301      	adds	r3, #1
 800096e:	73fb      	strb	r3, [r7, #15]
 8000970:	7bfb      	ldrb	r3, [r7, #15]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d802      	bhi.n	800097c <ft5336_ReadID+0x4e>
 8000976:	7bbb      	ldrb	r3, [r7, #14]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d0e8      	beq.n	800094e <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800097c:	7b7b      	ldrb	r3, [r7, #13]
 800097e:	b2db      	uxtb	r3, r3
 8000980:	b29b      	uxth	r3, r3
}
 8000982:	4618      	mov	r0, r3
 8000984:	3710      	adds	r7, #16
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}

0800098a <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800098a:	b580      	push	{r7, lr}
 800098c:	b082      	sub	sp, #8
 800098e:	af00      	add	r7, sp, #0
 8000990:	4603      	mov	r3, r0
 8000992:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000994:	88fb      	ldrh	r3, [r7, #6]
 8000996:	4618      	mov	r0, r3
 8000998:	f000 f97e 	bl	8000c98 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	4618      	mov	r0, r3
 80009a0:	f000 f932 	bl	8000c08 <ft5336_TS_DisableIT>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	4603      	mov	r3, r0
 80009b4:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80009b6:	2300      	movs	r3, #0
 80009b8:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80009ba:	88fb      	ldrh	r3, [r7, #6]
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2102      	movs	r1, #2
 80009c0:	4618      	mov	r0, r3
 80009c2:	f001 fcfd 	bl	80023c0 <TS_IO_Read>
 80009c6:	4603      	mov	r3, r0
 80009c8:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80009d6:	7bfb      	ldrb	r3, [r7, #15]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	2b05      	cmp	r3, #5
 80009dc:	d901      	bls.n	80009e2 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80009de:	2300      	movs	r3, #0
 80009e0:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80009e2:	7bfb      	ldrb	r3, [r7, #15]
 80009e4:	b2da      	uxtb	r2, r3
 80009e6:	4b05      	ldr	r3, [pc, #20]	; (80009fc <ft5336_TS_DetectTouch+0x50>)
 80009e8:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 80009ea:	4b04      	ldr	r3, [pc, #16]	; (80009fc <ft5336_TS_DetectTouch+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80009f0:	7bfb      	ldrb	r3, [r7, #15]
 80009f2:	b2db      	uxtb	r3, r3
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000358 	.word	0x20000358

08000a00 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b086      	sub	sp, #24
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	4603      	mov	r3, r0
 8000a08:	60b9      	str	r1, [r7, #8]
 8000a0a:	607a      	str	r2, [r7, #4]
 8000a0c:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000a22:	4b6d      	ldr	r3, [pc, #436]	; (8000bd8 <ft5336_TS_GetXY+0x1d8>)
 8000a24:	789a      	ldrb	r2, [r3, #2]
 8000a26:	4b6c      	ldr	r3, [pc, #432]	; (8000bd8 <ft5336_TS_GetXY+0x1d8>)
 8000a28:	785b      	ldrb	r3, [r3, #1]
 8000a2a:	429a      	cmp	r2, r3
 8000a2c:	f080 80cf 	bcs.w	8000bce <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 8000a30:	4b69      	ldr	r3, [pc, #420]	; (8000bd8 <ft5336_TS_GetXY+0x1d8>)
 8000a32:	789b      	ldrb	r3, [r3, #2]
 8000a34:	2b09      	cmp	r3, #9
 8000a36:	d871      	bhi.n	8000b1c <ft5336_TS_GetXY+0x11c>
 8000a38:	a201      	add	r2, pc, #4	; (adr r2, 8000a40 <ft5336_TS_GetXY+0x40>)
 8000a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a3e:	bf00      	nop
 8000a40:	08000a69 	.word	0x08000a69
 8000a44:	08000a7b 	.word	0x08000a7b
 8000a48:	08000a8d 	.word	0x08000a8d
 8000a4c:	08000a9f 	.word	0x08000a9f
 8000a50:	08000ab1 	.word	0x08000ab1
 8000a54:	08000ac3 	.word	0x08000ac3
 8000a58:	08000ad5 	.word	0x08000ad5
 8000a5c:	08000ae7 	.word	0x08000ae7
 8000a60:	08000af9 	.word	0x08000af9
 8000a64:	08000b0b 	.word	0x08000b0b
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000a68:	2304      	movs	r3, #4
 8000a6a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8000a70:	2306      	movs	r3, #6
 8000a72:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000a74:	2305      	movs	r3, #5
 8000a76:	753b      	strb	r3, [r7, #20]
      break;
 8000a78:	e051      	b.n	8000b1e <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000a7a:	230a      	movs	r3, #10
 8000a7c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 8000a7e:	2309      	movs	r3, #9
 8000a80:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8000a82:	230c      	movs	r3, #12
 8000a84:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8000a86:	230b      	movs	r3, #11
 8000a88:	753b      	strb	r3, [r7, #20]
      break;
 8000a8a:	e048      	b.n	8000b1e <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000a8c:	2310      	movs	r3, #16
 8000a8e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000a90:	230f      	movs	r3, #15
 8000a92:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000a94:	2312      	movs	r3, #18
 8000a96:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8000a98:	2311      	movs	r3, #17
 8000a9a:	753b      	strb	r3, [r7, #20]
      break;
 8000a9c:	e03f      	b.n	8000b1e <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000a9e:	2316      	movs	r3, #22
 8000aa0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000aa2:	2315      	movs	r3, #21
 8000aa4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8000aa6:	2318      	movs	r3, #24
 8000aa8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 8000aaa:	2317      	movs	r3, #23
 8000aac:	753b      	strb	r3, [r7, #20]
      break;
 8000aae:	e036      	b.n	8000b1e <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000ab0:	231c      	movs	r3, #28
 8000ab2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000ab4:	231b      	movs	r3, #27
 8000ab6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8000ab8:	231e      	movs	r3, #30
 8000aba:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000abc:	231d      	movs	r3, #29
 8000abe:	753b      	strb	r3, [r7, #20]
      break;
 8000ac0:	e02d      	b.n	8000b1e <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000ac2:	2322      	movs	r3, #34	; 0x22
 8000ac4:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8000ac6:	2321      	movs	r3, #33	; 0x21
 8000ac8:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 8000aca:	2324      	movs	r3, #36	; 0x24
 8000acc:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000ace:	2323      	movs	r3, #35	; 0x23
 8000ad0:	753b      	strb	r3, [r7, #20]
      break;
 8000ad2:	e024      	b.n	8000b1e <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000ad4:	2328      	movs	r3, #40	; 0x28
 8000ad6:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8000ad8:	2327      	movs	r3, #39	; 0x27
 8000ada:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000adc:	232a      	movs	r3, #42	; 0x2a
 8000ade:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000ae0:	2329      	movs	r3, #41	; 0x29
 8000ae2:	753b      	strb	r3, [r7, #20]
      break;
 8000ae4:	e01b      	b.n	8000b1e <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000ae6:	232e      	movs	r3, #46	; 0x2e
 8000ae8:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000aea:	232d      	movs	r3, #45	; 0x2d
 8000aec:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000aee:	2330      	movs	r3, #48	; 0x30
 8000af0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000af2:	232f      	movs	r3, #47	; 0x2f
 8000af4:	753b      	strb	r3, [r7, #20]
      break;
 8000af6:	e012      	b.n	8000b1e <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000af8:	2334      	movs	r3, #52	; 0x34
 8000afa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000afc:	2333      	movs	r3, #51	; 0x33
 8000afe:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000b00:	2336      	movs	r3, #54	; 0x36
 8000b02:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000b04:	2335      	movs	r3, #53	; 0x35
 8000b06:	753b      	strb	r3, [r7, #20]
      break;
 8000b08:	e009      	b.n	8000b1e <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000b0a:	233a      	movs	r3, #58	; 0x3a
 8000b0c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000b0e:	2339      	movs	r3, #57	; 0x39
 8000b10:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000b12:	233c      	movs	r3, #60	; 0x3c
 8000b14:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000b16:	233b      	movs	r3, #59	; 0x3b
 8000b18:	753b      	strb	r3, [r7, #20]
      break;
 8000b1a:	e000      	b.n	8000b1e <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000b1c:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000b1e:	89fb      	ldrh	r3, [r7, #14]
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	7dfa      	ldrb	r2, [r7, #23]
 8000b24:	4611      	mov	r1, r2
 8000b26:	4618      	mov	r0, r3
 8000b28:	f001 fc4a 	bl	80023c0 <TS_IO_Read>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000b30:	7cfb      	ldrb	r3, [r7, #19]
 8000b32:	b2db      	uxtb	r3, r3
 8000b34:	b29a      	uxth	r2, r3
 8000b36:	4b29      	ldr	r3, [pc, #164]	; (8000bdc <ft5336_TS_GetXY+0x1dc>)
 8000b38:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000b3a:	89fb      	ldrh	r3, [r7, #14]
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	7dba      	ldrb	r2, [r7, #22]
 8000b40:	4611      	mov	r1, r2
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 fc3c 	bl	80023c0 <TS_IO_Read>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000b4c:	7cfb      	ldrb	r3, [r7, #19]
 8000b4e:	b2db      	uxtb	r3, r3
 8000b50:	021b      	lsls	r3, r3, #8
 8000b52:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	4b20      	ldr	r3, [pc, #128]	; (8000bdc <ft5336_TS_GetXY+0x1dc>)
 8000b5a:	881b      	ldrh	r3, [r3, #0]
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <ft5336_TS_GetXY+0x1dc>)
 8000b66:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000b68:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <ft5336_TS_GetXY+0x1dc>)
 8000b6a:	881a      	ldrh	r2, [r3, #0]
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8000b70:	89fb      	ldrh	r3, [r7, #14]
 8000b72:	b2db      	uxtb	r3, r3
 8000b74:	7d7a      	ldrb	r2, [r7, #21]
 8000b76:	4611      	mov	r1, r2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f001 fc21 	bl	80023c0 <TS_IO_Read>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8000b82:	7cfb      	ldrb	r3, [r7, #19]
 8000b84:	b2db      	uxtb	r3, r3
 8000b86:	b29a      	uxth	r2, r3
 8000b88:	4b14      	ldr	r3, [pc, #80]	; (8000bdc <ft5336_TS_GetXY+0x1dc>)
 8000b8a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000b8c:	89fb      	ldrh	r3, [r7, #14]
 8000b8e:	b2db      	uxtb	r3, r3
 8000b90:	7d3a      	ldrb	r2, [r7, #20]
 8000b92:	4611      	mov	r1, r2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 fc13 	bl	80023c0 <TS_IO_Read>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000b9e:	7cfb      	ldrb	r3, [r7, #19]
 8000ba0:	b2db      	uxtb	r3, r3
 8000ba2:	021b      	lsls	r3, r3, #8
 8000ba4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000ba8:	b21a      	sxth	r2, r3
 8000baa:	4b0c      	ldr	r3, [pc, #48]	; (8000bdc <ft5336_TS_GetXY+0x1dc>)
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	b21b      	sxth	r3, r3
 8000bb0:	4313      	orrs	r3, r2
 8000bb2:	b21b      	sxth	r3, r3
 8000bb4:	b29a      	uxth	r2, r3
 8000bb6:	4b09      	ldr	r3, [pc, #36]	; (8000bdc <ft5336_TS_GetXY+0x1dc>)
 8000bb8:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <ft5336_TS_GetXY+0x1dc>)
 8000bbc:	881a      	ldrh	r2, [r3, #0]
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000bc2:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <ft5336_TS_GetXY+0x1d8>)
 8000bc4:	789b      	ldrb	r3, [r3, #2]
 8000bc6:	3301      	adds	r3, #1
 8000bc8:	b2da      	uxtb	r2, r3
 8000bca:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <ft5336_TS_GetXY+0x1d8>)
 8000bcc:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000358 	.word	0x20000358
 8000bdc:	2000035c 	.word	0x2000035c

08000be0 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000bea:	2300      	movs	r3, #0
 8000bec:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000bee:	2301      	movs	r3, #1
 8000bf0:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000bf2:	88fb      	ldrh	r3, [r7, #6]
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	7bfa      	ldrb	r2, [r7, #15]
 8000bf8:	21a4      	movs	r1, #164	; 0xa4
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fbc6 	bl	800238c <TS_IO_Write>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	4603      	mov	r3, r0
 8000c10:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000c16:	2300      	movs	r3, #0
 8000c18:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000c1a:	88fb      	ldrh	r3, [r7, #6]
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	7bfa      	ldrb	r2, [r7, #15]
 8000c20:	21a4      	movs	r1, #164	; 0xa4
 8000c22:	4618      	mov	r0, r3
 8000c24:	f001 fbb2 	bl	800238c <TS_IO_Write>
}
 8000c28:	bf00      	nop
 8000c2a:	3710      	adds	r7, #16
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000c3a:	2300      	movs	r3, #0
}
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr

08000c48 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	4603      	mov	r3, r0
 8000c50:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8000c60:	b480      	push	{r7}
 8000c62:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000c64:	4b03      	ldr	r3, [pc, #12]	; (8000c74 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	20000358 	.word	0x20000358

08000c78 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000c7c:	f7ff fff0 	bl	8000c60 <ft5336_Get_I2C_InitializedStatus>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d104      	bne.n	8000c90 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8000c86:	f001 fb77 	bl	8002378 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 8000c8a:	4b02      	ldr	r3, [pc, #8]	; (8000c94 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000c8c:	2201      	movs	r2, #1
 8000c8e:	701a      	strb	r2, [r3, #0]
  }
}
 8000c90:	bf00      	nop
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000358 	.word	0x20000358

08000c98 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8000ca6:	68fb      	ldr	r3, [r7, #12]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3714      	adds	r7, #20
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr

08000cb4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000cb8:	f3bf 8f4f 	dsb	sy
}
 8000cbc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cbe:	f3bf 8f6f 	isb	sy
}
 8000cc2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000cc4:	4b0d      	ldr	r3, [pc, #52]	; (8000cfc <SCB_EnableICache+0x48>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000ccc:	f3bf 8f4f 	dsb	sy
}
 8000cd0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cd2:	f3bf 8f6f 	isb	sy
}
 8000cd6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000cd8:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <SCB_EnableICache+0x48>)
 8000cda:	695b      	ldr	r3, [r3, #20]
 8000cdc:	4a07      	ldr	r2, [pc, #28]	; (8000cfc <SCB_EnableICache+0x48>)
 8000cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ce4:	f3bf 8f4f 	dsb	sy
}
 8000ce8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cea:	f3bf 8f6f 	isb	sy
}
 8000cee:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b085      	sub	sp, #20
 8000d04:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000d06:	4b1f      	ldr	r3, [pc, #124]	; (8000d84 <SCB_EnableDCache+0x84>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000d0e:	f3bf 8f4f 	dsb	sy
}
 8000d12:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000d14:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <SCB_EnableDCache+0x84>)
 8000d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000d1a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	0b5b      	lsrs	r3, r3, #13
 8000d20:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000d24:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	08db      	lsrs	r3, r3, #3
 8000d2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000d2e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	015a      	lsls	r2, r3, #5
 8000d34:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000d38:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000d3a:	68ba      	ldr	r2, [r7, #8]
 8000d3c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000d3e:	4911      	ldr	r1, [pc, #68]	; (8000d84 <SCB_EnableDCache+0x84>)
 8000d40:	4313      	orrs	r3, r2
 8000d42:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	1e5a      	subs	r2, r3, #1
 8000d4a:	60ba      	str	r2, [r7, #8]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d1ef      	bne.n	8000d30 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	1e5a      	subs	r2, r3, #1
 8000d54:	60fa      	str	r2, [r7, #12]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1e5      	bne.n	8000d26 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000d5a:	f3bf 8f4f 	dsb	sy
}
 8000d5e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000d60:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <SCB_EnableDCache+0x84>)
 8000d62:	695b      	ldr	r3, [r3, #20]
 8000d64:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <SCB_EnableDCache+0x84>)
 8000d66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d6a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000d6c:	f3bf 8f4f 	dsb	sy
}
 8000d70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000d72:	f3bf 8f6f 	isb	sy
}
 8000d76:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000d78:	bf00      	nop
 8000d7a:	3714      	adds	r7, #20
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	e000ed00 	.word	0xe000ed00

08000d88 <RL_sep>:
void StartDefaultTask(void const *argument);
void SDTask(void const *argument);
void AudioTask(void const *argument);

/* USER CODE BEGIN PFP */
void RL_sep(uint16_t *buffer, uint16_t size) {
 8000d88:	b480      	push	{r7}
 8000d8a:	b085      	sub	sp, #20
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
 8000d90:	460b      	mov	r3, r1
 8000d92:	807b      	strh	r3, [r7, #2]
	uint16_t j = 0, k = 0;
 8000d94:	2300      	movs	r3, #0
 8000d96:	81fb      	strh	r3, [r7, #14]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	81bb      	strh	r3, [r7, #12]
	for (size_t i = 0; i < size; i++) {
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	e022      	b.n	8000de8 <RL_sep+0x60>
		if (i % 2) {
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	f003 0301 	and.w	r3, r3, #1
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d00d      	beq.n	8000dc8 <RL_sep+0x40>
			((uint16_t*) AUDIO_BUFFER_R)[j] = buffer[i];
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	441a      	add	r2, r3
 8000db4:	89fb      	ldrh	r3, [r7, #14]
 8000db6:	0059      	lsls	r1, r3, #1
 8000db8:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <RL_sep+0x78>)
 8000dba:	440b      	add	r3, r1
 8000dbc:	8812      	ldrh	r2, [r2, #0]
 8000dbe:	801a      	strh	r2, [r3, #0]
			j++;
 8000dc0:	89fb      	ldrh	r3, [r7, #14]
 8000dc2:	3301      	adds	r3, #1
 8000dc4:	81fb      	strh	r3, [r7, #14]
 8000dc6:	e00c      	b.n	8000de2 <RL_sep+0x5a>
		} else {
			((uint16_t*) AUDIO_BUFFER_L)[k] = buffer[i];
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	005b      	lsls	r3, r3, #1
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	441a      	add	r2, r3
 8000dd0:	89bb      	ldrh	r3, [r7, #12]
 8000dd2:	0059      	lsls	r1, r3, #1
 8000dd4:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <RL_sep+0x7c>)
 8000dd6:	440b      	add	r3, r1
 8000dd8:	8812      	ldrh	r2, [r2, #0]
 8000dda:	801a      	strh	r2, [r3, #0]
			k++;
 8000ddc:	89bb      	ldrh	r3, [r7, #12]
 8000dde:	3301      	adds	r3, #1
 8000de0:	81bb      	strh	r3, [r7, #12]
	for (size_t i = 0; i < size; i++) {
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	3301      	adds	r3, #1
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	887b      	ldrh	r3, [r7, #2]
 8000dea:	68ba      	ldr	r2, [r7, #8]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d3d8      	bcc.n	8000da2 <RL_sep+0x1a>
		}
	}
}
 8000df0:	bf00      	nop
 8000df2:	bf00      	nop
 8000df4:	3714      	adds	r7, #20
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	c0080000 	.word	0xc0080000
 8000e04:	c0080200 	.word	0xc0080200

08000e08 <treatment>:
			k++;
		}
	}
}

void treatment() {
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
	for (size_t i = 0; i < AUDIO_BLOCK_SIZE / 2; i++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	e013      	b.n	8000e3c <treatment+0x34>
		((uint16_t*) AUDIO_POST)[i] = ((uint16_t*) AUDIO_BUFFER_L)[i]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	005a      	lsls	r2, r3, #1
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <treatment+0x48>)
 8000e1a:	4413      	add	r3, r2
 8000e1c:	8819      	ldrh	r1, [r3, #0]
				+ ((uint16_t*) AUDIO_BUFFER_R)[i];
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	005a      	lsls	r2, r3, #1
 8000e22:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <treatment+0x4c>)
 8000e24:	4413      	add	r3, r2
 8000e26:	881a      	ldrh	r2, [r3, #0]
		((uint16_t*) AUDIO_POST)[i] = ((uint16_t*) AUDIO_BUFFER_L)[i]
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	0058      	lsls	r0, r3, #1
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <treatment+0x50>)
 8000e2e:	4403      	add	r3, r0
				+ ((uint16_t*) AUDIO_BUFFER_R)[i];
 8000e30:	440a      	add	r2, r1
 8000e32:	b292      	uxth	r2, r2
		((uint16_t*) AUDIO_POST)[i] = ((uint16_t*) AUDIO_BUFFER_L)[i]
 8000e34:	801a      	strh	r2, [r3, #0]
	for (size_t i = 0; i < AUDIO_BLOCK_SIZE / 2; i++) {
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	3301      	adds	r3, #1
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2bff      	cmp	r3, #255	; 0xff
 8000e40:	d9e8      	bls.n	8000e14 <treatment+0xc>
	}
}
 8000e42:	bf00      	nop
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	c0080200 	.word	0xc0080200
 8000e54:	c0080000 	.word	0xc0080000
 8000e58:	c0080400 	.word	0xc0080400

08000e5c <RL_cat2>:

void RL_cat2(uint16_t *buffer, uint16_t size) {
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	807b      	strh	r3, [r7, #2]
	uint16_t j = 0, k = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	81fb      	strh	r3, [r7, #14]
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	81bb      	strh	r3, [r7, #12]
	for (size_t i = 0; i < size; i++) {
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
 8000e74:	e022      	b.n	8000ebc <RL_cat2+0x60>
		if (i % 2) {
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	f003 0301 	and.w	r3, r3, #1
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00d      	beq.n	8000e9c <RL_cat2+0x40>
			buffer[i] = ((uint16_t*) AUDIO_POST)[j];
 8000e80:	89fb      	ldrh	r3, [r7, #14]
 8000e82:	005a      	lsls	r2, r3, #1
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <RL_cat2+0x78>)
 8000e86:	4413      	add	r3, r2
 8000e88:	68ba      	ldr	r2, [r7, #8]
 8000e8a:	0052      	lsls	r2, r2, #1
 8000e8c:	6879      	ldr	r1, [r7, #4]
 8000e8e:	440a      	add	r2, r1
 8000e90:	881b      	ldrh	r3, [r3, #0]
 8000e92:	8013      	strh	r3, [r2, #0]
			j++;
 8000e94:	89fb      	ldrh	r3, [r7, #14]
 8000e96:	3301      	adds	r3, #1
 8000e98:	81fb      	strh	r3, [r7, #14]
 8000e9a:	e00c      	b.n	8000eb6 <RL_cat2+0x5a>
		} else {
			buffer[i] = ((uint16_t*) AUDIO_POST)[k];
 8000e9c:	89bb      	ldrh	r3, [r7, #12]
 8000e9e:	005a      	lsls	r2, r3, #1
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <RL_cat2+0x78>)
 8000ea2:	4413      	add	r3, r2
 8000ea4:	68ba      	ldr	r2, [r7, #8]
 8000ea6:	0052      	lsls	r2, r2, #1
 8000ea8:	6879      	ldr	r1, [r7, #4]
 8000eaa:	440a      	add	r2, r1
 8000eac:	881b      	ldrh	r3, [r3, #0]
 8000eae:	8013      	strh	r3, [r2, #0]
			k++;
 8000eb0:	89bb      	ldrh	r3, [r7, #12]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	81bb      	strh	r3, [r7, #12]
	for (size_t i = 0; i < size; i++) {
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	887b      	ldrh	r3, [r7, #2]
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	d3d8      	bcc.n	8000e76 <RL_cat2+0x1a>
		}
	}
}
 8000ec4:	bf00      	nop
 8000ec6:	bf00      	nop
 8000ec8:	3714      	adds	r7, #20
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	c0080400 	.word	0xc0080400

08000ed8 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000ed8:	b5b0      	push	{r4, r5, r7, lr}
 8000eda:	b096      	sub	sp, #88	; 0x58
 8000edc:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	uint8_t status = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	/* USER CODE END 1 */

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 8000ee4:	f7ff fee6 	bl	8000cb4 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8000ee8:	f7ff ff0a 	bl	8000d00 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000eec:	f004 fe0a 	bl	8005b04 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ef0:	f000 f8ca 	bl	8001088 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ef4:	f000 fba2 	bl	800163c <MX_GPIO_Init>
	MX_DMA_Init();
 8000ef8:	f000 fb1c 	bl	8001534 <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 8000efc:	f000 faca 	bl	8001494 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8000f00:	f00c f9ee 	bl	800d2e0 <MX_FATFS_Init>
	MX_FMC_Init();
 8000f04:	f000 fb4c 	bl	80015a0 <MX_FMC_Init>
	MX_LTDC_Init();
 8000f08:	f000 f99a 	bl	8001240 <MX_LTDC_Init>
	MX_USART1_UART_Init();
 8000f0c:	f000 fae2 	bl	80014d4 <MX_USART1_UART_Init>
	MX_DMA2D_Init();
 8000f10:	f000 f964 	bl	80011dc <MX_DMA2D_Init>
	MX_SAI2_Init();
 8000f14:	f000 fa16 	bl	8001344 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000f18:	f001 fe90 	bl	8002c3c <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000f1c:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000f20:	2000      	movs	r0, #0
 8000f22:	f001 ff23 	bl	8002d6c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
	LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000f26:	f001 fef9 	bl	8002d1c <BSP_LCD_GetXSize>
 8000f2a:	4604      	mov	r4, r0
 8000f2c:	f001 ff0a 	bl	8002d44 <BSP_LCD_GetYSize>
 8000f30:	4603      	mov	r3, r0
 8000f32:	fb03 f304 	mul.w	r3, r3, r4
 8000f36:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f001 ff14 	bl	8002d6c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000f44:	f002 f94a 	bl	80031dc <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f001 ff6f 	bl	8002e2c <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000f4e:	f04f 30ff 	mov.w	r0, #4294967295
 8000f52:	f001 ffc7 	bl	8002ee4 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000f56:	4840      	ldr	r0, [pc, #256]	; (8001058 <main+0x180>)
 8000f58:	f001 ffaa 	bl	8002eb0 <BSP_LCD_SetFont>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f60:	f001 ff8c 	bl	8002e7c <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_LIGHTBLUE);
 8000f64:	483d      	ldr	r0, [pc, #244]	; (800105c <main+0x184>)
 8000f66:	f001 ff71 	bl	8002e4c <BSP_LCD_SetTextColor>

	status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000f6a:	f001 fed7 	bl	8002d1c <BSP_LCD_GetXSize>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	b29c      	uxth	r4, r3
 8000f72:	f001 fee7 	bl	8002d44 <BSP_LCD_GetYSize>
 8000f76:	4603      	mov	r3, r0
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4620      	mov	r0, r4
 8000f7e:	f002 fcfb 	bl	8003978 <BSP_TS_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (status != TS_OK) {
 8000f88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d01d      	beq.n	8000fcc <main+0xf4>
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8000f90:	f04f 30ff 	mov.w	r0, #4294967295
 8000f94:	f001 ff72 	bl	8002e7c <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_RED);
 8000f98:	4831      	ldr	r0, [pc, #196]	; (8001060 <main+0x188>)
 8000f9a:	f001 ff57 	bl	8002e4c <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 95, (uint8_t*) "ERROR",
 8000f9e:	f001 fed1 	bl	8002d44 <BSP_LCD_GetYSize>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	3b5f      	subs	r3, #95	; 0x5f
 8000fa8:	b299      	uxth	r1, r3
 8000faa:	2301      	movs	r3, #1
 8000fac:	4a2d      	ldr	r2, [pc, #180]	; (8001064 <main+0x18c>)
 8000fae:	2000      	movs	r0, #0
 8000fb0:	f002 f804 	bl	8002fbc <BSP_LCD_DisplayStringAt>
				CENTER_MODE);
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 80,
 8000fb4:	f001 fec6 	bl	8002d44 <BSP_LCD_GetYSize>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	3b50      	subs	r3, #80	; 0x50
 8000fbe:	b299      	uxth	r1, r3
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	4a29      	ldr	r2, [pc, #164]	; (8001068 <main+0x190>)
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	f001 fff9 	bl	8002fbc <BSP_LCD_DisplayStringAt>
 8000fca:	e00a      	b.n	8000fe2 <main+0x10a>
				(uint8_t*) "Touchscreen cannot be initialized", CENTER_MODE);
	} else {
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 150,
 8000fcc:	f001 feba 	bl	8002d44 <BSP_LCD_GetYSize>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	b29b      	uxth	r3, r3
 8000fd4:	3b96      	subs	r3, #150	; 0x96
 8000fd6:	b299      	uxth	r1, r3
 8000fd8:	2301      	movs	r3, #1
 8000fda:	4a24      	ldr	r2, [pc, #144]	; (800106c <main+0x194>)
 8000fdc:	2000      	movs	r0, #0
 8000fde:	f001 ffed 	bl	8002fbc <BSP_LCD_DisplayStringAt>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* definition and creation of defaultTask */
	osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000fe2:	4b23      	ldr	r3, [pc, #140]	; (8001070 <main+0x198>)
 8000fe4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000fe8:	461d      	mov	r5, r3
 8000fea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ff2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000ff6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f00f fb1d 	bl	801063c <osThreadCreate>
 8001002:	4603      	mov	r3, r0
 8001004:	4a1b      	ldr	r2, [pc, #108]	; (8001074 <main+0x19c>)
 8001006:	6013      	str	r3, [r2, #0]

	/* definition and creation of SD */
	osThreadDef(SD, SDTask, osPriorityAboveNormal, 0, 4096);
 8001008:	4b1b      	ldr	r3, [pc, #108]	; (8001078 <main+0x1a0>)
 800100a:	f107 041c 	add.w	r4, r7, #28
 800100e:	461d      	mov	r5, r3
 8001010:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001012:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001014:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001018:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	SDHandle = osThreadCreate(osThread(SD), NULL);
 800101c:	f107 031c 	add.w	r3, r7, #28
 8001020:	2100      	movs	r1, #0
 8001022:	4618      	mov	r0, r3
 8001024:	f00f fb0a 	bl	801063c <osThreadCreate>
 8001028:	4603      	mov	r3, r0
 800102a:	4a14      	ldr	r2, [pc, #80]	; (800107c <main+0x1a4>)
 800102c:	6013      	str	r3, [r2, #0]

	/* definition and creation of Audio */
	osThreadDef(Audio, AudioTask, osPriorityNormal, 0, 2048);
 800102e:	4b14      	ldr	r3, [pc, #80]	; (8001080 <main+0x1a8>)
 8001030:	463c      	mov	r4, r7
 8001032:	461d      	mov	r5, r3
 8001034:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001036:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001038:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800103c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	AudioHandle = osThreadCreate(osThread(Audio), NULL);
 8001040:	463b      	mov	r3, r7
 8001042:	2100      	movs	r1, #0
 8001044:	4618      	mov	r0, r3
 8001046:	f00f faf9 	bl	801063c <osThreadCreate>
 800104a:	4603      	mov	r3, r0
 800104c:	4a0d      	ldr	r2, [pc, #52]	; (8001084 <main+0x1ac>)
 800104e:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* Start scheduler */
	osKernelStart();
 8001050:	f00f fad1 	bl	80105f6 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001054:	e7fe      	b.n	8001054 <main+0x17c>
 8001056:	bf00      	nop
 8001058:	20000034 	.word	0x20000034
 800105c:	ff8080ff 	.word	0xff8080ff
 8001060:	ffff0000 	.word	0xffff0000
 8001064:	08013d00 	.word	0x08013d00
 8001068:	08013d08 	.word	0x08013d08
 800106c:	08013d2c 	.word	0x08013d2c
 8001070:	08013d40 	.word	0x08013d40
 8001074:	2000891c 	.word	0x2000891c
 8001078:	08013d5c 	.word	0x08013d5c
 800107c:	20008a88 	.word	0x20008a88
 8001080:	08013d78 	.word	0x08013d78
 8001084:	20008fb8 	.word	0x20008fb8

08001088 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001088:	b580      	push	{r7, lr}
 800108a:	b0b4      	sub	sp, #208	; 0xd0
 800108c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800108e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001092:	2230      	movs	r2, #48	; 0x30
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f012 f9de 	bl	8013458 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800109c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]
 80010aa:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	2284      	movs	r2, #132	; 0x84
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f012 f9cf 	bl	8013458 <memset>

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80010ba:	f007 f87d 	bl	80081b8 <HAL_PWR_EnableBkUpAccess>
	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b44      	ldr	r3, [pc, #272]	; (80011d0 <SystemClock_Config+0x148>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c2:	4a43      	ldr	r2, [pc, #268]	; (80011d0 <SystemClock_Config+0x148>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c8:	6413      	str	r3, [r2, #64]	; 0x40
 80010ca:	4b41      	ldr	r3, [pc, #260]	; (80011d0 <SystemClock_Config+0x148>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d2:	607b      	str	r3, [r7, #4]
 80010d4:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d6:	4b3f      	ldr	r3, [pc, #252]	; (80011d4 <SystemClock_Config+0x14c>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a3e      	ldr	r2, [pc, #248]	; (80011d4 <SystemClock_Config+0x14c>)
 80010dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b3c      	ldr	r3, [pc, #240]	; (80011d4 <SystemClock_Config+0x14c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010ea:	603b      	str	r3, [r7, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ee:	2301      	movs	r3, #1
 80010f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010fc:	2302      	movs	r3, #2
 80010fe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001102:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001106:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLM = 25;
 800110a:	2319      	movs	r3, #25
 800110c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
	RCC_OscInitStruct.PLL.PLLN = 400;
 8001110:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001114:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001118:	2302      	movs	r3, #2
 800111a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	RCC_OscInitStruct.PLL.PLLQ = 9;
 800111e:	2309      	movs	r3, #9
 8001120:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001124:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001128:	4618      	mov	r0, r3
 800112a:	f007 f8a5 	bl	8008278 <HAL_RCC_OscConfig>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <SystemClock_Config+0xb0>
		Error_Handler();
 8001134:	f000 ff50 	bl	8001fd8 <Error_Handler>
	}
	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK) {
 8001138:	f007 f84e 	bl	80081d8 <HAL_PWREx_EnableOverDrive>
 800113c:	4603      	mov	r3, r0
 800113e:	2b00      	cmp	r3, #0
 8001140:	d001      	beq.n	8001146 <SystemClock_Config+0xbe>
		Error_Handler();
 8001142:	f000 ff49 	bl	8001fd8 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001146:	230f      	movs	r3, #15
 8001148:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800114c:	2302      	movs	r3, #2
 800114e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001152:	2300      	movs	r3, #0
 8001154:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001158:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800115c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001160:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK) {
 8001168:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800116c:	2106      	movs	r1, #6
 800116e:	4618      	mov	r0, r3
 8001170:	f007 fb26 	bl	80087c0 <HAL_RCC_ClockConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <SystemClock_Config+0xf6>
		Error_Handler();
 800117a:	f000 ff2d 	bl	8001fd8 <Error_Handler>
	}
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC
 800117e:	4b16      	ldr	r3, [pc, #88]	; (80011d8 <SystemClock_Config+0x150>)
 8001180:	60bb      	str	r3, [r7, #8]
			| RCC_PERIPHCLK_USART1 | RCC_PERIPHCLK_SAI2 | RCC_PERIPHCLK_SDMMC1
			| RCC_PERIPHCLK_CLK48;
	PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001182:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001186:	61fb      	str	r3, [r7, #28]
	PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001188:	2305      	movs	r3, #5
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
	PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800118c:	2302      	movs	r3, #2
 800118e:	623b      	str	r3, [r7, #32]
	PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001190:	2303      	movs	r3, #3
 8001192:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLLSAIDivQ = 1;
 8001194:	2301      	movs	r3, #1
 8001196:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI;
 800119e:	2300      	movs	r3, #0
 80011a0:	64bb      	str	r3, [r7, #72]	; 0x48
	PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80011a2:	2300      	movs	r3, #0
 80011a4:	64fb      	str	r3, [r7, #76]	; 0x4c
	PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLLSAIP;
 80011a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80011aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 80011b4:	f107 0308 	add.w	r3, r7, #8
 80011b8:	4618      	mov	r0, r3
 80011ba:	f007 fd09 	bl	8008bd0 <HAL_RCCEx_PeriphCLKConfig>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <SystemClock_Config+0x140>
		Error_Handler();
 80011c4:	f000 ff08 	bl	8001fd8 <Error_Handler>
	}
}
 80011c8:	bf00      	nop
 80011ca:	37d0      	adds	r7, #208	; 0xd0
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40023800 	.word	0x40023800
 80011d4:	40007000 	.word	0x40007000
 80011d8:	00b00048 	.word	0x00b00048

080011dc <MX_DMA2D_Init>:
/**
 * @brief DMA2D Initialization Function
 * @param None
 * @retval None
 */
static void MX_DMA2D_Init(void) {
 80011dc:	b580      	push	{r7, lr}
 80011de:	af00      	add	r7, sp, #0
	/* USER CODE END DMA2D_Init 0 */

	/* USER CODE BEGIN DMA2D_Init 1 */

	/* USER CODE END DMA2D_Init 1 */
	hdma2d.Instance = DMA2D;
 80011e0:	4b15      	ldr	r3, [pc, #84]	; (8001238 <MX_DMA2D_Init+0x5c>)
 80011e2:	4a16      	ldr	r2, [pc, #88]	; (800123c <MX_DMA2D_Init+0x60>)
 80011e4:	601a      	str	r2, [r3, #0]
	hdma2d.Init.Mode = DMA2D_M2M;
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <MX_DMA2D_Init+0x5c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	605a      	str	r2, [r3, #4]
	hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_DMA2D_Init+0x5c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	609a      	str	r2, [r3, #8]
	hdma2d.Init.OutputOffset = 0;
 80011f2:	4b11      	ldr	r3, [pc, #68]	; (8001238 <MX_DMA2D_Init+0x5c>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	60da      	str	r2, [r3, #12]
	hdma2d.LayerCfg[1].InputOffset = 0;
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <MX_DMA2D_Init+0x5c>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	629a      	str	r2, [r3, #40]	; 0x28
	hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80011fe:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_DMA2D_Init+0x5c>)
 8001200:	2200      	movs	r2, #0
 8001202:	62da      	str	r2, [r3, #44]	; 0x2c
	hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001204:	4b0c      	ldr	r3, [pc, #48]	; (8001238 <MX_DMA2D_Init+0x5c>)
 8001206:	2200      	movs	r2, #0
 8001208:	631a      	str	r2, [r3, #48]	; 0x30
	hdma2d.LayerCfg[1].InputAlpha = 0;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_DMA2D_Init+0x5c>)
 800120c:	2200      	movs	r2, #0
 800120e:	635a      	str	r2, [r3, #52]	; 0x34
	if (HAL_DMA2D_Init(&hdma2d) != HAL_OK) {
 8001210:	4809      	ldr	r0, [pc, #36]	; (8001238 <MX_DMA2D_Init+0x5c>)
 8001212:	f005 f9b7 	bl	8006584 <HAL_DMA2D_Init>
 8001216:	4603      	mov	r3, r0
 8001218:	2b00      	cmp	r3, #0
 800121a:	d001      	beq.n	8001220 <MX_DMA2D_Init+0x44>
		Error_Handler();
 800121c:	f000 fedc 	bl	8001fd8 <Error_Handler>
	}
	if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK) {
 8001220:	2101      	movs	r1, #1
 8001222:	4805      	ldr	r0, [pc, #20]	; (8001238 <MX_DMA2D_Init+0x5c>)
 8001224:	f005 fb0c 	bl	8006840 <HAL_DMA2D_ConfigLayer>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_DMA2D_Init+0x56>
		Error_Handler();
 800122e:	f000 fed3 	bl	8001fd8 <Error_Handler>
	}
	/* USER CODE BEGIN DMA2D_Init 2 */

	/* USER CODE END DMA2D_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	2000907c 	.word	0x2000907c
 800123c:	4002b000 	.word	0x4002b000

08001240 <MX_LTDC_Init>:
/**
 * @brief LTDC Initialization Function
 * @param None
 * @retval None
 */
static void MX_LTDC_Init(void) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN LTDC_Init 0 */

	/* USER CODE END LTDC_Init 0 */

	LTDC_LayerCfgTypeDef pLayerCfg = { 0 };
 8001246:	1d3b      	adds	r3, r7, #4
 8001248:	2234      	movs	r2, #52	; 0x34
 800124a:	2100      	movs	r1, #0
 800124c:	4618      	mov	r0, r3
 800124e:	f012 f903 	bl	8013458 <memset>

	/* USER CODE BEGIN LTDC_Init 1 */

	/* USER CODE END LTDC_Init 1 */
	hltdc.Instance = LTDC;
 8001252:	4b3a      	ldr	r3, [pc, #232]	; (800133c <MX_LTDC_Init+0xfc>)
 8001254:	4a3a      	ldr	r2, [pc, #232]	; (8001340 <MX_LTDC_Init+0x100>)
 8001256:	601a      	str	r2, [r3, #0]
	hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001258:	4b38      	ldr	r3, [pc, #224]	; (800133c <MX_LTDC_Init+0xfc>)
 800125a:	2200      	movs	r2, #0
 800125c:	605a      	str	r2, [r3, #4]
	hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800125e:	4b37      	ldr	r3, [pc, #220]	; (800133c <MX_LTDC_Init+0xfc>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
	hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001264:	4b35      	ldr	r3, [pc, #212]	; (800133c <MX_LTDC_Init+0xfc>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
	hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800126a:	4b34      	ldr	r3, [pc, #208]	; (800133c <MX_LTDC_Init+0xfc>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
	hltdc.Init.HorizontalSync = 40;
 8001270:	4b32      	ldr	r3, [pc, #200]	; (800133c <MX_LTDC_Init+0xfc>)
 8001272:	2228      	movs	r2, #40	; 0x28
 8001274:	615a      	str	r2, [r3, #20]
	hltdc.Init.VerticalSync = 9;
 8001276:	4b31      	ldr	r3, [pc, #196]	; (800133c <MX_LTDC_Init+0xfc>)
 8001278:	2209      	movs	r2, #9
 800127a:	619a      	str	r2, [r3, #24]
	hltdc.Init.AccumulatedHBP = 53;
 800127c:	4b2f      	ldr	r3, [pc, #188]	; (800133c <MX_LTDC_Init+0xfc>)
 800127e:	2235      	movs	r2, #53	; 0x35
 8001280:	61da      	str	r2, [r3, #28]
	hltdc.Init.AccumulatedVBP = 11;
 8001282:	4b2e      	ldr	r3, [pc, #184]	; (800133c <MX_LTDC_Init+0xfc>)
 8001284:	220b      	movs	r2, #11
 8001286:	621a      	str	r2, [r3, #32]
	hltdc.Init.AccumulatedActiveW = 533;
 8001288:	4b2c      	ldr	r3, [pc, #176]	; (800133c <MX_LTDC_Init+0xfc>)
 800128a:	f240 2215 	movw	r2, #533	; 0x215
 800128e:	625a      	str	r2, [r3, #36]	; 0x24
	hltdc.Init.AccumulatedActiveH = 283;
 8001290:	4b2a      	ldr	r3, [pc, #168]	; (800133c <MX_LTDC_Init+0xfc>)
 8001292:	f240 121b 	movw	r2, #283	; 0x11b
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
	hltdc.Init.TotalWidth = 565;
 8001298:	4b28      	ldr	r3, [pc, #160]	; (800133c <MX_LTDC_Init+0xfc>)
 800129a:	f240 2235 	movw	r2, #565	; 0x235
 800129e:	62da      	str	r2, [r3, #44]	; 0x2c
	hltdc.Init.TotalHeigh = 285;
 80012a0:	4b26      	ldr	r3, [pc, #152]	; (800133c <MX_LTDC_Init+0xfc>)
 80012a2:	f240 121d 	movw	r2, #285	; 0x11d
 80012a6:	631a      	str	r2, [r3, #48]	; 0x30
	hltdc.Init.Backcolor.Blue = 0;
 80012a8:	4b24      	ldr	r3, [pc, #144]	; (800133c <MX_LTDC_Init+0xfc>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	hltdc.Init.Backcolor.Green = 0;
 80012b0:	4b22      	ldr	r3, [pc, #136]	; (800133c <MX_LTDC_Init+0xfc>)
 80012b2:	2200      	movs	r2, #0
 80012b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	hltdc.Init.Backcolor.Red = 0;
 80012b8:	4b20      	ldr	r3, [pc, #128]	; (800133c <MX_LTDC_Init+0xfc>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	if (HAL_LTDC_Init(&hltdc) != HAL_OK) {
 80012c0:	481e      	ldr	r0, [pc, #120]	; (800133c <MX_LTDC_Init+0xfc>)
 80012c2:	f006 fc01 	bl	8007ac8 <HAL_LTDC_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_LTDC_Init+0x90>
		Error_Handler();
 80012cc:	f000 fe84 	bl	8001fd8 <Error_Handler>
	}
	pLayerCfg.WindowX0 = 0;
 80012d0:	2300      	movs	r3, #0
 80012d2:	607b      	str	r3, [r7, #4]
	pLayerCfg.WindowX1 = 480;
 80012d4:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80012d8:	60bb      	str	r3, [r7, #8]
	pLayerCfg.WindowY0 = 0;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
	pLayerCfg.WindowY1 = 272;
 80012de:	f44f 7388 	mov.w	r3, #272	; 0x110
 80012e2:	613b      	str	r3, [r7, #16]
	pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80012e4:	2302      	movs	r3, #2
 80012e6:	617b      	str	r3, [r7, #20]
	pLayerCfg.Alpha = 255;
 80012e8:	23ff      	movs	r3, #255	; 0xff
 80012ea:	61bb      	str	r3, [r7, #24]
	pLayerCfg.Alpha0 = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
	pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80012f0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80012f4:	623b      	str	r3, [r7, #32]
	pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80012f6:	2307      	movs	r3, #7
 80012f8:	627b      	str	r3, [r7, #36]	; 0x24
	pLayerCfg.FBStartAdress = 0xC0000000;
 80012fa:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
	pLayerCfg.ImageWidth = 480;
 8001300:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
	pLayerCfg.ImageHeight = 272;
 8001306:	f44f 7388 	mov.w	r3, #272	; 0x110
 800130a:	633b      	str	r3, [r7, #48]	; 0x30
	pLayerCfg.Backcolor.Blue = 0;
 800130c:	2300      	movs	r3, #0
 800130e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	pLayerCfg.Backcolor.Green = 0;
 8001312:	2300      	movs	r3, #0
 8001314:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
	pLayerCfg.Backcolor.Red = 0;
 8001318:	2300      	movs	r3, #0
 800131a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK) {
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2200      	movs	r2, #0
 8001322:	4619      	mov	r1, r3
 8001324:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_LTDC_Init+0xfc>)
 8001326:	f006 fd61 	bl	8007dec <HAL_LTDC_ConfigLayer>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_LTDC_Init+0xf4>
		Error_Handler();
 8001330:	f000 fe52 	bl	8001fd8 <Error_Handler>
	}
	/* USER CODE BEGIN LTDC_Init 2 */

	/* USER CODE END LTDC_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	3738      	adds	r7, #56	; 0x38
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20008a8c 	.word	0x20008a8c
 8001340:	40016800 	.word	0x40016800

08001344 <MX_SAI2_Init>:
/**
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void) {
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 8001348:	4b4e      	ldr	r3, [pc, #312]	; (8001484 <MX_SAI2_Init+0x140>)
 800134a:	4a4f      	ldr	r2, [pc, #316]	; (8001488 <MX_SAI2_Init+0x144>)
 800134c:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.Protocol = SAI_FREE_PROTOCOL;
 800134e:	4b4d      	ldr	r3, [pc, #308]	; (8001484 <MX_SAI2_Init+0x140>)
 8001350:	2200      	movs	r2, #0
 8001352:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8001354:	4b4b      	ldr	r3, [pc, #300]	; (8001484 <MX_SAI2_Init+0x140>)
 8001356:	2200      	movs	r2, #0
 8001358:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.DataSize = SAI_DATASIZE_8;
 800135a:	4b4a      	ldr	r3, [pc, #296]	; (8001484 <MX_SAI2_Init+0x140>)
 800135c:	2240      	movs	r2, #64	; 0x40
 800135e:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockA2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001360:	4b48      	ldr	r3, [pc, #288]	; (8001484 <MX_SAI2_Init+0x140>)
 8001362:	2200      	movs	r2, #0
 8001364:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockA2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001366:	4b47      	ldr	r3, [pc, #284]	; (8001484 <MX_SAI2_Init+0x140>)
 8001368:	2200      	movs	r2, #0
 800136a:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 800136c:	4b45      	ldr	r3, [pc, #276]	; (8001484 <MX_SAI2_Init+0x140>)
 800136e:	2200      	movs	r2, #0
 8001370:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001372:	4b44      	ldr	r3, [pc, #272]	; (8001484 <MX_SAI2_Init+0x140>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8001378:	4b42      	ldr	r3, [pc, #264]	; (8001484 <MX_SAI2_Init+0x140>)
 800137a:	2200      	movs	r2, #0
 800137c:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800137e:	4b41      	ldr	r3, [pc, #260]	; (8001484 <MX_SAI2_Init+0x140>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8001384:	4b3f      	ldr	r3, [pc, #252]	; (8001484 <MX_SAI2_Init+0x140>)
 8001386:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800138a:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800138c:	4b3d      	ldr	r3, [pc, #244]	; (8001484 <MX_SAI2_Init+0x140>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001392:	4b3c      	ldr	r3, [pc, #240]	; (8001484 <MX_SAI2_Init+0x140>)
 8001394:	2200      	movs	r2, #0
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8001398:	4b3a      	ldr	r3, [pc, #232]	; (8001484 <MX_SAI2_Init+0x140>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800139e:	4b39      	ldr	r3, [pc, #228]	; (8001484 <MX_SAI2_Init+0x140>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockA2.FrameInit.FrameLength = 8;
 80013a4:	4b37      	ldr	r3, [pc, #220]	; (8001484 <MX_SAI2_Init+0x140>)
 80013a6:	2208      	movs	r2, #8
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockA2.FrameInit.ActiveFrameLength = 1;
 80013aa:	4b36      	ldr	r3, [pc, #216]	; (8001484 <MX_SAI2_Init+0x140>)
 80013ac:	2201      	movs	r2, #1
 80013ae:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockA2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80013b0:	4b34      	ldr	r3, [pc, #208]	; (8001484 <MX_SAI2_Init+0x140>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockA2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80013b6:	4b33      	ldr	r3, [pc, #204]	; (8001484 <MX_SAI2_Init+0x140>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockA2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80013bc:	4b31      	ldr	r3, [pc, #196]	; (8001484 <MX_SAI2_Init+0x140>)
 80013be:	2200      	movs	r2, #0
 80013c0:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockA2.SlotInit.FirstBitOffset = 0;
 80013c2:	4b30      	ldr	r3, [pc, #192]	; (8001484 <MX_SAI2_Init+0x140>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockA2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80013c8:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <MX_SAI2_Init+0x140>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockA2.SlotInit.SlotNumber = 1;
 80013ce:	4b2d      	ldr	r3, [pc, #180]	; (8001484 <MX_SAI2_Init+0x140>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockA2.SlotInit.SlotActive = 0x00000000;
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <MX_SAI2_Init+0x140>)
 80013d6:	2200      	movs	r2, #0
 80013d8:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockA2) != HAL_OK) {
 80013da:	482a      	ldr	r0, [pc, #168]	; (8001484 <MX_SAI2_Init+0x140>)
 80013dc:	f008 fa38 	bl	8009850 <HAL_SAI_Init>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <MX_SAI2_Init+0xa6>
		Error_Handler();
 80013e6:	f000 fdf7 	bl	8001fd8 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 80013ea:	4b28      	ldr	r3, [pc, #160]	; (800148c <MX_SAI2_Init+0x148>)
 80013ec:	4a28      	ldr	r2, [pc, #160]	; (8001490 <MX_SAI2_Init+0x14c>)
 80013ee:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.Protocol = SAI_FREE_PROTOCOL;
 80013f0:	4b26      	ldr	r3, [pc, #152]	; (800148c <MX_SAI2_Init+0x148>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	631a      	str	r2, [r3, #48]	; 0x30
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 80013f6:	4b25      	ldr	r3, [pc, #148]	; (800148c <MX_SAI2_Init+0x148>)
 80013f8:	2203      	movs	r2, #3
 80013fa:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.DataSize = SAI_DATASIZE_8;
 80013fc:	4b23      	ldr	r3, [pc, #140]	; (800148c <MX_SAI2_Init+0x148>)
 80013fe:	2240      	movs	r2, #64	; 0x40
 8001400:	635a      	str	r2, [r3, #52]	; 0x34
	hsai_BlockB2.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8001402:	4b22      	ldr	r3, [pc, #136]	; (800148c <MX_SAI2_Init+0x148>)
 8001404:	2200      	movs	r2, #0
 8001406:	639a      	str	r2, [r3, #56]	; 0x38
	hsai_BlockB2.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8001408:	4b20      	ldr	r3, [pc, #128]	; (800148c <MX_SAI2_Init+0x148>)
 800140a:	2200      	movs	r2, #0
 800140c:	63da      	str	r2, [r3, #60]	; 0x3c
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 800140e:	4b1f      	ldr	r3, [pc, #124]	; (800148c <MX_SAI2_Init+0x148>)
 8001410:	2201      	movs	r2, #1
 8001412:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8001414:	4b1d      	ldr	r3, [pc, #116]	; (800148c <MX_SAI2_Init+0x148>)
 8001416:	2200      	movs	r2, #0
 8001418:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800141a:	4b1c      	ldr	r3, [pc, #112]	; (800148c <MX_SAI2_Init+0x148>)
 800141c:	2200      	movs	r2, #0
 800141e:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8001420:	4b1a      	ldr	r3, [pc, #104]	; (800148c <MX_SAI2_Init+0x148>)
 8001422:	2200      	movs	r2, #0
 8001424:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <MX_SAI2_Init+0x148>)
 8001428:	2200      	movs	r2, #0
 800142a:	625a      	str	r2, [r3, #36]	; 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <MX_SAI2_Init+0x148>)
 800142e:	2200      	movs	r2, #0
 8001430:	629a      	str	r2, [r3, #40]	; 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <MX_SAI2_Init+0x148>)
 8001434:	2200      	movs	r2, #0
 8001436:	62da      	str	r2, [r3, #44]	; 0x2c
	hsai_BlockB2.FrameInit.FrameLength = 8;
 8001438:	4b14      	ldr	r3, [pc, #80]	; (800148c <MX_SAI2_Init+0x148>)
 800143a:	2208      	movs	r2, #8
 800143c:	641a      	str	r2, [r3, #64]	; 0x40
	hsai_BlockB2.FrameInit.ActiveFrameLength = 1;
 800143e:	4b13      	ldr	r3, [pc, #76]	; (800148c <MX_SAI2_Init+0x148>)
 8001440:	2201      	movs	r2, #1
 8001442:	645a      	str	r2, [r3, #68]	; 0x44
	hsai_BlockB2.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <MX_SAI2_Init+0x148>)
 8001446:	2200      	movs	r2, #0
 8001448:	649a      	str	r2, [r3, #72]	; 0x48
	hsai_BlockB2.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <MX_SAI2_Init+0x148>)
 800144c:	2200      	movs	r2, #0
 800144e:	64da      	str	r2, [r3, #76]	; 0x4c
	hsai_BlockB2.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <MX_SAI2_Init+0x148>)
 8001452:	2200      	movs	r2, #0
 8001454:	651a      	str	r2, [r3, #80]	; 0x50
	hsai_BlockB2.SlotInit.FirstBitOffset = 0;
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <MX_SAI2_Init+0x148>)
 8001458:	2200      	movs	r2, #0
 800145a:	655a      	str	r2, [r3, #84]	; 0x54
	hsai_BlockB2.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800145c:	4b0b      	ldr	r3, [pc, #44]	; (800148c <MX_SAI2_Init+0x148>)
 800145e:	2200      	movs	r2, #0
 8001460:	659a      	str	r2, [r3, #88]	; 0x58
	hsai_BlockB2.SlotInit.SlotNumber = 1;
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <MX_SAI2_Init+0x148>)
 8001464:	2201      	movs	r2, #1
 8001466:	65da      	str	r2, [r3, #92]	; 0x5c
	hsai_BlockB2.SlotInit.SlotActive = 0x00000000;
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <MX_SAI2_Init+0x148>)
 800146a:	2200      	movs	r2, #0
 800146c:	661a      	str	r2, [r3, #96]	; 0x60
	if (HAL_SAI_Init(&hsai_BlockB2) != HAL_OK) {
 800146e:	4807      	ldr	r0, [pc, #28]	; (800148c <MX_SAI2_Init+0x148>)
 8001470:	f008 f9ee 	bl	8009850 <HAL_SAI_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_SAI2_Init+0x13a>
		Error_Handler();
 800147a:	f000 fdad 	bl	8001fd8 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	/* USER CODE END SAI2_Init 2 */

}
 800147e:	bf00      	nop
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20008980 	.word	0x20008980
 8001488:	40015c04 	.word	0x40015c04
 800148c:	20008898 	.word	0x20008898
 8001490:	40015c24 	.word	0x40015c24

08001494 <MX_SDMMC1_SD_Init>:
/**
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void) {
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001498:	4b0c      	ldr	r3, [pc, #48]	; (80014cc <MX_SDMMC1_SD_Init+0x38>)
 800149a:	4a0d      	ldr	r2, [pc, #52]	; (80014d0 <MX_SDMMC1_SD_Init+0x3c>)
 800149c:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <MX_SDMMC1_SD_Init+0x38>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80014a4:	4b09      	ldr	r3, [pc, #36]	; (80014cc <MX_SDMMC1_SD_Init+0x38>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <MX_SDMMC1_SD_Init+0x38>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <MX_SDMMC1_SD_Init+0x38>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80014b6:	4b05      	ldr	r3, [pc, #20]	; (80014cc <MX_SDMMC1_SD_Init+0x38>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 0;
 80014bc:	4b03      	ldr	r3, [pc, #12]	; (80014cc <MX_SDMMC1_SD_Init+0x38>)
 80014be:	2200      	movs	r2, #0
 80014c0:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */

	/* USER CODE END SDMMC1_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr
 80014cc:	20008a04 	.word	0x20008a04
 80014d0:	40012c00 	.word	0x40012c00

080014d4 <MX_USART1_UART_Init>:
/**
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80014d8:	4b14      	ldr	r3, [pc, #80]	; (800152c <MX_USART1_UART_Init+0x58>)
 80014da:	4a15      	ldr	r2, [pc, #84]	; (8001530 <MX_USART1_UART_Init+0x5c>)
 80014dc:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80014de:	4b13      	ldr	r3, [pc, #76]	; (800152c <MX_USART1_UART_Init+0x58>)
 80014e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014e4:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014e6:	4b11      	ldr	r3, [pc, #68]	; (800152c <MX_USART1_UART_Init+0x58>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80014ec:	4b0f      	ldr	r3, [pc, #60]	; (800152c <MX_USART1_UART_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80014f2:	4b0e      	ldr	r3, [pc, #56]	; (800152c <MX_USART1_UART_Init+0x58>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80014f8:	4b0c      	ldr	r3, [pc, #48]	; (800152c <MX_USART1_UART_Init+0x58>)
 80014fa:	220c      	movs	r2, #12
 80014fc:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fe:	4b0b      	ldr	r3, [pc, #44]	; (800152c <MX_USART1_UART_Init+0x58>)
 8001500:	2200      	movs	r2, #0
 8001502:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	4b09      	ldr	r3, [pc, #36]	; (800152c <MX_USART1_UART_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800150a:	4b08      	ldr	r3, [pc, #32]	; (800152c <MX_USART1_UART_Init+0x58>)
 800150c:	2200      	movs	r2, #0
 800150e:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001510:	4b06      	ldr	r3, [pc, #24]	; (800152c <MX_USART1_UART_Init+0x58>)
 8001512:	2200      	movs	r2, #0
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK) {
 8001516:	4805      	ldr	r0, [pc, #20]	; (800152c <MX_USART1_UART_Init+0x58>)
 8001518:	f00a fc3e 	bl	800bd98 <HAL_UART_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_USART1_UART_Init+0x52>
		Error_Handler();
 8001522:	f000 fd59 	bl	8001fd8 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20008f34 	.word	0x20008f34
 8001530:	40011000 	.word	0x40011000

08001534 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 800153a:	4b18      	ldr	r3, [pc, #96]	; (800159c <MX_DMA_Init+0x68>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	4a17      	ldr	r2, [pc, #92]	; (800159c <MX_DMA_Init+0x68>)
 8001540:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001544:	6313      	str	r3, [r2, #48]	; 0x30
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_DMA_Init+0x68>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2105      	movs	r1, #5
 8001556:	203b      	movs	r0, #59	; 0x3b
 8001558:	f004 fbe6 	bl	8005d28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800155c:	203b      	movs	r0, #59	; 0x3b
 800155e:	f004 fbff 	bl	8005d60 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8001562:	2200      	movs	r2, #0
 8001564:	2105      	movs	r1, #5
 8001566:	203c      	movs	r0, #60	; 0x3c
 8001568:	f004 fbde 	bl	8005d28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800156c:	203c      	movs	r0, #60	; 0x3c
 800156e:	f004 fbf7 	bl	8005d60 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001572:	2200      	movs	r2, #0
 8001574:	2105      	movs	r1, #5
 8001576:	2045      	movs	r0, #69	; 0x45
 8001578:	f004 fbd6 	bl	8005d28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800157c:	2045      	movs	r0, #69	; 0x45
 800157e:	f004 fbef 	bl	8005d60 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2105      	movs	r1, #5
 8001586:	2046      	movs	r0, #70	; 0x46
 8001588:	f004 fbce 	bl	8005d28 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800158c:	2046      	movs	r0, #70	; 0x46
 800158e:	f004 fbe7 	bl	8005d60 <HAL_NVIC_EnableIRQ>

}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800

080015a0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b088      	sub	sp, #32
 80015a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_SDRAM_TimingTypeDef SdramTiming = { 0 };
 80015a6:	1d3b      	adds	r3, r7, #4
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	615a      	str	r2, [r3, #20]
 80015b6:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SDRAM1 memory initialization sequence
	 */
	hsdram1.Instance = FMC_SDRAM_DEVICE;
 80015b8:	4b1e      	ldr	r3, [pc, #120]	; (8001634 <MX_FMC_Init+0x94>)
 80015ba:	4a1f      	ldr	r2, [pc, #124]	; (8001638 <MX_FMC_Init+0x98>)
 80015bc:	601a      	str	r2, [r3, #0]
	/* hsdram1.Init */
	hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 80015be:	4b1d      	ldr	r3, [pc, #116]	; (8001634 <MX_FMC_Init+0x94>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	605a      	str	r2, [r3, #4]
	hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80015c4:	4b1b      	ldr	r3, [pc, #108]	; (8001634 <MX_FMC_Init+0x94>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
	hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80015ca:	4b1a      	ldr	r3, [pc, #104]	; (8001634 <MX_FMC_Init+0x94>)
 80015cc:	2204      	movs	r2, #4
 80015ce:	60da      	str	r2, [r3, #12]
	hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80015d0:	4b18      	ldr	r3, [pc, #96]	; (8001634 <MX_FMC_Init+0x94>)
 80015d2:	2210      	movs	r2, #16
 80015d4:	611a      	str	r2, [r3, #16]
	hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <MX_FMC_Init+0x94>)
 80015d8:	2240      	movs	r2, #64	; 0x40
 80015da:	615a      	str	r2, [r3, #20]
	hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 80015dc:	4b15      	ldr	r3, [pc, #84]	; (8001634 <MX_FMC_Init+0x94>)
 80015de:	2280      	movs	r2, #128	; 0x80
 80015e0:	619a      	str	r2, [r3, #24]
	hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80015e2:	4b14      	ldr	r3, [pc, #80]	; (8001634 <MX_FMC_Init+0x94>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	61da      	str	r2, [r3, #28]
	hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 80015e8:	4b12      	ldr	r3, [pc, #72]	; (8001634 <MX_FMC_Init+0x94>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	621a      	str	r2, [r3, #32]
	hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <MX_FMC_Init+0x94>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	625a      	str	r2, [r3, #36]	; 0x24
	hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80015f4:	4b0f      	ldr	r3, [pc, #60]	; (8001634 <MX_FMC_Init+0x94>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	629a      	str	r2, [r3, #40]	; 0x28
	/* SdramTiming */
	SdramTiming.LoadToActiveDelay = 16;
 80015fa:	2310      	movs	r3, #16
 80015fc:	607b      	str	r3, [r7, #4]
	SdramTiming.ExitSelfRefreshDelay = 16;
 80015fe:	2310      	movs	r3, #16
 8001600:	60bb      	str	r3, [r7, #8]
	SdramTiming.SelfRefreshTime = 16;
 8001602:	2310      	movs	r3, #16
 8001604:	60fb      	str	r3, [r7, #12]
	SdramTiming.RowCycleDelay = 16;
 8001606:	2310      	movs	r3, #16
 8001608:	613b      	str	r3, [r7, #16]
	SdramTiming.WriteRecoveryTime = 16;
 800160a:	2310      	movs	r3, #16
 800160c:	617b      	str	r3, [r7, #20]
	SdramTiming.RPDelay = 16;
 800160e:	2310      	movs	r3, #16
 8001610:	61bb      	str	r3, [r7, #24]
	SdramTiming.RCDDelay = 16;
 8001612:	2310      	movs	r3, #16
 8001614:	61fb      	str	r3, [r7, #28]

	if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK) {
 8001616:	1d3b      	adds	r3, r7, #4
 8001618:	4619      	mov	r1, r3
 800161a:	4806      	ldr	r0, [pc, #24]	; (8001634 <MX_FMC_Init+0x94>)
 800161c:	f00a f85d 	bl	800b6da <HAL_SDRAM_Init>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <MX_FMC_Init+0x8a>
		Error_Handler();
 8001626:	f000 fcd7 	bl	8001fd8 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 800162a:	bf00      	nop
 800162c:	3720      	adds	r7, #32
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	200090bc 	.word	0x200090bc
 8001638:	a0000140 	.word	0xa0000140

0800163c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800163c:	b580      	push	{r7, lr}
 800163e:	b090      	sub	sp, #64	; 0x40
 8001640:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001652:	4bae      	ldr	r3, [pc, #696]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	4aad      	ldr	r2, [pc, #692]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001658:	f043 0310 	orr.w	r3, r3, #16
 800165c:	6313      	str	r3, [r2, #48]	; 0x30
 800165e:	4bab      	ldr	r3, [pc, #684]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001662:	f003 0310 	and.w	r3, r3, #16
 8001666:	62bb      	str	r3, [r7, #40]	; 0x28
 8001668:	6abb      	ldr	r3, [r7, #40]	; 0x28
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800166a:	4ba8      	ldr	r3, [pc, #672]	; (800190c <MX_GPIO_Init+0x2d0>)
 800166c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166e:	4aa7      	ldr	r2, [pc, #668]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001670:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001674:	6313      	str	r3, [r2, #48]	; 0x30
 8001676:	4ba5      	ldr	r3, [pc, #660]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001682:	4ba2      	ldr	r3, [pc, #648]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001686:	4aa1      	ldr	r2, [pc, #644]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	6313      	str	r3, [r2, #48]	; 0x30
 800168e:	4b9f      	ldr	r3, [pc, #636]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	623b      	str	r3, [r7, #32]
 8001698:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800169a:	4b9c      	ldr	r3, [pc, #624]	; (800190c <MX_GPIO_Init+0x2d0>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a9b      	ldr	r2, [pc, #620]	; (800190c <MX_GPIO_Init+0x2d0>)
 80016a0:	f043 0308 	orr.w	r3, r3, #8
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b99      	ldr	r3, [pc, #612]	; (800190c <MX_GPIO_Init+0x2d0>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0308 	and.w	r3, r3, #8
 80016ae:	61fb      	str	r3, [r7, #28]
 80016b0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80016b2:	4b96      	ldr	r3, [pc, #600]	; (800190c <MX_GPIO_Init+0x2d0>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	4a95      	ldr	r2, [pc, #596]	; (800190c <MX_GPIO_Init+0x2d0>)
 80016b8:	f043 0304 	orr.w	r3, r3, #4
 80016bc:	6313      	str	r3, [r2, #48]	; 0x30
 80016be:	4b93      	ldr	r3, [pc, #588]	; (800190c <MX_GPIO_Init+0x2d0>)
 80016c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	61bb      	str	r3, [r7, #24]
 80016c8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80016ca:	4b90      	ldr	r3, [pc, #576]	; (800190c <MX_GPIO_Init+0x2d0>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a8f      	ldr	r2, [pc, #572]	; (800190c <MX_GPIO_Init+0x2d0>)
 80016d0:	f043 0301 	orr.w	r3, r3, #1
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b8d      	ldr	r3, [pc, #564]	; (800190c <MX_GPIO_Init+0x2d0>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0301 	and.w	r3, r3, #1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOJ_CLK_ENABLE();
 80016e2:	4b8a      	ldr	r3, [pc, #552]	; (800190c <MX_GPIO_Init+0x2d0>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a89      	ldr	r2, [pc, #548]	; (800190c <MX_GPIO_Init+0x2d0>)
 80016e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b87      	ldr	r3, [pc, #540]	; (800190c <MX_GPIO_Init+0x2d0>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80016fa:	4b84      	ldr	r3, [pc, #528]	; (800190c <MX_GPIO_Init+0x2d0>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a83      	ldr	r2, [pc, #524]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b81      	ldr	r3, [pc, #516]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOK_CLK_ENABLE();
 8001712:	4b7e      	ldr	r3, [pc, #504]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a7d      	ldr	r2, [pc, #500]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001718:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b7b      	ldr	r3, [pc, #492]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800172a:	4b78      	ldr	r3, [pc, #480]	; (800190c <MX_GPIO_Init+0x2d0>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a77      	ldr	r2, [pc, #476]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001730:	f043 0320 	orr.w	r3, r3, #32
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b75      	ldr	r3, [pc, #468]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0320 	and.w	r3, r3, #32
 800173e:	607b      	str	r3, [r7, #4]
 8001740:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001742:	4b72      	ldr	r3, [pc, #456]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a71      	ldr	r2, [pc, #452]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001748:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b6f      	ldr	r3, [pc, #444]	; (800190c <MX_GPIO_Init+0x2d0>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001756:	603b      	str	r3, [r7, #0]
 8001758:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin,
 800175a:	2201      	movs	r2, #1
 800175c:	2120      	movs	r1, #32
 800175e:	486c      	ldr	r0, [pc, #432]	; (8001910 <MX_GPIO_Init+0x2d4>)
 8001760:	f005 fc6c 	bl	800703c <HAL_GPIO_WritePin>
			GPIO_PIN_SET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOI, ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin,
 8001764:	2200      	movs	r2, #0
 8001766:	f241 010c 	movw	r1, #4108	; 0x100c
 800176a:	486a      	ldr	r0, [pc, #424]	; (8001914 <MX_GPIO_Init+0x2d8>)
 800176c:	f005 fc66 	bl	800703c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_RESET);
 8001770:	2200      	movs	r2, #0
 8001772:	2108      	movs	r1, #8
 8001774:	4868      	ldr	r0, [pc, #416]	; (8001918 <MX_GPIO_Init+0x2dc>)
 8001776:	f005 fc61 	bl	800703c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(DCMI_PWR_EN_GPIO_Port, DCMI_PWR_EN_Pin, GPIO_PIN_RESET);
 800177a:	2200      	movs	r2, #0
 800177c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001780:	4866      	ldr	r0, [pc, #408]	; (800191c <MX_GPIO_Init+0x2e0>)
 8001782:	f005 fc5b 	bl	800703c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin,
 8001786:	2200      	movs	r2, #0
 8001788:	21c8      	movs	r1, #200	; 0xc8
 800178a:	4865      	ldr	r0, [pc, #404]	; (8001920 <MX_GPIO_Init+0x2e4>)
 800178c:	f005 fc56 	bl	800703c <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : OTG_HS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_HS_OverCurrent_Pin;
 8001790:	2308      	movs	r3, #8
 8001792:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001794:	2300      	movs	r3, #0
 8001796:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	2300      	movs	r3, #0
 800179a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_HS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800179c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017a0:	4619      	mov	r1, r3
 80017a2:	4860      	ldr	r0, [pc, #384]	; (8001924 <MX_GPIO_Init+0x2e8>)
 80017a4:	f005 f97a 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_D2_Pin */
	GPIO_InitStruct.Pin = QSPI_D2_Pin;
 80017a8:	2304      	movs	r3, #4
 80017aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ac:	2302      	movs	r3, #2
 80017ae:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b0:	2300      	movs	r3, #0
 80017b2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b4:	2303      	movs	r3, #3
 80017b6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017b8:	2309      	movs	r3, #9
 80017ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 80017bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017c0:	4619      	mov	r1, r3
 80017c2:	4858      	ldr	r0, [pc, #352]	; (8001924 <MX_GPIO_Init+0x2e8>)
 80017c4:	f005 f96a 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_TXD1_Pin RMII_TXD0_Pin RMII_TX_EN_Pin */
	GPIO_InitStruct.Pin = RMII_TXD1_Pin | RMII_TXD0_Pin | RMII_TX_EN_Pin;
 80017c8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80017cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ce:	2302      	movs	r3, #2
 80017d0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d2:	2300      	movs	r3, #0
 80017d4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017d6:	2303      	movs	r3, #3
 80017d8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80017da:	230b      	movs	r3, #11
 80017dc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017e2:	4619      	mov	r1, r3
 80017e4:	484e      	ldr	r0, [pc, #312]	; (8001920 <MX_GPIO_Init+0x2e4>)
 80017e6:	f005 f959 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_SCL_D15_Pin ARDUINO_SDA_D14_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin | ARDUINO_SDA_D14_Pin;
 80017ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017f0:	2312      	movs	r3, #18
 80017f2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017f4:	2301      	movs	r3, #1
 80017f6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f8:	2300      	movs	r3, #0
 80017fa:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017fc:	2304      	movs	r3, #4
 80017fe:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001800:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001804:	4619      	mov	r1, r3
 8001806:	4848      	ldr	r0, [pc, #288]	; (8001928 <MX_GPIO_Init+0x2ec>)
 8001808:	f005 f948 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D3_Pin
	 ULPI_D2_Pin ULPI_D1_Pin ULPI_D4_Pin */
	GPIO_InitStruct.Pin = ULPI_D7_Pin | ULPI_D6_Pin | ULPI_D5_Pin | ULPI_D3_Pin
 800180c:	f643 4323 	movw	r3, #15395	; 0x3c23
 8001810:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ULPI_D2_Pin | ULPI_D1_Pin | ULPI_D4_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800181e:	230a      	movs	r3, #10
 8001820:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001822:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001826:	4619      	mov	r1, r3
 8001828:	483f      	ldr	r0, [pc, #252]	; (8001928 <MX_GPIO_Init+0x2ec>)
 800182a:	f005 f937 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D3_Pin;
 800182e:	2310      	movs	r3, #16
 8001830:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001832:	2302      	movs	r3, #2
 8001834:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001836:	2300      	movs	r3, #0
 8001838:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183a:	2300      	movs	r3, #0
 800183c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800183e:	2302      	movs	r3, #2
 8001840:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D3_GPIO_Port, &GPIO_InitStruct);
 8001842:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001846:	4619      	mov	r1, r3
 8001848:	4837      	ldr	r0, [pc, #220]	; (8001928 <MX_GPIO_Init+0x2ec>)
 800184a:	f005 f927 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : SPDIF_RX0_Pin */
	GPIO_InitStruct.Pin = SPDIF_RX0_Pin;
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_SPDIFRX;
 800185e:	2308      	movs	r3, #8
 8001860:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(SPDIF_RX0_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001866:	4619      	mov	r1, r3
 8001868:	4829      	ldr	r0, [pc, #164]	; (8001910 <MX_GPIO_Init+0x2d4>)
 800186a:	f005 f917 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D9_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D9_Pin;
 800186e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001872:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001874:	2302      	movs	r3, #2
 8001876:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800187c:	2300      	movs	r3, #0
 800187e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001880:	2301      	movs	r3, #1
 8001882:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D9_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001888:	4619      	mov	r1, r3
 800188a:	4828      	ldr	r0, [pc, #160]	; (800192c <MX_GPIO_Init+0x2f0>)
 800188c:	f005 f906 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D6_Pin DCMI_D7_Pin */
	GPIO_InitStruct.Pin = DCMI_D6_Pin | DCMI_D7_Pin;
 8001890:	2360      	movs	r3, #96	; 0x60
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001894:	2302      	movs	r3, #2
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189c:	2300      	movs	r3, #0
 800189e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80018a0:	230d      	movs	r3, #13
 80018a2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018a8:	4619      	mov	r1, r3
 80018aa:	481e      	ldr	r0, [pc, #120]	; (8001924 <MX_GPIO_Init+0x2e8>)
 80018ac:	f005 f8f6 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : QSPI_NCS_Pin */
	GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 80018b0:	2340      	movs	r3, #64	; 0x40
 80018b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80018c0:	230a      	movs	r3, #10
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 80018c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018c8:	4619      	mov	r1, r3
 80018ca:	4817      	ldr	r0, [pc, #92]	; (8001928 <MX_GPIO_Init+0x2ec>)
 80018cc:	f005 f8e6 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_VBUS_Pin */
	GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80018d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018d6:	2300      	movs	r3, #0
 80018d8:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80018de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018e2:	4619      	mov	r1, r3
 80018e4:	4812      	ldr	r0, [pc, #72]	; (8001930 <MX_GPIO_Init+0x2f4>)
 80018e6:	f005 f8d9 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : Audio_INT_Pin */
	GPIO_InitStruct.Pin = Audio_INT_Pin;
 80018ea:	2340      	movs	r3, #64	; 0x40
 80018ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018ee:	4b11      	ldr	r3, [pc, #68]	; (8001934 <MX_GPIO_Init+0x2f8>)
 80018f0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f2:	2300      	movs	r3, #0
 80018f4:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 80018f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fa:	4619      	mov	r1, r3
 80018fc:	4804      	ldr	r0, [pc, #16]	; (8001910 <MX_GPIO_Init+0x2d4>)
 80018fe:	f005 f8cd 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : OTG_FS_P_Pin OTG_FS_N_Pin OTG_FS_ID_Pin */
	GPIO_InitStruct.Pin = OTG_FS_P_Pin | OTG_FS_N_Pin | OTG_FS_ID_Pin;
 8001902:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001906:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001908:	e016      	b.n	8001938 <MX_GPIO_Init+0x2fc>
 800190a:	bf00      	nop
 800190c:	40023800 	.word	0x40023800
 8001910:	40020c00 	.word	0x40020c00
 8001914:	40022000 	.word	0x40022000
 8001918:	40022800 	.word	0x40022800
 800191c:	40021c00 	.word	0x40021c00
 8001920:	40021800 	.word	0x40021800
 8001924:	40021000 	.word	0x40021000
 8001928:	40020400 	.word	0x40020400
 800192c:	40020000 	.word	0x40020000
 8001930:	40022400 	.word	0x40022400
 8001934:	10120000 	.word	0x10120000
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	2302      	movs	r3, #2
 800193a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193c:	2300      	movs	r3, #0
 800193e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001940:	2303      	movs	r3, #3
 8001942:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001944:	230a      	movs	r3, #10
 8001946:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001948:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800194c:	4619      	mov	r1, r3
 800194e:	48bc      	ldr	r0, [pc, #752]	; (8001c40 <MX_GPIO_Init+0x604>)
 8001950:	f005 f8a4 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
	GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001954:	2320      	movs	r3, #32
 8001956:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001958:	2301      	movs	r3, #1
 800195a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195c:	2300      	movs	r3, #0
 800195e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001960:	2300      	movs	r3, #0
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001968:	4619      	mov	r1, r3
 800196a:	48b6      	ldr	r0, [pc, #728]	; (8001c44 <MX_GPIO_Init+0x608>)
 800196c:	f005 f896 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_D5_Pin */
	GPIO_InitStruct.Pin = DCMI_D5_Pin;
 8001970:	2308      	movs	r3, #8
 8001972:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001974:	2302      	movs	r3, #2
 8001976:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001978:	2300      	movs	r3, #0
 800197a:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197c:	2300      	movs	r3, #0
 800197e:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001980:	230d      	movs	r3, #13
 8001982:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_D5_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001988:	4619      	mov	r1, r3
 800198a:	48ae      	ldr	r0, [pc, #696]	; (8001c44 <MX_GPIO_Init+0x608>)
 800198c:	f005 f886 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D7_Pin ARDUINO_D8_Pin LCD_DISP_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D7_Pin | ARDUINO_D8_Pin | LCD_DISP_Pin;
 8001990:	f241 030c 	movw	r3, #4108	; 0x100c
 8001994:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001996:	2301      	movs	r3, #1
 8001998:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199a:	2300      	movs	r3, #0
 800199c:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199e:	2300      	movs	r3, #0
 80019a0:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80019a2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019a6:	4619      	mov	r1, r3
 80019a8:	48a7      	ldr	r0, [pc, #668]	; (8001c48 <MX_GPIO_Init+0x60c>)
 80019aa:	f005 f877 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : uSD_Detect_Pin */
	GPIO_InitStruct.Pin = uSD_Detect_Pin;
 80019ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019c0:	4619      	mov	r1, r3
 80019c2:	48a2      	ldr	r0, [pc, #648]	; (8001c4c <MX_GPIO_Init+0x610>)
 80019c4:	f005 f86a 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_BL_CTRL_Pin */
	GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 80019c8:	2308      	movs	r3, #8
 80019ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019cc:	2301      	movs	r3, #1
 80019ce:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019d4:	2300      	movs	r3, #0
 80019d6:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 80019d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019dc:	4619      	mov	r1, r3
 80019de:	489c      	ldr	r0, [pc, #624]	; (8001c50 <MX_GPIO_Init+0x614>)
 80019e0:	f005 f85c 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_VSYNC_Pin */
	GPIO_InitStruct.Pin = DCMI_VSYNC_Pin;
 80019e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ea:	2302      	movs	r3, #2
 80019ec:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ee:	2300      	movs	r3, #0
 80019f0:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019f2:	2300      	movs	r3, #0
 80019f4:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80019f6:	230d      	movs	r3, #13
 80019f8:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(DCMI_VSYNC_GPIO_Port, &GPIO_InitStruct);
 80019fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019fe:	4619      	mov	r1, r3
 8001a00:	4894      	ldr	r0, [pc, #592]	; (8001c54 <MX_GPIO_Init+0x618>)
 8001a02:	f005 f84b 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
	GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a06:	2310      	movs	r3, #16
 8001a08:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001a12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a16:	4619      	mov	r1, r3
 8001a18:	488a      	ldr	r0, [pc, #552]	; (8001c44 <MX_GPIO_Init+0x608>)
 8001a1a:	f005 f83f 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : TP3_Pin NC2_Pin */
	GPIO_InitStruct.Pin = TP3_Pin | NC2_Pin;
 8001a1e:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a22:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a24:	2300      	movs	r3, #0
 8001a26:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a30:	4619      	mov	r1, r3
 8001a32:	4889      	ldr	r0, [pc, #548]	; (8001c58 <MX_GPIO_Init+0x61c>)
 8001a34:	f005 f832 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_SCK_D13_Pin */
	GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a40:	2300      	movs	r3, #0
 8001a42:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a44:	2300      	movs	r3, #0
 8001a46:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a48:	2305      	movs	r3, #5
 8001a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8001a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a50:	4619      	mov	r1, r3
 8001a52:	487d      	ldr	r0, [pc, #500]	; (8001c48 <MX_GPIO_Init+0x60c>)
 8001a54:	f005 f822 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : DCMI_PWR_EN_Pin */
	GPIO_InitStruct.Pin = DCMI_PWR_EN_Pin;
 8001a58:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a66:	2300      	movs	r3, #0
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(DCMI_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001a6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4879      	ldr	r0, [pc, #484]	; (8001c58 <MX_GPIO_Init+0x61c>)
 8001a72:	f005 f813 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : DCMI_D4_Pin DCMI_D3_Pin DCMI_D0_Pin DCMI_D2_Pin
	 DCMI_D1_Pin */
	GPIO_InitStruct.Pin = DCMI_D4_Pin | DCMI_D3_Pin | DCMI_D0_Pin | DCMI_D2_Pin
 8001a76:	f44f 43bc 	mov.w	r3, #24064	; 0x5e00
 8001a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
			| DCMI_D1_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7c:	2302      	movs	r3, #2
 8001a7e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a84:	2300      	movs	r3, #0
 8001a86:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001a88:	230d      	movs	r3, #13
 8001a8a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001a8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a90:	4619      	mov	r1, r3
 8001a92:	4871      	ldr	r0, [pc, #452]	; (8001c58 <MX_GPIO_Init+0x61c>)
 8001a94:	f005 f802 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_CS_D5_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_CS_D5_Pin;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9c:	2302      	movs	r3, #2
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_CS_D5_GPIO_Port, &GPIO_InitStruct);
 8001aac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4865      	ldr	r0, [pc, #404]	; (8001c48 <MX_GPIO_Init+0x60c>)
 8001ab4:	f004 fff2 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D10_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D10_Pin;
 8001ab8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001abc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abe:	2302      	movs	r3, #2
 8001ac0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001aca:	2301      	movs	r3, #1
 8001acc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D10_GPIO_Port, &GPIO_InitStruct);
 8001ace:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	485a      	ldr	r0, [pc, #360]	; (8001c40 <MX_GPIO_Init+0x604>)
 8001ad6:	f004 ffe1 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_INT_Pin */
	GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001ada:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001ae0:	4b5e      	ldr	r3, [pc, #376]	; (8001c5c <MX_GPIO_Init+0x620>)
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001ae8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aec:	4619      	mov	r1, r3
 8001aee:	4856      	ldr	r0, [pc, #344]	; (8001c48 <MX_GPIO_Init+0x60c>)
 8001af0:	f004 ffd4 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_RX_D0_Pin ARDUINO_TX_D1_Pin */
	GPIO_InitStruct.Pin = ARDUINO_RX_D0_Pin | ARDUINO_TX_D1_Pin;
 8001af4:	23c0      	movs	r3, #192	; 0xc0
 8001af6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afc:	2300      	movs	r3, #0
 8001afe:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b00:	2303      	movs	r3, #3
 8001b02:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8001b04:	2308      	movs	r3, #8
 8001b06:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	484f      	ldr	r0, [pc, #316]	; (8001c4c <MX_GPIO_Init+0x610>)
 8001b10:	f004 ffc4 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : ULPI_NXT_Pin */
	GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b14:	2310      	movs	r3, #16
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b18:	2302      	movs	r3, #2
 8001b1a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b20:	2303      	movs	r3, #3
 8001b22:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b24:	230a      	movs	r3, #10
 8001b26:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b28:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	484a      	ldr	r0, [pc, #296]	; (8001c58 <MX_GPIO_Init+0x61c>)
 8001b30:	f004 ffb4 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_D4_Pin ARDUINO_D2_Pin EXT_RST_Pin */
	GPIO_InitStruct.Pin = ARDUINO_D4_Pin | ARDUINO_D2_Pin | EXT_RST_Pin;
 8001b34:	23c8      	movs	r3, #200	; 0xc8
 8001b36:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b40:	2300      	movs	r3, #0
 8001b42:	63bb      	str	r3, [r7, #56]	; 0x38
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4842      	ldr	r0, [pc, #264]	; (8001c54 <MX_GPIO_Init+0x618>)
 8001b4c:	f004 ffa6 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_A4_Pin ARDUINO_A5_Pin ARDUINO_A1_Pin ARDUINO_A2_Pin
	 ARDUINO_A3_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A4_Pin | ARDUINO_A5_Pin | ARDUINO_A1_Pin
 8001b50:	f44f 63f8 	mov.w	r3, #1984	; 0x7c0
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
			| ARDUINO_A2_Pin | ARDUINO_A3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b56:	2303      	movs	r3, #3
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	483e      	ldr	r0, [pc, #248]	; (8001c60 <MX_GPIO_Init+0x624>)
 8001b66:	f004 ff99 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
	GPIO_InitStruct.Pin = ULPI_STP_Pin | ULPI_DIR_Pin;
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b7a:	230a      	movs	r3, #10
 8001b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b82:	4619      	mov	r1, r3
 8001b84:	4831      	ldr	r0, [pc, #196]	; (8001c4c <MX_GPIO_Init+0x610>)
 8001b86:	f004 ff89 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
	GPIO_InitStruct.Pin = RMII_MDC_Pin | RMII_RXD0_Pin | RMII_RXD1_Pin;
 8001b8a:	2332      	movs	r3, #50	; 0x32
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b8e:	2302      	movs	r3, #2
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b96:	2303      	movs	r3, #3
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001b9a:	230b      	movs	r3, #11
 8001b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4829      	ldr	r0, [pc, #164]	; (8001c4c <MX_GPIO_Init+0x610>)
 8001ba6:	f004 ff79 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB2 */
	GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001baa:	2304      	movs	r3, #4
 8001bac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bae:	2302      	movs	r3, #2
 8001bb0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001bba:	2309      	movs	r3, #9
 8001bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4827      	ldr	r0, [pc, #156]	; (8001c64 <MX_GPIO_Init+0x628>)
 8001bc6:	f004 ff69 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : QSPI_D1_Pin QSPI_D3_Pin QSPI_D0_Pin */
	GPIO_InitStruct.Pin = QSPI_D1_Pin | QSPI_D3_Pin | QSPI_D0_Pin;
 8001bca:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001bce:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bd8:	2303      	movs	r3, #3
 8001bda:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001bdc:	2309      	movs	r3, #9
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001be0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be4:	4619      	mov	r1, r3
 8001be6:	4817      	ldr	r0, [pc, #92]	; (8001c44 <MX_GPIO_Init+0x608>)
 8001be8:	f004 ff58 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : RMII_RXER_Pin */
	GPIO_InitStruct.Pin = RMII_RXER_Pin;
 8001bec:	2304      	movs	r3, #4
 8001bee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(RMII_RXER_GPIO_Port, &GPIO_InitStruct);
 8001bf8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4815      	ldr	r0, [pc, #84]	; (8001c54 <MX_GPIO_Init+0x618>)
 8001c00:	f004 ff4c 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
	GPIO_InitStruct.Pin = RMII_REF_CLK_Pin | RMII_MDIO_Pin | RMII_CRS_DV_Pin;
 8001c04:	2386      	movs	r3, #134	; 0x86
 8001c06:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c10:	2303      	movs	r3, #3
 8001c12:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001c14:	230b      	movs	r3, #11
 8001c16:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4808      	ldr	r0, [pc, #32]	; (8001c40 <MX_GPIO_Init+0x604>)
 8001c20:	f004 ff3c 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_A0_Pin */
	GPIO_InitStruct.Pin = ARDUINO_A0_Pin;
 8001c24:	2301      	movs	r3, #1
 8001c26:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	637b      	str	r3, [r7, #52]	; 0x34
	HAL_GPIO_Init(ARDUINO_A0_GPIO_Port, &GPIO_InitStruct);
 8001c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c34:	4619      	mov	r1, r3
 8001c36:	4802      	ldr	r0, [pc, #8]	; (8001c40 <MX_GPIO_Init+0x604>)
 8001c38:	f004 ff30 	bl	8006a9c <HAL_GPIO_Init>
 8001c3c:	e014      	b.n	8001c68 <MX_GPIO_Init+0x62c>
 8001c3e:	bf00      	nop
 8001c40:	40020000 	.word	0x40020000
 8001c44:	40020c00 	.word	0x40020c00
 8001c48:	40022000 	.word	0x40022000
 8001c4c:	40020800 	.word	0x40020800
 8001c50:	40022800 	.word	0x40022800
 8001c54:	40021800 	.word	0x40021800
 8001c58:	40021c00 	.word	0x40021c00
 8001c5c:	10120000 	.word	0x10120000
 8001c60:	40021400 	.word	0x40021400
 8001c64:	40020400 	.word	0x40020400

	/*Configure GPIO pins : DCMI_HSYNC_Pin PA6 */
	GPIO_InitStruct.Pin = DCMI_HSYNC_Pin | GPIO_PIN_6;
 8001c68:	2350      	movs	r3, #80	; 0x50
 8001c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6c:	2302      	movs	r3, #2
 8001c6e:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c74:	2300      	movs	r3, #0
 8001c76:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8001c78:	230d      	movs	r3, #13
 8001c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c80:	4619      	mov	r1, r3
 8001c82:	4824      	ldr	r0, [pc, #144]	; (8001d14 <MX_GPIO_Init+0x6d8>)
 8001c84:	f004 ff0a 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_SCL_Pin LCD_SDA_Pin */
	GPIO_InitStruct.Pin = LCD_SCL_Pin | LCD_SDA_Pin;
 8001c88:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c8e:	2312      	movs	r3, #18
 8001c90:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c96:	2303      	movs	r3, #3
 8001c98:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	481c      	ldr	r0, [pc, #112]	; (8001d18 <MX_GPIO_Init+0x6dc>)
 8001ca6:	f004 fef9 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
	GPIO_InitStruct.Pin = ULPI_CLK_Pin | ULPI_D0_Pin;
 8001caa:	2328      	movs	r3, #40	; 0x28
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cba:	230a      	movs	r3, #10
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4813      	ldr	r0, [pc, #76]	; (8001d14 <MX_GPIO_Init+0x6d8>)
 8001cc6:	f004 fee9 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pin : ARDUINO_PWM_D6_Pin */
	GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001cca:	2340      	movs	r3, #64	; 0x40
 8001ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cce:	2302      	movs	r3, #2
 8001cd0:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001cda:	2309      	movs	r3, #9
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001cde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	480c      	ldr	r0, [pc, #48]	; (8001d18 <MX_GPIO_Init+0x6dc>)
 8001ce6:	f004 fed9 	bl	8006a9c <HAL_GPIO_Init>

	/*Configure GPIO pins : ARDUINO_MISO_D12_Pin ARDUINO_MOSI_PWM_D11_Pin */
	GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin | ARDUINO_MOSI_PWM_D11_Pin;
 8001cea:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001cee:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	633b      	str	r3, [r7, #48]	; 0x30
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	637b      	str	r3, [r7, #52]	; 0x34
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	63bb      	str	r3, [r7, #56]	; 0x38
	GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cfc:	2305      	movs	r3, #5
 8001cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001d04:	4619      	mov	r1, r3
 8001d06:	4805      	ldr	r0, [pc, #20]	; (8001d1c <MX_GPIO_Init+0x6e0>)
 8001d08:	f004 fec8 	bl	8006a9c <HAL_GPIO_Init>

}
 8001d0c:	bf00      	nop
 8001d0e:	3740      	adds	r7, #64	; 0x40
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	40020000 	.word	0x40020000
 8001d18:	40021c00 	.word	0x40021c00
 8001d1c:	40020400 	.word	0x40020400

08001d20 <BSP_AUDIO_IN_TransferComplete_CallBack>:

/* USER CODE BEGIN 4 */
void BSP_AUDIO_IN_TransferComplete_CallBack(void) {
 8001d20:	b480      	push	{r7}
 8001d22:	af00      	add	r7, sp, #0
	audio_rec_buffer_state = BUFFER_OFFSET_FULL;
 8001d24:	4b03      	ldr	r3, [pc, #12]	; (8001d34 <BSP_AUDIO_IN_TransferComplete_CallBack+0x14>)
 8001d26:	2202      	movs	r2, #2
 8001d28:	601a      	str	r2, [r3, #0]
	return;
 8001d2a:	bf00      	nop
}
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	20009150 	.word	0x20009150

08001d38 <BSP_AUDIO_IN_HalfTransfer_CallBack>:

void BSP_AUDIO_IN_HalfTransfer_CallBack(void) {
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
	audio_rec_buffer_state = BUFFER_OFFSET_HALF;
 8001d3c:	4b03      	ldr	r3, [pc, #12]	; (8001d4c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x14>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	601a      	str	r2, [r3, #0]
	return;
 8001d42:	bf00      	nop
}
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	20009150 	.word	0x20009150

08001d50 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const *argument) {
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f00e fcbb 	bl	80106d4 <osDelay>
 8001d5e:	e7fb      	b.n	8001d58 <StartDefaultTask+0x8>

08001d60 <SDTask>:
 * @brief Function implementing the SD thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_SDTask */
void SDTask(void const *argument) {
 8001d60:	b5b0      	push	{r4, r5, r7, lr}
 8001d62:	f5ad 6dd3 	sub.w	sp, sp, #1688	; 0x698
 8001d66:	af02      	add	r7, sp, #8
 8001d68:	1d3b      	adds	r3, r7, #4
 8001d6a:	6018      	str	r0, [r3, #0]
	/* USER CODE BEGIN SDTask */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten; /* File write/read counts */
	uint8_t wtext[] = "La version v1.16.1 ne devrait plus poser de soucis :)"; /* File write buffer */
 8001d6c:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <SDTask+0x150>)
 8001d6e:	f207 644c 	addw	r4, r7, #1612	; 0x64c
 8001d72:	461d      	mov	r5, r3
 8001d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d84:	6020      	str	r0, [r4, #0]
 8001d86:	3404      	adds	r4, #4
 8001d88:	8021      	strh	r1, [r4, #0]
	uint8_t rtext[_MAX_SS];/* File read buffer */
	if (f_mount(&SDFatFS, (TCHAR const*) SDPath, 0) != FR_OK) {
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	4949      	ldr	r1, [pc, #292]	; (8001eb4 <SDTask+0x154>)
 8001d8e:	484a      	ldr	r0, [pc, #296]	; (8001eb8 <SDTask+0x158>)
 8001d90:	f00d fab2 	bl	800f2f8 <f_mount>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d002      	beq.n	8001da0 <SDTask+0x40>
		Error_Handler();
 8001d9a:	f000 f91d 	bl	8001fd8 <Error_Handler>
 8001d9e:	e038      	b.n	8001e12 <SDTask+0xb2>
	} else {
		if (f_mkfs((TCHAR const*) SDPath, FM_ANY, 0, rtext, sizeof(rtext))
 8001da0:	f207 434c 	addw	r3, r7, #1100	; 0x44c
 8001da4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001da8:	9200      	str	r2, [sp, #0]
 8001daa:	2200      	movs	r2, #0
 8001dac:	2107      	movs	r1, #7
 8001dae:	4841      	ldr	r0, [pc, #260]	; (8001eb4 <SDTask+0x154>)
 8001db0:	f00d ff24 	bl	800fbfc <f_mkfs>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <SDTask+0x60>
				!= FR_OK) {
			Error_Handler();
 8001dba:	f000 f90d 	bl	8001fd8 <Error_Handler>
 8001dbe:	e028      	b.n	8001e12 <SDTask+0xb2>
		} else {
			//Open file for writing (Create)
			if (f_open(&SDFile, "EEA.TXT", FA_CREATE_ALWAYS | FA_WRITE)
 8001dc0:	220a      	movs	r2, #10
 8001dc2:	493e      	ldr	r1, [pc, #248]	; (8001ebc <SDTask+0x15c>)
 8001dc4:	483e      	ldr	r0, [pc, #248]	; (8001ec0 <SDTask+0x160>)
 8001dc6:	f00d fafb 	bl	800f3c0 <f_open>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d002      	beq.n	8001dd6 <SDTask+0x76>
					!= FR_OK) {
				Error_Handler();
 8001dd0:	f000 f902 	bl	8001fd8 <Error_Handler>
 8001dd4:	e01d      	b.n	8001e12 <SDTask+0xb2>
			} else {
				//Write to the text file
				res = f_write(&SDFile, wtext, strlen((char*) wtext),
 8001dd6:	f207 634c 	addw	r3, r7, #1612	; 0x64c
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fa18 	bl	8000210 <strlen>
 8001de0:	4602      	mov	r2, r0
 8001de2:	f207 6384 	addw	r3, r7, #1668	; 0x684
 8001de6:	f207 614c 	addw	r1, r7, #1612	; 0x64c
 8001dea:	4835      	ldr	r0, [pc, #212]	; (8001ec0 <SDTask+0x160>)
 8001dec:	f00d fca9 	bl	800f742 <f_write>
 8001df0:	4603      	mov	r3, r0
 8001df2:	f887 368b 	strb.w	r3, [r7, #1675]	; 0x68b
						(void*) &byteswritten);
				if ((byteswritten == 0) || (res != FR_OK)) {
 8001df6:	f8d7 3684 	ldr.w	r3, [r7, #1668]	; 0x684
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <SDTask+0xa6>
 8001dfe:	f897 368b 	ldrb.w	r3, [r7, #1675]	; 0x68b
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d002      	beq.n	8001e0c <SDTask+0xac>
					Error_Handler();
 8001e06:	f000 f8e7 	bl	8001fd8 <Error_Handler>
 8001e0a:	e002      	b.n	8001e12 <SDTask+0xb2>
				} else {
					f_close(&SDFile);
 8001e0c:	482c      	ldr	r0, [pc, #176]	; (8001ec0 <SDTask+0x160>)
 8001e0e:	f00d fec5 	bl	800fb9c <f_close>
			}
		}
	}

	Sample sample1;
	sprintf(sample1.nom, "Test1");
 8001e12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e16:	f503 730c 	add.w	r3, r3, #560	; 0x230
 8001e1a:	492a      	ldr	r1, [pc, #168]	; (8001ec4 <SDTask+0x164>)
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f011 fb23 	bl	8013468 <siprintf>
	sample1.numchannels = 2;
 8001e22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e26:	2202      	movs	r2, #2
 8001e28:	f883 223d 	strb.w	r2, [r3, #573]	; 0x23d
	sample1.samplelength = 2;
 8001e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e30:	2202      	movs	r2, #2
 8001e32:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
	sample1.samplerate = 16000;
 8001e36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e3a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001e3e:	f8a3 223a 	strh.w	r2, [r3, #570]	; 0x23a
	sample1.numsamples = 0;
 8001e42:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e46:	2200      	movs	r2, #0
 8001e48:	f8c3 2240 	str.w	r2, [r3, #576]	; 0x240
	CreateWaveFile(&sample1);
 8001e4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7fe fbe7 	bl	8000624 <CreateWaveFile>

	uint8_t data[512] = {0};
 8001e56:	f107 0308 	add.w	r3, r7, #8
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	601a      	str	r2, [r3, #0]
 8001e5e:	3304      	adds	r3, #4
 8001e60:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8001e64:	2100      	movs	r1, #0
 8001e66:	4618      	mov	r0, r3
 8001e68:	f011 faf6 	bl	8013458 <memset>
	for (int j = 0; j < 512; ++j) {
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 8001e72:	e00b      	b.n	8001e8c <SDTask+0x12c>
		data[j] = 25;
 8001e74:	f107 0208 	add.w	r2, r7, #8
 8001e78:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8001e7c:	4413      	add	r3, r2
 8001e7e:	2219      	movs	r2, #25
 8001e80:	701a      	strb	r2, [r3, #0]
	for (int j = 0; j < 512; ++j) {
 8001e82:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8001e86:	3301      	adds	r3, #1
 8001e88:	f8c7 368c 	str.w	r3, [r7, #1676]	; 0x68c
 8001e8c:	f8d7 368c 	ldr.w	r3, [r7, #1676]	; 0x68c
 8001e90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e94:	dbee      	blt.n	8001e74 <SDTask+0x114>
	}
	AddData(&sample1, data);
 8001e96:	f107 0208 	add.w	r2, r7, #8
 8001e9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e9e:	4611      	mov	r1, r2
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe fcab 	bl	80007fc <AddData>
	//SetSizeBytes(&sample1);


	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8001ea6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001eaa:	f00e fc13 	bl	80106d4 <osDelay>
 8001eae:	e7fa      	b.n	8001ea6 <SDTask+0x146>
 8001eb0:	08013da4 	.word	0x08013da4
 8001eb4:	200092d4 	.word	0x200092d4
 8001eb8:	20009508 	.word	0x20009508
 8001ebc:	08013d94 	.word	0x08013d94
 8001ec0:	200092d8 	.word	0x200092d8
 8001ec4:	08013d9c 	.word	0x08013d9c

08001ec8 <AudioTask>:
 * @brief Function implementing the Audio thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_AudioTask */
void AudioTask(void const *argument) {
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af02      	add	r7, sp, #8
 8001ece:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN AudioTask */
	if (BSP_AUDIO_IN_OUT_Init(INPUT_DEVICE_DIGITAL_MICROPHONE_2,
 8001ed0:	2302      	movs	r3, #2
 8001ed2:	9300      	str	r3, [sp, #0]
 8001ed4:	2310      	movs	r3, #16
 8001ed6:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8001eda:	2102      	movs	r1, #2
 8001edc:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001ee0:	f000 fc62 	bl	80027a8 <BSP_AUDIO_IN_OUT_Init>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d112      	bne.n	8001f10 <AudioTask+0x48>
	OUTPUT_DEVICE_HEADPHONE, 16000, DEFAULT_AUDIO_IN_BIT_RESOLUTION,
	DEFAULT_AUDIO_IN_CHANNEL_NBR) == AUDIO_OK) {
		BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8001eea:	f04f 30ff 	mov.w	r0, #4294967295
 8001eee:	f000 ffc5 	bl	8002e7c <BSP_LCD_SetBackColor>
		BSP_LCD_SetTextColor(LCD_COLOR_GREEN);
 8001ef2:	f04f 20ff 	mov.w	r0, #4278255360	; 0xff00ff00
 8001ef6:	f000 ffa9 	bl	8002e4c <BSP_LCD_SetTextColor>
		BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize() - 90,
 8001efa:	f000 ff23 	bl	8002d44 <BSP_LCD_GetYSize>
 8001efe:	4603      	mov	r3, r0
 8001f00:	b29b      	uxth	r3, r3
 8001f02:	3b5a      	subs	r3, #90	; 0x5a
 8001f04:	b299      	uxth	r1, r3
 8001f06:	2301      	movs	r3, #1
 8001f08:	4a24      	ldr	r2, [pc, #144]	; (8001f9c <AudioTask+0xd4>)
 8001f0a:	2000      	movs	r0, #0
 8001f0c:	f001 f856 	bl	8002fbc <BSP_LCD_DisplayStringAt>
				(uint8_t*) "  AUDIO RECORD INIT OK  ", CENTER_MODE);
	}

	/* Initialize SDRAM buffers */
	memset((uint16_t*) AUDIO_BUFFER_IN, 0, AUDIO_BLOCK_SIZE * 2);
 8001f10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f14:	2100      	movs	r1, #0
 8001f16:	4822      	ldr	r0, [pc, #136]	; (8001fa0 <AudioTask+0xd8>)
 8001f18:	f011 fa9e 	bl	8013458 <memset>
	memset((uint16_t*) AUDIO_BUFFER_OUT, 0, AUDIO_BLOCK_SIZE * 2);
 8001f1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001f20:	2100      	movs	r1, #0
 8001f22:	4820      	ldr	r0, [pc, #128]	; (8001fa4 <AudioTask+0xdc>)
 8001f24:	f011 fa98 	bl	8013458 <memset>
	audio_rec_buffer_state = BUFFER_OFFSET_NONE;
 8001f28:	4b1f      	ldr	r3, [pc, #124]	; (8001fa8 <AudioTask+0xe0>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	601a      	str	r2, [r3, #0]

	/* Start Recording */
	BSP_AUDIO_IN_Record((uint16_t*) AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 8001f2e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f32:	481b      	ldr	r0, [pc, #108]	; (8001fa0 <AudioTask+0xd8>)
 8001f34:	f000 fcb2 	bl	800289c <BSP_AUDIO_IN_Record>
	BSP_AUDIO_IN_SetVolume(80);
 8001f38:	2050      	movs	r0, #80	; 0x50
 8001f3a:	f000 fcc7 	bl	80028cc <BSP_AUDIO_IN_SetVolume>
	/* Start Playback */
	BSP_AUDIO_OUT_SetAudioFrameSlot(CODEC_AUDIOFRAME_SLOT_02);
 8001f3e:	2005      	movs	r0, #5
 8001f40:	f000 fa92 	bl	8002468 <BSP_AUDIO_OUT_SetAudioFrameSlot>
	BSP_AUDIO_OUT_Play((uint16_t*) AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE * 2);
 8001f44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001f48:	4816      	ldr	r0, [pc, #88]	; (8001fa4 <AudioTask+0xdc>)
 8001f4a:	f000 fa63 	bl	8002414 <BSP_AUDIO_OUT_Play>
	/* Infinite loop */
	for (;;) {
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 8001f4e:	bf00      	nop
 8001f50:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <AudioTask+0xe0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d1fb      	bne.n	8001f50 <AudioTask+0x88>
			;
		RL_sep((uint16_t*) AUDIO_BUFFER_IN, AUDIO_BLOCK_SIZE);
 8001f58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f5c:	4810      	ldr	r0, [pc, #64]	; (8001fa0 <AudioTask+0xd8>)
 8001f5e:	f7fe ff13 	bl	8000d88 <RL_sep>
		treatment();
 8001f62:	f7fe ff51 	bl	8000e08 <treatment>
		RL_cat2((uint16_t*) AUDIO_BUFFER_OUT, AUDIO_BLOCK_SIZE);
 8001f66:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f6a:	480e      	ldr	r0, [pc, #56]	; (8001fa4 <AudioTask+0xdc>)
 8001f6c:	f7fe ff76 	bl	8000e5c <RL_cat2>
		while (audio_rec_buffer_state != BUFFER_OFFSET_FULL)
 8001f70:	bf00      	nop
 8001f72:	4b0d      	ldr	r3, [pc, #52]	; (8001fa8 <AudioTask+0xe0>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d1fb      	bne.n	8001f72 <AudioTask+0xaa>
			;
		RL_sep((uint16_t*) (AUDIO_BUFFER_IN + (AUDIO_BLOCK_SIZE)),
 8001f7a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f7e:	480b      	ldr	r0, [pc, #44]	; (8001fac <AudioTask+0xe4>)
 8001f80:	f7fe ff02 	bl	8000d88 <RL_sep>
		AUDIO_BLOCK_SIZE);
		treatment();
 8001f84:	f7fe ff40 	bl	8000e08 <treatment>
		RL_cat2((uint16_t*) (AUDIO_BUFFER_OUT + (AUDIO_BLOCK_SIZE)),
 8001f88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001f8c:	4808      	ldr	r0, [pc, #32]	; (8001fb0 <AudioTask+0xe8>)
 8001f8e:	f7fe ff65 	bl	8000e5c <RL_cat2>
		AUDIO_BLOCK_SIZE);
		osDelay(2);
 8001f92:	2002      	movs	r0, #2
 8001f94:	f00e fb9e 	bl	80106d4 <osDelay>
		while (audio_rec_buffer_state != BUFFER_OFFSET_HALF)
 8001f98:	e7d9      	b.n	8001f4e <AudioTask+0x86>
 8001f9a:	bf00      	nop
 8001f9c:	08013ddc 	.word	0x08013ddc
 8001fa0:	c007f800 	.word	0xc007f800
 8001fa4:	c007fc00 	.word	0xc007fc00
 8001fa8:	20009150 	.word	0x20009150
 8001fac:	c007fa00 	.word	0xc007fa00
 8001fb0:	c007fe00 	.word	0xc007fe00

08001fb4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM6) {
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d101      	bne.n	8001fca <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001fc6:	f003 fdb3 	bl	8005b30 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001fca:	bf00      	nop
 8001fcc:	3708      	adds	r7, #8
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	40001000 	.word	0x40001000

08001fd8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fdc:	b672      	cpsid	i
}
 8001fde:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001fe0:	e7fe      	b.n	8001fe0 <Error_Handler+0x8>
	...

08001fe4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b08c      	sub	sp, #48	; 0x30
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a51      	ldr	r2, [pc, #324]	; (8002134 <I2Cx_MspInit+0x150>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d14d      	bne.n	8002090 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8001ff4:	4b50      	ldr	r3, [pc, #320]	; (8002138 <I2Cx_MspInit+0x154>)
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff8:	4a4f      	ldr	r2, [pc, #316]	; (8002138 <I2Cx_MspInit+0x154>)
 8001ffa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ffe:	6313      	str	r3, [r2, #48]	; 0x30
 8002000:	4b4d      	ldr	r3, [pc, #308]	; (8002138 <I2Cx_MspInit+0x154>)
 8002002:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 800200c:	2380      	movs	r3, #128	; 0x80
 800200e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002010:	2312      	movs	r3, #18
 8002012:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002018:	2302      	movs	r3, #2
 800201a:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 800201c:	2304      	movs	r3, #4
 800201e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002020:	f107 031c 	add.w	r3, r7, #28
 8002024:	4619      	mov	r1, r3
 8002026:	4845      	ldr	r0, [pc, #276]	; (800213c <I2Cx_MspInit+0x158>)
 8002028:	f004 fd38 	bl	8006a9c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 800202c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002032:	f107 031c 	add.w	r3, r7, #28
 8002036:	4619      	mov	r1, r3
 8002038:	4840      	ldr	r0, [pc, #256]	; (800213c <I2Cx_MspInit+0x158>)
 800203a:	f004 fd2f 	bl	8006a9c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 800203e:	4b3e      	ldr	r3, [pc, #248]	; (8002138 <I2Cx_MspInit+0x154>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	4a3d      	ldr	r2, [pc, #244]	; (8002138 <I2Cx_MspInit+0x154>)
 8002044:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002048:	6413      	str	r3, [r2, #64]	; 0x40
 800204a:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <I2Cx_MspInit+0x154>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002056:	4b38      	ldr	r3, [pc, #224]	; (8002138 <I2Cx_MspInit+0x154>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4a37      	ldr	r2, [pc, #220]	; (8002138 <I2Cx_MspInit+0x154>)
 800205c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002060:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002062:	4b35      	ldr	r3, [pc, #212]	; (8002138 <I2Cx_MspInit+0x154>)
 8002064:	6a1b      	ldr	r3, [r3, #32]
 8002066:	4a34      	ldr	r2, [pc, #208]	; (8002138 <I2Cx_MspInit+0x154>)
 8002068:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800206c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	210f      	movs	r1, #15
 8002072:	2048      	movs	r0, #72	; 0x48
 8002074:	f003 fe58 	bl	8005d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002078:	2048      	movs	r0, #72	; 0x48
 800207a:	f003 fe71 	bl	8005d60 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	210f      	movs	r1, #15
 8002082:	2049      	movs	r0, #73	; 0x49
 8002084:	f003 fe50 	bl	8005d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002088:	2049      	movs	r0, #73	; 0x49
 800208a:	f003 fe69 	bl	8005d60 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800208e:	e04d      	b.n	800212c <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002090:	4b29      	ldr	r3, [pc, #164]	; (8002138 <I2Cx_MspInit+0x154>)
 8002092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002094:	4a28      	ldr	r2, [pc, #160]	; (8002138 <I2Cx_MspInit+0x154>)
 8002096:	f043 0302 	orr.w	r3, r3, #2
 800209a:	6313      	str	r3, [r2, #48]	; 0x30
 800209c:	4b26      	ldr	r3, [pc, #152]	; (8002138 <I2Cx_MspInit+0x154>)
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	613b      	str	r3, [r7, #16]
 80020a6:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80020a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80020ac:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80020ae:	2312      	movs	r3, #18
 80020b0:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80020b6:	2302      	movs	r3, #2
 80020b8:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80020ba:	2304      	movs	r3, #4
 80020bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	4619      	mov	r1, r3
 80020c4:	481e      	ldr	r0, [pc, #120]	; (8002140 <I2Cx_MspInit+0x15c>)
 80020c6:	f004 fce9 	bl	8006a9c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80020ca:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80020d0:	f107 031c 	add.w	r3, r7, #28
 80020d4:	4619      	mov	r1, r3
 80020d6:	481a      	ldr	r0, [pc, #104]	; (8002140 <I2Cx_MspInit+0x15c>)
 80020d8:	f004 fce0 	bl	8006a9c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80020dc:	4b16      	ldr	r3, [pc, #88]	; (8002138 <I2Cx_MspInit+0x154>)
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	4a15      	ldr	r2, [pc, #84]	; (8002138 <I2Cx_MspInit+0x154>)
 80020e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020e6:	6413      	str	r3, [r2, #64]	; 0x40
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <I2Cx_MspInit+0x154>)
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80020f4:	4b10      	ldr	r3, [pc, #64]	; (8002138 <I2Cx_MspInit+0x154>)
 80020f6:	6a1b      	ldr	r3, [r3, #32]
 80020f8:	4a0f      	ldr	r2, [pc, #60]	; (8002138 <I2Cx_MspInit+0x154>)
 80020fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80020fe:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <I2Cx_MspInit+0x154>)
 8002102:	6a1b      	ldr	r3, [r3, #32]
 8002104:	4a0c      	ldr	r2, [pc, #48]	; (8002138 <I2Cx_MspInit+0x154>)
 8002106:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800210a:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	210f      	movs	r1, #15
 8002110:	201f      	movs	r0, #31
 8002112:	f003 fe09 	bl	8005d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 8002116:	201f      	movs	r0, #31
 8002118:	f003 fe22 	bl	8005d60 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 800211c:	2200      	movs	r2, #0
 800211e:	210f      	movs	r1, #15
 8002120:	2020      	movs	r0, #32
 8002122:	f003 fe01 	bl	8005d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 8002126:	2020      	movs	r0, #32
 8002128:	f003 fe1a 	bl	8005d60 <HAL_NVIC_EnableIRQ>
}
 800212c:	bf00      	nop
 800212e:	3730      	adds	r7, #48	; 0x30
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}
 8002134:	20000360 	.word	0x20000360
 8002138:	40023800 	.word	0x40023800
 800213c:	40021c00 	.word	0x40021c00
 8002140:	40020400 	.word	0x40020400

08002144 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f005 fa91 	bl	8007674 <HAL_I2C_GetState>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d125      	bne.n	80021a4 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a14      	ldr	r2, [pc, #80]	; (80021ac <I2Cx_Init+0x68>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d103      	bne.n	8002168 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	4a13      	ldr	r2, [pc, #76]	; (80021b0 <I2Cx_Init+0x6c>)
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	e002      	b.n	800216e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <I2Cx_Init+0x70>)
 800216c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a11      	ldr	r2, [pc, #68]	; (80021b8 <I2Cx_Init+0x74>)
 8002172:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2201      	movs	r2, #1
 800217e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f7ff ff23 	bl	8001fe4 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f004 ff66 	bl	8007070 <HAL_I2C_Init>
  }
}
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000360 	.word	0x20000360
 80021b0:	40005c00 	.word	0x40005c00
 80021b4:	40005400 	.word	0x40005400
 80021b8:	40912732 	.word	0x40912732

080021bc <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b08a      	sub	sp, #40	; 0x28
 80021c0:	af04      	add	r7, sp, #16
 80021c2:	60f8      	str	r0, [r7, #12]
 80021c4:	4608      	mov	r0, r1
 80021c6:	4611      	mov	r1, r2
 80021c8:	461a      	mov	r2, r3
 80021ca:	4603      	mov	r3, r0
 80021cc:	72fb      	strb	r3, [r7, #11]
 80021ce:	460b      	mov	r3, r1
 80021d0:	813b      	strh	r3, [r7, #8]
 80021d2:	4613      	mov	r3, r2
 80021d4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80021d6:	2300      	movs	r3, #0
 80021d8:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80021da:	7afb      	ldrb	r3, [r7, #11]
 80021dc:	b299      	uxth	r1, r3
 80021de:	88f8      	ldrh	r0, [r7, #6]
 80021e0:	893a      	ldrh	r2, [r7, #8]
 80021e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80021e6:	9302      	str	r3, [sp, #8]
 80021e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80021ea:	9301      	str	r3, [sp, #4]
 80021ec:	6a3b      	ldr	r3, [r7, #32]
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	4603      	mov	r3, r0
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f005 f924 	bl	8007440 <HAL_I2C_Mem_Read>
 80021f8:	4603      	mov	r3, r0
 80021fa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80021fc:	7dfb      	ldrb	r3, [r7, #23]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d004      	beq.n	800220c <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8002202:	7afb      	ldrb	r3, [r7, #11]
 8002204:	4619      	mov	r1, r3
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f832 	bl	8002270 <I2Cx_Error>
  }
  return status;    
 800220c:	7dfb      	ldrb	r3, [r7, #23]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}

08002216 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 8002216:	b580      	push	{r7, lr}
 8002218:	b08a      	sub	sp, #40	; 0x28
 800221a:	af04      	add	r7, sp, #16
 800221c:	60f8      	str	r0, [r7, #12]
 800221e:	4608      	mov	r0, r1
 8002220:	4611      	mov	r1, r2
 8002222:	461a      	mov	r2, r3
 8002224:	4603      	mov	r3, r0
 8002226:	72fb      	strb	r3, [r7, #11]
 8002228:	460b      	mov	r3, r1
 800222a:	813b      	strh	r3, [r7, #8]
 800222c:	4613      	mov	r3, r2
 800222e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002230:	2300      	movs	r3, #0
 8002232:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002234:	7afb      	ldrb	r3, [r7, #11]
 8002236:	b299      	uxth	r1, r3
 8002238:	88f8      	ldrh	r0, [r7, #6]
 800223a:	893a      	ldrh	r2, [r7, #8]
 800223c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002240:	9302      	str	r3, [sp, #8]
 8002242:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002244:	9301      	str	r3, [sp, #4]
 8002246:	6a3b      	ldr	r3, [r7, #32]
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	4603      	mov	r3, r0
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f004 ffe3 	bl	8007218 <HAL_I2C_Mem_Write>
 8002252:	4603      	mov	r3, r0
 8002254:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d004      	beq.n	8002266 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800225c:	7afb      	ldrb	r3, [r7, #11]
 800225e:	4619      	mov	r1, r3
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f000 f805 	bl	8002270 <I2Cx_Error>
  }
  return status;
 8002266:	7dfb      	ldrb	r3, [r7, #23]
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	460b      	mov	r3, r1
 800227a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800227c:	6878      	ldr	r0, [r7, #4]
 800227e:	f004 ff87 	bl	8007190 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff ff5e 	bl	8002144 <I2Cx_Init>
}
 8002288:	bf00      	nop
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <AUDIO_IO_Init>:
/**
  * @brief  Initializes Audio low level.
  * @retval None
  */
void AUDIO_IO_Init(void) 
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002294:	4802      	ldr	r0, [pc, #8]	; (80022a0 <AUDIO_IO_Init+0x10>)
 8002296:	f7ff ff55 	bl	8002144 <I2Cx_Init>
}
 800229a:	bf00      	nop
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	20000360 	.word	0x20000360

080022a4 <AUDIO_IO_DeInit>:
/**
  * @brief  Deinitializes Audio low level.
  * @retval None
  */
void AUDIO_IO_DeInit(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
}
 80022a8:	bf00      	nop
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr
	...

080022b4 <AUDIO_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
void AUDIO_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b086      	sub	sp, #24
 80022b8:	af02      	add	r7, sp, #8
 80022ba:	4603      	mov	r3, r0
 80022bc:	71fb      	strb	r3, [r7, #7]
 80022be:	460b      	mov	r3, r1
 80022c0:	80bb      	strh	r3, [r7, #4]
 80022c2:	4613      	mov	r3, r2
 80022c4:	807b      	strh	r3, [r7, #2]
  uint16_t tmp = Value;
 80022c6:	887b      	ldrh	r3, [r7, #2]
 80022c8:	81fb      	strh	r3, [r7, #14]
  
  Value = ((uint16_t)(tmp >> 8) & 0x00FF);
 80022ca:	89fb      	ldrh	r3, [r7, #14]
 80022cc:	0a1b      	lsrs	r3, r3, #8
 80022ce:	b29b      	uxth	r3, r3
 80022d0:	807b      	strh	r3, [r7, #2]
  
  Value |= ((uint16_t)(tmp << 8)& 0xFF00);
 80022d2:	89fb      	ldrh	r3, [r7, #14]
 80022d4:	021b      	lsls	r3, r3, #8
 80022d6:	b29b      	uxth	r3, r3
 80022d8:	b21a      	sxth	r2, r3
 80022da:	887b      	ldrh	r3, [r7, #2]
 80022dc:	b21b      	sxth	r3, r3
 80022de:	4313      	orrs	r3, r2
 80022e0:	b21b      	sxth	r3, r3
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	807b      	strh	r3, [r7, #2]
  
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT,(uint8_t*)&Value, 2);
 80022e6:	88ba      	ldrh	r2, [r7, #4]
 80022e8:	79f9      	ldrb	r1, [r7, #7]
 80022ea:	2302      	movs	r3, #2
 80022ec:	9301      	str	r3, [sp, #4]
 80022ee:	1cbb      	adds	r3, r7, #2
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	2302      	movs	r3, #2
 80022f4:	4803      	ldr	r0, [pc, #12]	; (8002304 <AUDIO_IO_Write+0x50>)
 80022f6:	f7ff ff8e 	bl	8002216 <I2Cx_WriteMultiple>
}
 80022fa:	bf00      	nop
 80022fc:	3710      	adds	r7, #16
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	20000360 	.word	0x20000360

08002308 <AUDIO_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address 
  * @retval Data to be read
  */
uint16_t AUDIO_IO_Read(uint8_t Addr, uint16_t Reg)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af02      	add	r7, sp, #8
 800230e:	4603      	mov	r3, r0
 8002310:	460a      	mov	r2, r1
 8002312:	71fb      	strb	r3, [r7, #7]
 8002314:	4613      	mov	r3, r2
 8002316:	80bb      	strh	r3, [r7, #4]
  uint16_t read_value = 0, tmp = 0;
 8002318:	2300      	movs	r3, #0
 800231a:	81bb      	strh	r3, [r7, #12]
 800231c:	2300      	movs	r3, #0
 800231e:	81fb      	strh	r3, [r7, #14]
  
  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_16BIT, (uint8_t*)&read_value, 2);
 8002320:	88ba      	ldrh	r2, [r7, #4]
 8002322:	79f9      	ldrb	r1, [r7, #7]
 8002324:	2302      	movs	r3, #2
 8002326:	9301      	str	r3, [sp, #4]
 8002328:	f107 030c 	add.w	r3, r7, #12
 800232c:	9300      	str	r3, [sp, #0]
 800232e:	2302      	movs	r3, #2
 8002330:	480a      	ldr	r0, [pc, #40]	; (800235c <AUDIO_IO_Read+0x54>)
 8002332:	f7ff ff43 	bl	80021bc <I2Cx_ReadMultiple>
  
  tmp = ((uint16_t)(read_value >> 8) & 0x00FF);
 8002336:	89bb      	ldrh	r3, [r7, #12]
 8002338:	0a1b      	lsrs	r3, r3, #8
 800233a:	81fb      	strh	r3, [r7, #14]
  
  tmp |= ((uint16_t)(read_value << 8)& 0xFF00);
 800233c:	89bb      	ldrh	r3, [r7, #12]
 800233e:	021b      	lsls	r3, r3, #8
 8002340:	b29b      	uxth	r3, r3
 8002342:	b21a      	sxth	r2, r3
 8002344:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002348:	4313      	orrs	r3, r2
 800234a:	b21b      	sxth	r3, r3
 800234c:	81fb      	strh	r3, [r7, #14]
  
  read_value = tmp;
 800234e:	89fb      	ldrh	r3, [r7, #14]
 8002350:	81bb      	strh	r3, [r7, #12]
  
  return read_value;
 8002352:	89bb      	ldrh	r3, [r7, #12]
}
 8002354:	4618      	mov	r0, r3
 8002356:	3710      	adds	r7, #16
 8002358:	46bd      	mov	sp, r7
 800235a:	bd80      	pop	{r7, pc}
 800235c:	20000360 	.word	0x20000360

08002360 <AUDIO_IO_Delay>:
  * @brief  AUDIO Codec delay 
  * @param  Delay: Delay in ms
  * @retval None
  */
void AUDIO_IO_Delay(uint32_t Delay)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b082      	sub	sp, #8
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f003 fc01 	bl	8005b70 <HAL_Delay>
}
 800236e:	bf00      	nop
 8002370:	3708      	adds	r7, #8
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}
	...

08002378 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800237c:	4802      	ldr	r0, [pc, #8]	; (8002388 <TS_IO_Init+0x10>)
 800237e:	f7ff fee1 	bl	8002144 <I2Cx_Init>
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000360 	.word	0x20000360

0800238c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af02      	add	r7, sp, #8
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
 8002396:	460b      	mov	r3, r1
 8002398:	71bb      	strb	r3, [r7, #6]
 800239a:	4613      	mov	r3, r2
 800239c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800239e:	79bb      	ldrb	r3, [r7, #6]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	79f9      	ldrb	r1, [r7, #7]
 80023a4:	2301      	movs	r3, #1
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	1d7b      	adds	r3, r7, #5
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	2301      	movs	r3, #1
 80023ae:	4803      	ldr	r0, [pc, #12]	; (80023bc <TS_IO_Write+0x30>)
 80023b0:	f7ff ff31 	bl	8002216 <I2Cx_WriteMultiple>
}
 80023b4:	bf00      	nop
 80023b6:	3708      	adds	r7, #8
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	20000360 	.word	0x20000360

080023c0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af02      	add	r7, sp, #8
 80023c6:	4603      	mov	r3, r0
 80023c8:	460a      	mov	r2, r1
 80023ca:	71fb      	strb	r3, [r7, #7]
 80023cc:	4613      	mov	r3, r2
 80023ce:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80023d4:	79bb      	ldrb	r3, [r7, #6]
 80023d6:	b29a      	uxth	r2, r3
 80023d8:	79f9      	ldrb	r1, [r7, #7]
 80023da:	2301      	movs	r3, #1
 80023dc:	9301      	str	r3, [sp, #4]
 80023de:	f107 030f 	add.w	r3, r7, #15
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	2301      	movs	r3, #1
 80023e6:	4804      	ldr	r0, [pc, #16]	; (80023f8 <TS_IO_Read+0x38>)
 80023e8:	f7ff fee8 	bl	80021bc <I2Cx_ReadMultiple>

  return read_value;
 80023ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000360 	.word	0x20000360

080023fc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f003 fbb3 	bl	8005b70 <HAL_Delay>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <BSP_AUDIO_OUT_Play>:
  * @param  Size: Number of audio data in BYTES unit.
  *         In memory, first element is for left channel, second element is for right channel
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_OUT_Play(uint16_t* pBuffer, uint32_t Size)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  /* Call the audio Codec Play function */
  if(audio_drv->Play(AUDIO_I2C_ADDRESS, pBuffer, Size) != 0)
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <BSP_AUDIO_OUT_Play+0x4c>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	b292      	uxth	r2, r2
 8002428:	6879      	ldr	r1, [r7, #4]
 800242a:	2034      	movs	r0, #52	; 0x34
 800242c:	4798      	blx	r3
 800242e:	4603      	mov	r3, r0
 8002430:	2b00      	cmp	r3, #0
 8002432:	d001      	beq.n	8002438 <BSP_AUDIO_OUT_Play+0x24>
  {  
    return AUDIO_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	e00f      	b.n	8002458 <BSP_AUDIO_OUT_Play+0x44>
  }
  else
  {
    /* Update the Media layer and enable it for play */  
    HAL_SAI_Transmit_DMA(&haudio_out_sai, (uint8_t*) pBuffer, DMA_MAX(Size / AUDIODATA_SIZE));
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800243e:	d203      	bcs.n	8002448 <BSP_AUDIO_OUT_Play+0x34>
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	085b      	lsrs	r3, r3, #1
 8002444:	b29b      	uxth	r3, r3
 8002446:	e001      	b.n	800244c <BSP_AUDIO_OUT_Play+0x38>
 8002448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800244c:	461a      	mov	r2, r3
 800244e:	6879      	ldr	r1, [r7, #4]
 8002450:	4804      	ldr	r0, [pc, #16]	; (8002464 <BSP_AUDIO_OUT_Play+0x50>)
 8002452:	f007 fbb1 	bl	8009bb8 <HAL_SAI_Transmit_DMA>
    
    return AUDIO_OK;
 8002456:	2300      	movs	r3, #0
  }
}
 8002458:	4618      	mov	r0, r3
 800245a:	3708      	adds	r7, #8
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}
 8002460:	200091a0 	.word	0x200091a0
 8002464:	200003ac 	.word	0x200003ac

08002468 <BSP_AUDIO_OUT_SetAudioFrameSlot>:
  * @note   This API should be called after the BSP_AUDIO_OUT_Init() to adjust the
  *         audio frame slot.
  * @retval None
  */
void BSP_AUDIO_OUT_SetAudioFrameSlot(uint32_t AudioFrameSlot)
{ 
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800247e:	601a      	str	r2, [r3, #0]
  
  /* Update the SAI audio frame slot configuration */
  haudio_out_sai.SlotInit.SlotActive = AudioFrameSlot;
 8002480:	4a08      	ldr	r2, [pc, #32]	; (80024a4 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6613      	str	r3, [r2, #96]	; 0x60
  HAL_SAI_Init(&haudio_out_sai);
 8002486:	4807      	ldr	r0, [pc, #28]	; (80024a4 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002488:	f007 f9e2 	bl	8009850 <HAL_SAI_Init>
  
  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 800248c:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	4b04      	ldr	r3, [pc, #16]	; (80024a4 <BSP_AUDIO_OUT_SetAudioFrameSlot+0x3c>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800249a:	601a      	str	r2, [r3, #0]
}
 800249c:	bf00      	nop
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	200003ac 	.word	0x200003ac

080024a8 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack();
 80024b0:	f000 f834 	bl	800251c <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 80024b4:	bf00      	nop
 80024b6:	3708      	adds	r7, #8
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack();
 80024c4:	f000 f831 	bl	800252a <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 80024c8:	bf00      	nop
 80024ca:	3708      	adds	r7, #8
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  HAL_SAI_StateTypeDef audio_out_state;
  HAL_SAI_StateTypeDef audio_in_state;

  audio_out_state = HAL_SAI_GetState(&haudio_out_sai);
 80024d8:	480e      	ldr	r0, [pc, #56]	; (8002514 <HAL_SAI_ErrorCallback+0x44>)
 80024da:	f007 fcab 	bl	8009e34 <HAL_SAI_GetState>
 80024de:	4603      	mov	r3, r0
 80024e0:	73fb      	strb	r3, [r7, #15]
  audio_in_state = HAL_SAI_GetState(&haudio_in_sai);
 80024e2:	480d      	ldr	r0, [pc, #52]	; (8002518 <HAL_SAI_ErrorCallback+0x48>)
 80024e4:	f007 fca6 	bl	8009e34 <HAL_SAI_GetState>
 80024e8:	4603      	mov	r3, r0
 80024ea:	73bb      	strb	r3, [r7, #14]

  /* Determines if it is an audio out or audio in error */
  if ((audio_out_state == HAL_SAI_STATE_BUSY) || (audio_out_state == HAL_SAI_STATE_BUSY_TX))
 80024ec:	7bfb      	ldrb	r3, [r7, #15]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d002      	beq.n	80024f8 <HAL_SAI_ErrorCallback+0x28>
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	2b12      	cmp	r3, #18
 80024f6:	d101      	bne.n	80024fc <HAL_SAI_ErrorCallback+0x2c>
  {
    BSP_AUDIO_OUT_Error_CallBack();
 80024f8:	f000 f81e 	bl	8002538 <BSP_AUDIO_OUT_Error_CallBack>
  }

  if ((audio_in_state == HAL_SAI_STATE_BUSY) || (audio_in_state == HAL_SAI_STATE_BUSY_RX))
 80024fc:	7bbb      	ldrb	r3, [r7, #14]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d002      	beq.n	8002508 <HAL_SAI_ErrorCallback+0x38>
 8002502:	7bbb      	ldrb	r3, [r7, #14]
 8002504:	2b22      	cmp	r3, #34	; 0x22
 8002506:	d101      	bne.n	800250c <HAL_SAI_ErrorCallback+0x3c>
  {
    BSP_AUDIO_IN_Error_CallBack();
 8002508:	f000 fa12 	bl	8002930 <BSP_AUDIO_IN_Error_CallBack>
  }
}
 800250c:	bf00      	nop
 800250e:	3710      	adds	r7, #16
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	200003ac 	.word	0x200003ac
 8002518:	20000430 	.word	0x20000430

0800251c <BSP_AUDIO_OUT_TransferComplete_CallBack>:
/**
  * @brief  Manages the DMA full Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(void)
{
 800251c:	b480      	push	{r7}
 800251e:	af00      	add	r7, sp, #0
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr

0800252a <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
/**
  * @brief  Manages the DMA Half Transfer complete event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(void)
{ 
 800252a:	b480      	push	{r7}
 800252c:	af00      	add	r7, sp, #0
}
 800252e:	bf00      	nop
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <BSP_AUDIO_OUT_Error_CallBack>:
/**
  * @brief  Manages the DMA FIFO error event.
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
}
 800253c:	bf00      	nop
 800253e:	46bd      	mov	sp, r7
 8002540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002544:	4770      	bx	lr
	...

08002548 <BSP_AUDIO_OUT_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_OUT_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{ 
 8002548:	b580      	push	{r7, lr}
 800254a:	b08c      	sub	sp, #48	; 0x30
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
 8002550:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_tx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_OUT_SAIx_CLK_ENABLE();
 8002552:	4b63      	ldr	r3, [pc, #396]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002556:	4a62      	ldr	r2, [pc, #392]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002558:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800255c:	6453      	str	r3, [r2, #68]	; 0x44
 800255e:	4b60      	ldr	r3, [pc, #384]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002562:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002566:	61bb      	str	r3, [r7, #24]
 8002568:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable GPIO clock */
  AUDIO_OUT_SAIx_MCLK_ENABLE();
 800256a:	4b5d      	ldr	r3, [pc, #372]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 800256c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256e:	4a5c      	ldr	r2, [pc, #368]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002574:	6313      	str	r3, [r2, #48]	; 0x30
 8002576:	4b5a      	ldr	r3, [pc, #360]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800257e:	617b      	str	r3, [r7, #20]
 8002580:	697b      	ldr	r3, [r7, #20]
  AUDIO_OUT_SAIx_SCK_SD_ENABLE();
 8002582:	4b57      	ldr	r3, [pc, #348]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a56      	ldr	r2, [pc, #344]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b54      	ldr	r3, [pc, #336]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]
  AUDIO_OUT_SAIx_FS_ENABLE();
 800259a:	4b51      	ldr	r3, [pc, #324]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	4a50      	ldr	r2, [pc, #320]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 80025a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025a4:	6313      	str	r3, [r2, #48]	; 0x30
 80025a6:	4b4e      	ldr	r3, [pc, #312]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ae:	60fb      	str	r3, [r7, #12]
 80025b0:	68fb      	ldr	r3, [r7, #12]
  /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
  gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80025b2:	2380      	movs	r3, #128	; 0x80
 80025b4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80025b6:	2302      	movs	r3, #2
 80025b8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80025be:	2303      	movs	r3, #3
 80025c0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 80025c2:	230a      	movs	r3, #10
 80025c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80025c6:	f107 031c 	add.w	r3, r7, #28
 80025ca:	4619      	mov	r1, r3
 80025cc:	4845      	ldr	r0, [pc, #276]	; (80026e4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80025ce:	f004 fa65 	bl	8006a9c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80025d2:	2320      	movs	r3, #32
 80025d4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80025d6:	2302      	movs	r3, #2
 80025d8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80025e2:	230a      	movs	r3, #10
 80025e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 80025e6:	f107 031c 	add.w	r3, r7, #28
 80025ea:	4619      	mov	r1, r3
 80025ec:	483d      	ldr	r0, [pc, #244]	; (80026e4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 80025ee:	f004 fa55 	bl	8006a9c <HAL_GPIO_Init>

  gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80025f2:	2340      	movs	r3, #64	; 0x40
 80025f4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80025f6:	2302      	movs	r3, #2
 80025f8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80025fa:	2300      	movs	r3, #0
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 80025fe:	2303      	movs	r3, #3
 8002600:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002602:	230a      	movs	r3, #10
 8002604:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_SD_GPIO_PORT, &gpio_init_structure);
 8002606:	f107 031c 	add.w	r3, r7, #28
 800260a:	4619      	mov	r1, r3
 800260c:	4835      	ldr	r0, [pc, #212]	; (80026e4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800260e:	f004 fa45 	bl	8006a9c <HAL_GPIO_Init>

  gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8002612:	2310      	movs	r3, #16
 8002614:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002616:	2302      	movs	r3, #2
 8002618:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_HIGH;
 800261e:	2303      	movs	r3, #3
 8002620:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_SD_MCLK_AF;
 8002622:	230a      	movs	r3, #10
 8002624:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8002626:	f107 031c 	add.w	r3, r7, #28
 800262a:	4619      	mov	r1, r3
 800262c:	482d      	ldr	r0, [pc, #180]	; (80026e4 <BSP_AUDIO_OUT_MspInit+0x19c>)
 800262e:	f004 fa35 	bl	8006a9c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8002632:	4b2b      	ldr	r3, [pc, #172]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002636:	4a2a      	ldr	r2, [pc, #168]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002638:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800263c:	6313      	str	r3, [r2, #48]	; 0x30
 800263e:	4b28      	ldr	r3, [pc, #160]	; (80026e0 <BSP_AUDIO_OUT_MspInit+0x198>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
    
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <BSP_AUDIO_OUT_MspInit+0x1a0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d138      	bne.n	80026c6 <BSP_AUDIO_OUT_MspInit+0x17e>
  {
    /* Configure the hdma_saiTx handle parameters */   
    hdma_sai_tx.Init.Channel             = AUDIO_OUT_SAIx_DMAx_CHANNEL;
 8002654:	4b25      	ldr	r3, [pc, #148]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002656:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800265a:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800265c:	4b23      	ldr	r3, [pc, #140]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800265e:	2240      	movs	r2, #64	; 0x40
 8002660:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002662:	4b22      	ldr	r3, [pc, #136]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002664:	2200      	movs	r2, #0
 8002666:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8002668:	4b20      	ldr	r3, [pc, #128]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800266a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800266e:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.PeriphDataAlignment = AUDIO_OUT_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002670:	4b1e      	ldr	r3, [pc, #120]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002672:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002676:	615a      	str	r2, [r3, #20]
    hdma_sai_tx.Init.MemDataAlignment    = AUDIO_OUT_SAIx_DMAx_MEM_DATA_SIZE;
 8002678:	4b1c      	ldr	r3, [pc, #112]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800267a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800267e:	619a      	str	r2, [r3, #24]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8002680:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002682:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002686:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002688:	4b18      	ldr	r3, [pc, #96]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800268a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800268e:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;         
 8002690:	4b16      	ldr	r3, [pc, #88]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002692:	2204      	movs	r2, #4
 8002694:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002696:	4b15      	ldr	r3, [pc, #84]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 8002698:	2203      	movs	r2, #3
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800269c:	4b13      	ldr	r3, [pc, #76]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 800269e:	2200      	movs	r2, #0
 80026a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80026a4:	2200      	movs	r2, #0
 80026a6:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_tx.Instance = AUDIO_OUT_SAIx_DMAx_STREAM;
 80026a8:	4b10      	ldr	r3, [pc, #64]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80026aa:	4a11      	ldr	r2, [pc, #68]	; (80026f0 <BSP_AUDIO_OUT_MspInit+0x1a8>)
 80026ac:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	4a0e      	ldr	r2, [pc, #56]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80026b2:	66da      	str	r2, [r3, #108]	; 0x6c
 80026b4:	4a0d      	ldr	r2, [pc, #52]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_tx);
 80026ba:	480c      	ldr	r0, [pc, #48]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80026bc:	f003 fc0c 	bl	8005ed8 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_tx);      
 80026c0:	480a      	ldr	r0, [pc, #40]	; (80026ec <BSP_AUDIO_OUT_MspInit+0x1a4>)
 80026c2:	f003 fb5b 	bl	8005d7c <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, AUDIO_OUT_IRQ_PREPRIO, 0);
 80026c6:	2200      	movs	r2, #0
 80026c8:	210e      	movs	r1, #14
 80026ca:	203c      	movs	r0, #60	; 0x3c
 80026cc:	f003 fb2c 	bl	8005d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ); 
 80026d0:	203c      	movs	r0, #60	; 0x3c
 80026d2:	f003 fb45 	bl	8005d60 <HAL_NVIC_EnableIRQ>
}
 80026d6:	bf00      	nop
 80026d8:	3730      	adds	r7, #48	; 0x30
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40022000 	.word	0x40022000
 80026e8:	40015c04 	.word	0x40015c04
 80026ec:	200004b4 	.word	0x200004b4
 80026f0:	40026470 	.word	0x40026470

080026f4 <BSP_AUDIO_OUT_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application     
  * @retval None
  */
__weak void BSP_AUDIO_OUT_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t AudioFreq, void *Params)
{ 
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b0a6      	sub	sp, #152	; 0x98
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;

  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002700:	f107 0314 	add.w	r3, r7, #20
 8002704:	4618      	mov	r0, r3
 8002706:	f006 fe53 	bl	80093b0 <HAL_RCCEx_GetPeriphCLKConfig>
  
  /* Set the PLL configuration according to the audio frequency */
  if((AudioFreq == AUDIO_FREQUENCY_11K) || (AudioFreq == AUDIO_FREQUENCY_22K) || (AudioFreq == AUDIO_FREQUENCY_44K))
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	f642 3211 	movw	r2, #11025	; 0x2b11
 8002710:	4293      	cmp	r3, r2
 8002712:	d009      	beq.n	8002728 <BSP_AUDIO_OUT_ClockConfig+0x34>
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f245 6222 	movw	r2, #22050	; 0x5622
 800271a:	4293      	cmp	r3, r2
 800271c:	d004      	beq.n	8002728 <BSP_AUDIO_OUT_ClockConfig+0x34>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	f64a 4244 	movw	r2, #44100	; 0xac44
 8002724:	4293      	cmp	r3, r2
 8002726:	d112      	bne.n	800274e <BSP_AUDIO_OUT_ClockConfig+0x5a>
  {
    /* Configure PLLI2S prescalers */
    /* PLLI2S_VCO: VCO_429M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 429/2 = 214.5 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 214.5/19 = 11.289 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8002728:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800272c:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 800272e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002732:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 429;
 8002734:	f240 13ad 	movw	r3, #429	; 0x1ad
 8002738:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 2;
 800273a:	2302      	movs	r3, #2
 800273c:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 19;
 800273e:	2313      	movs	r3, #19
 8002740:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002742:	f107 0314 	add.w	r3, r7, #20
 8002746:	4618      	mov	r0, r3
 8002748:	f006 fa42 	bl	8008bd0 <HAL_RCCEx_PeriphCLKConfig>
 800274c:	e012      	b.n	8002774 <BSP_AUDIO_OUT_ClockConfig+0x80>
  {
    /* I2S clock config
    PLLI2S_VCO: VCO_344M
    I2S_CLK(first level) = PLLI2S_VCO/PLLI2SQ = 344/7 = 49.142 Mhz
    I2S_CLK_x = I2S_CLK(first level)/PLLI2SDIVQ = 49.142/1 = 49.142 Mhz */
    rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 800274e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002752:	617b      	str	r3, [r7, #20]
    rcc_ex_clk_init_struct.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLI2S;
 8002754:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002758:	657b      	str	r3, [r7, #84]	; 0x54
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SN = 344;
 800275a:	f44f 73ac 	mov.w	r3, #344	; 0x158
 800275e:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLLI2S.PLLI2SQ = 7;
 8002760:	2307      	movs	r3, #7
 8002762:	623b      	str	r3, [r7, #32]
    rcc_ex_clk_init_struct.PLLI2SDivQ = 1;
 8002764:	2301      	movs	r3, #1
 8002766:	63bb      	str	r3, [r7, #56]	; 0x38
    
    HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct);
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	4618      	mov	r0, r3
 800276e:	f006 fa2f 	bl	8008bd0 <HAL_RCCEx_PeriphCLKConfig>
  }
}
 8002772:	bf00      	nop
 8002774:	bf00      	nop
 8002776:	3798      	adds	r7, #152	; 0x98
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}

0800277c <SAIx_Out_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_Out_DeInit(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002780:	4b07      	ldr	r3, [pc, #28]	; (80027a0 <SAIx_Out_DeInit+0x24>)
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <SAIx_Out_DeInit+0x28>)
 8002784:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002786:	4b06      	ldr	r3, [pc, #24]	; (80027a0 <SAIx_Out_DeInit+0x24>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	681a      	ldr	r2, [r3, #0]
 800278c:	4b04      	ldr	r3, [pc, #16]	; (80027a0 <SAIx_Out_DeInit+0x24>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002794:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_out_sai);
 8002796:	4802      	ldr	r0, [pc, #8]	; (80027a0 <SAIx_Out_DeInit+0x24>)
 8002798:	f007 f9d8 	bl	8009b4c <HAL_SAI_DeInit>
}
 800279c:	bf00      	nop
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	200003ac 	.word	0x200003ac
 80027a4:	40015c04 	.word	0x40015c04

080027a8 <BSP_AUDIO_IN_OUT_Init>:
  * @param  BitRes: Audio frequency to be configured.
  * @param  ChnlNbr: Channel number.
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_OUT_Init(uint16_t InputDevice, uint16_t OutputDevice, uint32_t AudioFreq, uint32_t BitRes, uint32_t ChnlNbr)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b089      	sub	sp, #36	; 0x24
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	60ba      	str	r2, [r7, #8]
 80027b0:	607b      	str	r3, [r7, #4]
 80027b2:	4603      	mov	r3, r0
 80027b4:	81fb      	strh	r3, [r7, #14]
 80027b6:	460b      	mov	r3, r1
 80027b8:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = AUDIO_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	77fb      	strb	r3, [r7, #31]
  uint32_t deviceid = 0x00;
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
  uint32_t slot_active;

  if (InputDevice != INPUT_DEVICE_DIGITAL_MICROPHONE_2)  /* Only MICROPHONE_2 input supported */
 80027c2:	89fb      	ldrh	r3, [r7, #14]
 80027c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027c8:	d002      	beq.n	80027d0 <BSP_AUDIO_IN_OUT_Init+0x28>
  {
    ret = AUDIO_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	77fb      	strb	r3, [r7, #31]
 80027ce:	e054      	b.n	800287a <BSP_AUDIO_IN_OUT_Init+0xd2>
  }
  else
  {
    /* Disable SAI */
    SAIx_In_DeInit();
 80027d0:	f000 fa1e 	bl	8002c10 <SAIx_In_DeInit>
    SAIx_Out_DeInit();
 80027d4:	f7ff ffd2 	bl	800277c <SAIx_Out_DeInit>

    /* PLL clock is set depending on the AudioFreq (44.1khz vs 48khz groups) */
    BSP_AUDIO_OUT_ClockConfig(&haudio_in_sai, AudioFreq, NULL); /* Clock config is shared between AUDIO IN and OUT */
 80027d8:	2200      	movs	r2, #0
 80027da:	68b9      	ldr	r1, [r7, #8]
 80027dc:	4829      	ldr	r0, [pc, #164]	; (8002884 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 80027de:	f7ff ff89 	bl	80026f4 <BSP_AUDIO_OUT_ClockConfig>

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from SAI peripheral to memory */
    haudio_in_sai.Instance = AUDIO_IN_SAIx;
 80027e2:	4b28      	ldr	r3, [pc, #160]	; (8002884 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 80027e4:	4a28      	ldr	r2, [pc, #160]	; (8002888 <BSP_AUDIO_IN_OUT_Init+0xe0>)
 80027e6:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_in_sai) == HAL_SAI_STATE_RESET)
 80027e8:	4826      	ldr	r0, [pc, #152]	; (8002884 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 80027ea:	f007 fb23 	bl	8009e34 <HAL_SAI_GetState>
 80027ee:	4603      	mov	r3, r0
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d103      	bne.n	80027fc <BSP_AUDIO_IN_OUT_Init+0x54>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_IN_MspInit(&haudio_in_sai, NULL);
 80027f4:	2100      	movs	r1, #0
 80027f6:	4823      	ldr	r0, [pc, #140]	; (8002884 <BSP_AUDIO_IN_OUT_Init+0xdc>)
 80027f8:	f000 f8a2 	bl	8002940 <BSP_AUDIO_IN_MspInit>
    }

    /* SAI data transfer preparation:
    Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80027fc:	4b23      	ldr	r3, [pc, #140]	; (800288c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 80027fe:	4a24      	ldr	r2, [pc, #144]	; (8002890 <BSP_AUDIO_IN_OUT_Init+0xe8>)
 8002800:	601a      	str	r2, [r3, #0]
    if(HAL_SAI_GetState(&haudio_out_sai) == HAL_SAI_STATE_RESET)
 8002802:	4822      	ldr	r0, [pc, #136]	; (800288c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8002804:	f007 fb16 	bl	8009e34 <HAL_SAI_GetState>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d103      	bne.n	8002816 <BSP_AUDIO_IN_OUT_Init+0x6e>
    {
      /* Init the SAI MSP: this __weak function can be redefined by the application*/
      BSP_AUDIO_OUT_MspInit(&haudio_out_sai, NULL);
 800280e:	2100      	movs	r1, #0
 8002810:	481e      	ldr	r0, [pc, #120]	; (800288c <BSP_AUDIO_IN_OUT_Init+0xe4>)
 8002812:	f7ff fe99 	bl	8002548 <BSP_AUDIO_OUT_MspInit>

    /* Configure SAI in master mode :
     *   - SAI2_block_A in master TX mode
     *   - SAI2_block_B in slave RX mode synchronous from SAI2_block_A
     */
    if (InputDevice == INPUT_DEVICE_DIGITAL_MICROPHONE_2)
 8002816:	89fb      	ldrh	r3, [r7, #14]
 8002818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800281c:	d102      	bne.n	8002824 <BSP_AUDIO_IN_OUT_Init+0x7c>
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_13;
 800281e:	230a      	movs	r3, #10
 8002820:	61bb      	str	r3, [r7, #24]
 8002822:	e001      	b.n	8002828 <BSP_AUDIO_IN_OUT_Init+0x80>
    }
    else
    {
      slot_active = CODEC_AUDIOFRAME_SLOT_02;
 8002824:	2305      	movs	r3, #5
 8002826:	61bb      	str	r3, [r7, #24]
    }
    SAIx_In_Init(SAI_MODEMASTER_TX, slot_active, AudioFreq);
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	69b9      	ldr	r1, [r7, #24]
 800282c:	2000      	movs	r0, #0
 800282e:	f000 f939 	bl	8002aa4 <SAIx_In_Init>

    /* wm8994 codec initialization */
    deviceid = wm8994_drv.ReadID(AUDIO_I2C_ADDRESS);
 8002832:	4b18      	ldr	r3, [pc, #96]	; (8002894 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	2034      	movs	r0, #52	; 0x34
 8002838:	4798      	blx	r3
 800283a:	6178      	str	r0, [r7, #20]

    if((deviceid) == WM8994_ID)
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f648 1294 	movw	r2, #35220	; 0x8994
 8002842:	4293      	cmp	r3, r2
 8002844:	d109      	bne.n	800285a <BSP_AUDIO_IN_OUT_Init+0xb2>
    {
      /* Reset the Codec Registers */
      wm8994_drv.Reset(AUDIO_I2C_ADDRESS);
 8002846:	4b13      	ldr	r3, [pc, #76]	; (8002894 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	2034      	movs	r0, #52	; 0x34
 800284c:	4798      	blx	r3
      /* Initialize the audio driver structure */
      audio_drv = &wm8994_drv;
 800284e:	4b12      	ldr	r3, [pc, #72]	; (8002898 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8002850:	4a10      	ldr	r2, [pc, #64]	; (8002894 <BSP_AUDIO_IN_OUT_Init+0xec>)
 8002852:	601a      	str	r2, [r3, #0]
      ret = AUDIO_OK;
 8002854:	2300      	movs	r3, #0
 8002856:	77fb      	strb	r3, [r7, #31]
 8002858:	e001      	b.n	800285e <BSP_AUDIO_IN_OUT_Init+0xb6>
    }
    else
    {
      ret = AUDIO_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	77fb      	strb	r3, [r7, #31]
    }

    if(ret == AUDIO_OK)
 800285e:	7ffb      	ldrb	r3, [r7, #31]
 8002860:	2b00      	cmp	r3, #0
 8002862:	d10a      	bne.n	800287a <BSP_AUDIO_IN_OUT_Init+0xd2>
    {
      /* Initialize the codec internal registers */
      audio_drv->Init(AUDIO_I2C_ADDRESS, InputDevice | OutputDevice, 100, AudioFreq);
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <BSP_AUDIO_IN_OUT_Init+0xf0>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681c      	ldr	r4, [r3, #0]
 800286a:	89fa      	ldrh	r2, [r7, #14]
 800286c:	89bb      	ldrh	r3, [r7, #12]
 800286e:	4313      	orrs	r3, r2
 8002870:	b299      	uxth	r1, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2264      	movs	r2, #100	; 0x64
 8002876:	2034      	movs	r0, #52	; 0x34
 8002878:	47a0      	blx	r4
    }
  }
  return ret;
 800287a:	7ffb      	ldrb	r3, [r7, #31]
}
 800287c:	4618      	mov	r0, r3
 800287e:	3724      	adds	r7, #36	; 0x24
 8002880:	46bd      	mov	sp, r7
 8002882:	bd90      	pop	{r4, r7, pc}
 8002884:	20000430 	.word	0x20000430
 8002888:	40015c24 	.word	0x40015c24
 800288c:	200003ac 	.word	0x200003ac
 8002890:	40015c04 	.word	0x40015c04
 8002894:	20000044 	.word	0x20000044
 8002898:	200091a0 	.word	0x200091a0

0800289c <BSP_AUDIO_IN_Record>:
  * @param  size: size of the recorded buffer in number of elements (typically number of half-words)
  *               Be careful that it is not the same unit than BSP_AUDIO_OUT_Play function
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t  BSP_AUDIO_IN_Record(uint16_t* pbuf, uint32_t size)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t ret = AUDIO_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	60fb      	str	r3, [r7, #12]
  
  /* Start the process receive DMA */
  HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pbuf, size);
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	461a      	mov	r2, r3
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4805      	ldr	r0, [pc, #20]	; (80028c8 <BSP_AUDIO_IN_Record+0x2c>)
 80028b4:	f007 fa30 	bl	8009d18 <HAL_SAI_Receive_DMA>
  
  /* Return AUDIO_OK when all operations are correctly done */
  ret = AUDIO_OK;
 80028b8:	2300      	movs	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
  
  return ret;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	b2db      	uxtb	r3, r3
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20000430 	.word	0x20000430

080028cc <BSP_AUDIO_IN_SetVolume>:
  * @brief  Controls the audio in volume level. 
  * @param  Volume: Volume level in range 0(Mute)..80(+0dB)..100(+17.625dB)
  * @retval AUDIO_OK if correct communication, else wrong communication
  */
uint8_t BSP_AUDIO_IN_SetVolume(uint8_t Volume)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	4603      	mov	r3, r0
 80028d4:	71fb      	strb	r3, [r7, #7]
  /* Call the codec volume control function with converted volume value */
  if(audio_drv->SetVolume(AUDIO_I2C_ADDRESS, Volume) != 0)
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <BSP_AUDIO_IN_SetVolume+0x34>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	79fa      	ldrb	r2, [r7, #7]
 80028de:	4611      	mov	r1, r2
 80028e0:	2034      	movs	r0, #52	; 0x34
 80028e2:	4798      	blx	r3
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d001      	beq.n	80028ee <BSP_AUDIO_IN_SetVolume+0x22>
  {
    return AUDIO_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e004      	b.n	80028f8 <BSP_AUDIO_IN_SetVolume+0x2c>
  }
  else
  {
    /* Set the Global variable AudioInVolume  */
    AudioInVolume = Volume;
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	b29a      	uxth	r2, r3
 80028f2:	4b04      	ldr	r3, [pc, #16]	; (8002904 <BSP_AUDIO_IN_SetVolume+0x38>)
 80028f4:	801a      	strh	r2, [r3, #0]
    /* Return AUDIO_OK when all operations are correctly done */
    return AUDIO_OK;
 80028f6:	2300      	movs	r3, #0
  }
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3708      	adds	r7, #8
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}
 8002900:	200091a0 	.word	0x200091a0
 8002904:	20000028 	.word	0x20000028

08002908 <HAL_SAI_RxCpltCallback>:
  * @brief  Rx Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	b082      	sub	sp, #8
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the next buffer to fill and its size (size is ignored) */
  BSP_AUDIO_IN_TransferComplete_CallBack();
 8002910:	f7ff fa06 	bl	8001d20 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8002914:	bf00      	nop
 8002916:	3708      	adds	r7, #8
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}

0800291c <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callbacks.
  * @param  hsai: SAI handle
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Manage the remaining file size and new address offset: This function 
     should be coded by user (its prototype is already declared in stm32746g_discovery_audio.h) */
  BSP_AUDIO_IN_HalfTransfer_CallBack();
 8002924:	f7ff fa08 	bl	8001d38 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <BSP_AUDIO_IN_Error_CallBack>:
/**
  * @brief  Audio IN Error callback function.
  * @retval None
  */
__weak void BSP_AUDIO_IN_Error_CallBack(void)
{   
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  /* This function is called when an Interrupt due to transfer error on or peripheral
     error occurs. */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr
	...

08002940 <BSP_AUDIO_IN_MspInit>:
  * @param  hsai: SAI handle
  * @param  Params
  * @retval None
  */
__weak void BSP_AUDIO_IN_MspInit(SAI_HandleTypeDef *hsai, void *Params)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b08c      	sub	sp, #48	; 0x30
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef hdma_sai_rx;
  GPIO_InitTypeDef  gpio_init_structure;  

  /* Enable SAI clock */
  AUDIO_IN_SAIx_CLK_ENABLE();
 800294a:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <BSP_AUDIO_IN_MspInit+0x14c>)
 800294c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800294e:	4a4f      	ldr	r2, [pc, #316]	; (8002a8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8002950:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002954:	6453      	str	r3, [r2, #68]	; 0x44
 8002956:	4b4d      	ldr	r3, [pc, #308]	; (8002a8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800295e:	61bb      	str	r3, [r7, #24]
 8002960:	69bb      	ldr	r3, [r7, #24]
  
  /* Enable SD GPIO clock */
  AUDIO_IN_SAIx_SD_ENABLE();
 8002962:	4b4a      	ldr	r3, [pc, #296]	; (8002a8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002966:	4a49      	ldr	r2, [pc, #292]	; (8002a8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8002968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800296c:	6313      	str	r3, [r2, #48]	; 0x30
 800296e:	4b47      	ldr	r3, [pc, #284]	; (8002a8c <BSP_AUDIO_IN_MspInit+0x14c>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002976:	617b      	str	r3, [r7, #20]
 8002978:	697b      	ldr	r3, [r7, #20]
  /* CODEC_SAI pin configuration: SD pin */
  gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800297a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800297e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002988:	2302      	movs	r3, #2
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
  gpio_init_structure.Alternate = AUDIO_IN_SAIx_SD_AF;
 800298c:	230a      	movs	r3, #10
 800298e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8002990:	f107 031c 	add.w	r3, r7, #28
 8002994:	4619      	mov	r1, r3
 8002996:	483e      	ldr	r0, [pc, #248]	; (8002a90 <BSP_AUDIO_IN_MspInit+0x150>)
 8002998:	f004 f880 	bl	8006a9c <HAL_GPIO_Init>

  /* Enable Audio INT GPIO clock */
  AUDIO_IN_INT_GPIO_ENABLE();
 800299c:	4b3b      	ldr	r3, [pc, #236]	; (8002a8c <BSP_AUDIO_IN_MspInit+0x14c>)
 800299e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a0:	4a3a      	ldr	r2, [pc, #232]	; (8002a8c <BSP_AUDIO_IN_MspInit+0x14c>)
 80029a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029a6:	6313      	str	r3, [r2, #48]	; 0x30
 80029a8:	4b38      	ldr	r3, [pc, #224]	; (8002a8c <BSP_AUDIO_IN_MspInit+0x14c>)
 80029aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b0:	613b      	str	r3, [r7, #16]
 80029b2:	693b      	ldr	r3, [r7, #16]
  /* Audio INT pin configuration: input */
  gpio_init_structure.Pin = AUDIO_IN_INT_GPIO_PIN;
 80029b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029b8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80029ba:	2300      	movs	r3, #0
 80029bc:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_NOPULL;
 80029be:	2300      	movs	r3, #0
 80029c0:	627b      	str	r3, [r7, #36]	; 0x24
  gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80029c2:	2302      	movs	r3, #2
 80029c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_IN_INT_GPIO_PORT, &gpio_init_structure);
 80029c6:	f107 031c 	add.w	r3, r7, #28
 80029ca:	4619      	mov	r1, r3
 80029cc:	4831      	ldr	r0, [pc, #196]	; (8002a94 <BSP_AUDIO_IN_MspInit+0x154>)
 80029ce:	f004 f865 	bl	8006a9c <HAL_GPIO_Init>

  /* Enable the DMA clock */
  AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 80029d2:	4b2e      	ldr	r3, [pc, #184]	; (8002a8c <BSP_AUDIO_IN_MspInit+0x14c>)
 80029d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d6:	4a2d      	ldr	r2, [pc, #180]	; (8002a8c <BSP_AUDIO_IN_MspInit+0x14c>)
 80029d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80029dc:	6313      	str	r3, [r2, #48]	; 0x30
 80029de:	4b2b      	ldr	r3, [pc, #172]	; (8002a8c <BSP_AUDIO_IN_MspInit+0x14c>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
    
  if(hsai->Instance == AUDIO_IN_SAIx)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2a      	ldr	r2, [pc, #168]	; (8002a98 <BSP_AUDIO_IN_MspInit+0x158>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d137      	bne.n	8002a64 <BSP_AUDIO_IN_MspInit+0x124>
  {
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Channel             = AUDIO_IN_SAIx_DMAx_CHANNEL;
 80029f4:	4b29      	ldr	r3, [pc, #164]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 80029f6:	2200      	movs	r2, #0
 80029f8:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 80029fa:	4b28      	ldr	r3, [pc, #160]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8002a00:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8002a06:	4b25      	ldr	r3, [pc, #148]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a0c:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8002a0e:	4b23      	ldr	r3, [pc, #140]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002a14:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8002a16:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a18:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002a1c:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8002a1e:	4b1f      	ldr	r3, [pc, #124]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a24:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8002a26:	4b1d      	ldr	r3, [pc, #116]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a2c:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002a2e:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002a34:	4b19      	ldr	r3, [pc, #100]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a36:	2203      	movs	r2, #3
 8002a38:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002a3a:	4b18      	ldr	r3, [pc, #96]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8002a40:	4b16      	ldr	r3, [pc, #88]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	631a      	str	r2, [r3, #48]	; 0x30
    
    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8002a46:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a48:	4a15      	ldr	r2, [pc, #84]	; (8002aa0 <BSP_AUDIO_IN_MspInit+0x160>)
 8002a4a:	601a      	str	r2, [r3, #0]
    
    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	4a13      	ldr	r2, [pc, #76]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a50:	671a      	str	r2, [r3, #112]	; 0x70
 8002a52:	4a12      	ldr	r2, [pc, #72]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6393      	str	r3, [r2, #56]	; 0x38
    
    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8002a58:	4810      	ldr	r0, [pc, #64]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a5a:	f003 fa3d 	bl	8005ed8 <HAL_DMA_DeInit>
    
    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8002a5e:	480f      	ldr	r0, [pc, #60]	; (8002a9c <BSP_AUDIO_IN_MspInit+0x15c>)
 8002a60:	f003 f98c 	bl	8005d7c <HAL_DMA_Init>
  }
  
  /* SAI DMA IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002a64:	2200      	movs	r2, #0
 8002a66:	210f      	movs	r1, #15
 8002a68:	2046      	movs	r0, #70	; 0x46
 8002a6a:	f003 f95d 	bl	8005d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8002a6e:	2046      	movs	r0, #70	; 0x46
 8002a70:	f003 f976 	bl	8005d60 <HAL_NVIC_EnableIRQ>

  /* Audio INT IRQ Channel configuration */
  HAL_NVIC_SetPriority(AUDIO_IN_INT_IRQ, AUDIO_IN_IRQ_PREPRIO, 0);
 8002a74:	2200      	movs	r2, #0
 8002a76:	210f      	movs	r1, #15
 8002a78:	2028      	movs	r0, #40	; 0x28
 8002a7a:	f003 f955 	bl	8005d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(AUDIO_IN_INT_IRQ);
 8002a7e:	2028      	movs	r0, #40	; 0x28
 8002a80:	f003 f96e 	bl	8005d60 <HAL_NVIC_EnableIRQ>
}
 8002a84:	bf00      	nop
 8002a86:	3730      	adds	r7, #48	; 0x30
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800
 8002a90:	40021800 	.word	0x40021800
 8002a94:	40021c00 	.word	0x40021c00
 8002a98:	40015c24 	.word	0x40015c24
 8002a9c:	20000514 	.word	0x20000514
 8002aa0:	400264b8 	.word	0x400264b8

08002aa4 <SAIx_In_Init>:
  * @param  SlotActive: CODEC_AUDIOFRAME_SLOT_02 or CODEC_AUDIOFRAME_SLOT_13
  * @param  AudioFreq: Audio frequency to be configured for the SAI peripheral.
  * @retval None
  */
static void SAIx_In_Init(uint32_t SaiOutMode, uint32_t SlotActive, uint32_t AudioFreq)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
  /* Initialize SAI2 block A in MASTER RX */
  /* Initialize the haudio_out_sai Instance parameter */
  haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8002ab0:	4b53      	ldr	r3, [pc, #332]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002ab2:	4a54      	ldr	r2, [pc, #336]	; (8002c04 <SAIx_In_Init+0x160>)
 8002ab4:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_out_sai);
 8002ab6:	4b52      	ldr	r3, [pc, #328]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	4b50      	ldr	r3, [pc, #320]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002ac4:	601a      	str	r2, [r3, #0]

  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_out_sai.Init.AudioFrequency = AudioFreq;
 8002ac6:	4a4e      	ldr	r2, [pc, #312]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	61d3      	str	r3, [r2, #28]
  haudio_out_sai.Init.AudioMode = SaiOutMode;
 8002acc:	4a4c      	ldr	r2, [pc, #304]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6053      	str	r3, [r2, #4]
  haudio_out_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002ad2:	4b4b      	ldr	r3, [pc, #300]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	615a      	str	r2, [r3, #20]
  haudio_out_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002ad8:	4b49      	ldr	r3, [pc, #292]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_out_sai.Init.DataSize = SAI_DATASIZE_16;
 8002ade:	4b48      	ldr	r3, [pc, #288]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002ae0:	2280      	movs	r2, #128	; 0x80
 8002ae2:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_out_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002ae4:	4b46      	ldr	r3, [pc, #280]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_out_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002aea:	4b45      	ldr	r3, [pc, #276]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002aec:	2201      	movs	r2, #1
 8002aee:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_out_sai.Init.Synchro = SAI_ASYNCHRONOUS;
 8002af0:	4b43      	ldr	r3, [pc, #268]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	609a      	str	r2, [r3, #8]
  haudio_out_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_ENABLED;
 8002af6:	4b42      	ldr	r3, [pc, #264]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002af8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002afc:	611a      	str	r2, [r3, #16]
  haudio_out_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002afe:	4b40      	ldr	r3, [pc, #256]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002b00:	2201      	movs	r2, #1
 8002b02:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_out_sai.FrameInit.FrameLength = 64;
 8002b04:	4b3e      	ldr	r3, [pc, #248]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002b06:	2240      	movs	r2, #64	; 0x40
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_out_sai.FrameInit.ActiveFrameLength = 32;
 8002b0a:	4b3d      	ldr	r3, [pc, #244]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002b0c:	2220      	movs	r2, #32
 8002b0e:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_out_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002b10:	4b3b      	ldr	r3, [pc, #236]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002b12:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b16:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_out_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002b18:	4b39      	ldr	r3, [pc, #228]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_out_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002b1e:	4b38      	ldr	r3, [pc, #224]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002b20:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002b24:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot actives */
  haudio_out_sai.SlotInit.FirstBitOffset = 0;
 8002b26:	4b36      	ldr	r3, [pc, #216]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_out_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002b2c:	4b34      	ldr	r3, [pc, #208]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_out_sai.SlotInit.SlotNumber = 4;
 8002b32:	4b33      	ldr	r3, [pc, #204]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002b34:	2204      	movs	r2, #4
 8002b36:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_out_sai.SlotInit.SlotActive = SlotActive;
 8002b38:	4a31      	ldr	r2, [pc, #196]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_out_sai);
 8002b3e:	4830      	ldr	r0, [pc, #192]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002b40:	f006 fe86 	bl	8009850 <HAL_SAI_Init>

  /* Initialize SAI2 block B in SLAVE RX synchronous from SAI2 block A */
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002b44:	4b30      	ldr	r3, [pc, #192]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b46:	4a31      	ldr	r2, [pc, #196]	; (8002c0c <SAIx_In_Init+0x168>)
 8002b48:	601a      	str	r2, [r3, #0]
  
  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002b4a:	4b2f      	ldr	r3, [pc, #188]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	4b2d      	ldr	r3, [pc, #180]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002b58:	601a      	str	r2, [r3, #0]
  
  /* Configure SAI_Block_x
  LSBFirst: Disabled
  DataSize: 16 */
  haudio_in_sai.Init.AudioFrequency = AudioFreq;
 8002b5a:	4a2b      	ldr	r2, [pc, #172]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	61d3      	str	r3, [r2, #28]
  haudio_in_sai.Init.AudioMode = SAI_MODESLAVE_RX;
 8002b60:	4b29      	ldr	r3, [pc, #164]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b62:	2203      	movs	r2, #3
 8002b64:	605a      	str	r2, [r3, #4]
  haudio_in_sai.Init.NoDivider = SAI_MASTERDIVIDER_ENABLED;
 8002b66:	4b28      	ldr	r3, [pc, #160]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b68:	2200      	movs	r2, #0
 8002b6a:	615a      	str	r2, [r3, #20]
  haudio_in_sai.Init.Protocol = SAI_FREE_PROTOCOL;
 8002b6c:	4b26      	ldr	r3, [pc, #152]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	631a      	str	r2, [r3, #48]	; 0x30
  haudio_in_sai.Init.DataSize = SAI_DATASIZE_16;
 8002b72:	4b25      	ldr	r3, [pc, #148]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	635a      	str	r2, [r3, #52]	; 0x34
  haudio_in_sai.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8002b78:	4b23      	ldr	r3, [pc, #140]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	639a      	str	r2, [r3, #56]	; 0x38
  haudio_in_sai.Init.ClockStrobing = SAI_CLOCKSTROBING_RISINGEDGE;
 8002b7e:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	63da      	str	r2, [r3, #60]	; 0x3c
  haudio_in_sai.Init.Synchro = SAI_SYNCHRONOUS;
 8002b84:	4b20      	ldr	r3, [pc, #128]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b86:	2201      	movs	r2, #1
 8002b88:	609a      	str	r2, [r3, #8]
  haudio_in_sai.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLED;
 8002b8a:	4b1f      	ldr	r3, [pc, #124]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	611a      	str	r2, [r3, #16]
  haudio_in_sai.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_1QF;
 8002b90:	4b1d      	ldr	r3, [pc, #116]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	619a      	str	r2, [r3, #24]
  Frame Length: 64
  Frame active Length: 32
  FS Definition: Start frame + Channel Side identification
  FS Polarity: FS active Low
  FS Offset: FS asserted one bit before the first bit of slot 0 */
  haudio_in_sai.FrameInit.FrameLength = 64;
 8002b96:	4b1c      	ldr	r3, [pc, #112]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b98:	2240      	movs	r2, #64	; 0x40
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
  haudio_in_sai.FrameInit.ActiveFrameLength = 32;
 8002b9c:	4b1a      	ldr	r3, [pc, #104]	; (8002c08 <SAIx_In_Init+0x164>)
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	645a      	str	r2, [r3, #68]	; 0x44
  haudio_in_sai.FrameInit.FSDefinition = SAI_FS_CHANNEL_IDENTIFICATION;
 8002ba2:	4b19      	ldr	r3, [pc, #100]	; (8002c08 <SAIx_In_Init+0x164>)
 8002ba4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002ba8:	649a      	str	r2, [r3, #72]	; 0x48
  haudio_in_sai.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8002baa:	4b17      	ldr	r3, [pc, #92]	; (8002c08 <SAIx_In_Init+0x164>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	64da      	str	r2, [r3, #76]	; 0x4c
  haudio_in_sai.FrameInit.FSOffset = SAI_FS_BEFOREFIRSTBIT;
 8002bb0:	4b15      	ldr	r3, [pc, #84]	; (8002c08 <SAIx_In_Init+0x164>)
 8002bb2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002bb6:	651a      	str	r2, [r3, #80]	; 0x50
  /* Configure SAI Block_x Slot
  Slot First Bit Offset: 0
  Slot Size  : 16
  Slot Number: 4
  Slot Active: All slot active */
  haudio_in_sai.SlotInit.FirstBitOffset = 0;
 8002bb8:	4b13      	ldr	r3, [pc, #76]	; (8002c08 <SAIx_In_Init+0x164>)
 8002bba:	2200      	movs	r2, #0
 8002bbc:	655a      	str	r2, [r3, #84]	; 0x54
  haudio_in_sai.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8002bbe:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <SAIx_In_Init+0x164>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	659a      	str	r2, [r3, #88]	; 0x58
  haudio_in_sai.SlotInit.SlotNumber = 4;
 8002bc4:	4b10      	ldr	r3, [pc, #64]	; (8002c08 <SAIx_In_Init+0x164>)
 8002bc6:	2204      	movs	r2, #4
 8002bc8:	65da      	str	r2, [r3, #92]	; 0x5c
  haudio_in_sai.SlotInit.SlotActive = SlotActive;
 8002bca:	4a0f      	ldr	r2, [pc, #60]	; (8002c08 <SAIx_In_Init+0x164>)
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	6613      	str	r3, [r2, #96]	; 0x60

  HAL_SAI_Init(&haudio_in_sai);
 8002bd0:	480d      	ldr	r0, [pc, #52]	; (8002c08 <SAIx_In_Init+0x164>)
 8002bd2:	f006 fe3d 	bl	8009850 <HAL_SAI_Init>

  /* Enable SAI peripheral to generate MCLK */
  __HAL_SAI_ENABLE(&haudio_out_sai);
 8002bd6:	4b0a      	ldr	r3, [pc, #40]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	4b08      	ldr	r3, [pc, #32]	; (8002c00 <SAIx_In_Init+0x15c>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002be4:	601a      	str	r2, [r3, #0]

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(&haudio_in_sai);
 8002be6:	4b08      	ldr	r3, [pc, #32]	; (8002c08 <SAIx_In_Init+0x164>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681a      	ldr	r2, [r3, #0]
 8002bec:	4b06      	ldr	r3, [pc, #24]	; (8002c08 <SAIx_In_Init+0x164>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002bf4:	601a      	str	r2, [r3, #0]
}
 8002bf6:	bf00      	nop
 8002bf8:	3710      	adds	r7, #16
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	200003ac 	.word	0x200003ac
 8002c04:	40015c04 	.word	0x40015c04
 8002c08:	20000430 	.word	0x20000430
 8002c0c:	40015c24 	.word	0x40015c24

08002c10 <SAIx_In_DeInit>:
/**
  * @brief  Deinitializes the output Audio Codec audio interface (SAI).
  * @retval None
  */
static void SAIx_In_DeInit(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	af00      	add	r7, sp, #0
  /* Initialize the haudio_in_sai Instance parameter */
  haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8002c14:	4b07      	ldr	r3, [pc, #28]	; (8002c34 <SAIx_In_DeInit+0x24>)
 8002c16:	4a08      	ldr	r2, [pc, #32]	; (8002c38 <SAIx_In_DeInit+0x28>)
 8002c18:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  __HAL_SAI_DISABLE(&haudio_in_sai);
 8002c1a:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <SAIx_In_DeInit+0x24>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b04      	ldr	r3, [pc, #16]	; (8002c34 <SAIx_In_DeInit+0x24>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c28:	601a      	str	r2, [r3, #0]

  HAL_SAI_DeInit(&haudio_in_sai);
 8002c2a:	4802      	ldr	r0, [pc, #8]	; (8002c34 <SAIx_In_DeInit+0x24>)
 8002c2c:	f006 ff8e 	bl	8009b4c <HAL_SAI_DeInit>
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	20000430 	.word	0x20000430
 8002c38:	40015c24 	.word	0x40015c24

08002c3c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002c40:	4b31      	ldr	r3, [pc, #196]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002c42:	2228      	movs	r2, #40	; 0x28
 8002c44:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 8002c46:	4b30      	ldr	r3, [pc, #192]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002c48:	2209      	movs	r2, #9
 8002c4a:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002c4c:	4b2e      	ldr	r3, [pc, #184]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002c4e:	2235      	movs	r2, #53	; 0x35
 8002c50:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002c52:	4b2d      	ldr	r3, [pc, #180]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002c54:	220b      	movs	r2, #11
 8002c56:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002c58:	4b2b      	ldr	r3, [pc, #172]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002c5a:	f240 121b 	movw	r2, #283	; 0x11b
 8002c5e:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002c60:	4b29      	ldr	r3, [pc, #164]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002c62:	f240 2215 	movw	r2, #533	; 0x215
 8002c66:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002c68:	4b27      	ldr	r3, [pc, #156]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002c6a:	f240 121d 	movw	r2, #285	; 0x11d
 8002c6e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002c70:	4b25      	ldr	r3, [pc, #148]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002c72:	f240 2235 	movw	r2, #565	; 0x235
 8002c76:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002c78:	2100      	movs	r1, #0
 8002c7a:	4823      	ldr	r0, [pc, #140]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002c7c:	f000 fba6 	bl	80033cc <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002c80:	4b21      	ldr	r3, [pc, #132]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002c82:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002c86:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002c88:	4b1f      	ldr	r3, [pc, #124]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002c8a:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002c8e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002c98:	4b1b      	ldr	r3, [pc, #108]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002ca8:	4b17      	ldr	r3, [pc, #92]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002cb4:	4b14      	ldr	r3, [pc, #80]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002cba:	4b13      	ldr	r3, [pc, #76]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002cc2:	4a12      	ldr	r2, [pc, #72]	; (8002d0c <BSP_LCD_Init+0xd0>)
 8002cc4:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002cc6:	4810      	ldr	r0, [pc, #64]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002cc8:	f005 f8ce 	bl	8007e68 <HAL_LTDC_GetState>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d103      	bne.n	8002cda <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	480c      	ldr	r0, [pc, #48]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002cd6:	f000 fa9f 	bl	8003218 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002cda:	480b      	ldr	r0, [pc, #44]	; (8002d08 <BSP_LCD_Init+0xcc>)
 8002cdc:	f004 fef4 	bl	8007ac8 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002ce6:	480a      	ldr	r0, [pc, #40]	; (8002d10 <BSP_LCD_Init+0xd4>)
 8002ce8:	f004 f9a8 	bl	800703c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002cec:	2201      	movs	r2, #1
 8002cee:	2108      	movs	r1, #8
 8002cf0:	4808      	ldr	r0, [pc, #32]	; (8002d14 <BSP_LCD_Init+0xd8>)
 8002cf2:	f004 f9a3 	bl	800703c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002cf6:	f000 fc89 	bl	800360c <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8002cfa:	4807      	ldr	r0, [pc, #28]	; (8002d18 <BSP_LCD_Init+0xdc>)
 8002cfc:	f000 f8d8 	bl	8002eb0 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8002d00:	2300      	movs	r3, #0
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	bd80      	pop	{r7, pc}
 8002d06:	bf00      	nop
 8002d08:	200091a4 	.word	0x200091a4
 8002d0c:	40016800 	.word	0x40016800
 8002d10:	40022000 	.word	0x40022000
 8002d14:	40022800 	.word	0x40022800
 8002d18:	2000002c 	.word	0x2000002c

08002d1c <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <BSP_LCD_GetXSize+0x20>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a06      	ldr	r2, [pc, #24]	; (8002d40 <BSP_LCD_GetXSize+0x24>)
 8002d26:	2134      	movs	r1, #52	; 0x34
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	3360      	adds	r3, #96	; 0x60
 8002d30:	681b      	ldr	r3, [r3, #0]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	200005b4 	.word	0x200005b4
 8002d40:	200091a4 	.word	0x200091a4

08002d44 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <BSP_LCD_GetYSize+0x20>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a06      	ldr	r2, [pc, #24]	; (8002d68 <BSP_LCD_GetYSize+0x24>)
 8002d4e:	2134      	movs	r1, #52	; 0x34
 8002d50:	fb01 f303 	mul.w	r3, r1, r3
 8002d54:	4413      	add	r3, r2
 8002d56:	3364      	adds	r3, #100	; 0x64
 8002d58:	681b      	ldr	r3, [r3, #0]
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	200005b4 	.word	0x200005b4
 8002d68:	200091a4 	.word	0x200091a4

08002d6c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b090      	sub	sp, #64	; 0x40
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	4603      	mov	r3, r0
 8002d74:	6039      	str	r1, [r7, #0]
 8002d76:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002d7c:	f7ff ffce 	bl	8002d1c <BSP_LCD_GetXSize>
 8002d80:	4603      	mov	r3, r0
 8002d82:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002d84:	2300      	movs	r3, #0
 8002d86:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002d88:	f7ff ffdc 	bl	8002d44 <BSP_LCD_GetYSize>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002d90:	2300      	movs	r3, #0
 8002d92:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002d98:	23ff      	movs	r3, #255	; 0xff
 8002d9a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002da0:	2300      	movs	r3, #0
 8002da2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002db2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002db6:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002db8:	2307      	movs	r3, #7
 8002dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002dbc:	f7ff ffae 	bl	8002d1c <BSP_LCD_GetXSize>
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002dc4:	f7ff ffbe 	bl	8002d44 <BSP_LCD_GetYSize>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002dcc:	88fa      	ldrh	r2, [r7, #6]
 8002dce:	f107 030c 	add.w	r3, r7, #12
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	4812      	ldr	r0, [pc, #72]	; (8002e20 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002dd6:	f005 f809 	bl	8007dec <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002dda:	88fa      	ldrh	r2, [r7, #6]
 8002ddc:	4911      	ldr	r1, [pc, #68]	; (8002e24 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002dde:	4613      	mov	r3, r2
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	4413      	add	r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	3304      	adds	r3, #4
 8002dea:	f04f 32ff 	mov.w	r2, #4294967295
 8002dee:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002df0:	88fa      	ldrh	r2, [r7, #6]
 8002df2:	490c      	ldr	r1, [pc, #48]	; (8002e24 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	3308      	adds	r3, #8
 8002e00:	4a09      	ldr	r2, [pc, #36]	; (8002e28 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002e02:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002e04:	88fa      	ldrh	r2, [r7, #6]
 8002e06:	4907      	ldr	r1, [pc, #28]	; (8002e24 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002e08:	4613      	mov	r3, r2
 8002e0a:	005b      	lsls	r3, r3, #1
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002e16:	601a      	str	r2, [r3, #0]
}
 8002e18:	bf00      	nop
 8002e1a:	3740      	adds	r7, #64	; 0x40
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	200091a4 	.word	0x200091a4
 8002e24:	200005b8 	.word	0x200005b8
 8002e28:	2000002c 	.word	0x2000002c

08002e2c <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002e34:	4a04      	ldr	r2, [pc, #16]	; (8002e48 <BSP_LCD_SelectLayer+0x1c>)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6013      	str	r3, [r2, #0]
} 
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	200005b4 	.word	0x200005b4

08002e4c <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	b083      	sub	sp, #12
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002e54:	4b07      	ldr	r3, [pc, #28]	; (8002e74 <BSP_LCD_SetTextColor+0x28>)
 8002e56:	681a      	ldr	r2, [r3, #0]
 8002e58:	4907      	ldr	r1, [pc, #28]	; (8002e78 <BSP_LCD_SetTextColor+0x2c>)
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	005b      	lsls	r3, r3, #1
 8002e5e:	4413      	add	r3, r2
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	440b      	add	r3, r1
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	601a      	str	r2, [r3, #0]
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr
 8002e74:	200005b4 	.word	0x200005b4
 8002e78:	200005b8 	.word	0x200005b8

08002e7c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b083      	sub	sp, #12
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002e84:	4b08      	ldr	r3, [pc, #32]	; (8002ea8 <BSP_LCD_SetBackColor+0x2c>)
 8002e86:	681a      	ldr	r2, [r3, #0]
 8002e88:	4908      	ldr	r1, [pc, #32]	; (8002eac <BSP_LCD_SetBackColor+0x30>)
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	005b      	lsls	r3, r3, #1
 8002e8e:	4413      	add	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	440b      	add	r3, r1
 8002e94:	3304      	adds	r3, #4
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	601a      	str	r2, [r3, #0]
}
 8002e9a:	bf00      	nop
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	200005b4 	.word	0x200005b4
 8002eac:	200005b8 	.word	0x200005b8

08002eb0 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <BSP_LCD_SetFont+0x2c>)
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	4908      	ldr	r1, [pc, #32]	; (8002ee0 <BSP_LCD_SetFont+0x30>)
 8002ebe:	4613      	mov	r3, r2
 8002ec0:	005b      	lsls	r3, r3, #1
 8002ec2:	4413      	add	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	440b      	add	r3, r1
 8002ec8:	3308      	adds	r3, #8
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	601a      	str	r2, [r3, #0]
}
 8002ece:	bf00      	nop
 8002ed0:	370c      	adds	r7, #12
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	200005b4 	.word	0x200005b4
 8002ee0:	200005b8 	.word	0x200005b8

08002ee4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ee6:	b085      	sub	sp, #20
 8002ee8:	af02      	add	r7, sp, #8
 8002eea:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <BSP_LCD_Clear+0x48>)
 8002eee:	681c      	ldr	r4, [r3, #0]
 8002ef0:	4b0e      	ldr	r3, [pc, #56]	; (8002f2c <BSP_LCD_Clear+0x48>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a0e      	ldr	r2, [pc, #56]	; (8002f30 <BSP_LCD_Clear+0x4c>)
 8002ef6:	2134      	movs	r1, #52	; 0x34
 8002ef8:	fb01 f303 	mul.w	r3, r1, r3
 8002efc:	4413      	add	r3, r2
 8002efe:	335c      	adds	r3, #92	; 0x5c
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	461e      	mov	r6, r3
 8002f04:	f7ff ff0a 	bl	8002d1c <BSP_LCD_GetXSize>
 8002f08:	4605      	mov	r5, r0
 8002f0a:	f7ff ff1b 	bl	8002d44 <BSP_LCD_GetYSize>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	9301      	str	r3, [sp, #4]
 8002f14:	2300      	movs	r3, #0
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	462a      	mov	r2, r5
 8002f1c:	4631      	mov	r1, r6
 8002f1e:	4620      	mov	r0, r4
 8002f20:	f000 fb28 	bl	8003574 <LL_FillBuffer>
}
 8002f24:	bf00      	nop
 8002f26:	370c      	adds	r7, #12
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002f2c:	200005b4 	.word	0x200005b4
 8002f30:	200091a4 	.word	0x200091a4

08002f34 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002f34:	b590      	push	{r4, r7, lr}
 8002f36:	b083      	sub	sp, #12
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	80fb      	strh	r3, [r7, #6]
 8002f3e:	460b      	mov	r3, r1
 8002f40:	80bb      	strh	r3, [r7, #4]
 8002f42:	4613      	mov	r3, r2
 8002f44:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f46:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <BSP_LCD_DisplayChar+0x80>)
 8002f48:	681a      	ldr	r2, [r3, #0]
 8002f4a:	491b      	ldr	r1, [pc, #108]	; (8002fb8 <BSP_LCD_DisplayChar+0x84>)
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	005b      	lsls	r3, r3, #1
 8002f50:	4413      	add	r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	3308      	adds	r3, #8
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6819      	ldr	r1, [r3, #0]
 8002f5c:	78fb      	ldrb	r3, [r7, #3]
 8002f5e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002f62:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <BSP_LCD_DisplayChar+0x80>)
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	4c14      	ldr	r4, [pc, #80]	; (8002fb8 <BSP_LCD_DisplayChar+0x84>)
 8002f68:	4613      	mov	r3, r2
 8002f6a:	005b      	lsls	r3, r3, #1
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	4423      	add	r3, r4
 8002f72:	3308      	adds	r3, #8
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002f78:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002f7c:	4b0d      	ldr	r3, [pc, #52]	; (8002fb4 <BSP_LCD_DisplayChar+0x80>)
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	4c0d      	ldr	r4, [pc, #52]	; (8002fb8 <BSP_LCD_DisplayChar+0x84>)
 8002f82:	4613      	mov	r3, r2
 8002f84:	005b      	lsls	r3, r3, #1
 8002f86:	4413      	add	r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4423      	add	r3, r4
 8002f8c:	3308      	adds	r3, #8
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	889b      	ldrh	r3, [r3, #4]
 8002f92:	3307      	adds	r3, #7
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	da00      	bge.n	8002f9a <BSP_LCD_DisplayChar+0x66>
 8002f98:	3307      	adds	r3, #7
 8002f9a:	10db      	asrs	r3, r3, #3
 8002f9c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002fa0:	18ca      	adds	r2, r1, r3
 8002fa2:	88b9      	ldrh	r1, [r7, #4]
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f000 fa2c 	bl	8003404 <DrawChar>
}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd90      	pop	{r4, r7, pc}
 8002fb4:	200005b4 	.word	0x200005b4
 8002fb8:	200005b8 	.word	0x200005b8

08002fbc <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002fbc:	b5b0      	push	{r4, r5, r7, lr}
 8002fbe:	b088      	sub	sp, #32
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	60ba      	str	r2, [r7, #8]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	81fb      	strh	r3, [r7, #14]
 8002fca:	460b      	mov	r3, r1
 8002fcc:	81bb      	strh	r3, [r7, #12]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	83fb      	strh	r3, [r7, #30]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002fda:	2300      	movs	r3, #0
 8002fdc:	61bb      	str	r3, [r7, #24]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002fe6:	e002      	b.n	8002fee <BSP_LCD_DisplayStringAt+0x32>
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	3301      	adds	r3, #1
 8002fec:	61bb      	str	r3, [r7, #24]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	1c5a      	adds	r2, r3, #1
 8002ff2:	617a      	str	r2, [r7, #20]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f6      	bne.n	8002fe8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002ffa:	f7ff fe8f 	bl	8002d1c <BSP_LCD_GetXSize>
 8002ffe:	4601      	mov	r1, r0
 8003000:	4b50      	ldr	r3, [pc, #320]	; (8003144 <BSP_LCD_DisplayStringAt+0x188>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4850      	ldr	r0, [pc, #320]	; (8003148 <BSP_LCD_DisplayStringAt+0x18c>)
 8003006:	4613      	mov	r3, r2
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	4413      	add	r3, r2
 800300c:	009b      	lsls	r3, r3, #2
 800300e:	4403      	add	r3, r0
 8003010:	3308      	adds	r3, #8
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	889b      	ldrh	r3, [r3, #4]
 8003016:	fbb1 f3f3 	udiv	r3, r1, r3
 800301a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	2b03      	cmp	r3, #3
 8003020:	d01c      	beq.n	800305c <BSP_LCD_DisplayStringAt+0xa0>
 8003022:	2b03      	cmp	r3, #3
 8003024:	dc33      	bgt.n	800308e <BSP_LCD_DisplayStringAt+0xd2>
 8003026:	2b01      	cmp	r3, #1
 8003028:	d002      	beq.n	8003030 <BSP_LCD_DisplayStringAt+0x74>
 800302a:	2b02      	cmp	r3, #2
 800302c:	d019      	beq.n	8003062 <BSP_LCD_DisplayStringAt+0xa6>
 800302e:	e02e      	b.n	800308e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	1ad1      	subs	r1, r2, r3
 8003036:	4b43      	ldr	r3, [pc, #268]	; (8003144 <BSP_LCD_DisplayStringAt+0x188>)
 8003038:	681a      	ldr	r2, [r3, #0]
 800303a:	4843      	ldr	r0, [pc, #268]	; (8003148 <BSP_LCD_DisplayStringAt+0x18c>)
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4403      	add	r3, r0
 8003046:	3308      	adds	r3, #8
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	889b      	ldrh	r3, [r3, #4]
 800304c:	fb03 f301 	mul.w	r3, r3, r1
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	b29a      	uxth	r2, r3
 8003054:	89fb      	ldrh	r3, [r7, #14]
 8003056:	4413      	add	r3, r2
 8003058:	83fb      	strh	r3, [r7, #30]
      break;
 800305a:	e01b      	b.n	8003094 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800305c:	89fb      	ldrh	r3, [r7, #14]
 800305e:	83fb      	strh	r3, [r7, #30]
      break;
 8003060:	e018      	b.n	8003094 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	b299      	uxth	r1, r3
 800306a:	4b36      	ldr	r3, [pc, #216]	; (8003144 <BSP_LCD_DisplayStringAt+0x188>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	4836      	ldr	r0, [pc, #216]	; (8003148 <BSP_LCD_DisplayStringAt+0x18c>)
 8003070:	4613      	mov	r3, r2
 8003072:	005b      	lsls	r3, r3, #1
 8003074:	4413      	add	r3, r2
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	4403      	add	r3, r0
 800307a:	3308      	adds	r3, #8
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	889b      	ldrh	r3, [r3, #4]
 8003080:	fb11 f303 	smulbb	r3, r1, r3
 8003084:	b29a      	uxth	r2, r3
 8003086:	89fb      	ldrh	r3, [r7, #14]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	83fb      	strh	r3, [r7, #30]
      break;
 800308c:	e002      	b.n	8003094 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800308e:	89fb      	ldrh	r3, [r7, #14]
 8003090:	83fb      	strh	r3, [r7, #30]
      break;
 8003092:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003094:	8bfb      	ldrh	r3, [r7, #30]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <BSP_LCD_DisplayStringAt+0xe6>
 800309a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	da1d      	bge.n	80030de <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80030a2:	2301      	movs	r3, #1
 80030a4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80030a6:	e01a      	b.n	80030de <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	781a      	ldrb	r2, [r3, #0]
 80030ac:	89b9      	ldrh	r1, [r7, #12]
 80030ae:	8bfb      	ldrh	r3, [r7, #30]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f7ff ff3f 	bl	8002f34 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80030b6:	4b23      	ldr	r3, [pc, #140]	; (8003144 <BSP_LCD_DisplayStringAt+0x188>)
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	4923      	ldr	r1, [pc, #140]	; (8003148 <BSP_LCD_DisplayStringAt+0x18c>)
 80030bc:	4613      	mov	r3, r2
 80030be:	005b      	lsls	r3, r3, #1
 80030c0:	4413      	add	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	440b      	add	r3, r1
 80030c6:	3308      	adds	r3, #8
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	889a      	ldrh	r2, [r3, #4]
 80030cc:	8bfb      	ldrh	r3, [r7, #30]
 80030ce:	4413      	add	r3, r2
 80030d0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3301      	adds	r3, #1
 80030d6:	60bb      	str	r3, [r7, #8]
    i++;
 80030d8:	8bbb      	ldrh	r3, [r7, #28]
 80030da:	3301      	adds	r3, #1
 80030dc:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	bf14      	ite	ne
 80030e6:	2301      	movne	r3, #1
 80030e8:	2300      	moveq	r3, #0
 80030ea:	b2dc      	uxtb	r4, r3
 80030ec:	f7ff fe16 	bl	8002d1c <BSP_LCD_GetXSize>
 80030f0:	8bb9      	ldrh	r1, [r7, #28]
 80030f2:	4b14      	ldr	r3, [pc, #80]	; (8003144 <BSP_LCD_DisplayStringAt+0x188>)
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	4d14      	ldr	r5, [pc, #80]	; (8003148 <BSP_LCD_DisplayStringAt+0x18c>)
 80030f8:	4613      	mov	r3, r2
 80030fa:	005b      	lsls	r3, r3, #1
 80030fc:	4413      	add	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	442b      	add	r3, r5
 8003102:	3308      	adds	r3, #8
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	889b      	ldrh	r3, [r3, #4]
 8003108:	fb03 f301 	mul.w	r3, r3, r1
 800310c:	1ac3      	subs	r3, r0, r3
 800310e:	b299      	uxth	r1, r3
 8003110:	4b0c      	ldr	r3, [pc, #48]	; (8003144 <BSP_LCD_DisplayStringAt+0x188>)
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	480c      	ldr	r0, [pc, #48]	; (8003148 <BSP_LCD_DisplayStringAt+0x18c>)
 8003116:	4613      	mov	r3, r2
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	4403      	add	r3, r0
 8003120:	3308      	adds	r3, #8
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	889b      	ldrh	r3, [r3, #4]
 8003126:	4299      	cmp	r1, r3
 8003128:	bf2c      	ite	cs
 800312a:	2301      	movcs	r3, #1
 800312c:	2300      	movcc	r3, #0
 800312e:	b2db      	uxtb	r3, r3
 8003130:	4023      	ands	r3, r4
 8003132:	b2db      	uxtb	r3, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	d1b7      	bne.n	80030a8 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003138:	bf00      	nop
 800313a:	bf00      	nop
 800313c:	3720      	adds	r7, #32
 800313e:	46bd      	mov	sp, r7
 8003140:	bdb0      	pop	{r4, r5, r7, pc}
 8003142:	bf00      	nop
 8003144:	200005b4 	.word	0x200005b4
 8003148:	200005b8 	.word	0x200005b8

0800314c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800314c:	b5b0      	push	{r4, r5, r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	4603      	mov	r3, r0
 8003154:	603a      	str	r2, [r7, #0]
 8003156:	80fb      	strh	r3, [r7, #6]
 8003158:	460b      	mov	r3, r1
 800315a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800315c:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <BSP_LCD_DrawPixel+0x88>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1d      	ldr	r2, [pc, #116]	; (80031d8 <BSP_LCD_DrawPixel+0x8c>)
 8003162:	2134      	movs	r1, #52	; 0x34
 8003164:	fb01 f303 	mul.w	r3, r1, r3
 8003168:	4413      	add	r3, r2
 800316a:	3348      	adds	r3, #72	; 0x48
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b02      	cmp	r3, #2
 8003170:	d116      	bne.n	80031a0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003172:	4b18      	ldr	r3, [pc, #96]	; (80031d4 <BSP_LCD_DrawPixel+0x88>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a18      	ldr	r2, [pc, #96]	; (80031d8 <BSP_LCD_DrawPixel+0x8c>)
 8003178:	2134      	movs	r1, #52	; 0x34
 800317a:	fb01 f303 	mul.w	r3, r1, r3
 800317e:	4413      	add	r3, r2
 8003180:	335c      	adds	r3, #92	; 0x5c
 8003182:	681c      	ldr	r4, [r3, #0]
 8003184:	88bd      	ldrh	r5, [r7, #4]
 8003186:	f7ff fdc9 	bl	8002d1c <BSP_LCD_GetXSize>
 800318a:	4603      	mov	r3, r0
 800318c:	fb03 f205 	mul.w	r2, r3, r5
 8003190:	88fb      	ldrh	r3, [r7, #6]
 8003192:	4413      	add	r3, r2
 8003194:	005b      	lsls	r3, r3, #1
 8003196:	4423      	add	r3, r4
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	b292      	uxth	r2, r2
 800319c:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 800319e:	e015      	b.n	80031cc <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80031a0:	4b0c      	ldr	r3, [pc, #48]	; (80031d4 <BSP_LCD_DrawPixel+0x88>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a0c      	ldr	r2, [pc, #48]	; (80031d8 <BSP_LCD_DrawPixel+0x8c>)
 80031a6:	2134      	movs	r1, #52	; 0x34
 80031a8:	fb01 f303 	mul.w	r3, r1, r3
 80031ac:	4413      	add	r3, r2
 80031ae:	335c      	adds	r3, #92	; 0x5c
 80031b0:	681c      	ldr	r4, [r3, #0]
 80031b2:	88bd      	ldrh	r5, [r7, #4]
 80031b4:	f7ff fdb2 	bl	8002d1c <BSP_LCD_GetXSize>
 80031b8:	4603      	mov	r3, r0
 80031ba:	fb03 f205 	mul.w	r2, r3, r5
 80031be:	88fb      	ldrh	r3, [r7, #6]
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	4423      	add	r3, r4
 80031c6:	461a      	mov	r2, r3
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	6013      	str	r3, [r2, #0]
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bdb0      	pop	{r4, r5, r7, pc}
 80031d4:	200005b4 	.word	0x200005b4
 80031d8:	200091a4 	.word	0x200091a4

080031dc <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 80031e0:	4b0a      	ldr	r3, [pc, #40]	; (800320c <BSP_LCD_DisplayOn+0x30>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	699a      	ldr	r2, [r3, #24]
 80031e6:	4b09      	ldr	r3, [pc, #36]	; (800320c <BSP_LCD_DisplayOn+0x30>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80031f0:	2201      	movs	r2, #1
 80031f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80031f6:	4806      	ldr	r0, [pc, #24]	; (8003210 <BSP_LCD_DisplayOn+0x34>)
 80031f8:	f003 ff20 	bl	800703c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80031fc:	2201      	movs	r2, #1
 80031fe:	2108      	movs	r1, #8
 8003200:	4804      	ldr	r0, [pc, #16]	; (8003214 <BSP_LCD_DisplayOn+0x38>)
 8003202:	f003 ff1b 	bl	800703c <HAL_GPIO_WritePin>
}
 8003206:	bf00      	nop
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	200091a4 	.word	0x200091a4
 8003210:	40022000 	.word	0x40022000
 8003214:	40022800 	.word	0x40022800

08003218 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003218:	b580      	push	{r7, lr}
 800321a:	b090      	sub	sp, #64	; 0x40
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
 8003220:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003222:	4b64      	ldr	r3, [pc, #400]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 8003224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003226:	4a63      	ldr	r2, [pc, #396]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 8003228:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800322c:	6453      	str	r3, [r2, #68]	; 0x44
 800322e:	4b61      	ldr	r3, [pc, #388]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 8003230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003232:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003236:	62bb      	str	r3, [r7, #40]	; 0x28
 8003238:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800323a:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	4a5d      	ldr	r2, [pc, #372]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 8003240:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003244:	6313      	str	r3, [r2, #48]	; 0x30
 8003246:	4b5b      	ldr	r3, [pc, #364]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 8003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800324e:	627b      	str	r3, [r7, #36]	; 0x24
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003252:	4b58      	ldr	r3, [pc, #352]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a57      	ldr	r2, [pc, #348]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 8003258:	f043 0310 	orr.w	r3, r3, #16
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b55      	ldr	r3, [pc, #340]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0310 	and.w	r3, r3, #16
 8003266:	623b      	str	r3, [r7, #32]
 8003268:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800326a:	4b52      	ldr	r3, [pc, #328]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 800326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800326e:	4a51      	ldr	r2, [pc, #324]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 8003270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003274:	6313      	str	r3, [r2, #48]	; 0x30
 8003276:	4b4f      	ldr	r3, [pc, #316]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800327e:	61fb      	str	r3, [r7, #28]
 8003280:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8003282:	4b4c      	ldr	r3, [pc, #304]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	4a4b      	ldr	r2, [pc, #300]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 8003288:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800328c:	6313      	str	r3, [r2, #48]	; 0x30
 800328e:	4b49      	ldr	r3, [pc, #292]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	61bb      	str	r3, [r7, #24]
 8003298:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800329a:	4b46      	ldr	r3, [pc, #280]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a45      	ldr	r2, [pc, #276]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 80032a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b43      	ldr	r3, [pc, #268]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032ae:	617b      	str	r3, [r7, #20]
 80032b0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80032b2:	4b40      	ldr	r3, [pc, #256]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a3f      	ldr	r2, [pc, #252]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 80032b8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b3d      	ldr	r3, [pc, #244]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032c6:	613b      	str	r3, [r7, #16]
 80032c8:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80032ca:	4b3a      	ldr	r3, [pc, #232]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	4a39      	ldr	r2, [pc, #228]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032d4:	6313      	str	r3, [r2, #48]	; 0x30
 80032d6:	4b37      	ldr	r3, [pc, #220]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032de:	60fb      	str	r3, [r7, #12]
 80032e0:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 80032e2:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	4a33      	ldr	r2, [pc, #204]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 80032e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80032ec:	6313      	str	r3, [r2, #48]	; 0x30
 80032ee:	4b31      	ldr	r3, [pc, #196]	; (80033b4 <BSP_LCD_MspInit+0x19c>)
 80032f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032f6:	60bb      	str	r3, [r7, #8]
 80032f8:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80032fa:	2310      	movs	r3, #16
 80032fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80032fe:	2302      	movs	r3, #2
 8003300:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003302:	2300      	movs	r3, #0
 8003304:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003306:	2302      	movs	r3, #2
 8003308:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800330a:	230e      	movs	r3, #14
 800330c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800330e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003312:	4619      	mov	r1, r3
 8003314:	4828      	ldr	r0, [pc, #160]	; (80033b8 <BSP_LCD_MspInit+0x1a0>)
 8003316:	f003 fbc1 	bl	8006a9c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800331a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003320:	2302      	movs	r3, #2
 8003322:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003324:	2309      	movs	r3, #9
 8003326:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003328:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800332c:	4619      	mov	r1, r3
 800332e:	4823      	ldr	r0, [pc, #140]	; (80033bc <BSP_LCD_MspInit+0x1a4>)
 8003330:	f003 fbb4 	bl	8006a9c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003334:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003338:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800333a:	2302      	movs	r3, #2
 800333c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800333e:	230e      	movs	r3, #14
 8003340:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003342:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003346:	4619      	mov	r1, r3
 8003348:	481d      	ldr	r0, [pc, #116]	; (80033c0 <BSP_LCD_MspInit+0x1a8>)
 800334a:	f003 fba7 	bl	8006a9c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800334e:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003352:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003354:	2302      	movs	r3, #2
 8003356:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003358:	230e      	movs	r3, #14
 800335a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 800335c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003360:	4619      	mov	r1, r3
 8003362:	4818      	ldr	r0, [pc, #96]	; (80033c4 <BSP_LCD_MspInit+0x1ac>)
 8003364:	f003 fb9a 	bl	8006a9c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003368:	23f7      	movs	r3, #247	; 0xf7
 800336a:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800336c:	2302      	movs	r3, #2
 800336e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003370:	230e      	movs	r3, #14
 8003372:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003374:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003378:	4619      	mov	r1, r3
 800337a:	4813      	ldr	r0, [pc, #76]	; (80033c8 <BSP_LCD_MspInit+0x1b0>)
 800337c:	f003 fb8e 	bl	8006a9c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8003380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003384:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8003386:	2301      	movs	r3, #1
 8003388:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800338a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800338e:	4619      	mov	r1, r3
 8003390:	480b      	ldr	r0, [pc, #44]	; (80033c0 <BSP_LCD_MspInit+0x1a8>)
 8003392:	f003 fb83 	bl	8006a9c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 8003396:	2308      	movs	r3, #8
 8003398:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800339a:	2301      	movs	r3, #1
 800339c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800339e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80033a2:	4619      	mov	r1, r3
 80033a4:	4808      	ldr	r0, [pc, #32]	; (80033c8 <BSP_LCD_MspInit+0x1b0>)
 80033a6:	f003 fb79 	bl	8006a9c <HAL_GPIO_Init>
}
 80033aa:	bf00      	nop
 80033ac:	3740      	adds	r7, #64	; 0x40
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800
 80033b8:	40021000 	.word	0x40021000
 80033bc:	40021800 	.word	0x40021800
 80033c0:	40022000 	.word	0x40022000
 80033c4:	40022400 	.word	0x40022400
 80033c8:	40022800 	.word	0x40022800

080033cc <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
 80033d4:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <BSP_LCD_ClockConfig+0x34>)
 80033d8:	2208      	movs	r2, #8
 80033da:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 80033dc:	4b08      	ldr	r3, [pc, #32]	; (8003400 <BSP_LCD_ClockConfig+0x34>)
 80033de:	22c0      	movs	r2, #192	; 0xc0
 80033e0:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 80033e2:	4b07      	ldr	r3, [pc, #28]	; (8003400 <BSP_LCD_ClockConfig+0x34>)
 80033e4:	2205      	movs	r2, #5
 80033e6:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <BSP_LCD_ClockConfig+0x34>)
 80033ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80033ee:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80033f0:	4803      	ldr	r0, [pc, #12]	; (8003400 <BSP_LCD_ClockConfig+0x34>)
 80033f2:	f005 fbed 	bl	8008bd0 <HAL_RCCEx_PeriphCLKConfig>
}
 80033f6:	bf00      	nop
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	200005d0 	.word	0x200005d0

08003404 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b088      	sub	sp, #32
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	603a      	str	r2, [r7, #0]
 800340e:	80fb      	strh	r3, [r7, #6]
 8003410:	460b      	mov	r3, r1
 8003412:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	61fb      	str	r3, [r7, #28]
 8003418:	2300      	movs	r3, #0
 800341a:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 800341c:	4b53      	ldr	r3, [pc, #332]	; (800356c <DrawChar+0x168>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4953      	ldr	r1, [pc, #332]	; (8003570 <DrawChar+0x16c>)
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	3308      	adds	r3, #8
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	88db      	ldrh	r3, [r3, #6]
 8003432:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003434:	4b4d      	ldr	r3, [pc, #308]	; (800356c <DrawChar+0x168>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	494d      	ldr	r1, [pc, #308]	; (8003570 <DrawChar+0x16c>)
 800343a:	4613      	mov	r3, r2
 800343c:	005b      	lsls	r3, r3, #1
 800343e:	4413      	add	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	440b      	add	r3, r1
 8003444:	3308      	adds	r3, #8
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	889b      	ldrh	r3, [r3, #4]
 800344a:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 800344c:	8a3b      	ldrh	r3, [r7, #16]
 800344e:	3307      	adds	r3, #7
 8003450:	2b00      	cmp	r3, #0
 8003452:	da00      	bge.n	8003456 <DrawChar+0x52>
 8003454:	3307      	adds	r3, #7
 8003456:	10db      	asrs	r3, r3, #3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	00db      	lsls	r3, r3, #3
 800345c:	b2da      	uxtb	r2, r3
 800345e:	8a3b      	ldrh	r3, [r7, #16]
 8003460:	b2db      	uxtb	r3, r3
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003466:	2300      	movs	r3, #0
 8003468:	61fb      	str	r3, [r7, #28]
 800346a:	e076      	b.n	800355a <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 800346c:	8a3b      	ldrh	r3, [r7, #16]
 800346e:	3307      	adds	r3, #7
 8003470:	2b00      	cmp	r3, #0
 8003472:	da00      	bge.n	8003476 <DrawChar+0x72>
 8003474:	3307      	adds	r3, #7
 8003476:	10db      	asrs	r3, r3, #3
 8003478:	461a      	mov	r2, r3
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	fb03 f302 	mul.w	r3, r3, r2
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	4413      	add	r3, r2
 8003484:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 8003486:	8a3b      	ldrh	r3, [r7, #16]
 8003488:	3307      	adds	r3, #7
 800348a:	2b00      	cmp	r3, #0
 800348c:	da00      	bge.n	8003490 <DrawChar+0x8c>
 800348e:	3307      	adds	r3, #7
 8003490:	10db      	asrs	r3, r3, #3
 8003492:	2b01      	cmp	r3, #1
 8003494:	d002      	beq.n	800349c <DrawChar+0x98>
 8003496:	2b02      	cmp	r3, #2
 8003498:	d004      	beq.n	80034a4 <DrawChar+0xa0>
 800349a:	e00c      	b.n	80034b6 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	617b      	str	r3, [r7, #20]
      break;
 80034a2:	e016      	b.n	80034d2 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	021b      	lsls	r3, r3, #8
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	3201      	adds	r2, #1
 80034ae:	7812      	ldrb	r2, [r2, #0]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
      break;
 80034b4:	e00d      	b.n	80034d2 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	781b      	ldrb	r3, [r3, #0]
 80034ba:	041a      	lsls	r2, r3, #16
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	3301      	adds	r3, #1
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	021b      	lsls	r3, r3, #8
 80034c4:	4313      	orrs	r3, r2
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	3202      	adds	r2, #2
 80034ca:	7812      	ldrb	r2, [r2, #0]
 80034cc:	4313      	orrs	r3, r2
 80034ce:	617b      	str	r3, [r7, #20]
      break;
 80034d0:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80034d2:	2300      	movs	r3, #0
 80034d4:	61bb      	str	r3, [r7, #24]
 80034d6:	e036      	b.n	8003546 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80034d8:	8a3a      	ldrh	r2, [r7, #16]
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	1ad2      	subs	r2, r2, r3
 80034de:	7bfb      	ldrb	r3, [r7, #15]
 80034e0:	4413      	add	r3, r2
 80034e2:	3b01      	subs	r3, #1
 80034e4:	2201      	movs	r2, #1
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	4013      	ands	r3, r2
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d012      	beq.n	800351a <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	b29a      	uxth	r2, r3
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	4413      	add	r3, r2
 80034fc:	b298      	uxth	r0, r3
 80034fe:	4b1b      	ldr	r3, [pc, #108]	; (800356c <DrawChar+0x168>)
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	491b      	ldr	r1, [pc, #108]	; (8003570 <DrawChar+0x16c>)
 8003504:	4613      	mov	r3, r2
 8003506:	005b      	lsls	r3, r3, #1
 8003508:	4413      	add	r3, r2
 800350a:	009b      	lsls	r3, r3, #2
 800350c:	440b      	add	r3, r1
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	88bb      	ldrh	r3, [r7, #4]
 8003512:	4619      	mov	r1, r3
 8003514:	f7ff fe1a 	bl	800314c <BSP_LCD_DrawPixel>
 8003518:	e012      	b.n	8003540 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	b29a      	uxth	r2, r3
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	4413      	add	r3, r2
 8003522:	b298      	uxth	r0, r3
 8003524:	4b11      	ldr	r3, [pc, #68]	; (800356c <DrawChar+0x168>)
 8003526:	681a      	ldr	r2, [r3, #0]
 8003528:	4911      	ldr	r1, [pc, #68]	; (8003570 <DrawChar+0x16c>)
 800352a:	4613      	mov	r3, r2
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	3304      	adds	r3, #4
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	88bb      	ldrh	r3, [r7, #4]
 800353a:	4619      	mov	r1, r3
 800353c:	f7ff fe06 	bl	800314c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	3301      	adds	r3, #1
 8003544:	61bb      	str	r3, [r7, #24]
 8003546:	8a3b      	ldrh	r3, [r7, #16]
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	429a      	cmp	r2, r3
 800354c:	d3c4      	bcc.n	80034d8 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800354e:	88bb      	ldrh	r3, [r7, #4]
 8003550:	3301      	adds	r3, #1
 8003552:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	3301      	adds	r3, #1
 8003558:	61fb      	str	r3, [r7, #28]
 800355a:	8a7b      	ldrh	r3, [r7, #18]
 800355c:	69fa      	ldr	r2, [r7, #28]
 800355e:	429a      	cmp	r2, r3
 8003560:	d384      	bcc.n	800346c <DrawChar+0x68>
  }
}
 8003562:	bf00      	nop
 8003564:	bf00      	nop
 8003566:	3720      	adds	r7, #32
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	200005b4 	.word	0x200005b4
 8003570:	200005b8 	.word	0x200005b8

08003574 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b086      	sub	sp, #24
 8003578:	af02      	add	r7, sp, #8
 800357a:	60f8      	str	r0, [r7, #12]
 800357c:	60b9      	str	r1, [r7, #8]
 800357e:	607a      	str	r2, [r7, #4]
 8003580:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003582:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <LL_FillBuffer+0x88>)
 8003584:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003588:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800358a:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <LL_FillBuffer+0x8c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a1d      	ldr	r2, [pc, #116]	; (8003604 <LL_FillBuffer+0x90>)
 8003590:	2134      	movs	r1, #52	; 0x34
 8003592:	fb01 f303 	mul.w	r3, r1, r3
 8003596:	4413      	add	r3, r2
 8003598:	3348      	adds	r3, #72	; 0x48
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2b02      	cmp	r3, #2
 800359e:	d103      	bne.n	80035a8 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80035a0:	4b16      	ldr	r3, [pc, #88]	; (80035fc <LL_FillBuffer+0x88>)
 80035a2:	2202      	movs	r2, #2
 80035a4:	609a      	str	r2, [r3, #8]
 80035a6:	e002      	b.n	80035ae <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <LL_FillBuffer+0x88>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80035ae:	4a13      	ldr	r2, [pc, #76]	; (80035fc <LL_FillBuffer+0x88>)
 80035b0:	69bb      	ldr	r3, [r7, #24]
 80035b2:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80035b4:	4b11      	ldr	r3, [pc, #68]	; (80035fc <LL_FillBuffer+0x88>)
 80035b6:	4a14      	ldr	r2, [pc, #80]	; (8003608 <LL_FillBuffer+0x94>)
 80035b8:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80035ba:	4810      	ldr	r0, [pc, #64]	; (80035fc <LL_FillBuffer+0x88>)
 80035bc:	f002 ffe2 	bl	8006584 <HAL_DMA2D_Init>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d115      	bne.n	80035f2 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80035c6:	68f9      	ldr	r1, [r7, #12]
 80035c8:	480c      	ldr	r0, [pc, #48]	; (80035fc <LL_FillBuffer+0x88>)
 80035ca:	f003 f939 	bl	8006840 <HAL_DMA2D_ConfigLayer>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d10e      	bne.n	80035f2 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80035d4:	68ba      	ldr	r2, [r7, #8]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	9300      	str	r3, [sp, #0]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	69f9      	ldr	r1, [r7, #28]
 80035de:	4807      	ldr	r0, [pc, #28]	; (80035fc <LL_FillBuffer+0x88>)
 80035e0:	f003 f81a 	bl	8006618 <HAL_DMA2D_Start>
 80035e4:	4603      	mov	r3, r0
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d103      	bne.n	80035f2 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80035ea:	210a      	movs	r1, #10
 80035ec:	4803      	ldr	r0, [pc, #12]	; (80035fc <LL_FillBuffer+0x88>)
 80035ee:	f003 f83e 	bl	800666e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}
 80035fa:	bf00      	nop
 80035fc:	20000574 	.word	0x20000574
 8003600:	200005b4 	.word	0x200005b4
 8003604:	200091a4 	.word	0x200091a4
 8003608:	4002b000 	.word	0x4002b000

0800360c <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003610:	4b29      	ldr	r3, [pc, #164]	; (80036b8 <BSP_SDRAM_Init+0xac>)
 8003612:	4a2a      	ldr	r2, [pc, #168]	; (80036bc <BSP_SDRAM_Init+0xb0>)
 8003614:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003616:	4b2a      	ldr	r3, [pc, #168]	; (80036c0 <BSP_SDRAM_Init+0xb4>)
 8003618:	2202      	movs	r2, #2
 800361a:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 800361c:	4b28      	ldr	r3, [pc, #160]	; (80036c0 <BSP_SDRAM_Init+0xb4>)
 800361e:	2207      	movs	r2, #7
 8003620:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003622:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <BSP_SDRAM_Init+0xb4>)
 8003624:	2204      	movs	r2, #4
 8003626:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003628:	4b25      	ldr	r3, [pc, #148]	; (80036c0 <BSP_SDRAM_Init+0xb4>)
 800362a:	2207      	movs	r2, #7
 800362c:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 800362e:	4b24      	ldr	r3, [pc, #144]	; (80036c0 <BSP_SDRAM_Init+0xb4>)
 8003630:	2202      	movs	r2, #2
 8003632:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003634:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <BSP_SDRAM_Init+0xb4>)
 8003636:	2202      	movs	r2, #2
 8003638:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800363a:	4b21      	ldr	r3, [pc, #132]	; (80036c0 <BSP_SDRAM_Init+0xb4>)
 800363c:	2202      	movs	r2, #2
 800363e:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003640:	4b1d      	ldr	r3, [pc, #116]	; (80036b8 <BSP_SDRAM_Init+0xac>)
 8003642:	2200      	movs	r2, #0
 8003644:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003646:	4b1c      	ldr	r3, [pc, #112]	; (80036b8 <BSP_SDRAM_Init+0xac>)
 8003648:	2200      	movs	r2, #0
 800364a:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800364c:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <BSP_SDRAM_Init+0xac>)
 800364e:	2204      	movs	r2, #4
 8003650:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003652:	4b19      	ldr	r3, [pc, #100]	; (80036b8 <BSP_SDRAM_Init+0xac>)
 8003654:	2210      	movs	r2, #16
 8003656:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003658:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <BSP_SDRAM_Init+0xac>)
 800365a:	2240      	movs	r2, #64	; 0x40
 800365c:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 800365e:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <BSP_SDRAM_Init+0xac>)
 8003660:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003664:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <BSP_SDRAM_Init+0xac>)
 8003668:	2200      	movs	r2, #0
 800366a:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800366c:	4b12      	ldr	r3, [pc, #72]	; (80036b8 <BSP_SDRAM_Init+0xac>)
 800366e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003672:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003674:	4b10      	ldr	r3, [pc, #64]	; (80036b8 <BSP_SDRAM_Init+0xac>)
 8003676:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800367a:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800367c:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <BSP_SDRAM_Init+0xac>)
 800367e:	2200      	movs	r2, #0
 8003680:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003682:	2100      	movs	r1, #0
 8003684:	480c      	ldr	r0, [pc, #48]	; (80036b8 <BSP_SDRAM_Init+0xac>)
 8003686:	f000 f87f 	bl	8003788 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800368a:	490d      	ldr	r1, [pc, #52]	; (80036c0 <BSP_SDRAM_Init+0xb4>)
 800368c:	480a      	ldr	r0, [pc, #40]	; (80036b8 <BSP_SDRAM_Init+0xac>)
 800368e:	f008 f824 	bl	800b6da <HAL_SDRAM_Init>
 8003692:	4603      	mov	r3, r0
 8003694:	2b00      	cmp	r3, #0
 8003696:	d003      	beq.n	80036a0 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003698:	4b0a      	ldr	r3, [pc, #40]	; (80036c4 <BSP_SDRAM_Init+0xb8>)
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
 800369e:	e002      	b.n	80036a6 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80036a0:	4b08      	ldr	r3, [pc, #32]	; (80036c4 <BSP_SDRAM_Init+0xb8>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80036a6:	f240 6003 	movw	r0, #1539	; 0x603
 80036aa:	f000 f80d 	bl	80036c8 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80036ae:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <BSP_SDRAM_Init+0xb8>)
 80036b0:	781b      	ldrb	r3, [r3, #0]
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	bd80      	pop	{r7, pc}
 80036b6:	bf00      	nop
 80036b8:	2000924c 	.word	0x2000924c
 80036bc:	a0000140 	.word	0xa0000140
 80036c0:	20000654 	.word	0x20000654
 80036c4:	2000003c 	.word	0x2000003c

080036c8 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80036d4:	4b2a      	ldr	r3, [pc, #168]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80036da:	4b29      	ldr	r3, [pc, #164]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036dc:	2210      	movs	r2, #16
 80036de:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80036e0:	4b27      	ldr	r3, [pc, #156]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80036e6:	4b26      	ldr	r3, [pc, #152]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036e8:	2200      	movs	r2, #0
 80036ea:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80036ec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036f0:	4923      	ldr	r1, [pc, #140]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80036f2:	4824      	ldr	r0, [pc, #144]	; (8003784 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80036f4:	f008 f825 	bl	800b742 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80036f8:	2001      	movs	r0, #1
 80036fa:	f002 fa39 	bl	8005b70 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003700:	2202      	movs	r2, #2
 8003702:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003704:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003706:	2210      	movs	r2, #16
 8003708:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800370c:	2201      	movs	r2, #1
 800370e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003712:	2200      	movs	r2, #0
 8003714:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003716:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800371a:	4919      	ldr	r1, [pc, #100]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800371c:	4819      	ldr	r0, [pc, #100]	; (8003784 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800371e:	f008 f810 	bl	800b742 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003722:	4b17      	ldr	r3, [pc, #92]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003724:	2203      	movs	r2, #3
 8003726:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003728:	4b15      	ldr	r3, [pc, #84]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800372a:	2210      	movs	r2, #16
 800372c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 800372e:	4b14      	ldr	r3, [pc, #80]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003730:	2208      	movs	r2, #8
 8003732:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003734:	4b12      	ldr	r3, [pc, #72]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003736:	2200      	movs	r2, #0
 8003738:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 800373a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800373e:	4910      	ldr	r1, [pc, #64]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003740:	4810      	ldr	r0, [pc, #64]	; (8003784 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003742:	f007 fffe 	bl	800b742 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003746:	f44f 7308 	mov.w	r3, #544	; 0x220
 800374a:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 800374c:	4b0c      	ldr	r3, [pc, #48]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800374e:	2204      	movs	r2, #4
 8003750:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003752:	4b0b      	ldr	r3, [pc, #44]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003754:	2210      	movs	r2, #16
 8003756:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800375a:	2201      	movs	r2, #1
 800375c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	4a07      	ldr	r2, [pc, #28]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003762:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003764:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003768:	4905      	ldr	r1, [pc, #20]	; (8003780 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800376a:	4806      	ldr	r0, [pc, #24]	; (8003784 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800376c:	f007 ffe9 	bl	800b742 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003770:	6879      	ldr	r1, [r7, #4]
 8003772:	4804      	ldr	r0, [pc, #16]	; (8003784 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003774:	f008 f810 	bl	800b798 <HAL_SDRAM_ProgramRefreshRate>
}
 8003778:	bf00      	nop
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	20000670 	.word	0x20000670
 8003784:	2000924c 	.word	0x2000924c

08003788 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003788:	b580      	push	{r7, lr}
 800378a:	b090      	sub	sp, #64	; 0x40
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003792:	4b70      	ldr	r3, [pc, #448]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 8003794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003796:	4a6f      	ldr	r2, [pc, #444]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6393      	str	r3, [r2, #56]	; 0x38
 800379e:	4b6d      	ldr	r3, [pc, #436]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 80037a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a2:	f003 0301 	and.w	r3, r3, #1
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 80037aa:	4b6a      	ldr	r3, [pc, #424]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 80037ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ae:	4a69      	ldr	r2, [pc, #420]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 80037b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80037b4:	6313      	str	r3, [r2, #48]	; 0x30
 80037b6:	4b67      	ldr	r3, [pc, #412]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 80037b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037be:	627b      	str	r3, [r7, #36]	; 0x24
 80037c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80037c2:	4b64      	ldr	r3, [pc, #400]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 80037c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c6:	4a63      	ldr	r2, [pc, #396]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 80037c8:	f043 0304 	orr.w	r3, r3, #4
 80037cc:	6313      	str	r3, [r2, #48]	; 0x30
 80037ce:	4b61      	ldr	r3, [pc, #388]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037d2:	f003 0304 	and.w	r3, r3, #4
 80037d6:	623b      	str	r3, [r7, #32]
 80037d8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80037da:	4b5e      	ldr	r3, [pc, #376]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037de:	4a5d      	ldr	r2, [pc, #372]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 80037e0:	f043 0308 	orr.w	r3, r3, #8
 80037e4:	6313      	str	r3, [r2, #48]	; 0x30
 80037e6:	4b5b      	ldr	r3, [pc, #364]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 80037e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	61fb      	str	r3, [r7, #28]
 80037f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80037f2:	4b58      	ldr	r3, [pc, #352]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 80037f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f6:	4a57      	ldr	r2, [pc, #348]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 80037f8:	f043 0310 	orr.w	r3, r3, #16
 80037fc:	6313      	str	r3, [r2, #48]	; 0x30
 80037fe:	4b55      	ldr	r3, [pc, #340]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003802:	f003 0310 	and.w	r3, r3, #16
 8003806:	61bb      	str	r3, [r7, #24]
 8003808:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800380a:	4b52      	ldr	r3, [pc, #328]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 800380c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380e:	4a51      	ldr	r2, [pc, #324]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 8003810:	f043 0320 	orr.w	r3, r3, #32
 8003814:	6313      	str	r3, [r2, #48]	; 0x30
 8003816:	4b4f      	ldr	r3, [pc, #316]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 8003818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800381a:	f003 0320 	and.w	r3, r3, #32
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003822:	4b4c      	ldr	r3, [pc, #304]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 8003824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003826:	4a4b      	ldr	r2, [pc, #300]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 8003828:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800382c:	6313      	str	r3, [r2, #48]	; 0x30
 800382e:	4b49      	ldr	r3, [pc, #292]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 8003830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800383a:	4b46      	ldr	r3, [pc, #280]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 800383c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383e:	4a45      	ldr	r2, [pc, #276]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 8003840:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003844:	6313      	str	r3, [r2, #48]	; 0x30
 8003846:	4b43      	ldr	r3, [pc, #268]	; (8003954 <BSP_SDRAM_MspInit+0x1cc>)
 8003848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	60fb      	str	r3, [r7, #12]
 8003850:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003856:	2301      	movs	r3, #1
 8003858:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800385a:	2302      	movs	r3, #2
 800385c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800385e:	230c      	movs	r3, #12
 8003860:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003862:	2308      	movs	r3, #8
 8003864:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800386a:	4619      	mov	r1, r3
 800386c:	483a      	ldr	r0, [pc, #232]	; (8003958 <BSP_SDRAM_MspInit+0x1d0>)
 800386e:	f003 f915 	bl	8006a9c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003872:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003878:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800387c:	4619      	mov	r1, r3
 800387e:	4837      	ldr	r0, [pc, #220]	; (800395c <BSP_SDRAM_MspInit+0x1d4>)
 8003880:	f003 f90c 	bl	8006a9c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003884:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003888:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800388a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800388e:	4619      	mov	r1, r3
 8003890:	4833      	ldr	r0, [pc, #204]	; (8003960 <BSP_SDRAM_MspInit+0x1d8>)
 8003892:	f003 f903 	bl	8006a9c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003896:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800389a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800389c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038a0:	4619      	mov	r1, r3
 80038a2:	4830      	ldr	r0, [pc, #192]	; (8003964 <BSP_SDRAM_MspInit+0x1dc>)
 80038a4:	f003 f8fa 	bl	8006a9c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 80038a8:	f248 1333 	movw	r3, #33075	; 0x8133
 80038ac:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80038ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038b2:	4619      	mov	r1, r3
 80038b4:	482c      	ldr	r0, [pc, #176]	; (8003968 <BSP_SDRAM_MspInit+0x1e0>)
 80038b6:	f003 f8f1 	bl	8006a9c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 80038ba:	2328      	movs	r3, #40	; 0x28
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 80038be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038c2:	4619      	mov	r1, r3
 80038c4:	4829      	ldr	r0, [pc, #164]	; (800396c <BSP_SDRAM_MspInit+0x1e4>)
 80038c6:	f003 f8e9 	bl	8006a9c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80038ca:	4b29      	ldr	r3, [pc, #164]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80038d0:	4b27      	ldr	r3, [pc, #156]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 80038d2:	2280      	movs	r2, #128	; 0x80
 80038d4:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80038d6:	4b26      	ldr	r3, [pc, #152]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 80038d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80038dc:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 80038de:	4b24      	ldr	r3, [pc, #144]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 80038e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038e4:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80038e6:	4b22      	ldr	r3, [pc, #136]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 80038e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80038ec:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80038ee:	4b20      	ldr	r3, [pc, #128]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 80038f0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80038f4:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 80038f6:	4b1e      	ldr	r3, [pc, #120]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 80038fc:	4b1c      	ldr	r3, [pc, #112]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 80038fe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003902:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003904:	4b1a      	ldr	r3, [pc, #104]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 8003906:	2200      	movs	r2, #0
 8003908:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800390a:	4b19      	ldr	r3, [pc, #100]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 800390c:	2203      	movs	r2, #3
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003910:	4b17      	ldr	r3, [pc, #92]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 8003912:	2200      	movs	r2, #0
 8003914:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003916:	4b16      	ldr	r3, [pc, #88]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 8003918:	2200      	movs	r2, #0
 800391a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 800391c:	4b14      	ldr	r3, [pc, #80]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 800391e:	4a15      	ldr	r2, [pc, #84]	; (8003974 <BSP_SDRAM_MspInit+0x1ec>)
 8003920:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a12      	ldr	r2, [pc, #72]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 8003926:	631a      	str	r2, [r3, #48]	; 0x30
 8003928:	4a11      	ldr	r2, [pc, #68]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 800392e:	4810      	ldr	r0, [pc, #64]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 8003930:	f002 fad2 	bl	8005ed8 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003934:	480e      	ldr	r0, [pc, #56]	; (8003970 <BSP_SDRAM_MspInit+0x1e8>)
 8003936:	f002 fa21 	bl	8005d7c <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800393a:	2200      	movs	r2, #0
 800393c:	210f      	movs	r1, #15
 800393e:	2038      	movs	r0, #56	; 0x38
 8003940:	f002 f9f2 	bl	8005d28 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003944:	2038      	movs	r0, #56	; 0x38
 8003946:	f002 fa0b 	bl	8005d60 <HAL_NVIC_EnableIRQ>
}
 800394a:	bf00      	nop
 800394c:	3740      	adds	r7, #64	; 0x40
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	40023800 	.word	0x40023800
 8003958:	40020800 	.word	0x40020800
 800395c:	40020c00 	.word	0x40020c00
 8003960:	40021000 	.word	0x40021000
 8003964:	40021400 	.word	0x40021400
 8003968:	40021800 	.word	0x40021800
 800396c:	40021c00 	.word	0x40021c00
 8003970:	20000680 	.word	0x20000680
 8003974:	40026410 	.word	0x40026410

08003978 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b084      	sub	sp, #16
 800397c:	af00      	add	r7, sp, #0
 800397e:	4603      	mov	r3, r0
 8003980:	460a      	mov	r2, r1
 8003982:	80fb      	strh	r3, [r7, #6]
 8003984:	4613      	mov	r3, r2
 8003986:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 800398c:	4a14      	ldr	r2, [pc, #80]	; (80039e0 <BSP_TS_Init+0x68>)
 800398e:	88fb      	ldrh	r3, [r7, #6]
 8003990:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003992:	4a14      	ldr	r2, [pc, #80]	; (80039e4 <BSP_TS_Init+0x6c>)
 8003994:	88bb      	ldrh	r3, [r7, #4]
 8003996:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003998:	4b13      	ldr	r3, [pc, #76]	; (80039e8 <BSP_TS_Init+0x70>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2070      	movs	r0, #112	; 0x70
 800399e:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 80039a0:	4b11      	ldr	r3, [pc, #68]	; (80039e8 <BSP_TS_Init+0x70>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	2070      	movs	r0, #112	; 0x70
 80039a6:	4798      	blx	r3
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b51      	cmp	r3, #81	; 0x51
 80039ac:	d111      	bne.n	80039d2 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 80039ae:	4b0f      	ldr	r3, [pc, #60]	; (80039ec <BSP_TS_Init+0x74>)
 80039b0:	4a0d      	ldr	r2, [pc, #52]	; (80039e8 <BSP_TS_Init+0x70>)
 80039b2:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <BSP_TS_Init+0x78>)
 80039b6:	2270      	movs	r2, #112	; 0x70
 80039b8:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 80039ba:	4b0e      	ldr	r3, [pc, #56]	; (80039f4 <BSP_TS_Init+0x7c>)
 80039bc:	2208      	movs	r2, #8
 80039be:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 80039c0:	4b0a      	ldr	r3, [pc, #40]	; (80039ec <BSP_TS_Init+0x74>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <BSP_TS_Init+0x78>)
 80039c8:	7812      	ldrb	r2, [r2, #0]
 80039ca:	b292      	uxth	r2, r2
 80039cc:	4610      	mov	r0, r2
 80039ce:	4798      	blx	r3
 80039d0:	e001      	b.n	80039d6 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 80039d2:	2303      	movs	r3, #3
 80039d4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3710      	adds	r7, #16
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	200006e4 	.word	0x200006e4
 80039e4:	200006e6 	.word	0x200006e6
 80039e8:	20000000 	.word	0x20000000
 80039ec:	200006e0 	.word	0x200006e0
 80039f0:	200006e9 	.word	0x200006e9
 80039f4:	200006e8 	.word	0x200006e8

080039f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b082      	sub	sp, #8
 80039fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	4b11      	ldr	r3, [pc, #68]	; (8003a44 <HAL_MspInit+0x4c>)
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	4a10      	ldr	r2, [pc, #64]	; (8003a44 <HAL_MspInit+0x4c>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a08:	6413      	str	r3, [r2, #64]	; 0x40
 8003a0a:	4b0e      	ldr	r3, [pc, #56]	; (8003a44 <HAL_MspInit+0x4c>)
 8003a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a16:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_MspInit+0x4c>)
 8003a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	; (8003a44 <HAL_MspInit+0x4c>)
 8003a1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a20:	6453      	str	r3, [r2, #68]	; 0x44
 8003a22:	4b08      	ldr	r3, [pc, #32]	; (8003a44 <HAL_MspInit+0x4c>)
 8003a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	210f      	movs	r1, #15
 8003a32:	f06f 0001 	mvn.w	r0, #1
 8003a36:	f002 f977 	bl	8005d28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800

08003a48 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a0a      	ldr	r2, [pc, #40]	; (8003a80 <HAL_DMA2D_MspInit+0x38>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d10b      	bne.n	8003a72 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <HAL_DMA2D_MspInit+0x3c>)
 8003a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <HAL_DMA2D_MspInit+0x3c>)
 8003a60:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a64:	6313      	str	r3, [r2, #48]	; 0x30
 8003a66:	4b07      	ldr	r3, [pc, #28]	; (8003a84 <HAL_DMA2D_MspInit+0x3c>)
 8003a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	4002b000 	.word	0x4002b000
 8003a84:	40023800 	.word	0x40023800

08003a88 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b08e      	sub	sp, #56	; 0x38
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	605a      	str	r2, [r3, #4]
 8003a9a:	609a      	str	r2, [r3, #8]
 8003a9c:	60da      	str	r2, [r3, #12]
 8003a9e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a55      	ldr	r2, [pc, #340]	; (8003bfc <HAL_LTDC_MspInit+0x174>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	f040 80a3 	bne.w	8003bf2 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8003aac:	4b54      	ldr	r3, [pc, #336]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ab0:	4a53      	ldr	r2, [pc, #332]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003ab2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ab6:	6453      	str	r3, [r2, #68]	; 0x44
 8003ab8:	4b51      	ldr	r3, [pc, #324]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ac0:	623b      	str	r3, [r7, #32]
 8003ac2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ac4:	4b4e      	ldr	r3, [pc, #312]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac8:	4a4d      	ldr	r2, [pc, #308]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003aca:	f043 0310 	orr.w	r3, r3, #16
 8003ace:	6313      	str	r3, [r2, #48]	; 0x30
 8003ad0:	4b4b      	ldr	r3, [pc, #300]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ad4:	f003 0310 	and.w	r3, r3, #16
 8003ad8:	61fb      	str	r3, [r7, #28]
 8003ada:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8003adc:	4b48      	ldr	r3, [pc, #288]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae0:	4a47      	ldr	r2, [pc, #284]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003ae2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003ae6:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae8:	4b45      	ldr	r3, [pc, #276]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003af0:	61bb      	str	r3, [r7, #24]
 8003af2:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8003af4:	4b42      	ldr	r3, [pc, #264]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	4a41      	ldr	r2, [pc, #260]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003afa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003afe:	6313      	str	r3, [r2, #48]	; 0x30
 8003b00:	4b3f      	ldr	r3, [pc, #252]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b0c:	4b3c      	ldr	r3, [pc, #240]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b10:	4a3b      	ldr	r2, [pc, #236]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b16:	6313      	str	r3, [r2, #48]	; 0x30
 8003b18:	4b39      	ldr	r3, [pc, #228]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b20:	613b      	str	r3, [r7, #16]
 8003b22:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003b24:	4b36      	ldr	r3, [pc, #216]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	4a35      	ldr	r2, [pc, #212]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b2e:	6313      	str	r3, [r2, #48]	; 0x30
 8003b30:	4b33      	ldr	r3, [pc, #204]	; (8003c00 <HAL_LTDC_MspInit+0x178>)
 8003b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8003b3c:	2310      	movs	r3, #16
 8003b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b40:	2302      	movs	r3, #2
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b44:	2300      	movs	r3, #0
 8003b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b4c:	230e      	movs	r3, #14
 8003b4e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8003b50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b54:	4619      	mov	r1, r3
 8003b56:	482b      	ldr	r0, [pc, #172]	; (8003c04 <HAL_LTDC_MspInit+0x17c>)
 8003b58:	f002 ffa0 	bl	8006a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8003b5c:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b62:	2302      	movs	r3, #2
 8003b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b66:	2300      	movs	r3, #0
 8003b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b6e:	230e      	movs	r3, #14
 8003b70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8003b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b76:	4619      	mov	r1, r3
 8003b78:	4823      	ldr	r0, [pc, #140]	; (8003c08 <HAL_LTDC_MspInit+0x180>)
 8003b7a:	f002 ff8f 	bl	8006a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8003b7e:	23f7      	movs	r3, #247	; 0xf7
 8003b80:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b82:	2302      	movs	r3, #2
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003b8e:	230e      	movs	r3, #14
 8003b90:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8003b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b96:	4619      	mov	r1, r3
 8003b98:	481c      	ldr	r0, [pc, #112]	; (8003c0c <HAL_LTDC_MspInit+0x184>)
 8003b9a:	f002 ff7f 	bl	8006a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8003b9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ba2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bac:	2300      	movs	r3, #0
 8003bae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8003bb0:	2309      	movs	r3, #9
 8003bb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8003bb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bb8:	4619      	mov	r1, r3
 8003bba:	4815      	ldr	r0, [pc, #84]	; (8003c10 <HAL_LTDC_MspInit+0x188>)
 8003bbc:	f002 ff6e 	bl	8006a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8003bc0:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8003bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bc6:	2302      	movs	r3, #2
 8003bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8003bd2:	230e      	movs	r3, #14
 8003bd4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003bd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003bda:	4619      	mov	r1, r3
 8003bdc:	480d      	ldr	r0, [pc, #52]	; (8003c14 <HAL_LTDC_MspInit+0x18c>)
 8003bde:	f002 ff5d 	bl	8006a9c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8003be2:	2200      	movs	r2, #0
 8003be4:	2105      	movs	r1, #5
 8003be6:	2058      	movs	r0, #88	; 0x58
 8003be8:	f002 f89e 	bl	8005d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8003bec:	2058      	movs	r0, #88	; 0x58
 8003bee:	f002 f8b7 	bl	8005d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8003bf2:	bf00      	nop
 8003bf4:	3738      	adds	r7, #56	; 0x38
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	40016800 	.word	0x40016800
 8003c00:	40023800 	.word	0x40023800
 8003c04:	40021000 	.word	0x40021000
 8003c08:	40022400 	.word	0x40022400
 8003c0c:	40022800 	.word	0x40022800
 8003c10:	40021800 	.word	0x40021800
 8003c14:	40022000 	.word	0x40022000

08003c18 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b08a      	sub	sp, #40	; 0x28
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	2200      	movs	r2, #0
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	605a      	str	r2, [r3, #4]
 8003c2a:	609a      	str	r2, [r3, #8]
 8003c2c:	60da      	str	r2, [r3, #12]
 8003c2e:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a65      	ldr	r2, [pc, #404]	; (8003dcc <HAL_SD_MspInit+0x1b4>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	f040 80c3 	bne.w	8003dc2 <HAL_SD_MspInit+0x1aa>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003c3c:	4b64      	ldr	r3, [pc, #400]	; (8003dd0 <HAL_SD_MspInit+0x1b8>)
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	4a63      	ldr	r2, [pc, #396]	; (8003dd0 <HAL_SD_MspInit+0x1b8>)
 8003c42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c46:	6453      	str	r3, [r2, #68]	; 0x44
 8003c48:	4b61      	ldr	r3, [pc, #388]	; (8003dd0 <HAL_SD_MspInit+0x1b8>)
 8003c4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c50:	613b      	str	r3, [r7, #16]
 8003c52:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c54:	4b5e      	ldr	r3, [pc, #376]	; (8003dd0 <HAL_SD_MspInit+0x1b8>)
 8003c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c58:	4a5d      	ldr	r2, [pc, #372]	; (8003dd0 <HAL_SD_MspInit+0x1b8>)
 8003c5a:	f043 0304 	orr.w	r3, r3, #4
 8003c5e:	6313      	str	r3, [r2, #48]	; 0x30
 8003c60:	4b5b      	ldr	r3, [pc, #364]	; (8003dd0 <HAL_SD_MspInit+0x1b8>)
 8003c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	60fb      	str	r3, [r7, #12]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c6c:	4b58      	ldr	r3, [pc, #352]	; (8003dd0 <HAL_SD_MspInit+0x1b8>)
 8003c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c70:	4a57      	ldr	r2, [pc, #348]	; (8003dd0 <HAL_SD_MspInit+0x1b8>)
 8003c72:	f043 0308 	orr.w	r3, r3, #8
 8003c76:	6313      	str	r3, [r2, #48]	; 0x30
 8003c78:	4b55      	ldr	r3, [pc, #340]	; (8003dd0 <HAL_SD_MspInit+0x1b8>)
 8003c7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = SDMMC_CK_Pin|SDMMC_D3_Pin|SDMMC_D2_Pin|GPIO_PIN_9
 8003c84:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003c88:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c8a:	2302      	movs	r3, #2
 8003c8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c92:	2303      	movs	r3, #3
 8003c94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003c96:	230c      	movs	r3, #12
 8003c98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c9a:	f107 0314 	add.w	r3, r7, #20
 8003c9e:	4619      	mov	r1, r3
 8003ca0:	484c      	ldr	r0, [pc, #304]	; (8003dd4 <HAL_SD_MspInit+0x1bc>)
 8003ca2:	f002 fefb 	bl	8006a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SDMMC_D0_Pin;
 8003ca6:	2304      	movs	r3, #4
 8003ca8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003caa:	2302      	movs	r3, #2
 8003cac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8003cb6:	230c      	movs	r3, #12
 8003cb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SDMMC_D0_GPIO_Port, &GPIO_InitStruct);
 8003cba:	f107 0314 	add.w	r3, r7, #20
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4845      	ldr	r0, [pc, #276]	; (8003dd8 <HAL_SD_MspInit+0x1c0>)
 8003cc2:	f002 feeb 	bl	8006a9c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8003cc6:	4b45      	ldr	r3, [pc, #276]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003cc8:	4a45      	ldr	r2, [pc, #276]	; (8003de0 <HAL_SD_MspInit+0x1c8>)
 8003cca:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8003ccc:	4b43      	ldr	r3, [pc, #268]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003cce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003cd2:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cd4:	4b41      	ldr	r3, [pc, #260]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cda:	4b40      	ldr	r3, [pc, #256]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ce0:	4b3e      	ldr	r3, [pc, #248]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003ce2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ce6:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ce8:	4b3c      	ldr	r3, [pc, #240]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003cea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003cee:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003cf0:	4b3a      	ldr	r3, [pc, #232]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003cf2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003cf6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8003cf8:	4b38      	ldr	r3, [pc, #224]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003cfa:	2220      	movs	r2, #32
 8003cfc:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cfe:	4b37      	ldr	r3, [pc, #220]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003d00:	2200      	movs	r2, #0
 8003d02:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d04:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003d06:	2204      	movs	r2, #4
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d0a:	4b34      	ldr	r3, [pc, #208]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8003d10:	4b32      	ldr	r3, [pc, #200]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003d12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d16:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d18:	4b30      	ldr	r3, [pc, #192]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003d1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d1e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8003d20:	482e      	ldr	r0, [pc, #184]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003d22:	f002 f82b 	bl	8005d7c <HAL_DMA_Init>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d001      	beq.n	8003d30 <HAL_SD_MspInit+0x118>
    {
      Error_Handler();
 8003d2c:	f7fe f954 	bl	8001fd8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	4a2a      	ldr	r2, [pc, #168]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003d34:	641a      	str	r2, [r3, #64]	; 0x40
 8003d36:	4a29      	ldr	r2, [pc, #164]	; (8003ddc <HAL_SD_MspInit+0x1c4>)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8003d3c:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d3e:	4a2a      	ldr	r2, [pc, #168]	; (8003de8 <HAL_SD_MspInit+0x1d0>)
 8003d40:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8003d42:	4b28      	ldr	r3, [pc, #160]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d48:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003d4a:	4b26      	ldr	r3, [pc, #152]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d4c:	2240      	movs	r2, #64	; 0x40
 8003d4e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003d50:	4b24      	ldr	r3, [pc, #144]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d56:	4b23      	ldr	r3, [pc, #140]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d5c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d5e:	4b21      	ldr	r3, [pc, #132]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d64:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003d66:	4b1f      	ldr	r3, [pc, #124]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d6c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8003d6e:	4b1d      	ldr	r3, [pc, #116]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d70:	2220      	movs	r2, #32
 8003d72:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d74:	4b1b      	ldr	r3, [pc, #108]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d76:	2200      	movs	r2, #0
 8003d78:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8003d7a:	4b1a      	ldr	r3, [pc, #104]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d7c:	2204      	movs	r2, #4
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8003d80:	4b18      	ldr	r3, [pc, #96]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d82:	2203      	movs	r2, #3
 8003d84:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8003d86:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8003d8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8003d8e:	4b15      	ldr	r3, [pc, #84]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003d94:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8003d96:	4813      	ldr	r0, [pc, #76]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003d98:	f001 fff0 	bl	8005d7c <HAL_DMA_Init>
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d001      	beq.n	8003da6 <HAL_SD_MspInit+0x18e>
    {
      Error_Handler();
 8003da2:	f7fe f919 	bl	8001fd8 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003daa:	63da      	str	r2, [r3, #60]	; 0x3c
 8003dac:	4a0d      	ldr	r2, [pc, #52]	; (8003de4 <HAL_SD_MspInit+0x1cc>)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 5, 0);
 8003db2:	2200      	movs	r2, #0
 8003db4:	2105      	movs	r1, #5
 8003db6:	2031      	movs	r0, #49	; 0x31
 8003db8:	f001 ffb6 	bl	8005d28 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003dbc:	2031      	movs	r0, #49	; 0x31
 8003dbe:	f001 ffcf 	bl	8005d60 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003dc2:	bf00      	nop
 8003dc4:	3728      	adds	r7, #40	; 0x28
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}
 8003dca:	bf00      	nop
 8003dcc:	40012c00 	.word	0x40012c00
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40020800 	.word	0x40020800
 8003dd8:	40020c00 	.word	0x40020c00
 8003ddc:	20008fbc 	.word	0x20008fbc
 8003de0:	40026458 	.word	0x40026458
 8003de4:	200090f0 	.word	0x200090f0
 8003de8:	400264a0 	.word	0x400264a0

08003dec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08a      	sub	sp, #40	; 0x28
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003df4:	f107 0314 	add.w	r3, r7, #20
 8003df8:	2200      	movs	r2, #0
 8003dfa:	601a      	str	r2, [r3, #0]
 8003dfc:	605a      	str	r2, [r3, #4]
 8003dfe:	609a      	str	r2, [r3, #8]
 8003e00:	60da      	str	r2, [r3, #12]
 8003e02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a25      	ldr	r2, [pc, #148]	; (8003ea0 <HAL_UART_MspInit+0xb4>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d144      	bne.n	8003e98 <HAL_UART_MspInit+0xac>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e0e:	4b25      	ldr	r3, [pc, #148]	; (8003ea4 <HAL_UART_MspInit+0xb8>)
 8003e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e12:	4a24      	ldr	r2, [pc, #144]	; (8003ea4 <HAL_UART_MspInit+0xb8>)
 8003e14:	f043 0310 	orr.w	r3, r3, #16
 8003e18:	6453      	str	r3, [r2, #68]	; 0x44
 8003e1a:	4b22      	ldr	r3, [pc, #136]	; (8003ea4 <HAL_UART_MspInit+0xb8>)
 8003e1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e1e:	f003 0310 	and.w	r3, r3, #16
 8003e22:	613b      	str	r3, [r7, #16]
 8003e24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e26:	4b1f      	ldr	r3, [pc, #124]	; (8003ea4 <HAL_UART_MspInit+0xb8>)
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	4a1e      	ldr	r2, [pc, #120]	; (8003ea4 <HAL_UART_MspInit+0xb8>)
 8003e2c:	f043 0302 	orr.w	r3, r3, #2
 8003e30:	6313      	str	r3, [r2, #48]	; 0x30
 8003e32:	4b1c      	ldr	r3, [pc, #112]	; (8003ea4 <HAL_UART_MspInit+0xb8>)
 8003e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e36:	f003 0302 	and.w	r3, r3, #2
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3e:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <HAL_UART_MspInit+0xb8>)
 8003e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e42:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <HAL_UART_MspInit+0xb8>)
 8003e44:	f043 0301 	orr.w	r3, r3, #1
 8003e48:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4a:	4b16      	ldr	r3, [pc, #88]	; (8003ea4 <HAL_UART_MspInit+0xb8>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	60bb      	str	r3, [r7, #8]
 8003e54:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8003e56:	2380      	movs	r3, #128	; 0x80
 8003e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5a:	2302      	movs	r3, #2
 8003e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e62:	2300      	movs	r3, #0
 8003e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e66:	2307      	movs	r3, #7
 8003e68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8003e6a:	f107 0314 	add.w	r3, r7, #20
 8003e6e:	4619      	mov	r1, r3
 8003e70:	480d      	ldr	r0, [pc, #52]	; (8003ea8 <HAL_UART_MspInit+0xbc>)
 8003e72:	f002 fe13 	bl	8006a9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8003e76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e80:	2300      	movs	r3, #0
 8003e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e84:	2300      	movs	r3, #0
 8003e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e88:	2307      	movs	r3, #7
 8003e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8003e8c:	f107 0314 	add.w	r3, r7, #20
 8003e90:	4619      	mov	r1, r3
 8003e92:	4806      	ldr	r0, [pc, #24]	; (8003eac <HAL_UART_MspInit+0xc0>)
 8003e94:	f002 fe02 	bl	8006a9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003e98:	bf00      	nop
 8003e9a:	3728      	adds	r7, #40	; 0x28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40011000 	.word	0x40011000
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40020400 	.word	0x40020400
 8003eac:	40020000 	.word	0x40020000

08003eb0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8003eb6:	1d3b      	adds	r3, r7, #4
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8003ec4:	4b3a      	ldr	r3, [pc, #232]	; (8003fb0 <HAL_FMC_MspInit+0x100>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d16d      	bne.n	8003fa8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 8003ecc:	4b38      	ldr	r3, [pc, #224]	; (8003fb0 <HAL_FMC_MspInit+0x100>)
 8003ece:	2201      	movs	r2, #1
 8003ed0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003ed2:	4b38      	ldr	r3, [pc, #224]	; (8003fb4 <HAL_FMC_MspInit+0x104>)
 8003ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed6:	4a37      	ldr	r2, [pc, #220]	; (8003fb4 <HAL_FMC_MspInit+0x104>)
 8003ed8:	f043 0301 	orr.w	r3, r3, #1
 8003edc:	6393      	str	r3, [r2, #56]	; 0x38
 8003ede:	4b35      	ldr	r3, [pc, #212]	; (8003fb4 <HAL_FMC_MspInit+0x104>)
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	603b      	str	r3, [r7, #0]
 8003ee8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8003eea:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003eee:	607b      	str	r3, [r7, #4]
                          |FMC_D8_Pin|FMC_D11_Pin|FMC_D4_Pin|FMC_D7_Pin
                          |FMC_D9_Pin|FMC_D12_Pin|FMC_D10_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ef8:	2303      	movs	r3, #3
 8003efa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003efc:	230c      	movs	r3, #12
 8003efe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003f00:	1d3b      	adds	r3, r7, #4
 8003f02:	4619      	mov	r1, r3
 8003f04:	482c      	ldr	r0, [pc, #176]	; (8003fb8 <HAL_FMC_MspInit+0x108>)
 8003f06:	f002 fdc9 	bl	8006a9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A10_Pin
 8003f0a:	f248 1333 	movw	r3, #33075	; 0x8133
 8003f0e:	607b      	str	r3, [r7, #4]
                          |FMC_BA1_Pin|FMC_BA0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f10:	2302      	movs	r3, #2
 8003f12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f1c:	230c      	movs	r3, #12
 8003f1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003f20:	1d3b      	adds	r3, r7, #4
 8003f22:	4619      	mov	r1, r3
 8003f24:	4825      	ldr	r0, [pc, #148]	; (8003fbc <HAL_FMC_MspInit+0x10c>)
 8003f26:	f002 fdb9 	bl	8006a9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8003f2a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003f2e:	607b      	str	r3, [r7, #4]
                          |FMC_D0_Pin|FMC_D14_Pin|FMC_D13_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f30:	2302      	movs	r3, #2
 8003f32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f38:	2303      	movs	r3, #3
 8003f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f3c:	230c      	movs	r3, #12
 8003f3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003f40:	1d3b      	adds	r3, r7, #4
 8003f42:	4619      	mov	r1, r3
 8003f44:	481e      	ldr	r0, [pc, #120]	; (8003fc0 <HAL_FMC_MspInit+0x110>)
 8003f46:	f002 fda9 	bl	8006a9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8003f4a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003f4e:	607b      	str	r3, [r7, #4]
                          |FMC_A4_Pin|FMC_A5_Pin|FMC_A6_Pin|FMC_A9_Pin
                          |FMC_A7_Pin|FMC_A8_Pin|FMC_SDNRAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f50:	2302      	movs	r3, #2
 8003f52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f54:	2300      	movs	r3, #0
 8003f56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f5c:	230c      	movs	r3, #12
 8003f5e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003f60:	1d3b      	adds	r3, r7, #4
 8003f62:	4619      	mov	r1, r3
 8003f64:	4817      	ldr	r0, [pc, #92]	; (8003fc4 <HAL_FMC_MspInit+0x114>)
 8003f66:	f002 fd99 	bl	8006a9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDNME_Pin|FMC_SDNE0_Pin;
 8003f6a:	2328      	movs	r3, #40	; 0x28
 8003f6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6e:	2302      	movs	r3, #2
 8003f70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f72:	2300      	movs	r3, #0
 8003f74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f76:	2303      	movs	r3, #3
 8003f78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f7a:	230c      	movs	r3, #12
 8003f7c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003f7e:	1d3b      	adds	r3, r7, #4
 8003f80:	4619      	mov	r1, r3
 8003f82:	4811      	ldr	r0, [pc, #68]	; (8003fc8 <HAL_FMC_MspInit+0x118>)
 8003f84:	f002 fd8a 	bl	8006a9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = FMC_SDCKE0_Pin;
 8003f88:	2308      	movs	r3, #8
 8003f8a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f90:	2300      	movs	r3, #0
 8003f92:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f94:	2303      	movs	r3, #3
 8003f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8003f98:	230c      	movs	r3, #12
 8003f9a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(FMC_SDCKE0_GPIO_Port, &GPIO_InitStruct);
 8003f9c:	1d3b      	adds	r3, r7, #4
 8003f9e:	4619      	mov	r1, r3
 8003fa0:	480a      	ldr	r0, [pc, #40]	; (8003fcc <HAL_FMC_MspInit+0x11c>)
 8003fa2:	f002 fd7b 	bl	8006a9c <HAL_GPIO_Init>
 8003fa6:	e000      	b.n	8003faa <HAL_FMC_MspInit+0xfa>
    return;
 8003fa8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	200006ec 	.word	0x200006ec
 8003fb4:	40023800 	.word	0x40023800
 8003fb8:	40021000 	.word	0x40021000
 8003fbc:	40021800 	.word	0x40021800
 8003fc0:	40020c00 	.word	0x40020c00
 8003fc4:	40021400 	.word	0x40021400
 8003fc8:	40021c00 	.word	0x40021c00
 8003fcc:	40020800 	.word	0x40020800

08003fd0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8003fd8:	f7ff ff6a 	bl	8003eb0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8003fdc:	bf00      	nop
 8003fde:	3708      	adds	r7, #8
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a61      	ldr	r2, [pc, #388]	; (8004178 <HAL_SAI_MspInit+0x194>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d15b      	bne.n	80040ae <HAL_SAI_MspInit+0xca>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8003ff6:	4b61      	ldr	r3, [pc, #388]	; (800417c <HAL_SAI_MspInit+0x198>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d10b      	bne.n	8004016 <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8003ffe:	4b60      	ldr	r3, [pc, #384]	; (8004180 <HAL_SAI_MspInit+0x19c>)
 8004000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004002:	4a5f      	ldr	r2, [pc, #380]	; (8004180 <HAL_SAI_MspInit+0x19c>)
 8004004:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004008:	6453      	str	r3, [r2, #68]	; 0x44
 800400a:	4b5d      	ldr	r3, [pc, #372]	; (8004180 <HAL_SAI_MspInit+0x19c>)
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004012:	613b      	str	r3, [r7, #16]
 8004014:	693b      	ldr	r3, [r7, #16]
    }
    SAI2_client ++;
 8004016:	4b59      	ldr	r3, [pc, #356]	; (800417c <HAL_SAI_MspInit+0x198>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	3301      	adds	r3, #1
 800401c:	4a57      	ldr	r2, [pc, #348]	; (800417c <HAL_SAI_MspInit+0x198>)
 800401e:	6013      	str	r3, [r2, #0]
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin;
 8004020:	23f0      	movs	r3, #240	; 0xf0
 8004022:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004024:	2302      	movs	r3, #2
 8004026:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004028:	2300      	movs	r3, #0
 800402a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800402c:	2300      	movs	r3, #0
 800402e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8004030:	230a      	movs	r3, #10
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004034:	f107 0314 	add.w	r3, r7, #20
 8004038:	4619      	mov	r1, r3
 800403a:	4852      	ldr	r0, [pc, #328]	; (8004184 <HAL_SAI_MspInit+0x1a0>)
 800403c:	f002 fd2e 	bl	8006a9c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA2_Stream4;
 8004040:	4b51      	ldr	r3, [pc, #324]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 8004042:	4a52      	ldr	r2, [pc, #328]	; (800418c <HAL_SAI_MspInit+0x1a8>)
 8004044:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Channel = DMA_CHANNEL_3;
 8004046:	4b50      	ldr	r3, [pc, #320]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 8004048:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800404c:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800404e:	4b4e      	ldr	r3, [pc, #312]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 8004050:	2240      	movs	r2, #64	; 0x40
 8004052:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8004054:	4b4c      	ldr	r3, [pc, #304]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 8004056:	2200      	movs	r2, #0
 8004058:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 800405a:	4b4b      	ldr	r3, [pc, #300]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 800405c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004060:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004062:	4b49      	ldr	r3, [pc, #292]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 8004064:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004068:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800406a:	4b47      	ldr	r3, [pc, #284]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 800406c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004070:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8004072:	4b45      	ldr	r3, [pc, #276]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 8004074:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004078:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 800407a:	4b43      	ldr	r3, [pc, #268]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 800407c:	2200      	movs	r2, #0
 800407e:	621a      	str	r2, [r3, #32]
    hdma_sai2_a.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004080:	4b41      	ldr	r3, [pc, #260]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 8004082:	2200      	movs	r2, #0
 8004084:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8004086:	4840      	ldr	r0, [pc, #256]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 8004088:	f001 fe78 	bl	8005d7c <HAL_DMA_Init>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <HAL_SAI_MspInit+0xb2>
    {
      Error_Handler();
 8004092:	f7fd ffa1 	bl	8001fd8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a3b      	ldr	r2, [pc, #236]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 800409a:	671a      	str	r2, [r3, #112]	; 0x70
 800409c:	4a3a      	ldr	r2, [pc, #232]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6393      	str	r3, [r2, #56]	; 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a38      	ldr	r2, [pc, #224]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 80040a6:	66da      	str	r2, [r3, #108]	; 0x6c
 80040a8:	4a37      	ldr	r2, [pc, #220]	; (8004188 <HAL_SAI_MspInit+0x1a4>)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6393      	str	r3, [r2, #56]	; 0x38

    }
    if(hsai->Instance==SAI2_Block_B)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a37      	ldr	r2, [pc, #220]	; (8004190 <HAL_SAI_MspInit+0x1ac>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d15b      	bne.n	8004170 <HAL_SAI_MspInit+0x18c>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 80040b8:	4b30      	ldr	r3, [pc, #192]	; (800417c <HAL_SAI_MspInit+0x198>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d10b      	bne.n	80040d8 <HAL_SAI_MspInit+0xf4>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 80040c0:	4b2f      	ldr	r3, [pc, #188]	; (8004180 <HAL_SAI_MspInit+0x19c>)
 80040c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c4:	4a2e      	ldr	r2, [pc, #184]	; (8004180 <HAL_SAI_MspInit+0x19c>)
 80040c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80040ca:	6453      	str	r3, [r2, #68]	; 0x44
 80040cc:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <HAL_SAI_MspInit+0x19c>)
 80040ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80040d4:	60fb      	str	r3, [r7, #12]
 80040d6:	68fb      	ldr	r3, [r7, #12]
      }
    SAI2_client ++;
 80040d8:	4b28      	ldr	r3, [pc, #160]	; (800417c <HAL_SAI_MspInit+0x198>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	3301      	adds	r3, #1
 80040de:	4a27      	ldr	r2, [pc, #156]	; (800417c <HAL_SAI_MspInit+0x198>)
 80040e0:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = SAI2_SDB_Pin;
 80040e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e8:	2302      	movs	r3, #2
 80040ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040ec:	2300      	movs	r3, #0
 80040ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040f0:	2300      	movs	r3, #0
 80040f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 80040f4:	230a      	movs	r3, #10
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SAI2_SDB_GPIO_Port, &GPIO_InitStruct);
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	4619      	mov	r1, r3
 80040fe:	4825      	ldr	r0, [pc, #148]	; (8004194 <HAL_SAI_MspInit+0x1b0>)
 8004100:	f002 fccc 	bl	8006a9c <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA2_Stream7;
 8004104:	4b24      	ldr	r3, [pc, #144]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 8004106:	4a25      	ldr	r2, [pc, #148]	; (800419c <HAL_SAI_MspInit+0x1b8>)
 8004108:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Channel = DMA_CHANNEL_0;
 800410a:	4b23      	ldr	r3, [pc, #140]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 800410c:	2200      	movs	r2, #0
 800410e:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004110:	4b21      	ldr	r3, [pc, #132]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 8004112:	2200      	movs	r2, #0
 8004114:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8004116:	4b20      	ldr	r3, [pc, #128]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 8004118:	2200      	movs	r2, #0
 800411a:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 800411c:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 800411e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004122:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004124:	4b1c      	ldr	r3, [pc, #112]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 8004126:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800412a:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800412c:	4b1a      	ldr	r3, [pc, #104]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 800412e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004132:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8004134:	4b18      	ldr	r3, [pc, #96]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 8004136:	f44f 7280 	mov.w	r2, #256	; 0x100
 800413a:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 800413c:	4b16      	ldr	r3, [pc, #88]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 800413e:	2200      	movs	r2, #0
 8004140:	621a      	str	r2, [r3, #32]
    hdma_sai2_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004142:	4b15      	ldr	r3, [pc, #84]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 8004144:	2200      	movs	r2, #0
 8004146:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8004148:	4813      	ldr	r0, [pc, #76]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 800414a:	f001 fe17 	bl	8005d7c <HAL_DMA_Init>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <HAL_SAI_MspInit+0x174>
    {
      Error_Handler();
 8004154:	f7fd ff40 	bl	8001fd8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	4a0f      	ldr	r2, [pc, #60]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 800415c:	671a      	str	r2, [r3, #112]	; 0x70
 800415e:	4a0e      	ldr	r2, [pc, #56]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a0c      	ldr	r2, [pc, #48]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 8004168:	66da      	str	r2, [r3, #108]	; 0x6c
 800416a:	4a0b      	ldr	r2, [pc, #44]	; (8004198 <HAL_SAI_MspInit+0x1b4>)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 8004170:	bf00      	nop
 8004172:	3728      	adds	r7, #40	; 0x28
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	40015c04 	.word	0x40015c04
 800417c:	200006f0 	.word	0x200006f0
 8004180:	40023800 	.word	0x40023800
 8004184:	40022000 	.word	0x40022000
 8004188:	2000901c 	.word	0x2000901c
 800418c:	40026470 	.word	0x40026470
 8004190:	40015c24 	.word	0x40015c24
 8004194:	40021800 	.word	0x40021800
 8004198:	20008920 	.word	0x20008920
 800419c:	400264b8 	.word	0x400264b8

080041a0 <HAL_SAI_MspDeInit>:

void HAL_SAI_MspDeInit(SAI_HandleTypeDef* hsai)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a23      	ldr	r2, [pc, #140]	; (800423c <HAL_SAI_MspDeInit+0x9c>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d11c      	bne.n	80041ec <HAL_SAI_MspDeInit+0x4c>
    {
    SAI2_client --;
 80041b2:	4b23      	ldr	r3, [pc, #140]	; (8004240 <HAL_SAI_MspDeInit+0xa0>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	3b01      	subs	r3, #1
 80041b8:	4a21      	ldr	r2, [pc, #132]	; (8004240 <HAL_SAI_MspDeInit+0xa0>)
 80041ba:	6013      	str	r3, [r2, #0]
    if (SAI2_client == 0)
 80041bc:	4b20      	ldr	r3, [pc, #128]	; (8004240 <HAL_SAI_MspDeInit+0xa0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d105      	bne.n	80041d0 <HAL_SAI_MspDeInit+0x30>
      {
      /* Peripheral clock disable */
       __HAL_RCC_SAI2_CLK_DISABLE();
 80041c4:	4b1f      	ldr	r3, [pc, #124]	; (8004244 <HAL_SAI_MspDeInit+0xa4>)
 80041c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c8:	4a1e      	ldr	r2, [pc, #120]	; (8004244 <HAL_SAI_MspDeInit+0xa4>)
 80041ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041ce:	6453      	str	r3, [r2, #68]	; 0x44
    PI4     ------> SAI2_MCLK_A
    PI5     ------> SAI2_SCK_A
    PI7     ------> SAI2_FS_A
    PI6     ------> SAI2_SD_A
    */
    HAL_GPIO_DeInit(GPIOI, SAI2_MCLKA_Pin|SAI2_SCKA_Pin|SAI2_FSA_Pin|SAI2_SDA_Pin);
 80041d0:	21f0      	movs	r1, #240	; 0xf0
 80041d2:	481d      	ldr	r0, [pc, #116]	; (8004248 <HAL_SAI_MspDeInit+0xa8>)
 80041d4:	f002 fe0e 	bl	8006df4 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(hsai->hdmarx);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041dc:	4618      	mov	r0, r3
 80041de:	f001 fe7b 	bl	8005ed8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041e6:	4618      	mov	r0, r3
 80041e8:	f001 fe76 	bl	8005ed8 <HAL_DMA_DeInit>
    }
    if(hsai->Instance==SAI2_Block_B)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a16      	ldr	r2, [pc, #88]	; (800424c <HAL_SAI_MspDeInit+0xac>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d11d      	bne.n	8004232 <HAL_SAI_MspDeInit+0x92>
    {
    SAI2_client --;
 80041f6:	4b12      	ldr	r3, [pc, #72]	; (8004240 <HAL_SAI_MspDeInit+0xa0>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3b01      	subs	r3, #1
 80041fc:	4a10      	ldr	r2, [pc, #64]	; (8004240 <HAL_SAI_MspDeInit+0xa0>)
 80041fe:	6013      	str	r3, [r2, #0]
      if (SAI2_client == 0)
 8004200:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <HAL_SAI_MspDeInit+0xa0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d105      	bne.n	8004214 <HAL_SAI_MspDeInit+0x74>
      {
      /* Peripheral clock disable */
      __HAL_RCC_SAI2_CLK_DISABLE();
 8004208:	4b0e      	ldr	r3, [pc, #56]	; (8004244 <HAL_SAI_MspDeInit+0xa4>)
 800420a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800420c:	4a0d      	ldr	r2, [pc, #52]	; (8004244 <HAL_SAI_MspDeInit+0xa4>)
 800420e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004212:	6453      	str	r3, [r2, #68]	; 0x44
      }

    /**SAI2_B_Block_B GPIO Configuration
    PG10     ------> SAI2_SD_B
    */
    HAL_GPIO_DeInit(SAI2_SDB_GPIO_Port, SAI2_SDB_Pin);
 8004214:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004218:	480d      	ldr	r0, [pc, #52]	; (8004250 <HAL_SAI_MspDeInit+0xb0>)
 800421a:	f002 fdeb 	bl	8006df4 <HAL_GPIO_DeInit>

    HAL_DMA_DeInit(hsai->hdmarx);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004222:	4618      	mov	r0, r3
 8004224:	f001 fe58 	bl	8005ed8 <HAL_DMA_DeInit>
    HAL_DMA_DeInit(hsai->hdmatx);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800422c:	4618      	mov	r0, r3
 800422e:	f001 fe53 	bl	8005ed8 <HAL_DMA_DeInit>
    }
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40015c04 	.word	0x40015c04
 8004240:	200006f0 	.word	0x200006f0
 8004244:	40023800 	.word	0x40023800
 8004248:	40022000 	.word	0x40022000
 800424c:	40015c24 	.word	0x40015c24
 8004250:	40021800 	.word	0x40021800

08004254 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b08c      	sub	sp, #48	; 0x30
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800425c:	2300      	movs	r3, #0
 800425e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004260:	2300      	movs	r3, #0
 8004262:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004264:	2200      	movs	r2, #0
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	2036      	movs	r0, #54	; 0x36
 800426a:	f001 fd5d 	bl	8005d28 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800426e:	2036      	movs	r0, #54	; 0x36
 8004270:	f001 fd76 	bl	8005d60 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004274:	4b1f      	ldr	r3, [pc, #124]	; (80042f4 <HAL_InitTick+0xa0>)
 8004276:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004278:	4a1e      	ldr	r2, [pc, #120]	; (80042f4 <HAL_InitTick+0xa0>)
 800427a:	f043 0310 	orr.w	r3, r3, #16
 800427e:	6413      	str	r3, [r2, #64]	; 0x40
 8004280:	4b1c      	ldr	r3, [pc, #112]	; (80042f4 <HAL_InitTick+0xa0>)
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	60fb      	str	r3, [r7, #12]
 800428a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800428c:	f107 0210 	add.w	r2, r7, #16
 8004290:	f107 0314 	add.w	r3, r7, #20
 8004294:	4611      	mov	r1, r2
 8004296:	4618      	mov	r0, r3
 8004298:	f004 fc68 	bl	8008b6c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800429c:	f004 fc3e 	bl	8008b1c <HAL_RCC_GetPCLK1Freq>
 80042a0:	4603      	mov	r3, r0
 80042a2:	005b      	lsls	r3, r3, #1
 80042a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80042a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a8:	4a13      	ldr	r2, [pc, #76]	; (80042f8 <HAL_InitTick+0xa4>)
 80042aa:	fba2 2303 	umull	r2, r3, r2, r3
 80042ae:	0c9b      	lsrs	r3, r3, #18
 80042b0:	3b01      	subs	r3, #1
 80042b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80042b4:	4b11      	ldr	r3, [pc, #68]	; (80042fc <HAL_InitTick+0xa8>)
 80042b6:	4a12      	ldr	r2, [pc, #72]	; (8004300 <HAL_InitTick+0xac>)
 80042b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80042ba:	4b10      	ldr	r3, [pc, #64]	; (80042fc <HAL_InitTick+0xa8>)
 80042bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80042c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80042c2:	4a0e      	ldr	r2, [pc, #56]	; (80042fc <HAL_InitTick+0xa8>)
 80042c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <HAL_InitTick+0xa8>)
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <HAL_InitTick+0xa8>)
 80042d0:	2200      	movs	r2, #0
 80042d2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80042d4:	4809      	ldr	r0, [pc, #36]	; (80042fc <HAL_InitTick+0xa8>)
 80042d6:	f007 fa7f 	bl	800b7d8 <HAL_TIM_Base_Init>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d104      	bne.n	80042ea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80042e0:	4806      	ldr	r0, [pc, #24]	; (80042fc <HAL_InitTick+0xa8>)
 80042e2:	f007 fadb 	bl	800b89c <HAL_TIM_Base_Start_IT>
 80042e6:	4603      	mov	r3, r0
 80042e8:	e000      	b.n	80042ec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3730      	adds	r7, #48	; 0x30
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	40023800 	.word	0x40023800
 80042f8:	431bde83 	.word	0x431bde83
 80042fc:	20009280 	.word	0x20009280
 8004300:	40001000 	.word	0x40001000

08004304 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004304:	b480      	push	{r7}
 8004306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004308:	e7fe      	b.n	8004308 <NMI_Handler+0x4>

0800430a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800430a:	b480      	push	{r7}
 800430c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800430e:	e7fe      	b.n	800430e <HardFault_Handler+0x4>

08004310 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004314:	e7fe      	b.n	8004314 <MemManage_Handler+0x4>

08004316 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004316:	b480      	push	{r7}
 8004318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800431a:	e7fe      	b.n	800431a <BusFault_Handler+0x4>

0800431c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800431c:	b480      	push	{r7}
 800431e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004320:	e7fe      	b.n	8004320 <UsageFault_Handler+0x4>

08004322 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004322:	b480      	push	{r7}
 8004324:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004326:	bf00      	nop
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr

08004330 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004334:	4802      	ldr	r0, [pc, #8]	; (8004340 <SDMMC1_IRQHandler+0x10>)
 8004336:	f006 f927 	bl	800a588 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800433a:	bf00      	nop
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	20008a04 	.word	0x20008a04

08004344 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004348:	4802      	ldr	r0, [pc, #8]	; (8004354 <TIM6_DAC_IRQHandler+0x10>)
 800434a:	f007 fb1f 	bl	800b98c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800434e:	bf00      	nop
 8004350:	bd80      	pop	{r7, pc}
 8004352:	bf00      	nop
 8004354:	20009280 	.word	0x20009280

08004358 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 800435c:	4802      	ldr	r0, [pc, #8]	; (8004368 <DMA2_Stream3_IRQHandler+0x10>)
 800435e:	f001 fe9b 	bl	8006098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8004362:	bf00      	nop
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	20008fbc 	.word	0x20008fbc

0800436c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8004370:	4802      	ldr	r0, [pc, #8]	; (800437c <DMA2_Stream4_IRQHandler+0x10>)
 8004372:	f001 fe91 	bl	8006098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8004376:	bf00      	nop
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	2000901c 	.word	0x2000901c

08004380 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8004384:	4802      	ldr	r0, [pc, #8]	; (8004390 <DMA2_Stream6_IRQHandler+0x10>)
 8004386:	f001 fe87 	bl	8006098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	200090f0 	.word	0x200090f0

08004394 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8004398:	4802      	ldr	r0, [pc, #8]	; (80043a4 <DMA2_Stream7_IRQHandler+0x10>)
 800439a:	f001 fe7d 	bl	8006098 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800439e:	bf00      	nop
 80043a0:	bd80      	pop	{r7, pc}
 80043a2:	bf00      	nop
 80043a4:	20008920 	.word	0x20008920

080043a8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80043ac:	4802      	ldr	r0, [pc, #8]	; (80043b8 <LTDC_IRQHandler+0x10>)
 80043ae:	f003 fc5b 	bl	8007c68 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20008a8c 	.word	0x20008a8c

080043bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80043c4:	4a14      	ldr	r2, [pc, #80]	; (8004418 <_sbrk+0x5c>)
 80043c6:	4b15      	ldr	r3, [pc, #84]	; (800441c <_sbrk+0x60>)
 80043c8:	1ad3      	subs	r3, r2, r3
 80043ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80043d0:	4b13      	ldr	r3, [pc, #76]	; (8004420 <_sbrk+0x64>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80043d8:	4b11      	ldr	r3, [pc, #68]	; (8004420 <_sbrk+0x64>)
 80043da:	4a12      	ldr	r2, [pc, #72]	; (8004424 <_sbrk+0x68>)
 80043dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80043de:	4b10      	ldr	r3, [pc, #64]	; (8004420 <_sbrk+0x64>)
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	4413      	add	r3, r2
 80043e6:	693a      	ldr	r2, [r7, #16]
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d207      	bcs.n	80043fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80043ec:	f00e fffc 	bl	80133e8 <__errno>
 80043f0:	4603      	mov	r3, r0
 80043f2:	220c      	movs	r2, #12
 80043f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295
 80043fa:	e009      	b.n	8004410 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80043fc:	4b08      	ldr	r3, [pc, #32]	; (8004420 <_sbrk+0x64>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004402:	4b07      	ldr	r3, [pc, #28]	; (8004420 <_sbrk+0x64>)
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4413      	add	r3, r2
 800440a:	4a05      	ldr	r2, [pc, #20]	; (8004420 <_sbrk+0x64>)
 800440c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800440e:	68fb      	ldr	r3, [r7, #12]
}
 8004410:	4618      	mov	r0, r3
 8004412:	3718      	adds	r7, #24
 8004414:	46bd      	mov	sp, r7
 8004416:	bd80      	pop	{r7, pc}
 8004418:	20050000 	.word	0x20050000
 800441c:	00000800 	.word	0x00000800
 8004420:	200006f4 	.word	0x200006f4
 8004424:	20009790 	.word	0x20009790

08004428 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800442c:	4b06      	ldr	r3, [pc, #24]	; (8004448 <SystemInit+0x20>)
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	4a05      	ldr	r2, [pc, #20]	; (8004448 <SystemInit+0x20>)
 8004434:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004438:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800443c:	bf00      	nop
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	e000ed00 	.word	0xe000ed00

0800444c <wm8994_Init>:
  * @param Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param AudioFreq: Audio Frequency 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Init(uint16_t DeviceAddr, uint16_t OutputInputDevice, uint8_t Volume, uint32_t AudioFreq)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b088      	sub	sp, #32
 8004450:	af00      	add	r7, sp, #0
 8004452:	607b      	str	r3, [r7, #4]
 8004454:	4603      	mov	r3, r0
 8004456:	81fb      	strh	r3, [r7, #14]
 8004458:	460b      	mov	r3, r1
 800445a:	81bb      	strh	r3, [r7, #12]
 800445c:	4613      	mov	r3, r2
 800445e:	72fb      	strb	r3, [r7, #11]
  uint32_t counter = 0;
 8004460:	2300      	movs	r3, #0
 8004462:	61fb      	str	r3, [r7, #28]
  uint16_t output_device = OutputInputDevice & 0xFF;
 8004464:	89bb      	ldrh	r3, [r7, #12]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	833b      	strh	r3, [r7, #24]
  uint16_t input_device = OutputInputDevice & 0xFF00;
 800446a:	89bb      	ldrh	r3, [r7, #12]
 800446c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004470:	82fb      	strh	r3, [r7, #22]
  uint16_t power_mgnt_reg_1 = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	837b      	strh	r3, [r7, #26]
  
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 8004476:	f7fd ff0b 	bl	8002290 <AUDIO_IO_Init>
  /* wm8994 Errata Work-Arounds */
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0003);
 800447a:	89fb      	ldrh	r3, [r7, #14]
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2203      	movs	r2, #3
 8004480:	f44f 7181 	mov.w	r1, #258	; 0x102
 8004484:	4618      	mov	r0, r3
 8004486:	f001 fafb 	bl	8005a80 <CODEC_IO_Write>
 800448a:	4603      	mov	r3, r0
 800448c:	461a      	mov	r2, r3
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	4413      	add	r3, r2
 8004492:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x817, 0x0000);
 8004494:	89fb      	ldrh	r3, [r7, #14]
 8004496:	b2db      	uxtb	r3, r3
 8004498:	2200      	movs	r2, #0
 800449a:	f640 0117 	movw	r1, #2071	; 0x817
 800449e:	4618      	mov	r0, r3
 80044a0:	f001 faee 	bl	8005a80 <CODEC_IO_Write>
 80044a4:	4603      	mov	r3, r0
 80044a6:	461a      	mov	r2, r3
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	4413      	add	r3, r2
 80044ac:	61fb      	str	r3, [r7, #28]
  counter += CODEC_IO_Write(DeviceAddr, 0x102, 0x0000);
 80044ae:	89fb      	ldrh	r3, [r7, #14]
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	2200      	movs	r2, #0
 80044b4:	f44f 7181 	mov.w	r1, #258	; 0x102
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 fae1 	bl	8005a80 <CODEC_IO_Write>
 80044be:	4603      	mov	r3, r0
 80044c0:	461a      	mov	r2, r3
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	4413      	add	r3, r2
 80044c6:	61fb      	str	r3, [r7, #28]

  /* Enable VMID soft start (fast), Start-up Bias Current Enabled */
  counter += CODEC_IO_Write(DeviceAddr, 0x39, 0x006C);
 80044c8:	89fb      	ldrh	r3, [r7, #14]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	226c      	movs	r2, #108	; 0x6c
 80044ce:	2139      	movs	r1, #57	; 0x39
 80044d0:	4618      	mov	r0, r3
 80044d2:	f001 fad5 	bl	8005a80 <CODEC_IO_Write>
 80044d6:	4603      	mov	r3, r0
 80044d8:	461a      	mov	r2, r3
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID */
  if (input_device > 0)
 80044e0:	8afb      	ldrh	r3, [r7, #22]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d00c      	beq.n	8004500 <wm8994_Init+0xb4>
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0013);
 80044e6:	89fb      	ldrh	r3, [r7, #14]
 80044e8:	b2db      	uxtb	r3, r3
 80044ea:	2213      	movs	r2, #19
 80044ec:	2101      	movs	r1, #1
 80044ee:	4618      	mov	r0, r3
 80044f0:	f001 fac6 	bl	8005a80 <CODEC_IO_Write>
 80044f4:	4603      	mov	r3, r0
 80044f6:	461a      	mov	r2, r3
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	61fb      	str	r3, [r7, #28]
 80044fe:	e00b      	b.n	8004518 <wm8994_Init+0xcc>
  }
  else
  {
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x0003);
 8004500:	89fb      	ldrh	r3, [r7, #14]
 8004502:	b2db      	uxtb	r3, r3
 8004504:	2203      	movs	r2, #3
 8004506:	2101      	movs	r1, #1
 8004508:	4618      	mov	r0, r3
 800450a:	f001 fab9 	bl	8005a80 <CODEC_IO_Write>
 800450e:	4603      	mov	r3, r0
 8004510:	461a      	mov	r2, r3
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	4413      	add	r3, r2
 8004516:	61fb      	str	r3, [r7, #28]
  }

  /* Add Delay */
  AUDIO_IO_Delay(50);
 8004518:	2032      	movs	r0, #50	; 0x32
 800451a:	f7fd ff21 	bl	8002360 <AUDIO_IO_Delay>

  /* Path Configurations for output */
  if (output_device > 0)
 800451e:	8b3b      	ldrh	r3, [r7, #24]
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 815f 	beq.w	80047e4 <wm8994_Init+0x398>
  {
    outputEnabled = 1;
 8004526:	4bae      	ldr	r3, [pc, #696]	; (80047e0 <wm8994_Init+0x394>)
 8004528:	2201      	movs	r2, #1
 800452a:	601a      	str	r2, [r3, #0]

    switch (output_device)
 800452c:	8b3b      	ldrh	r3, [r7, #24]
 800452e:	2b03      	cmp	r3, #3
 8004530:	f000 808c 	beq.w	800464c <wm8994_Init+0x200>
 8004534:	2b03      	cmp	r3, #3
 8004536:	f300 8111 	bgt.w	800475c <wm8994_Init+0x310>
 800453a:	2b01      	cmp	r3, #1
 800453c:	d002      	beq.n	8004544 <wm8994_Init+0xf8>
 800453e:	2b02      	cmp	r3, #2
 8004540:	d042      	beq.n	80045c8 <wm8994_Init+0x17c>
 8004542:	e10b      	b.n	800475c <wm8994_Init+0x310>
    {
    case OUTPUT_DEVICE_SPEAKER:
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 8004544:	89fb      	ldrh	r3, [r7, #14]
 8004546:	b2db      	uxtb	r3, r3
 8004548:	f640 420c 	movw	r2, #3084	; 0xc0c
 800454c:	2105      	movs	r1, #5
 800454e:	4618      	mov	r0, r3
 8004550:	f001 fa96 	bl	8005a80 <CODEC_IO_Write>
 8004554:	4603      	mov	r3, r0
 8004556:	461a      	mov	r2, r3
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 800455e:	89fb      	ldrh	r3, [r7, #14]
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2200      	movs	r2, #0
 8004564:	f240 6101 	movw	r1, #1537	; 0x601
 8004568:	4618      	mov	r0, r3
 800456a:	f001 fa89 	bl	8005a80 <CODEC_IO_Write>
 800456e:	4603      	mov	r3, r0
 8004570:	461a      	mov	r2, r3
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	4413      	add	r3, r2
 8004576:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 8004578:	89fb      	ldrh	r3, [r7, #14]
 800457a:	b2db      	uxtb	r3, r3
 800457c:	2200      	movs	r2, #0
 800457e:	f240 6102 	movw	r1, #1538	; 0x602
 8004582:	4618      	mov	r0, r3
 8004584:	f001 fa7c 	bl	8005a80 <CODEC_IO_Write>
 8004588:	4603      	mov	r3, r0
 800458a:	461a      	mov	r2, r3
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	4413      	add	r3, r2
 8004590:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004592:	89fb      	ldrh	r3, [r7, #14]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	2202      	movs	r2, #2
 8004598:	f240 6104 	movw	r1, #1540	; 0x604
 800459c:	4618      	mov	r0, r3
 800459e:	f001 fa6f 	bl	8005a80 <CODEC_IO_Write>
 80045a2:	4603      	mov	r3, r0
 80045a4:	461a      	mov	r2, r3
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	4413      	add	r3, r2
 80045aa:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80045ac:	89fb      	ldrh	r3, [r7, #14]
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2202      	movs	r2, #2
 80045b2:	f240 6105 	movw	r1, #1541	; 0x605
 80045b6:	4618      	mov	r0, r3
 80045b8:	f001 fa62 	bl	8005a80 <CODEC_IO_Write>
 80045bc:	4603      	mov	r3, r0
 80045be:	461a      	mov	r2, r3
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	4413      	add	r3, r2
 80045c4:	61fb      	str	r3, [r7, #28]
      break;
 80045c6:	e110      	b.n	80047ea <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_HEADPHONE:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 80045c8:	89fb      	ldrh	r3, [r7, #14]
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f240 3203 	movw	r2, #771	; 0x303
 80045d0:	2105      	movs	r1, #5
 80045d2:	4618      	mov	r0, r3
 80045d4:	f001 fa54 	bl	8005a80 <CODEC_IO_Write>
 80045d8:	4603      	mov	r3, r0
 80045da:	461a      	mov	r2, r3
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	4413      	add	r3, r2
 80045e0:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80045e2:	89fb      	ldrh	r3, [r7, #14]
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2201      	movs	r2, #1
 80045e8:	f240 6101 	movw	r1, #1537	; 0x601
 80045ec:	4618      	mov	r0, r3
 80045ee:	f001 fa47 	bl	8005a80 <CODEC_IO_Write>
 80045f2:	4603      	mov	r3, r0
 80045f4:	461a      	mov	r2, r3
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	4413      	add	r3, r2
 80045fa:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80045fc:	89fb      	ldrh	r3, [r7, #14]
 80045fe:	b2db      	uxtb	r3, r3
 8004600:	2201      	movs	r2, #1
 8004602:	f240 6102 	movw	r1, #1538	; 0x602
 8004606:	4618      	mov	r0, r3
 8004608:	f001 fa3a 	bl	8005a80 <CODEC_IO_Write>
 800460c:	4603      	mov	r3, r0
 800460e:	461a      	mov	r2, r3
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	4413      	add	r3, r2
 8004614:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8004616:	89fb      	ldrh	r3, [r7, #14]
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2200      	movs	r2, #0
 800461c:	f240 6104 	movw	r1, #1540	; 0x604
 8004620:	4618      	mov	r0, r3
 8004622:	f001 fa2d 	bl	8005a80 <CODEC_IO_Write>
 8004626:	4603      	mov	r3, r0
 8004628:	461a      	mov	r2, r3
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8004630:	89fb      	ldrh	r3, [r7, #14]
 8004632:	b2db      	uxtb	r3, r3
 8004634:	2200      	movs	r2, #0
 8004636:	f240 6105 	movw	r1, #1541	; 0x605
 800463a:	4618      	mov	r0, r3
 800463c:	f001 fa20 	bl	8005a80 <CODEC_IO_Write>
 8004640:	4603      	mov	r3, r0
 8004642:	461a      	mov	r2, r3
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	4413      	add	r3, r2
 8004648:	61fb      	str	r3, [r7, #28]
      break;
 800464a:	e0ce      	b.n	80047ea <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_BOTH:
      if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 800464c:	8afb      	ldrh	r3, [r7, #22]
 800464e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004652:	d141      	bne.n	80046d8 <wm8994_Init+0x28c>
      {
        /* Enable DAC1 (Left), Enable DAC1 (Right),
        also Enable DAC2 (Left), Enable DAC2 (Right)*/
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8004654:	89fb      	ldrh	r3, [r7, #14]
 8004656:	b2db      	uxtb	r3, r3
 8004658:	f640 720f 	movw	r2, #3855	; 0xf0f
 800465c:	2105      	movs	r1, #5
 800465e:	4618      	mov	r0, r3
 8004660:	f001 fa0e 	bl	8005a80 <CODEC_IO_Write>
 8004664:	4603      	mov	r3, r0
 8004666:	461a      	mov	r2, r3
 8004668:	69fb      	ldr	r3, [r7, #28]
 800466a:	4413      	add	r3, r2
 800466c:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0003);
 800466e:	89fb      	ldrh	r3, [r7, #14]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2203      	movs	r2, #3
 8004674:	f240 6101 	movw	r1, #1537	; 0x601
 8004678:	4618      	mov	r0, r3
 800467a:	f001 fa01 	bl	8005a80 <CODEC_IO_Write>
 800467e:	4603      	mov	r3, r0
 8004680:	461a      	mov	r2, r3
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0003);
 8004688:	89fb      	ldrh	r3, [r7, #14]
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2203      	movs	r2, #3
 800468e:	f240 6102 	movw	r1, #1538	; 0x602
 8004692:	4618      	mov	r0, r3
 8004694:	f001 f9f4 	bl	8005a80 <CODEC_IO_Write>
 8004698:	4603      	mov	r3, r0
 800469a:	461a      	mov	r2, r3
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	4413      	add	r3, r2
 80046a0:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
        Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0003);
 80046a2:	89fb      	ldrh	r3, [r7, #14]
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	2203      	movs	r2, #3
 80046a8:	f240 6104 	movw	r1, #1540	; 0x604
 80046ac:	4618      	mov	r0, r3
 80046ae:	f001 f9e7 	bl	8005a80 <CODEC_IO_Write>
 80046b2:	4603      	mov	r3, r0
 80046b4:	461a      	mov	r2, r3
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	4413      	add	r3, r2
 80046ba:	61fb      	str	r3, [r7, #28]
        
        /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
        Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0003);
 80046bc:	89fb      	ldrh	r3, [r7, #14]
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2203      	movs	r2, #3
 80046c2:	f240 6105 	movw	r1, #1541	; 0x605
 80046c6:	4618      	mov	r0, r3
 80046c8:	f001 f9da 	bl	8005a80 <CODEC_IO_Write>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	4413      	add	r3, r2
 80046d4:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
        
        /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
      }
      break;
 80046d6:	e088      	b.n	80047ea <wm8994_Init+0x39e>
        counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 80046d8:	89fb      	ldrh	r3, [r7, #14]
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	f640 720f 	movw	r2, #3855	; 0xf0f
 80046e0:	2105      	movs	r1, #5
 80046e2:	4618      	mov	r0, r3
 80046e4:	f001 f9cc 	bl	8005a80 <CODEC_IO_Write>
 80046e8:	4603      	mov	r3, r0
 80046ea:	461a      	mov	r2, r3
 80046ec:	69fb      	ldr	r3, [r7, #28]
 80046ee:	4413      	add	r3, r2
 80046f0:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 80046f2:	89fb      	ldrh	r3, [r7, #14]
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2201      	movs	r2, #1
 80046f8:	f240 6101 	movw	r1, #1537	; 0x601
 80046fc:	4618      	mov	r0, r3
 80046fe:	f001 f9bf 	bl	8005a80 <CODEC_IO_Write>
 8004702:	4603      	mov	r3, r0
 8004704:	461a      	mov	r2, r3
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	4413      	add	r3, r2
 800470a:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800470c:	89fb      	ldrh	r3, [r7, #14]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2201      	movs	r2, #1
 8004712:	f240 6102 	movw	r1, #1538	; 0x602
 8004716:	4618      	mov	r0, r3
 8004718:	f001 f9b2 	bl	8005a80 <CODEC_IO_Write>
 800471c:	4603      	mov	r3, r0
 800471e:	461a      	mov	r2, r3
 8004720:	69fb      	ldr	r3, [r7, #28]
 8004722:	4413      	add	r3, r2
 8004724:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 8004726:	89fb      	ldrh	r3, [r7, #14]
 8004728:	b2db      	uxtb	r3, r3
 800472a:	2202      	movs	r2, #2
 800472c:	f240 6104 	movw	r1, #1540	; 0x604
 8004730:	4618      	mov	r0, r3
 8004732:	f001 f9a5 	bl	8005a80 <CODEC_IO_Write>
 8004736:	4603      	mov	r3, r0
 8004738:	461a      	mov	r2, r3
 800473a:	69fb      	ldr	r3, [r7, #28]
 800473c:	4413      	add	r3, r2
 800473e:	61fb      	str	r3, [r7, #28]
        counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);      
 8004740:	89fb      	ldrh	r3, [r7, #14]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2202      	movs	r2, #2
 8004746:	f240 6105 	movw	r1, #1541	; 0x605
 800474a:	4618      	mov	r0, r3
 800474c:	f001 f998 	bl	8005a80 <CODEC_IO_Write>
 8004750:	4603      	mov	r3, r0
 8004752:	461a      	mov	r2, r3
 8004754:	69fb      	ldr	r3, [r7, #28]
 8004756:	4413      	add	r3, r2
 8004758:	61fb      	str	r3, [r7, #28]
      break;
 800475a:	e046      	b.n	80047ea <wm8994_Init+0x39e>

    case OUTPUT_DEVICE_AUTO :
    default:
      /* Disable DAC1 (Left), Disable DAC1 (Right),
      Enable DAC2 (Left), Enable DAC2 (Right)*/
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 800475c:	89fb      	ldrh	r3, [r7, #14]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f240 3203 	movw	r2, #771	; 0x303
 8004764:	2105      	movs	r1, #5
 8004766:	4618      	mov	r0, r3
 8004768:	f001 f98a 	bl	8005a80 <CODEC_IO_Write>
 800476c:	4603      	mov	r3, r0
 800476e:	461a      	mov	r2, r3
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	4413      	add	r3, r2
 8004774:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8004776:	89fb      	ldrh	r3, [r7, #14]
 8004778:	b2db      	uxtb	r3, r3
 800477a:	2201      	movs	r2, #1
 800477c:	f240 6101 	movw	r1, #1537	; 0x601
 8004780:	4618      	mov	r0, r3
 8004782:	f001 f97d 	bl	8005a80 <CODEC_IO_Write>
 8004786:	4603      	mov	r3, r0
 8004788:	461a      	mov	r2, r3
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	4413      	add	r3, r2
 800478e:	61fb      	str	r3, [r7, #28]

      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8004790:	89fb      	ldrh	r3, [r7, #14]
 8004792:	b2db      	uxtb	r3, r3
 8004794:	2201      	movs	r2, #1
 8004796:	f240 6102 	movw	r1, #1538	; 0x602
 800479a:	4618      	mov	r0, r3
 800479c:	f001 f970 	bl	8005a80 <CODEC_IO_Write>
 80047a0:	4603      	mov	r3, r0
 80047a2:	461a      	mov	r2, r3
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	4413      	add	r3, r2
 80047a8:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 80047aa:	89fb      	ldrh	r3, [r7, #14]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2200      	movs	r2, #0
 80047b0:	f240 6104 	movw	r1, #1540	; 0x604
 80047b4:	4618      	mov	r0, r3
 80047b6:	f001 f963 	bl	8005a80 <CODEC_IO_Write>
 80047ba:	4603      	mov	r3, r0
 80047bc:	461a      	mov	r2, r3
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4413      	add	r3, r2
 80047c2:	61fb      	str	r3, [r7, #28]

      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 80047c4:	89fb      	ldrh	r3, [r7, #14]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2200      	movs	r2, #0
 80047ca:	f240 6105 	movw	r1, #1541	; 0x605
 80047ce:	4618      	mov	r0, r3
 80047d0:	f001 f956 	bl	8005a80 <CODEC_IO_Write>
 80047d4:	4603      	mov	r3, r0
 80047d6:	461a      	mov	r2, r3
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	4413      	add	r3, r2
 80047dc:	61fb      	str	r3, [r7, #28]
      break;
 80047de:	e004      	b.n	80047ea <wm8994_Init+0x39e>
 80047e0:	200006f8 	.word	0x200006f8
    }
  }
  else
  {
    outputEnabled = 0;
 80047e4:	4b99      	ldr	r3, [pc, #612]	; (8004a4c <wm8994_Init+0x600>)
 80047e6:	2200      	movs	r2, #0
 80047e8:	601a      	str	r2, [r3, #0]
  }

  /* Path Configurations for input */
  if (input_device > 0)
 80047ea:	8afb      	ldrh	r3, [r7, #22]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	f000 81ab 	beq.w	8004b48 <wm8994_Init+0x6fc>
  {
    inputEnabled = 1;
 80047f2:	4b97      	ldr	r3, [pc, #604]	; (8004a50 <wm8994_Init+0x604>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	601a      	str	r2, [r3, #0]
    switch (input_device)
 80047f8:	8afb      	ldrh	r3, [r7, #22]
 80047fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047fe:	f000 8129 	beq.w	8004a54 <wm8994_Init+0x608>
 8004802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004806:	f300 819b 	bgt.w	8004b40 <wm8994_Init+0x6f4>
 800480a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800480e:	d05a      	beq.n	80048c6 <wm8994_Init+0x47a>
 8004810:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004814:	f300 8194 	bgt.w	8004b40 <wm8994_Init+0x6f4>
 8004818:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800481c:	f000 80c6 	beq.w	80049ac <wm8994_Init+0x560>
 8004820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004824:	f040 818c 	bne.w	8004b40 <wm8994_Init+0x6f4>
    {
    case INPUT_DEVICE_DIGITAL_MICROPHONE_2 :
      /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
       * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0C30);
 8004828:	89fb      	ldrh	r3, [r7, #14]
 800482a:	b2db      	uxtb	r3, r3
 800482c:	f44f 6243 	mov.w	r2, #3120	; 0xc30
 8004830:	2104      	movs	r1, #4
 8004832:	4618      	mov	r0, r3
 8004834:	f001 f924 	bl	8005a80 <CODEC_IO_Write>
 8004838:	4603      	mov	r3, r0
 800483a:	461a      	mov	r2, r3
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	4413      	add	r3, r2
 8004840:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8004842:	89fb      	ldrh	r3, [r7, #14]
 8004844:	b2db      	uxtb	r3, r3
 8004846:	22db      	movs	r2, #219	; 0xdb
 8004848:	f44f 618a 	mov.w	r1, #1104	; 0x450
 800484c:	4618      	mov	r0, r3
 800484e:	f001 f917 	bl	8005a80 <CODEC_IO_Write>
 8004852:	4603      	mov	r3, r0
 8004854:	461a      	mov	r2, r3
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	4413      	add	r3, r2
 800485a:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6000);
 800485c:	89fb      	ldrh	r3, [r7, #14]
 800485e:	b2db      	uxtb	r3, r3
 8004860:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 8004864:	2102      	movs	r1, #2
 8004866:	4618      	mov	r0, r3
 8004868:	f001 f90a 	bl	8005a80 <CODEC_IO_Write>
 800486c:	4603      	mov	r3, r0
 800486e:	461a      	mov	r2, r3
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	4413      	add	r3, r2
 8004874:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004876:	89fb      	ldrh	r3, [r7, #14]
 8004878:	b2db      	uxtb	r3, r3
 800487a:	2202      	movs	r2, #2
 800487c:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8004880:	4618      	mov	r0, r3
 8004882:	f001 f8fd 	bl	8005a80 <CODEC_IO_Write>
 8004886:	4603      	mov	r3, r0
 8004888:	461a      	mov	r2, r3
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	4413      	add	r3, r2
 800488e:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8004890:	89fb      	ldrh	r3, [r7, #14]
 8004892:	b2db      	uxtb	r3, r3
 8004894:	2202      	movs	r2, #2
 8004896:	f240 6109 	movw	r1, #1545	; 0x609
 800489a:	4618      	mov	r0, r3
 800489c:	f001 f8f0 	bl	8005a80 <CODEC_IO_Write>
 80048a0:	4603      	mov	r3, r0
 80048a2:	461a      	mov	r2, r3
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	4413      	add	r3, r2
 80048a8:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000E);
 80048aa:	89fb      	ldrh	r3, [r7, #14]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	220e      	movs	r2, #14
 80048b0:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80048b4:	4618      	mov	r0, r3
 80048b6:	f001 f8e3 	bl	8005a80 <CODEC_IO_Write>
 80048ba:	4603      	mov	r3, r0
 80048bc:	461a      	mov	r2, r3
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	4413      	add	r3, r2
 80048c2:	61fb      	str	r3, [r7, #28]
      break;
 80048c4:	e143      	b.n	8004b4e <wm8994_Init+0x702>

    case INPUT_DEVICE_INPUT_LINE_1 :
      /* IN1LN_TO_IN1L, IN1LP_TO_VMID, IN1RN_TO_IN1R, IN1RP_TO_VMID */
      counter += CODEC_IO_Write(DeviceAddr, 0x28, 0x0011);
 80048c6:	89fb      	ldrh	r3, [r7, #14]
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2211      	movs	r2, #17
 80048cc:	2128      	movs	r1, #40	; 0x28
 80048ce:	4618      	mov	r0, r3
 80048d0:	f001 f8d6 	bl	8005a80 <CODEC_IO_Write>
 80048d4:	4603      	mov	r3, r0
 80048d6:	461a      	mov	r2, r3
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	4413      	add	r3, r2
 80048dc:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
      counter += CODEC_IO_Write(DeviceAddr, 0x29, 0x0035);
 80048de:	89fb      	ldrh	r3, [r7, #14]
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	2235      	movs	r2, #53	; 0x35
 80048e4:	2129      	movs	r1, #41	; 0x29
 80048e6:	4618      	mov	r0, r3
 80048e8:	f001 f8ca 	bl	8005a80 <CODEC_IO_Write>
 80048ec:	4603      	mov	r3, r0
 80048ee:	461a      	mov	r2, r3
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	4413      	add	r3, r2
 80048f4:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x2A, 0x0035);
 80048f6:	89fb      	ldrh	r3, [r7, #14]
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2235      	movs	r2, #53	; 0x35
 80048fc:	212a      	movs	r1, #42	; 0x2a
 80048fe:	4618      	mov	r0, r3
 8004900:	f001 f8be 	bl	8005a80 <CODEC_IO_Write>
 8004904:	4603      	mov	r3, r0
 8004906:	461a      	mov	r2, r3
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	4413      	add	r3, r2
 800490c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0303);
 800490e:	89fb      	ldrh	r3, [r7, #14]
 8004910:	b2db      	uxtb	r3, r3
 8004912:	f240 3203 	movw	r2, #771	; 0x303
 8004916:	2104      	movs	r1, #4
 8004918:	4618      	mov	r0, r3
 800491a:	f001 f8b1 	bl	8005a80 <CODEC_IO_Write>
 800491e:	4603      	mov	r3, r0
 8004920:	461a      	mov	r2, r3
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	4413      	add	r3, r2
 8004926:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004928:	89fb      	ldrh	r3, [r7, #14]
 800492a:	b2db      	uxtb	r3, r3
 800492c:	22db      	movs	r2, #219	; 0xdb
 800492e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004932:	4618      	mov	r0, r3
 8004934:	f001 f8a4 	bl	8005a80 <CODEC_IO_Write>
 8004938:	4603      	mov	r3, r0
 800493a:	461a      	mov	r2, r3
 800493c:	69fb      	ldr	r3, [r7, #28]
 800493e:	4413      	add	r3, r2
 8004940:	61fb      	str	r3, [r7, #28]

      /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 8004942:	89fb      	ldrh	r3, [r7, #14]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f246 3250 	movw	r2, #25424	; 0x6350
 800494a:	2102      	movs	r1, #2
 800494c:	4618      	mov	r0, r3
 800494e:	f001 f897 	bl	8005a80 <CODEC_IO_Write>
 8004952:	4603      	mov	r3, r0
 8004954:	461a      	mov	r2, r3
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	4413      	add	r3, r2
 800495a:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 800495c:	89fb      	ldrh	r3, [r7, #14]
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2202      	movs	r2, #2
 8004962:	f240 6106 	movw	r1, #1542	; 0x606
 8004966:	4618      	mov	r0, r3
 8004968:	f001 f88a 	bl	8005a80 <CODEC_IO_Write>
 800496c:	4603      	mov	r3, r0
 800496e:	461a      	mov	r2, r3
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	61fb      	str	r3, [r7, #28]

      /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004976:	89fb      	ldrh	r3, [r7, #14]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2202      	movs	r2, #2
 800497c:	f240 6107 	movw	r1, #1543	; 0x607
 8004980:	4618      	mov	r0, r3
 8004982:	f001 f87d 	bl	8005a80 <CODEC_IO_Write>
 8004986:	4603      	mov	r3, r0
 8004988:	461a      	mov	r2, r3
 800498a:	69fb      	ldr	r3, [r7, #28]
 800498c:	4413      	add	r3, r2
 800498e:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004990:	89fb      	ldrh	r3, [r7, #14]
 8004992:	b2db      	uxtb	r3, r3
 8004994:	220d      	movs	r2, #13
 8004996:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 800499a:	4618      	mov	r0, r3
 800499c:	f001 f870 	bl	8005a80 <CODEC_IO_Write>
 80049a0:	4603      	mov	r3, r0
 80049a2:	461a      	mov	r2, r3
 80049a4:	69fb      	ldr	r3, [r7, #28]
 80049a6:	4413      	add	r3, r2
 80049a8:	61fb      	str	r3, [r7, #28]
      break;
 80049aa:	e0d0      	b.n	8004b4e <wm8994_Init+0x702>

    case INPUT_DEVICE_DIGITAL_MICROPHONE_1 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x030C);
 80049ac:	89fb      	ldrh	r3, [r7, #14]
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	f44f 7243 	mov.w	r2, #780	; 0x30c
 80049b4:	2104      	movs	r1, #4
 80049b6:	4618      	mov	r0, r3
 80049b8:	f001 f862 	bl	8005a80 <CODEC_IO_Write>
 80049bc:	4603      	mov	r3, r0
 80049be:	461a      	mov	r2, r3
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 80049c6:	89fb      	ldrh	r3, [r7, #14]
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	22db      	movs	r2, #219	; 0xdb
 80049cc:	f44f 6188 	mov.w	r1, #1088	; 0x440
 80049d0:	4618      	mov	r0, r3
 80049d2:	f001 f855 	bl	8005a80 <CODEC_IO_Write>
 80049d6:	4603      	mov	r3, r0
 80049d8:	461a      	mov	r2, r3
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	4413      	add	r3, r2
 80049de:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x6350);
 80049e0:	89fb      	ldrh	r3, [r7, #14]
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	f246 3250 	movw	r2, #25424	; 0x6350
 80049e8:	2102      	movs	r1, #2
 80049ea:	4618      	mov	r0, r3
 80049ec:	f001 f848 	bl	8005a80 <CODEC_IO_Write>
 80049f0:	4603      	mov	r3, r0
 80049f2:	461a      	mov	r2, r3
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	4413      	add	r3, r2
 80049f8:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 80049fa:	89fb      	ldrh	r3, [r7, #14]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2202      	movs	r2, #2
 8004a00:	f240 6106 	movw	r1, #1542	; 0x606
 8004a04:	4618      	mov	r0, r3
 8004a06:	f001 f83b 	bl	8005a80 <CODEC_IO_Write>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	4413      	add	r3, r2
 8004a12:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004a14:	89fb      	ldrh	r3, [r7, #14]
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2202      	movs	r2, #2
 8004a1a:	f240 6107 	movw	r1, #1543	; 0x607
 8004a1e:	4618      	mov	r0, r3
 8004a20:	f001 f82e 	bl	8005a80 <CODEC_IO_Write>
 8004a24:	4603      	mov	r3, r0
 8004a26:	461a      	mov	r2, r3
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	4413      	add	r3, r2
 8004a2c:	61fb      	str	r3, [r7, #28]

      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004a2e:	89fb      	ldrh	r3, [r7, #14]
 8004a30:	b2db      	uxtb	r3, r3
 8004a32:	220d      	movs	r2, #13
 8004a34:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f001 f821 	bl	8005a80 <CODEC_IO_Write>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	461a      	mov	r2, r3
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	4413      	add	r3, r2
 8004a46:	61fb      	str	r3, [r7, #28]
      break; 
 8004a48:	e081      	b.n	8004b4e <wm8994_Init+0x702>
 8004a4a:	bf00      	nop
 8004a4c:	200006f8 	.word	0x200006f8
 8004a50:	200006fc 	.word	0x200006fc
    case INPUT_DEVICE_DIGITAL_MIC1_MIC2 :
      /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
       * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
       * Enable Left ADC, Enable Right ADC */
      counter += CODEC_IO_Write(DeviceAddr, 0x04, 0x0F3C);
 8004a54:	89fb      	ldrh	r3, [r7, #14]
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	f640 723c 	movw	r2, #3900	; 0xf3c
 8004a5c:	2104      	movs	r1, #4
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 f80e 	bl	8005a80 <CODEC_IO_Write>
 8004a64:	4603      	mov	r3, r0
 8004a66:	461a      	mov	r2, r3
 8004a68:	69fb      	ldr	r3, [r7, #28]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	61fb      	str	r3, [r7, #28]

      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
      counter += CODEC_IO_Write(DeviceAddr, 0x450, 0x00DB);
 8004a6e:	89fb      	ldrh	r3, [r7, #14]
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	22db      	movs	r2, #219	; 0xdb
 8004a74:	f44f 618a 	mov.w	r1, #1104	; 0x450
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f001 f801 	bl	8005a80 <CODEC_IO_Write>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	461a      	mov	r2, r3
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	61fb      	str	r3, [r7, #28]
      
      /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
      counter += CODEC_IO_Write(DeviceAddr, 0x440, 0x00DB);
 8004a88:	89fb      	ldrh	r3, [r7, #14]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	22db      	movs	r2, #219	; 0xdb
 8004a8e:	f44f 6188 	mov.w	r1, #1088	; 0x440
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fff4 	bl	8005a80 <CODEC_IO_Write>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	461a      	mov	r2, r3
 8004a9c:	69fb      	ldr	r3, [r7, #28]
 8004a9e:	4413      	add	r3, r2
 8004aa0:	61fb      	str	r3, [r7, #28]

      /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
      counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x63A0);
 8004aa2:	89fb      	ldrh	r3, [r7, #14]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	f246 32a0 	movw	r2, #25504	; 0x63a0
 8004aaa:	2102      	movs	r1, #2
 8004aac:	4618      	mov	r0, r3
 8004aae:	f000 ffe7 	bl	8005a80 <CODEC_IO_Write>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 0 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x606, 0x0002);
 8004abc:	89fb      	ldrh	r3, [r7, #14]
 8004abe:	b2db      	uxtb	r3, r3
 8004ac0:	2202      	movs	r2, #2
 8004ac2:	f240 6106 	movw	r1, #1542	; 0x606
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 ffda 	bl	8005a80 <CODEC_IO_Write>
 8004acc:	4603      	mov	r3, r0
 8004ace:	461a      	mov	r2, r3
 8004ad0:	69fb      	ldr	r3, [r7, #28]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 0 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x607, 0x0002);
 8004ad6:	89fb      	ldrh	r3, [r7, #14]
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2202      	movs	r2, #2
 8004adc:	f240 6107 	movw	r1, #1543	; 0x607
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	f000 ffcd 	bl	8005a80 <CODEC_IO_Write>
 8004ae6:	4603      	mov	r3, r0
 8004ae8:	461a      	mov	r2, r3
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	4413      	add	r3, r2
 8004aee:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x608, 0x0002);
 8004af0:	89fb      	ldrh	r3, [r7, #14]
 8004af2:	b2db      	uxtb	r3, r3
 8004af4:	2202      	movs	r2, #2
 8004af6:	f44f 61c1 	mov.w	r1, #1544	; 0x608
 8004afa:	4618      	mov	r0, r3
 8004afc:	f000 ffc0 	bl	8005a80 <CODEC_IO_Write>
 8004b00:	4603      	mov	r3, r0
 8004b02:	461a      	mov	r2, r3
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	4413      	add	r3, r2
 8004b08:	61fb      	str	r3, [r7, #28]

      /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
      counter += CODEC_IO_Write(DeviceAddr, 0x609, 0x0002);
 8004b0a:	89fb      	ldrh	r3, [r7, #14]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f240 6109 	movw	r1, #1545	; 0x609
 8004b14:	4618      	mov	r0, r3
 8004b16:	f000 ffb3 	bl	8005a80 <CODEC_IO_Write>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	4413      	add	r3, r2
 8004b22:	61fb      	str	r3, [r7, #28]
      
      /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
      counter += CODEC_IO_Write(DeviceAddr, 0x700, 0x000D);
 8004b24:	89fb      	ldrh	r3, [r7, #14]
 8004b26:	b2db      	uxtb	r3, r3
 8004b28:	220d      	movs	r2, #13
 8004b2a:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 ffa6 	bl	8005a80 <CODEC_IO_Write>
 8004b34:	4603      	mov	r3, r0
 8004b36:	461a      	mov	r2, r3
 8004b38:	69fb      	ldr	r3, [r7, #28]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	61fb      	str	r3, [r7, #28]
      break;    
 8004b3e:	e006      	b.n	8004b4e <wm8994_Init+0x702>
    case INPUT_DEVICE_INPUT_LINE_2 :
    default:
      /* Actually, no other input devices supported */
      counter++;
 8004b40:	69fb      	ldr	r3, [r7, #28]
 8004b42:	3301      	adds	r3, #1
 8004b44:	61fb      	str	r3, [r7, #28]
      break;
 8004b46:	e002      	b.n	8004b4e <wm8994_Init+0x702>
    }
  }
  else
  {
    inputEnabled = 0;
 8004b48:	4ba4      	ldr	r3, [pc, #656]	; (8004ddc <wm8994_Init+0x990>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]
  }
  
  /*  Clock Configurations */
  switch (AudioFreq)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4aa3      	ldr	r2, [pc, #652]	; (8004de0 <wm8994_Init+0x994>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d079      	beq.n	8004c4a <wm8994_Init+0x7fe>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4aa1      	ldr	r2, [pc, #644]	; (8004de0 <wm8994_Init+0x994>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	f200 80ad 	bhi.w	8004cba <wm8994_Init+0x86e>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d061      	beq.n	8004c2e <wm8994_Init+0x7e2>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8004b70:	4293      	cmp	r3, r2
 8004b72:	f200 80a2 	bhi.w	8004cba <wm8994_Init+0x86e>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	f000 808e 	beq.w	8004c9e <wm8994_Init+0x852>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f64a 4244 	movw	r2, #44100	; 0xac44
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	f200 8096 	bhi.w	8004cba <wm8994_Init+0x86e>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004b94:	d03d      	beq.n	8004c12 <wm8994_Init+0x7c6>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 8004b9c:	f200 808d 	bhi.w	8004cba <wm8994_Init+0x86e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f245 6222 	movw	r2, #22050	; 0x5622
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d06b      	beq.n	8004c82 <wm8994_Init+0x836>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	f245 6222 	movw	r2, #22050	; 0x5622
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	f200 8082 	bhi.w	8004cba <wm8994_Init+0x86e>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004bbc:	d01b      	beq.n	8004bf6 <wm8994_Init+0x7aa>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8004bc4:	d879      	bhi.n	8004cba <wm8994_Init+0x86e>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8004bcc:	d005      	beq.n	8004bda <wm8994_Init+0x78e>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f642 3211 	movw	r2, #11025	; 0x2b11
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d046      	beq.n	8004c66 <wm8994_Init+0x81a>
 8004bd8:	e06f      	b.n	8004cba <wm8994_Init+0x86e>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8004bda:	89fb      	ldrh	r3, [r7, #14]
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2203      	movs	r2, #3
 8004be0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 ff4b 	bl	8005a80 <CODEC_IO_Write>
 8004bea:	4603      	mov	r3, r0
 8004bec:	461a      	mov	r2, r3
 8004bee:	69fb      	ldr	r3, [r7, #28]
 8004bf0:	4413      	add	r3, r2
 8004bf2:	61fb      	str	r3, [r7, #28]
    break;
 8004bf4:	e06f      	b.n	8004cd6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8004bf6:	89fb      	ldrh	r3, [r7, #14]
 8004bf8:	b2db      	uxtb	r3, r3
 8004bfa:	2233      	movs	r2, #51	; 0x33
 8004bfc:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004c00:	4618      	mov	r0, r3
 8004c02:	f000 ff3d 	bl	8005a80 <CODEC_IO_Write>
 8004c06:	4603      	mov	r3, r0
 8004c08:	461a      	mov	r2, r3
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	61fb      	str	r3, [r7, #28]
    break;
 8004c10:	e061      	b.n	8004cd6 <wm8994_Init+0x88a>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 8004c12:	89fb      	ldrh	r3, [r7, #14]
 8004c14:	b2db      	uxtb	r3, r3
 8004c16:	2263      	movs	r2, #99	; 0x63
 8004c18:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f000 ff2f 	bl	8005a80 <CODEC_IO_Write>
 8004c22:	4603      	mov	r3, r0
 8004c24:	461a      	mov	r2, r3
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	61fb      	str	r3, [r7, #28]
    break;
 8004c2c:	e053      	b.n	8004cd6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004c2e:	89fb      	ldrh	r3, [r7, #14]
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2283      	movs	r2, #131	; 0x83
 8004c34:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 ff21 	bl	8005a80 <CODEC_IO_Write>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	461a      	mov	r2, r3
 8004c42:	69fb      	ldr	r3, [r7, #28]
 8004c44:	4413      	add	r3, r2
 8004c46:	61fb      	str	r3, [r7, #28]
    break;
 8004c48:	e045      	b.n	8004cd6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 8004c4a:	89fb      	ldrh	r3, [r7, #14]
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	22a3      	movs	r2, #163	; 0xa3
 8004c50:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004c54:	4618      	mov	r0, r3
 8004c56:	f000 ff13 	bl	8005a80 <CODEC_IO_Write>
 8004c5a:	4603      	mov	r3, r0
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	61fb      	str	r3, [r7, #28]
    break;
 8004c64:	e037      	b.n	8004cd6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 8004c66:	89fb      	ldrh	r3, [r7, #14]
 8004c68:	b2db      	uxtb	r3, r3
 8004c6a:	2213      	movs	r2, #19
 8004c6c:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004c70:	4618      	mov	r0, r3
 8004c72:	f000 ff05 	bl	8005a80 <CODEC_IO_Write>
 8004c76:	4603      	mov	r3, r0
 8004c78:	461a      	mov	r2, r3
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	61fb      	str	r3, [r7, #28]
    break;
 8004c80:	e029      	b.n	8004cd6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 8004c82:	89fb      	ldrh	r3, [r7, #14]
 8004c84:	b2db      	uxtb	r3, r3
 8004c86:	2243      	movs	r2, #67	; 0x43
 8004c88:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f000 fef7 	bl	8005a80 <CODEC_IO_Write>
 8004c92:	4603      	mov	r3, r0
 8004c94:	461a      	mov	r2, r3
 8004c96:	69fb      	ldr	r3, [r7, #28]
 8004c98:	4413      	add	r3, r2
 8004c9a:	61fb      	str	r3, [r7, #28]
    break;
 8004c9c:	e01b      	b.n	8004cd6 <wm8994_Init+0x88a>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 8004c9e:	89fb      	ldrh	r3, [r7, #14]
 8004ca0:	b2db      	uxtb	r3, r3
 8004ca2:	2273      	movs	r2, #115	; 0x73
 8004ca4:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 fee9 	bl	8005a80 <CODEC_IO_Write>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	69fb      	ldr	r3, [r7, #28]
 8004cb4:	4413      	add	r3, r2
 8004cb6:	61fb      	str	r3, [r7, #28]
    break; 
 8004cb8:	e00d      	b.n	8004cd6 <wm8994_Init+0x88a>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8004cba:	89fb      	ldrh	r3, [r7, #14]
 8004cbc:	b2db      	uxtb	r3, r3
 8004cbe:	2283      	movs	r2, #131	; 0x83
 8004cc0:	f44f 7104 	mov.w	r1, #528	; 0x210
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f000 fedb 	bl	8005a80 <CODEC_IO_Write>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	461a      	mov	r2, r3
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	4413      	add	r3, r2
 8004cd2:	61fb      	str	r3, [r7, #28]
    break; 
 8004cd4:	bf00      	nop
  }

  if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004cd6:	8afb      	ldrh	r3, [r7, #22]
 8004cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004cdc:	d10e      	bne.n	8004cfc <wm8994_Init+0x8b0>
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4018);    
 8004cde:	89fb      	ldrh	r3, [r7, #14]
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	f244 0218 	movw	r2, #16408	; 0x4018
 8004ce6:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004cea:	4618      	mov	r0, r3
 8004cec:	f000 fec8 	bl	8005a80 <CODEC_IO_Write>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	61fb      	str	r3, [r7, #28]
 8004cfa:	e00d      	b.n	8004d18 <wm8994_Init+0x8cc>
  }
  else
  {
  /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
  counter += CODEC_IO_Write(DeviceAddr, 0x300, 0x4010);
 8004cfc:	89fb      	ldrh	r3, [r7, #14]
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	f244 0210 	movw	r2, #16400	; 0x4010
 8004d04:	f44f 7140 	mov.w	r1, #768	; 0x300
 8004d08:	4618      	mov	r0, r3
 8004d0a:	f000 feb9 	bl	8005a80 <CODEC_IO_Write>
 8004d0e:	4603      	mov	r3, r0
 8004d10:	461a      	mov	r2, r3
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	4413      	add	r3, r2
 8004d16:	61fb      	str	r3, [r7, #28]
  }
  
  /* slave mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x302, 0x0000);
 8004d18:	89fb      	ldrh	r3, [r7, #14]
 8004d1a:	b2db      	uxtb	r3, r3
 8004d1c:	2200      	movs	r2, #0
 8004d1e:	f240 3102 	movw	r1, #770	; 0x302
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 feac 	bl	8005a80 <CODEC_IO_Write>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	69fb      	ldr	r3, [r7, #28]
 8004d2e:	4413      	add	r3, r2
 8004d30:	61fb      	str	r3, [r7, #28]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  counter += CODEC_IO_Write(DeviceAddr, 0x208, 0x000A);
 8004d32:	89fb      	ldrh	r3, [r7, #14]
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	220a      	movs	r2, #10
 8004d38:	f44f 7102 	mov.w	r1, #520	; 0x208
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f000 fe9f 	bl	8005a80 <CODEC_IO_Write>
 8004d42:	4603      	mov	r3, r0
 8004d44:	461a      	mov	r2, r3
 8004d46:	69fb      	ldr	r3, [r7, #28]
 8004d48:	4413      	add	r3, r2
 8004d4a:	61fb      	str	r3, [r7, #28]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  counter += CODEC_IO_Write(DeviceAddr, 0x200, 0x0001);
 8004d4c:	89fb      	ldrh	r3, [r7, #14]
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2201      	movs	r2, #1
 8004d52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d56:	4618      	mov	r0, r3
 8004d58:	f000 fe92 	bl	8005a80 <CODEC_IO_Write>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	69fb      	ldr	r3, [r7, #28]
 8004d62:	4413      	add	r3, r2
 8004d64:	61fb      	str	r3, [r7, #28]

  if (output_device > 0)  /* Audio output selected */
 8004d66:	8b3b      	ldrh	r3, [r7, #24]
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	f000 817b 	beq.w	8005064 <wm8994_Init+0xc18>
  {
    if (output_device == OUTPUT_DEVICE_HEADPHONE)
 8004d6e:	8b3b      	ldrh	r3, [r7, #24]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d157      	bne.n	8004e24 <wm8994_Init+0x9d8>
    {      
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0100);
 8004d74:	89fb      	ldrh	r3, [r7, #14]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d7c:	212d      	movs	r1, #45	; 0x2d
 8004d7e:	4618      	mov	r0, r3
 8004d80:	f000 fe7e 	bl	8005a80 <CODEC_IO_Write>
 8004d84:	4603      	mov	r3, r0
 8004d86:	461a      	mov	r2, r3
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	61fb      	str	r3, [r7, #28]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0100);    
 8004d8e:	89fb      	ldrh	r3, [r7, #14]
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d96:	212e      	movs	r1, #46	; 0x2e
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f000 fe71 	bl	8005a80 <CODEC_IO_Write>
 8004d9e:	4603      	mov	r3, r0
 8004da0:	461a      	mov	r2, r3
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	61fb      	str	r3, [r7, #28]
            
      /* Startup sequence for Headphone */
      if(ColdStartup)
 8004da8:	4b0e      	ldr	r3, [pc, #56]	; (8004de4 <wm8994_Init+0x998>)
 8004daa:	781b      	ldrb	r3, [r3, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d01b      	beq.n	8004de8 <wm8994_Init+0x99c>
      {
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8100);
 8004db0:	89fb      	ldrh	r3, [r7, #14]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	f44f 4201 	mov.w	r2, #33024	; 0x8100
 8004db8:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f000 fe5f 	bl	8005a80 <CODEC_IO_Write>
 8004dc2:	4603      	mov	r3, r0
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	61fb      	str	r3, [r7, #28]
        
        ColdStartup=0;
 8004dcc:	4b05      	ldr	r3, [pc, #20]	; (8004de4 <wm8994_Init+0x998>)
 8004dce:	2200      	movs	r2, #0
 8004dd0:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        AUDIO_IO_Delay(300);
 8004dd2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8004dd6:	f7fd fac3 	bl	8002360 <AUDIO_IO_Delay>
 8004dda:	e016      	b.n	8004e0a <wm8994_Init+0x9be>
 8004ddc:	200006fc 	.word	0x200006fc
 8004de0:	00017700 	.word	0x00017700
 8004de4:	20000074 	.word	0x20000074
      }
      else /* Headphone Warm Start-Up */
      { 
        counter += CODEC_IO_Write(DeviceAddr,0x110,0x8108);
 8004de8:	89fb      	ldrh	r3, [r7, #14]
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	f248 1208 	movw	r2, #33032	; 0x8108
 8004df0:	f44f 7188 	mov.w	r1, #272	; 0x110
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fe43 	bl	8005a80 <CODEC_IO_Write>
 8004dfa:	4603      	mov	r3, r0
 8004dfc:	461a      	mov	r2, r3
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	4413      	add	r3, r2
 8004e02:	61fb      	str	r3, [r7, #28]
        /* Add Delay */
        AUDIO_IO_Delay(50);
 8004e04:	2032      	movs	r0, #50	; 0x32
 8004e06:	f7fd faab 	bl	8002360 <AUDIO_IO_Delay>
      }

      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0000);
 8004e0a:	89fb      	ldrh	r3, [r7, #14]
 8004e0c:	b2db      	uxtb	r3, r3
 8004e0e:	2200      	movs	r2, #0
 8004e10:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004e14:	4618      	mov	r0, r3
 8004e16:	f000 fe33 	bl	8005a80 <CODEC_IO_Write>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	4413      	add	r3, r2
 8004e22:	61fb      	str	r3, [r7, #28]
    }
    /* Analog Output Configuration */

    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0300);
 8004e24:	89fb      	ldrh	r3, [r7, #14]
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004e2c:	2103      	movs	r1, #3
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f000 fe26 	bl	8005a80 <CODEC_IO_Write>
 8004e34:	4603      	mov	r3, r0
 8004e36:	461a      	mov	r2, r3
 8004e38:	69fb      	ldr	r3, [r7, #28]
 8004e3a:	4413      	add	r3, r2
 8004e3c:	61fb      	str	r3, [r7, #28]

    /* Left Speaker Mixer Volume = 0dB */
    counter += CODEC_IO_Write(DeviceAddr, 0x22, 0x0000);
 8004e3e:	89fb      	ldrh	r3, [r7, #14]
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2200      	movs	r2, #0
 8004e44:	2122      	movs	r1, #34	; 0x22
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 fe1a 	bl	8005a80 <CODEC_IO_Write>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	461a      	mov	r2, r3
 8004e50:	69fb      	ldr	r3, [r7, #28]
 8004e52:	4413      	add	r3, r2
 8004e54:	61fb      	str	r3, [r7, #28]

    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x23, 0x0000);
 8004e56:	89fb      	ldrh	r3, [r7, #14]
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	2123      	movs	r1, #35	; 0x23
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fe0e 	bl	8005a80 <CODEC_IO_Write>
 8004e64:	4603      	mov	r3, r0
 8004e66:	461a      	mov	r2, r3
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	4413      	add	r3, r2
 8004e6c:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x36, 0x0300);
 8004e6e:	89fb      	ldrh	r3, [r7, #14]
 8004e70:	b2db      	uxtb	r3, r3
 8004e72:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004e76:	2136      	movs	r1, #54	; 0x36
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f000 fe01 	bl	8005a80 <CODEC_IO_Write>
 8004e7e:	4603      	mov	r3, r0
 8004e80:	461a      	mov	r2, r3
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	4413      	add	r3, r2
 8004e86:	61fb      	str	r3, [r7, #28]

    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x01, 0x3003);
 8004e88:	89fb      	ldrh	r3, [r7, #14]
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	f243 0203 	movw	r2, #12291	; 0x3003
 8004e90:	2101      	movs	r1, #1
 8004e92:	4618      	mov	r0, r3
 8004e94:	f000 fdf4 	bl	8005a80 <CODEC_IO_Write>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	61fb      	str	r3, [r7, #28]

    /* Headphone/Speaker Enable */

    if (input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 8004ea2:	8afb      	ldrh	r3, [r7, #22]
 8004ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea8:	d10d      	bne.n	8004ec6 <wm8994_Init+0xa7a>
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0205);
 8004eaa:	89fb      	ldrh	r3, [r7, #14]
 8004eac:	b2db      	uxtb	r3, r3
 8004eae:	f240 2205 	movw	r2, #517	; 0x205
 8004eb2:	2151      	movs	r1, #81	; 0x51
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f000 fde3 	bl	8005a80 <CODEC_IO_Write>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	461a      	mov	r2, r3
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	e00b      	b.n	8004ede <wm8994_Init+0xa92>
    }
    else
    {
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    counter += CODEC_IO_Write(DeviceAddr, 0x51, 0x0005);      
 8004ec6:	89fb      	ldrh	r3, [r7, #14]
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2205      	movs	r2, #5
 8004ecc:	2151      	movs	r1, #81	; 0x51
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f000 fdd6 	bl	8005a80 <CODEC_IO_Write>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	69fb      	ldr	r3, [r7, #28]
 8004eda:	4413      	add	r3, r2
 8004edc:	61fb      	str	r3, [r7, #28]
    }

    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    power_mgnt_reg_1 |= 0x0303 | 0x3003;
 8004ede:	8b7b      	ldrh	r3, [r7, #26]
 8004ee0:	f443 534c 	orr.w	r3, r3, #13056	; 0x3300
 8004ee4:	f043 0303 	orr.w	r3, r3, #3
 8004ee8:	837b      	strh	r3, [r7, #26]
    counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8004eea:	89fb      	ldrh	r3, [r7, #14]
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	8b7a      	ldrh	r2, [r7, #26]
 8004ef0:	2101      	movs	r1, #1
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	f000 fdc4 	bl	8005a80 <CODEC_IO_Write>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	461a      	mov	r2, r3
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	4413      	add	r3, r2
 8004f00:	61fb      	str	r3, [r7, #28]

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x0022);
 8004f02:	89fb      	ldrh	r3, [r7, #14]
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2222      	movs	r2, #34	; 0x22
 8004f08:	2160      	movs	r1, #96	; 0x60
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f000 fdb8 	bl	8005a80 <CODEC_IO_Write>
 8004f10:	4603      	mov	r3, r0
 8004f12:	461a      	mov	r2, r3
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	4413      	add	r3, r2
 8004f18:	61fb      	str	r3, [r7, #28]

    /* Enable Charge Pump */
    counter += CODEC_IO_Write(DeviceAddr, 0x4C, 0x9F25);
 8004f1a:	89fb      	ldrh	r3, [r7, #14]
 8004f1c:	b2db      	uxtb	r3, r3
 8004f1e:	f649 7225 	movw	r2, #40741	; 0x9f25
 8004f22:	214c      	movs	r1, #76	; 0x4c
 8004f24:	4618      	mov	r0, r3
 8004f26:	f000 fdab 	bl	8005a80 <CODEC_IO_Write>
 8004f2a:	4603      	mov	r3, r0
 8004f2c:	461a      	mov	r2, r3
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(15);
 8004f34:	200f      	movs	r0, #15
 8004f36:	f7fd fa13 	bl	8002360 <AUDIO_IO_Delay>

    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0001);
 8004f3a:	89fb      	ldrh	r3, [r7, #14]
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	2201      	movs	r2, #1
 8004f40:	212d      	movs	r1, #45	; 0x2d
 8004f42:	4618      	mov	r0, r3
 8004f44:	f000 fd9c 	bl	8005a80 <CODEC_IO_Write>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	4413      	add	r3, r2
 8004f50:	61fb      	str	r3, [r7, #28]

    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0001);
 8004f52:	89fb      	ldrh	r3, [r7, #14]
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2201      	movs	r2, #1
 8004f58:	212e      	movs	r1, #46	; 0x2e
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fd90 	bl	8005a80 <CODEC_IO_Write>
 8004f60:	4603      	mov	r3, r0
 8004f62:	461a      	mov	r2, r3
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	61fb      	str	r3, [r7, #28]

    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    counter += CODEC_IO_Write(DeviceAddr, 0x03, 0x0030 | 0x0300);
 8004f6a:	89fb      	ldrh	r3, [r7, #14]
 8004f6c:	b2db      	uxtb	r3, r3
 8004f6e:	f44f 724c 	mov.w	r2, #816	; 0x330
 8004f72:	2103      	movs	r1, #3
 8004f74:	4618      	mov	r0, r3
 8004f76:	f000 fd83 	bl	8005a80 <CODEC_IO_Write>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	69fb      	ldr	r3, [r7, #28]
 8004f80:	4413      	add	r3, r2
 8004f82:	61fb      	str	r3, [r7, #28]

    /* Enable DC Servo and trigger start-up mode on left and right channels */
    counter += CODEC_IO_Write(DeviceAddr, 0x54, 0x0033);
 8004f84:	89fb      	ldrh	r3, [r7, #14]
 8004f86:	b2db      	uxtb	r3, r3
 8004f88:	2233      	movs	r2, #51	; 0x33
 8004f8a:	2154      	movs	r1, #84	; 0x54
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f000 fd77 	bl	8005a80 <CODEC_IO_Write>
 8004f92:	4603      	mov	r3, r0
 8004f94:	461a      	mov	r2, r3
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	4413      	add	r3, r2
 8004f9a:	61fb      	str	r3, [r7, #28]

    /* Add Delay */
    AUDIO_IO_Delay(257);
 8004f9c:	f240 1001 	movw	r0, #257	; 0x101
 8004fa0:	f7fd f9de 	bl	8002360 <AUDIO_IO_Delay>

    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    counter += CODEC_IO_Write(DeviceAddr, 0x60, 0x00EE);
 8004fa4:	89fb      	ldrh	r3, [r7, #14]
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	22ee      	movs	r2, #238	; 0xee
 8004faa:	2160      	movs	r1, #96	; 0x60
 8004fac:	4618      	mov	r0, r3
 8004fae:	f000 fd67 	bl	8005a80 <CODEC_IO_Write>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	4413      	add	r3, r2
 8004fba:	61fb      	str	r3, [r7, #28]

    /* Unmutes */

    /* Unmute DAC 1 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x610, 0x00C0);
 8004fbc:	89fb      	ldrh	r3, [r7, #14]
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	22c0      	movs	r2, #192	; 0xc0
 8004fc2:	f44f 61c2 	mov.w	r1, #1552	; 0x610
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f000 fd5a 	bl	8005a80 <CODEC_IO_Write>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	461a      	mov	r2, r3
 8004fd0:	69fb      	ldr	r3, [r7, #28]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 1 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x611, 0x00C0);
 8004fd6:	89fb      	ldrh	r3, [r7, #14]
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	22c0      	movs	r2, #192	; 0xc0
 8004fdc:	f240 6111 	movw	r1, #1553	; 0x611
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f000 fd4d 	bl	8005a80 <CODEC_IO_Write>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	461a      	mov	r2, r3
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	4413      	add	r3, r2
 8004fee:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 0 DAC path */
    counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 8004ff0:	89fb      	ldrh	r3, [r7, #14]
 8004ff2:	b2db      	uxtb	r3, r3
 8004ff4:	2210      	movs	r2, #16
 8004ff6:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f000 fd40 	bl	8005a80 <CODEC_IO_Write>
 8005000:	4603      	mov	r3, r0
 8005002:	461a      	mov	r2, r3
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	4413      	add	r3, r2
 8005008:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Left) */
    counter += CODEC_IO_Write(DeviceAddr, 0x612, 0x00C0);
 800500a:	89fb      	ldrh	r3, [r7, #14]
 800500c:	b2db      	uxtb	r3, r3
 800500e:	22c0      	movs	r2, #192	; 0xc0
 8005010:	f240 6112 	movw	r1, #1554	; 0x612
 8005014:	4618      	mov	r0, r3
 8005016:	f000 fd33 	bl	8005a80 <CODEC_IO_Write>
 800501a:	4603      	mov	r3, r0
 800501c:	461a      	mov	r2, r3
 800501e:	69fb      	ldr	r3, [r7, #28]
 8005020:	4413      	add	r3, r2
 8005022:	61fb      	str	r3, [r7, #28]

    /* Unmute DAC 2 (Right) */
    counter += CODEC_IO_Write(DeviceAddr, 0x613, 0x00C0);
 8005024:	89fb      	ldrh	r3, [r7, #14]
 8005026:	b2db      	uxtb	r3, r3
 8005028:	22c0      	movs	r2, #192	; 0xc0
 800502a:	f240 6113 	movw	r1, #1555	; 0x613
 800502e:	4618      	mov	r0, r3
 8005030:	f000 fd26 	bl	8005a80 <CODEC_IO_Write>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	4413      	add	r3, r2
 800503c:	61fb      	str	r3, [r7, #28]

    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 800503e:	89fb      	ldrh	r3, [r7, #14]
 8005040:	b2db      	uxtb	r3, r3
 8005042:	2210      	movs	r2, #16
 8005044:	f240 4122 	movw	r1, #1058	; 0x422
 8005048:	4618      	mov	r0, r3
 800504a:	f000 fd19 	bl	8005a80 <CODEC_IO_Write>
 800504e:	4603      	mov	r3, r0
 8005050:	461a      	mov	r2, r3
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	4413      	add	r3, r2
 8005056:	61fb      	str	r3, [r7, #28]
    
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 8005058:	7afa      	ldrb	r2, [r7, #11]
 800505a:	89fb      	ldrh	r3, [r7, #14]
 800505c:	4611      	mov	r1, r2
 800505e:	4618      	mov	r0, r3
 8005060:	f000 f984 	bl	800536c <wm8994_SetVolume>
  }

  if (input_device > 0) /* Audio input selected */
 8005064:	8afb      	ldrh	r3, [r7, #22]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80a6 	beq.w	80051b8 <wm8994_Init+0xd6c>
  {
    if ((input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_1) || (input_device == INPUT_DEVICE_DIGITAL_MICROPHONE_2))
 800506c:	8afb      	ldrh	r3, [r7, #22]
 800506e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005072:	d003      	beq.n	800507c <wm8994_Init+0xc30>
 8005074:	8afb      	ldrh	r3, [r7, #22]
 8005076:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800507a:	d12b      	bne.n	80050d4 <wm8994_Init+0xc88>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 800507c:	8b7b      	ldrh	r3, [r7, #26]
 800507e:	f043 0313 	orr.w	r3, r3, #19
 8005082:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 8005084:	89fb      	ldrh	r3, [r7, #14]
 8005086:	b2db      	uxtb	r3, r3
 8005088:	8b7a      	ldrh	r2, [r7, #26]
 800508a:	2101      	movs	r1, #1
 800508c:	4618      	mov	r0, r3
 800508e:	f000 fcf7 	bl	8005a80 <CODEC_IO_Write>
 8005092:	4603      	mov	r3, r0
 8005094:	461a      	mov	r2, r3
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	4413      	add	r3, r2
 800509a:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 800509c:	89fb      	ldrh	r3, [r7, #14]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2202      	movs	r2, #2
 80050a2:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 80050a6:	4618      	mov	r0, r3
 80050a8:	f000 fcea 	bl	8005a80 <CODEC_IO_Write>
 80050ac:	4603      	mov	r3, r0
 80050ae:	461a      	mov	r2, r3
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	61fb      	str	r3, [r7, #28]

      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x3800);
 80050b6:	89fb      	ldrh	r3, [r7, #14]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80050be:	f240 4111 	movw	r1, #1041	; 0x411
 80050c2:	4618      	mov	r0, r3
 80050c4:	f000 fcdc 	bl	8005a80 <CODEC_IO_Write>
 80050c8:	4603      	mov	r3, r0
 80050ca:	461a      	mov	r2, r3
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	4413      	add	r3, r2
 80050d0:	61fb      	str	r3, [r7, #28]
 80050d2:	e06b      	b.n	80051ac <wm8994_Init+0xd60>
    }
    else if(input_device == INPUT_DEVICE_DIGITAL_MIC1_MIC2)
 80050d4:	8afb      	ldrh	r3, [r7, #22]
 80050d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050da:	d139      	bne.n	8005150 <wm8994_Init+0xd04>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      power_mgnt_reg_1 |= 0x0013;
 80050dc:	8b7b      	ldrh	r3, [r7, #26]
 80050de:	f043 0313 	orr.w	r3, r3, #19
 80050e2:	837b      	strh	r3, [r7, #26]
      counter += CODEC_IO_Write(DeviceAddr, 0x01, power_mgnt_reg_1);
 80050e4:	89fb      	ldrh	r3, [r7, #14]
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	8b7a      	ldrh	r2, [r7, #26]
 80050ea:	2101      	movs	r1, #1
 80050ec:	4618      	mov	r0, r3
 80050ee:	f000 fcc7 	bl	8005a80 <CODEC_IO_Write>
 80050f2:	4603      	mov	r3, r0
 80050f4:	461a      	mov	r2, r3
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	4413      	add	r3, r2
 80050fa:	61fb      	str	r3, [r7, #28]

      /* ADC oversample enable */
      counter += CODEC_IO_Write(DeviceAddr, 0x620, 0x0002);
 80050fc:	89fb      	ldrh	r3, [r7, #14]
 80050fe:	b2db      	uxtb	r3, r3
 8005100:	2202      	movs	r2, #2
 8005102:	f44f 61c4 	mov.w	r1, #1568	; 0x620
 8005106:	4618      	mov	r0, r3
 8005108:	f000 fcba 	bl	8005a80 <CODEC_IO_Write>
 800510c:	4603      	mov	r3, r0
 800510e:	461a      	mov	r2, r3
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	4413      	add	r3, r2
 8005114:	61fb      	str	r3, [r7, #28]
    
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8005116:	89fb      	ldrh	r3, [r7, #14]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800511e:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8005122:	4618      	mov	r0, r3
 8005124:	f000 fcac 	bl	8005a80 <CODEC_IO_Write>
 8005128:	4603      	mov	r3, r0
 800512a:	461a      	mov	r2, r3
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	4413      	add	r3, r2
 8005130:	61fb      	str	r3, [r7, #28]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x411, 0x1800);      
 8005132:	89fb      	ldrh	r3, [r7, #14]
 8005134:	b2db      	uxtb	r3, r3
 8005136:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800513a:	f240 4111 	movw	r1, #1041	; 0x411
 800513e:	4618      	mov	r0, r3
 8005140:	f000 fc9e 	bl	8005a80 <CODEC_IO_Write>
 8005144:	4603      	mov	r3, r0
 8005146:	461a      	mov	r2, r3
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	4413      	add	r3, r2
 800514c:	61fb      	str	r3, [r7, #28]
 800514e:	e02d      	b.n	80051ac <wm8994_Init+0xd60>
    }    
    else if ((input_device == INPUT_DEVICE_INPUT_LINE_1) || (input_device == INPUT_DEVICE_INPUT_LINE_2))
 8005150:	8afb      	ldrh	r3, [r7, #22]
 8005152:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005156:	d003      	beq.n	8005160 <wm8994_Init+0xd14>
 8005158:	8afb      	ldrh	r3, [r7, #22]
 800515a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800515e:	d125      	bne.n	80051ac <wm8994_Init+0xd60>
    {

      /* Disable mute on IN1L, IN1L Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x18, 0x000B);
 8005160:	89fb      	ldrh	r3, [r7, #14]
 8005162:	b2db      	uxtb	r3, r3
 8005164:	220b      	movs	r2, #11
 8005166:	2118      	movs	r1, #24
 8005168:	4618      	mov	r0, r3
 800516a:	f000 fc89 	bl	8005a80 <CODEC_IO_Write>
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	61fb      	str	r3, [r7, #28]

      /* Disable mute on IN1R, IN1R Volume = +0dB */
      counter += CODEC_IO_Write(DeviceAddr, 0x1A, 0x000B);
 8005178:	89fb      	ldrh	r3, [r7, #14]
 800517a:	b2db      	uxtb	r3, r3
 800517c:	220b      	movs	r2, #11
 800517e:	211a      	movs	r1, #26
 8005180:	4618      	mov	r0, r3
 8005182:	f000 fc7d 	bl	8005a80 <CODEC_IO_Write>
 8005186:	4603      	mov	r3, r0
 8005188:	461a      	mov	r2, r3
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	4413      	add	r3, r2
 800518e:	61fb      	str	r3, [r7, #28]

      /* AIF ADC1 HPF enable, HPF cut = hifi mode fc=4Hz at fs=48kHz */
      counter += CODEC_IO_Write(DeviceAddr, 0x410, 0x1800);
 8005190:	89fb      	ldrh	r3, [r7, #14]
 8005192:	b2db      	uxtb	r3, r3
 8005194:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8005198:	f44f 6182 	mov.w	r1, #1040	; 0x410
 800519c:	4618      	mov	r0, r3
 800519e:	f000 fc6f 	bl	8005a80 <CODEC_IO_Write>
 80051a2:	4603      	mov	r3, r0
 80051a4:	461a      	mov	r2, r3
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	4413      	add	r3, r2
 80051aa:	61fb      	str	r3, [r7, #28]
    }
    /* Volume Control */
    wm8994_SetVolume(DeviceAddr, Volume);
 80051ac:	7afa      	ldrb	r2, [r7, #11]
 80051ae:	89fb      	ldrh	r3, [r7, #14]
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 f8da 	bl	800536c <wm8994_SetVolume>
  }
  /* Return communication control value */
  return counter;  
 80051b8:	69fb      	ldr	r3, [r7, #28]
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3720      	adds	r7, #32
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop

080051c4 <wm8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  None
  * @retval  None
  */
void wm8994_DeInit(void)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  /* Deinitialize Audio Codec interface */
  AUDIO_IO_DeInit();
 80051c8:	f7fd f86c 	bl	80022a4 <AUDIO_IO_DeInit>
}
 80051cc:	bf00      	nop
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <wm8994_ReadID>:
  * @brief  Get the WM8994 ID.
  * @param DeviceAddr: Device address on communication Bus.
  * @retval The WM8994 ID 
  */
uint32_t wm8994_ReadID(uint16_t DeviceAddr)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	4603      	mov	r3, r0
 80051d8:	80fb      	strh	r3, [r7, #6]
  /* Initialize the Control interface of the Audio Codec */
  AUDIO_IO_Init();
 80051da:	f7fd f859 	bl	8002290 <AUDIO_IO_Init>

  return ((uint32_t)AUDIO_IO_Read(DeviceAddr, WM8994_CHIPID_ADDR));
 80051de:	88fb      	ldrh	r3, [r7, #6]
 80051e0:	b2db      	uxtb	r3, r3
 80051e2:	2100      	movs	r1, #0
 80051e4:	4618      	mov	r0, r3
 80051e6:	f7fd f88f 	bl	8002308 <AUDIO_IO_Read>
 80051ea:	4603      	mov	r3, r0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3708      	adds	r7, #8
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <wm8994_Play>:
  * @note For this codec no Play options are required.
  * @param DeviceAddr: Device address on communication Bus.   
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Play(uint16_t DeviceAddr, uint16_t* pBuffer, uint16_t Size)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b084      	sub	sp, #16
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	6039      	str	r1, [r7, #0]
 80051fe:	80fb      	strh	r3, [r7, #6]
 8005200:	4613      	mov	r3, r2
 8005202:	80bb      	strh	r3, [r7, #4]
  uint32_t counter = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005208:	88fb      	ldrh	r3, [r7, #6]
 800520a:	2100      	movs	r1, #0
 800520c:	4618      	mov	r0, r3
 800520e:	f000 f9d1 	bl	80055b4 <wm8994_SetMute>
 8005212:	4602      	mov	r2, r0
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4413      	add	r3, r2
 8005218:	60fb      	str	r3, [r7, #12]
  
  return counter;
 800521a:	68fb      	ldr	r3, [r7, #12]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3710      	adds	r7, #16
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}

08005224 <wm8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Pause(uint16_t DeviceAddr)
{  
 8005224:	b580      	push	{r7, lr}
 8005226:	b084      	sub	sp, #16
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
 
  /* Pause the audio file playing */
  /* Mute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005232:	88fb      	ldrh	r3, [r7, #6]
 8005234:	2101      	movs	r1, #1
 8005236:	4618      	mov	r0, r3
 8005238:	f000 f9bc 	bl	80055b4 <wm8994_SetMute>
 800523c:	4602      	mov	r2, r0
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	4413      	add	r3, r2
 8005242:	60fb      	str	r3, [r7, #12]
  
  /* Put the Codec in Power save mode */
  counter += CODEC_IO_Write(DeviceAddr, 0x02, 0x01);
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	b2db      	uxtb	r3, r3
 8005248:	2201      	movs	r2, #1
 800524a:	2102      	movs	r1, #2
 800524c:	4618      	mov	r0, r3
 800524e:	f000 fc17 	bl	8005a80 <CODEC_IO_Write>
 8005252:	4603      	mov	r3, r0
 8005254:	461a      	mov	r2, r3
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	4413      	add	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
 
  return counter;
 800525c:	68fb      	ldr	r3, [r7, #12]
}
 800525e:	4618      	mov	r0, r3
 8005260:	3710      	adds	r7, #16
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <wm8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Resume(uint16_t DeviceAddr)
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	4603      	mov	r3, r0
 800526e:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	60fb      	str	r3, [r7, #12]
 
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	2100      	movs	r1, #0
 8005278:	4618      	mov	r0, r3
 800527a:	f000 f99b 	bl	80055b4 <wm8994_SetMute>
 800527e:	4602      	mov	r2, r0
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	60fb      	str	r3, [r7, #12]
  
  return counter;
 8005286:	68fb      	ldr	r3, [r7, #12]
}
 8005288:	4618      	mov	r0, r3
 800528a:	3710      	adds	r7, #16
 800528c:	46bd      	mov	sp, r7
 800528e:	bd80      	pop	{r7, pc}

08005290 <wm8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Stop(uint16_t DeviceAddr, uint32_t CodecPdwnMode)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	4603      	mov	r3, r0
 8005298:	6039      	str	r1, [r7, #0]
 800529a:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 800529c:	2300      	movs	r3, #0
 800529e:	60fb      	str	r3, [r7, #12]

  if (outputEnabled != 0)
 80052a0:	4b31      	ldr	r3, [pc, #196]	; (8005368 <wm8994_Stop+0xd8>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d05a      	beq.n	800535e <wm8994_Stop+0xce>
  {
    /* Mute the output first */
    counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 80052a8:	88fb      	ldrh	r3, [r7, #6]
 80052aa:	2101      	movs	r1, #1
 80052ac:	4618      	mov	r0, r3
 80052ae:	f000 f981 	bl	80055b4 <wm8994_SetMute>
 80052b2:	4602      	mov	r2, r0
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	4413      	add	r3, r2
 80052b8:	60fb      	str	r3, [r7, #12]

    if (CodecPdwnMode == CODEC_PDWN_SW)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b02      	cmp	r3, #2
 80052be:	d04e      	beq.n	800535e <wm8994_Stop+0xce>
      /* Only output mute required*/
    }
    else /* CODEC_PDWN_HW */
    {
      /* Mute the AIF1 Timeslot 0 DAC1 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80052c0:	88fb      	ldrh	r3, [r7, #6]
 80052c2:	b2db      	uxtb	r3, r3
 80052c4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052c8:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 fbd7 	bl	8005a80 <CODEC_IO_Write>
 80052d2:	4603      	mov	r3, r0
 80052d4:	461a      	mov	r2, r3
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	4413      	add	r3, r2
 80052da:	60fb      	str	r3, [r7, #12]

      /* Mute the AIF1 Timeslot 1 DAC2 path */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80052dc:	88fb      	ldrh	r3, [r7, #6]
 80052de:	b2db      	uxtb	r3, r3
 80052e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052e4:	f240 4122 	movw	r1, #1058	; 0x422
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 fbc9 	bl	8005a80 <CODEC_IO_Write>
 80052ee:	4603      	mov	r3, r0
 80052f0:	461a      	mov	r2, r3
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	4413      	add	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1L_TO_HPOUT1L */
      counter += CODEC_IO_Write(DeviceAddr, 0x2D, 0x0000);
 80052f8:	88fb      	ldrh	r3, [r7, #6]
 80052fa:	b2db      	uxtb	r3, r3
 80052fc:	2200      	movs	r2, #0
 80052fe:	212d      	movs	r1, #45	; 0x2d
 8005300:	4618      	mov	r0, r3
 8005302:	f000 fbbd 	bl	8005a80 <CODEC_IO_Write>
 8005306:	4603      	mov	r3, r0
 8005308:	461a      	mov	r2, r3
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	4413      	add	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1R_TO_HPOUT1R */
      counter += CODEC_IO_Write(DeviceAddr, 0x2E, 0x0000);
 8005310:	88fb      	ldrh	r3, [r7, #6]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2200      	movs	r2, #0
 8005316:	212e      	movs	r1, #46	; 0x2e
 8005318:	4618      	mov	r0, r3
 800531a:	f000 fbb1 	bl	8005a80 <CODEC_IO_Write>
 800531e:	4603      	mov	r3, r0
 8005320:	461a      	mov	r2, r3
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	4413      	add	r3, r2
 8005326:	60fb      	str	r3, [r7, #12]

      /* Disable DAC1 and DAC2 */
      counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0000);
 8005328:	88fb      	ldrh	r3, [r7, #6]
 800532a:	b2db      	uxtb	r3, r3
 800532c:	2200      	movs	r2, #0
 800532e:	2105      	movs	r1, #5
 8005330:	4618      	mov	r0, r3
 8005332:	f000 fba5 	bl	8005a80 <CODEC_IO_Write>
 8005336:	4603      	mov	r3, r0
 8005338:	461a      	mov	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4413      	add	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]

      /* Reset Codec by writing in 0x0000 address register */
      counter += CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8005340:	88fb      	ldrh	r3, [r7, #6]
 8005342:	b2db      	uxtb	r3, r3
 8005344:	2200      	movs	r2, #0
 8005346:	2100      	movs	r1, #0
 8005348:	4618      	mov	r0, r3
 800534a:	f000 fb99 	bl	8005a80 <CODEC_IO_Write>
 800534e:	4603      	mov	r3, r0
 8005350:	461a      	mov	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	4413      	add	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]

      outputEnabled = 0;
 8005358:	4b03      	ldr	r3, [pc, #12]	; (8005368 <wm8994_Stop+0xd8>)
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
    }
  }
  return counter;
 800535e:	68fb      	ldr	r3, [r7, #12]
}
 8005360:	4618      	mov	r0, r3
 8005362:	3710      	adds	r7, #16
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	200006f8 	.word	0x200006f8

0800536c <wm8994_SetVolume>:
  * @param Volume: a byte value from 0 to 255 (refer to codec registers 
  *         description for more details).
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetVolume(uint16_t DeviceAddr, uint8_t Volume)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	460a      	mov	r2, r1
 8005376:	80fb      	strh	r3, [r7, #6]
 8005378:	4613      	mov	r3, r2
 800537a:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0;
 800537c:	2300      	movs	r3, #0
 800537e:	60fb      	str	r3, [r7, #12]
  uint8_t convertedvol = VOLUME_CONVERT(Volume);
 8005380:	797b      	ldrb	r3, [r7, #5]
 8005382:	2b64      	cmp	r3, #100	; 0x64
 8005384:	d80b      	bhi.n	800539e <wm8994_SetVolume+0x32>
 8005386:	797a      	ldrb	r2, [r7, #5]
 8005388:	4613      	mov	r3, r2
 800538a:	019b      	lsls	r3, r3, #6
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	4a86      	ldr	r2, [pc, #536]	; (80055a8 <wm8994_SetVolume+0x23c>)
 8005390:	fb82 1203 	smull	r1, r2, r2, r3
 8005394:	1152      	asrs	r2, r2, #5
 8005396:	17db      	asrs	r3, r3, #31
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	b2db      	uxtb	r3, r3
 800539c:	e000      	b.n	80053a0 <wm8994_SetVolume+0x34>
 800539e:	2364      	movs	r3, #100	; 0x64
 80053a0:	72fb      	strb	r3, [r7, #11]

  /* Output volume */
  if (outputEnabled != 0)
 80053a2:	4b82      	ldr	r3, [pc, #520]	; (80055ac <wm8994_SetVolume+0x240>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 809b 	beq.w	80054e2 <wm8994_SetVolume+0x176>
  {
    if(convertedvol > 0x3E)
 80053ac:	7afb      	ldrb	r3, [r7, #11]
 80053ae:	2b3e      	cmp	r3, #62	; 0x3e
 80053b0:	d93d      	bls.n	800542e <wm8994_SetVolume+0xc2>
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 80053b2:	88fb      	ldrh	r3, [r7, #6]
 80053b4:	2100      	movs	r1, #0
 80053b6:	4618      	mov	r0, r3
 80053b8:	f000 f8fc 	bl	80055b4 <wm8994_SetMute>
 80053bc:	4602      	mov	r2, r0
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	4413      	add	r3, r2
 80053c2:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, 0x3F | 0x140);
 80053c4:	88fb      	ldrh	r3, [r7, #6]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	f240 127f 	movw	r2, #383	; 0x17f
 80053cc:	211c      	movs	r1, #28
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 fb56 	bl	8005a80 <CODEC_IO_Write>
 80053d4:	4603      	mov	r3, r0
 80053d6:	461a      	mov	r2, r3
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	4413      	add	r3, r2
 80053dc:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, 0x3F | 0x140);
 80053de:	88fb      	ldrh	r3, [r7, #6]
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	f240 127f 	movw	r2, #383	; 0x17f
 80053e6:	211d      	movs	r1, #29
 80053e8:	4618      	mov	r0, r3
 80053ea:	f000 fb49 	bl	8005a80 <CODEC_IO_Write>
 80053ee:	4603      	mov	r3, r0
 80053f0:	461a      	mov	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	4413      	add	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, 0x3F | 0x140);
 80053f8:	88fb      	ldrh	r3, [r7, #6]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f240 127f 	movw	r2, #383	; 0x17f
 8005400:	2126      	movs	r1, #38	; 0x26
 8005402:	4618      	mov	r0, r3
 8005404:	f000 fb3c 	bl	8005a80 <CODEC_IO_Write>
 8005408:	4603      	mov	r3, r0
 800540a:	461a      	mov	r2, r3
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4413      	add	r3, r2
 8005410:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, 0x3F | 0x140);
 8005412:	88fb      	ldrh	r3, [r7, #6]
 8005414:	b2db      	uxtb	r3, r3
 8005416:	f240 127f 	movw	r2, #383	; 0x17f
 800541a:	2127      	movs	r1, #39	; 0x27
 800541c:	4618      	mov	r0, r3
 800541e:	f000 fb2f 	bl	8005a80 <CODEC_IO_Write>
 8005422:	4603      	mov	r3, r0
 8005424:	461a      	mov	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	4413      	add	r3, r2
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	e059      	b.n	80054e2 <wm8994_SetVolume+0x176>
    }
    else if (Volume == 0)
 800542e:	797b      	ldrb	r3, [r7, #5]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d109      	bne.n	8005448 <wm8994_SetVolume+0xdc>
    {
      /* Mute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_ON);
 8005434:	88fb      	ldrh	r3, [r7, #6]
 8005436:	2101      	movs	r1, #1
 8005438:	4618      	mov	r0, r3
 800543a:	f000 f8bb 	bl	80055b4 <wm8994_SetMute>
 800543e:	4602      	mov	r2, r0
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4413      	add	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	e04c      	b.n	80054e2 <wm8994_SetVolume+0x176>
    }
    else
    {
      /* Unmute audio codec */
      counter += wm8994_SetMute(DeviceAddr, AUDIO_MUTE_OFF);
 8005448:	88fb      	ldrh	r3, [r7, #6]
 800544a:	2100      	movs	r1, #0
 800544c:	4618      	mov	r0, r3
 800544e:	f000 f8b1 	bl	80055b4 <wm8994_SetMute>
 8005452:	4602      	mov	r2, r0
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	4413      	add	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

      /* Left Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1C, convertedvol | 0x140);
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	b2d8      	uxtb	r0, r3
 800545e:	7afb      	ldrb	r3, [r7, #11]
 8005460:	b21b      	sxth	r3, r3
 8005462:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005466:	b21b      	sxth	r3, r3
 8005468:	b29b      	uxth	r3, r3
 800546a:	461a      	mov	r2, r3
 800546c:	211c      	movs	r1, #28
 800546e:	f000 fb07 	bl	8005a80 <CODEC_IO_Write>
 8005472:	4603      	mov	r3, r0
 8005474:	461a      	mov	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	4413      	add	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]

      /* Right Headphone Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x1D, convertedvol | 0x140);
 800547c:	88fb      	ldrh	r3, [r7, #6]
 800547e:	b2d8      	uxtb	r0, r3
 8005480:	7afb      	ldrb	r3, [r7, #11]
 8005482:	b21b      	sxth	r3, r3
 8005484:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 8005488:	b21b      	sxth	r3, r3
 800548a:	b29b      	uxth	r3, r3
 800548c:	461a      	mov	r2, r3
 800548e:	211d      	movs	r1, #29
 8005490:	f000 faf6 	bl	8005a80 <CODEC_IO_Write>
 8005494:	4603      	mov	r3, r0
 8005496:	461a      	mov	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4413      	add	r3, r2
 800549c:	60fb      	str	r3, [r7, #12]

      /* Left Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x26, convertedvol | 0x140);
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	b2d8      	uxtb	r0, r3
 80054a2:	7afb      	ldrb	r3, [r7, #11]
 80054a4:	b21b      	sxth	r3, r3
 80054a6:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80054aa:	b21b      	sxth	r3, r3
 80054ac:	b29b      	uxth	r3, r3
 80054ae:	461a      	mov	r2, r3
 80054b0:	2126      	movs	r1, #38	; 0x26
 80054b2:	f000 fae5 	bl	8005a80 <CODEC_IO_Write>
 80054b6:	4603      	mov	r3, r0
 80054b8:	461a      	mov	r2, r3
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]

      /* Right Speaker Volume */
      counter += CODEC_IO_Write(DeviceAddr, 0x27, convertedvol | 0x140);
 80054c0:	88fb      	ldrh	r3, [r7, #6]
 80054c2:	b2d8      	uxtb	r0, r3
 80054c4:	7afb      	ldrb	r3, [r7, #11]
 80054c6:	b21b      	sxth	r3, r3
 80054c8:	f443 73a0 	orr.w	r3, r3, #320	; 0x140
 80054cc:	b21b      	sxth	r3, r3
 80054ce:	b29b      	uxth	r3, r3
 80054d0:	461a      	mov	r2, r3
 80054d2:	2127      	movs	r1, #39	; 0x27
 80054d4:	f000 fad4 	bl	8005a80 <CODEC_IO_Write>
 80054d8:	4603      	mov	r3, r0
 80054da:	461a      	mov	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	4413      	add	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Input volume */
  if (inputEnabled != 0)
 80054e2:	4b33      	ldr	r3, [pc, #204]	; (80055b0 <wm8994_SetVolume+0x244>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d059      	beq.n	800559e <wm8994_SetVolume+0x232>
  {
    convertedvol = VOLUME_IN_CONVERT(Volume);
 80054ea:	797b      	ldrb	r3, [r7, #5]
 80054ec:	2b63      	cmp	r3, #99	; 0x63
 80054ee:	d80c      	bhi.n	800550a <wm8994_SetVolume+0x19e>
 80054f0:	797a      	ldrb	r2, [r7, #5]
 80054f2:	4613      	mov	r3, r2
 80054f4:	011b      	lsls	r3, r3, #4
 80054f6:	1a9b      	subs	r3, r3, r2
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	4a2b      	ldr	r2, [pc, #172]	; (80055a8 <wm8994_SetVolume+0x23c>)
 80054fc:	fb82 1203 	smull	r1, r2, r2, r3
 8005500:	1152      	asrs	r2, r2, #5
 8005502:	17db      	asrs	r3, r3, #31
 8005504:	1ad3      	subs	r3, r2, r3
 8005506:	b2db      	uxtb	r3, r3
 8005508:	e000      	b.n	800550c <wm8994_SetVolume+0x1a0>
 800550a:	23ef      	movs	r3, #239	; 0xef
 800550c:	72fb      	strb	r3, [r7, #11]

    /* Left AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x400, convertedvol | 0x100);
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	b2d8      	uxtb	r0, r3
 8005512:	7afb      	ldrb	r3, [r7, #11]
 8005514:	b21b      	sxth	r3, r3
 8005516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551a:	b21b      	sxth	r3, r3
 800551c:	b29b      	uxth	r3, r3
 800551e:	461a      	mov	r2, r3
 8005520:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005524:	f000 faac 	bl	8005a80 <CODEC_IO_Write>
 8005528:	4603      	mov	r3, r0
 800552a:	461a      	mov	r2, r3
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4413      	add	r3, r2
 8005530:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC1 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x401, convertedvol | 0x100);
 8005532:	88fb      	ldrh	r3, [r7, #6]
 8005534:	b2d8      	uxtb	r0, r3
 8005536:	7afb      	ldrb	r3, [r7, #11]
 8005538:	b21b      	sxth	r3, r3
 800553a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553e:	b21b      	sxth	r3, r3
 8005540:	b29b      	uxth	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	f240 4101 	movw	r1, #1025	; 0x401
 8005548:	f000 fa9a 	bl	8005a80 <CODEC_IO_Write>
 800554c:	4603      	mov	r3, r0
 800554e:	461a      	mov	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4413      	add	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

    /* Left AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x404, convertedvol | 0x100);
 8005556:	88fb      	ldrh	r3, [r7, #6]
 8005558:	b2d8      	uxtb	r0, r3
 800555a:	7afb      	ldrb	r3, [r7, #11]
 800555c:	b21b      	sxth	r3, r3
 800555e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005562:	b21b      	sxth	r3, r3
 8005564:	b29b      	uxth	r3, r3
 8005566:	461a      	mov	r2, r3
 8005568:	f240 4104 	movw	r1, #1028	; 0x404
 800556c:	f000 fa88 	bl	8005a80 <CODEC_IO_Write>
 8005570:	4603      	mov	r3, r0
 8005572:	461a      	mov	r2, r3
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

    /* Right AIF1 ADC2 volume */
    counter += CODEC_IO_Write(DeviceAddr, 0x405, convertedvol | 0x100);
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	b2d8      	uxtb	r0, r3
 800557e:	7afb      	ldrb	r3, [r7, #11]
 8005580:	b21b      	sxth	r3, r3
 8005582:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005586:	b21b      	sxth	r3, r3
 8005588:	b29b      	uxth	r3, r3
 800558a:	461a      	mov	r2, r3
 800558c:	f240 4105 	movw	r1, #1029	; 0x405
 8005590:	f000 fa76 	bl	8005a80 <CODEC_IO_Write>
 8005594:	4603      	mov	r3, r0
 8005596:	461a      	mov	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	4413      	add	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]
  }
  return counter;
 800559e:	68fb      	ldr	r3, [r7, #12]
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	51eb851f 	.word	0x51eb851f
 80055ac:	200006f8 	.word	0x200006f8
 80055b0:	200006fc 	.word	0x200006fc

080055b4 <wm8994_SetMute>:
  * @param Cmd: AUDIO_MUTE_ON to enable the mute or AUDIO_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetMute(uint16_t DeviceAddr, uint32_t Cmd)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b084      	sub	sp, #16
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	6039      	str	r1, [r7, #0]
 80055be:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80055c0:	2300      	movs	r3, #0
 80055c2:	60fb      	str	r3, [r7, #12]
  
  if (outputEnabled != 0)
 80055c4:	4b21      	ldr	r3, [pc, #132]	; (800564c <wm8994_SetMute+0x98>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d039      	beq.n	8005640 <wm8994_SetMute+0x8c>
  {
    /* Set the Mute mode */
    if(Cmd == AUDIO_MUTE_ON)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d11c      	bne.n	800560c <wm8994_SetMute+0x58>
    {
      /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0200);
 80055d2:	88fb      	ldrh	r3, [r7, #6]
 80055d4:	b2db      	uxtb	r3, r3
 80055d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055da:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fa4e 	bl	8005a80 <CODEC_IO_Write>
 80055e4:	4603      	mov	r3, r0
 80055e6:	461a      	mov	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

      /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0200);
 80055ee:	88fb      	ldrh	r3, [r7, #6]
 80055f0:	b2db      	uxtb	r3, r3
 80055f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055f6:	f240 4122 	movw	r1, #1058	; 0x422
 80055fa:	4618      	mov	r0, r3
 80055fc:	f000 fa40 	bl	8005a80 <CODEC_IO_Write>
 8005600:	4603      	mov	r3, r0
 8005602:	461a      	mov	r2, r3
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]
 800560a:	e019      	b.n	8005640 <wm8994_SetMute+0x8c>
    }
    else /* AUDIO_MUTE_OFF Disable the Mute */
    {
      /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x420, 0x0010);
 800560c:	88fb      	ldrh	r3, [r7, #6]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2210      	movs	r2, #16
 8005612:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8005616:	4618      	mov	r0, r3
 8005618:	f000 fa32 	bl	8005a80 <CODEC_IO_Write>
 800561c:	4603      	mov	r3, r0
 800561e:	461a      	mov	r2, r3
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	4413      	add	r3, r2
 8005624:	60fb      	str	r3, [r7, #12]

      /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
      counter += CODEC_IO_Write(DeviceAddr, 0x422, 0x0010);
 8005626:	88fb      	ldrh	r3, [r7, #6]
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2210      	movs	r2, #16
 800562c:	f240 4122 	movw	r1, #1058	; 0x422
 8005630:	4618      	mov	r0, r3
 8005632:	f000 fa25 	bl	8005a80 <CODEC_IO_Write>
 8005636:	4603      	mov	r3, r0
 8005638:	461a      	mov	r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
    }
  }
  return counter;
 8005640:	68fb      	ldr	r3, [r7, #12]
}
 8005642:	4618      	mov	r0, r3
 8005644:	3710      	adds	r7, #16
 8005646:	46bd      	mov	sp, r7
 8005648:	bd80      	pop	{r7, pc}
 800564a:	bf00      	nop
 800564c:	200006f8 	.word	0x200006f8

08005650 <wm8994_SetOutputMode>:
  * @param Output: specifies the audio output target: OUTPUT_DEVICE_SPEAKER,
  *         OUTPUT_DEVICE_HEADPHONE, OUTPUT_DEVICE_BOTH or OUTPUT_DEVICE_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetOutputMode(uint16_t DeviceAddr, uint8_t Output)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	460a      	mov	r2, r1
 800565a:	80fb      	strh	r3, [r7, #6]
 800565c:	4613      	mov	r3, r2
 800565e:	717b      	strb	r3, [r7, #5]
  uint32_t counter = 0; 
 8005660:	2300      	movs	r3, #0
 8005662:	60fb      	str	r3, [r7, #12]
  
  switch (Output) 
 8005664:	797b      	ldrb	r3, [r7, #5]
 8005666:	2b03      	cmp	r3, #3
 8005668:	f000 808c 	beq.w	8005784 <wm8994_SetOutputMode+0x134>
 800566c:	2b03      	cmp	r3, #3
 800566e:	f300 80cb 	bgt.w	8005808 <wm8994_SetOutputMode+0x1b8>
 8005672:	2b01      	cmp	r3, #1
 8005674:	d002      	beq.n	800567c <wm8994_SetOutputMode+0x2c>
 8005676:	2b02      	cmp	r3, #2
 8005678:	d042      	beq.n	8005700 <wm8994_SetOutputMode+0xb0>
 800567a:	e0c5      	b.n	8005808 <wm8994_SetOutputMode+0x1b8>
  {
  case OUTPUT_DEVICE_SPEAKER:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0C0C);
 800567c:	88fb      	ldrh	r3, [r7, #6]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	f640 420c 	movw	r2, #3084	; 0xc0c
 8005684:	2105      	movs	r1, #5
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f9fa 	bl	8005a80 <CODEC_IO_Write>
 800568c:	4603      	mov	r3, r0
 800568e:	461a      	mov	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	4413      	add	r3, r2
 8005694:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0000);
 8005696:	88fb      	ldrh	r3, [r7, #6]
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2200      	movs	r2, #0
 800569c:	f240 6101 	movw	r1, #1537	; 0x601
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 f9ed 	bl	8005a80 <CODEC_IO_Write>
 80056a6:	4603      	mov	r3, r0
 80056a8:	461a      	mov	r2, r3
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0000);
 80056b0:	88fb      	ldrh	r3, [r7, #6]
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2200      	movs	r2, #0
 80056b6:	f240 6102 	movw	r1, #1538	; 0x602
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 f9e0 	bl	8005a80 <CODEC_IO_Write>
 80056c0:	4603      	mov	r3, r0
 80056c2:	461a      	mov	r2, r3
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80056ca:	88fb      	ldrh	r3, [r7, #6]
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	2202      	movs	r2, #2
 80056d0:	f240 6104 	movw	r1, #1540	; 0x604
 80056d4:	4618      	mov	r0, r3
 80056d6:	f000 f9d3 	bl	8005a80 <CODEC_IO_Write>
 80056da:	4603      	mov	r3, r0
 80056dc:	461a      	mov	r2, r3
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	2202      	movs	r2, #2
 80056ea:	f240 6105 	movw	r1, #1541	; 0x605
 80056ee:	4618      	mov	r0, r3
 80056f0:	f000 f9c6 	bl	8005a80 <CODEC_IO_Write>
 80056f4:	4603      	mov	r3, r0
 80056f6:	461a      	mov	r2, r3
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4413      	add	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
    break;
 80056fe:	e0c5      	b.n	800588c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_HEADPHONE:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005700:	88fb      	ldrh	r3, [r7, #6]
 8005702:	b2db      	uxtb	r3, r3
 8005704:	f240 3203 	movw	r2, #771	; 0x303
 8005708:	2105      	movs	r1, #5
 800570a:	4618      	mov	r0, r3
 800570c:	f000 f9b8 	bl	8005a80 <CODEC_IO_Write>
 8005710:	4603      	mov	r3, r0
 8005712:	461a      	mov	r2, r3
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800571a:	88fb      	ldrh	r3, [r7, #6]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2201      	movs	r2, #1
 8005720:	f240 6101 	movw	r1, #1537	; 0x601
 8005724:	4618      	mov	r0, r3
 8005726:	f000 f9ab 	bl	8005a80 <CODEC_IO_Write>
 800572a:	4603      	mov	r3, r0
 800572c:	461a      	mov	r2, r3
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	4413      	add	r3, r2
 8005732:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 8005734:	88fb      	ldrh	r3, [r7, #6]
 8005736:	b2db      	uxtb	r3, r3
 8005738:	2201      	movs	r2, #1
 800573a:	f240 6102 	movw	r1, #1538	; 0x602
 800573e:	4618      	mov	r0, r3
 8005740:	f000 f99e 	bl	8005a80 <CODEC_IO_Write>
 8005744:	4603      	mov	r3, r0
 8005746:	461a      	mov	r2, r3
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 800574e:	88fb      	ldrh	r3, [r7, #6]
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2200      	movs	r2, #0
 8005754:	f240 6104 	movw	r1, #1540	; 0x604
 8005758:	4618      	mov	r0, r3
 800575a:	f000 f991 	bl	8005a80 <CODEC_IO_Write>
 800575e:	4603      	mov	r3, r0
 8005760:	461a      	mov	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	4413      	add	r3, r2
 8005766:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005768:	88fb      	ldrh	r3, [r7, #6]
 800576a:	b2db      	uxtb	r3, r3
 800576c:	2200      	movs	r2, #0
 800576e:	f240 6105 	movw	r1, #1541	; 0x605
 8005772:	4618      	mov	r0, r3
 8005774:	f000 f984 	bl	8005a80 <CODEC_IO_Write>
 8005778:	4603      	mov	r3, r0
 800577a:	461a      	mov	r2, r3
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	4413      	add	r3, r2
 8005780:	60fb      	str	r3, [r7, #12]
    break;
 8005782:	e083      	b.n	800588c <wm8994_SetOutputMode+0x23c>
    
  case OUTPUT_DEVICE_BOTH:
    /* Enable DAC1 (Left), Enable DAC1 (Right), 
    also Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303 | 0x0C0C);
 8005784:	88fb      	ldrh	r3, [r7, #6]
 8005786:	b2db      	uxtb	r3, r3
 8005788:	f640 720f 	movw	r2, #3855	; 0xf0f
 800578c:	2105      	movs	r1, #5
 800578e:	4618      	mov	r0, r3
 8005790:	f000 f976 	bl	8005a80 <CODEC_IO_Write>
 8005794:	4603      	mov	r3, r0
 8005796:	461a      	mov	r2, r3
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 800579e:	88fb      	ldrh	r3, [r7, #6]
 80057a0:	b2db      	uxtb	r3, r3
 80057a2:	2201      	movs	r2, #1
 80057a4:	f240 6101 	movw	r1, #1537	; 0x601
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 f969 	bl	8005a80 <CODEC_IO_Write>
 80057ae:	4603      	mov	r3, r0
 80057b0:	461a      	mov	r2, r3
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 80057b8:	88fb      	ldrh	r3, [r7, #6]
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	2201      	movs	r2, #1
 80057be:	f240 6102 	movw	r1, #1538	; 0x602
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 f95c 	bl	8005a80 <CODEC_IO_Write>
 80057c8:	4603      	mov	r3, r0
 80057ca:	461a      	mov	r2, r3
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	4413      	add	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0002);
 80057d2:	88fb      	ldrh	r3, [r7, #6]
 80057d4:	b2db      	uxtb	r3, r3
 80057d6:	2202      	movs	r2, #2
 80057d8:	f240 6104 	movw	r1, #1540	; 0x604
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 f94f 	bl	8005a80 <CODEC_IO_Write>
 80057e2:	4603      	mov	r3, r0
 80057e4:	461a      	mov	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	4413      	add	r3, r2
 80057ea:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0002);
 80057ec:	88fb      	ldrh	r3, [r7, #6]
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2202      	movs	r2, #2
 80057f2:	f240 6105 	movw	r1, #1541	; 0x605
 80057f6:	4618      	mov	r0, r3
 80057f8:	f000 f942 	bl	8005a80 <CODEC_IO_Write>
 80057fc:	4603      	mov	r3, r0
 80057fe:	461a      	mov	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	4413      	add	r3, r2
 8005804:	60fb      	str	r3, [r7, #12]
    break;
 8005806:	e041      	b.n	800588c <wm8994_SetOutputMode+0x23c>
    
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right), 
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    counter += CODEC_IO_Write(DeviceAddr, 0x05, 0x0303);
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	b2db      	uxtb	r3, r3
 800580c:	f240 3203 	movw	r2, #771	; 0x303
 8005810:	2105      	movs	r1, #5
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f934 	bl	8005a80 <CODEC_IO_Write>
 8005818:	4603      	mov	r3, r0
 800581a:	461a      	mov	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	4413      	add	r3, r2
 8005820:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x601, 0x0001);
 8005822:	88fb      	ldrh	r3, [r7, #6]
 8005824:	b2db      	uxtb	r3, r3
 8005826:	2201      	movs	r2, #1
 8005828:	f240 6101 	movw	r1, #1537	; 0x601
 800582c:	4618      	mov	r0, r3
 800582e:	f000 f927 	bl	8005a80 <CODEC_IO_Write>
 8005832:	4603      	mov	r3, r0
 8005834:	461a      	mov	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	4413      	add	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x602, 0x0001);
 800583c:	88fb      	ldrh	r3, [r7, #6]
 800583e:	b2db      	uxtb	r3, r3
 8005840:	2201      	movs	r2, #1
 8005842:	f240 6102 	movw	r1, #1538	; 0x602
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f91a 	bl	8005a80 <CODEC_IO_Write>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	4413      	add	r3, r2
 8005854:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x604, 0x0000);
 8005856:	88fb      	ldrh	r3, [r7, #6]
 8005858:	b2db      	uxtb	r3, r3
 800585a:	2200      	movs	r2, #0
 800585c:	f240 6104 	movw	r1, #1540	; 0x604
 8005860:	4618      	mov	r0, r3
 8005862:	f000 f90d 	bl	8005a80 <CODEC_IO_Write>
 8005866:	4603      	mov	r3, r0
 8005868:	461a      	mov	r2, r3
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	4413      	add	r3, r2
 800586e:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    counter += CODEC_IO_Write(DeviceAddr, 0x605, 0x0000);
 8005870:	88fb      	ldrh	r3, [r7, #6]
 8005872:	b2db      	uxtb	r3, r3
 8005874:	2200      	movs	r2, #0
 8005876:	f240 6105 	movw	r1, #1541	; 0x605
 800587a:	4618      	mov	r0, r3
 800587c:	f000 f900 	bl	8005a80 <CODEC_IO_Write>
 8005880:	4603      	mov	r3, r0
 8005882:	461a      	mov	r2, r3
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	4413      	add	r3, r2
 8005888:	60fb      	str	r3, [r7, #12]
    break;    
 800588a:	bf00      	nop
  }  
  return counter;
 800588c:	68fb      	ldr	r3, [r7, #12]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
	...

08005898 <wm8994_SetFrequency>:
  * @param DeviceAddr: Device address on communication Bus.
  * @param AudioFreq: Audio frequency used to play the audio stream.
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_SetFrequency(uint16_t DeviceAddr, uint32_t AudioFreq)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	4603      	mov	r3, r0
 80058a0:	6039      	str	r1, [r7, #0]
 80058a2:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 80058a4:	2300      	movs	r3, #0
 80058a6:	60fb      	str	r3, [r7, #12]
 
  /*  Clock Configurations */
  switch (AudioFreq)
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	4a64      	ldr	r2, [pc, #400]	; (8005a3c <wm8994_SetFrequency+0x1a4>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d079      	beq.n	80059a4 <wm8994_SetFrequency+0x10c>
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	4a62      	ldr	r2, [pc, #392]	; (8005a3c <wm8994_SetFrequency+0x1a4>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	f200 80ad 	bhi.w	8005a14 <wm8994_SetFrequency+0x17c>
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d061      	beq.n	8005988 <wm8994_SetFrequency+0xf0>
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80058ca:	4293      	cmp	r3, r2
 80058cc:	f200 80a2 	bhi.w	8005a14 <wm8994_SetFrequency+0x17c>
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	f64a 4244 	movw	r2, #44100	; 0xac44
 80058d6:	4293      	cmp	r3, r2
 80058d8:	f000 808e 	beq.w	80059f8 <wm8994_SetFrequency+0x160>
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	f64a 4244 	movw	r2, #44100	; 0xac44
 80058e2:	4293      	cmp	r3, r2
 80058e4:	f200 8096 	bhi.w	8005a14 <wm8994_SetFrequency+0x17c>
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80058ee:	d03d      	beq.n	800596c <wm8994_SetFrequency+0xd4>
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	f5b3 4ffa 	cmp.w	r3, #32000	; 0x7d00
 80058f6:	f200 808d 	bhi.w	8005a14 <wm8994_SetFrequency+0x17c>
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	f245 6222 	movw	r2, #22050	; 0x5622
 8005900:	4293      	cmp	r3, r2
 8005902:	d06b      	beq.n	80059dc <wm8994_SetFrequency+0x144>
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	f245 6222 	movw	r2, #22050	; 0x5622
 800590a:	4293      	cmp	r3, r2
 800590c:	f200 8082 	bhi.w	8005a14 <wm8994_SetFrequency+0x17c>
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8005916:	d01b      	beq.n	8005950 <wm8994_SetFrequency+0xb8>
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 800591e:	d879      	bhi.n	8005a14 <wm8994_SetFrequency+0x17c>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8005926:	d005      	beq.n	8005934 <wm8994_SetFrequency+0x9c>
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	f642 3211 	movw	r2, #11025	; 0x2b11
 800592e:	4293      	cmp	r3, r2
 8005930:	d046      	beq.n	80059c0 <wm8994_SetFrequency+0x128>
 8005932:	e06f      	b.n	8005a14 <wm8994_SetFrequency+0x17c>
  {
  case  AUDIO_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0003);
 8005934:	88fb      	ldrh	r3, [r7, #6]
 8005936:	b2db      	uxtb	r3, r3
 8005938:	2203      	movs	r2, #3
 800593a:	f44f 7104 	mov.w	r1, #528	; 0x210
 800593e:	4618      	mov	r0, r3
 8005940:	f000 f89e 	bl	8005a80 <CODEC_IO_Write>
 8005944:	4603      	mov	r3, r0
 8005946:	461a      	mov	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	4413      	add	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]
    break;
 800594e:	e06f      	b.n	8005a30 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0033);
 8005950:	88fb      	ldrh	r3, [r7, #6]
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2233      	movs	r2, #51	; 0x33
 8005956:	f44f 7104 	mov.w	r1, #528	; 0x210
 800595a:	4618      	mov	r0, r3
 800595c:	f000 f890 	bl	8005a80 <CODEC_IO_Write>
 8005960:	4603      	mov	r3, r0
 8005962:	461a      	mov	r2, r3
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4413      	add	r3, r2
 8005968:	60fb      	str	r3, [r7, #12]
    break;
 800596a:	e061      	b.n	8005a30 <wm8994_SetFrequency+0x198>

  case  AUDIO_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0063);
 800596c:	88fb      	ldrh	r3, [r7, #6]
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2263      	movs	r2, #99	; 0x63
 8005972:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005976:	4618      	mov	r0, r3
 8005978:	f000 f882 	bl	8005a80 <CODEC_IO_Write>
 800597c:	4603      	mov	r3, r0
 800597e:	461a      	mov	r2, r3
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	4413      	add	r3, r2
 8005984:	60fb      	str	r3, [r7, #12]
    break;
 8005986:	e053      	b.n	8005a30 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_48K:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005988:	88fb      	ldrh	r3, [r7, #6]
 800598a:	b2db      	uxtb	r3, r3
 800598c:	2283      	movs	r2, #131	; 0x83
 800598e:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005992:	4618      	mov	r0, r3
 8005994:	f000 f874 	bl	8005a80 <CODEC_IO_Write>
 8005998:	4603      	mov	r3, r0
 800599a:	461a      	mov	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4413      	add	r3, r2
 80059a0:	60fb      	str	r3, [r7, #12]
    break;
 80059a2:	e045      	b.n	8005a30 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x00A3);
 80059a4:	88fb      	ldrh	r3, [r7, #6]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	22a3      	movs	r2, #163	; 0xa3
 80059aa:	f44f 7104 	mov.w	r1, #528	; 0x210
 80059ae:	4618      	mov	r0, r3
 80059b0:	f000 f866 	bl	8005a80 <CODEC_IO_Write>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	4413      	add	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]
    break;
 80059be:	e037      	b.n	8005a30 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0013);
 80059c0:	88fb      	ldrh	r3, [r7, #6]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2213      	movs	r2, #19
 80059c6:	f44f 7104 	mov.w	r1, #528	; 0x210
 80059ca:	4618      	mov	r0, r3
 80059cc:	f000 f858 	bl	8005a80 <CODEC_IO_Write>
 80059d0:	4603      	mov	r3, r0
 80059d2:	461a      	mov	r2, r3
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	4413      	add	r3, r2
 80059d8:	60fb      	str	r3, [r7, #12]
    break;
 80059da:	e029      	b.n	8005a30 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0043);
 80059dc:	88fb      	ldrh	r3, [r7, #6]
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2243      	movs	r2, #67	; 0x43
 80059e2:	f44f 7104 	mov.w	r1, #528	; 0x210
 80059e6:	4618      	mov	r0, r3
 80059e8:	f000 f84a 	bl	8005a80 <CODEC_IO_Write>
 80059ec:	4603      	mov	r3, r0
 80059ee:	461a      	mov	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]
    break;
 80059f6:	e01b      	b.n	8005a30 <wm8994_SetFrequency+0x198>
    
  case  AUDIO_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0073);
 80059f8:	88fb      	ldrh	r3, [r7, #6]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2273      	movs	r2, #115	; 0x73
 80059fe:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005a02:	4618      	mov	r0, r3
 8005a04:	f000 f83c 	bl	8005a80 <CODEC_IO_Write>
 8005a08:	4603      	mov	r3, r0
 8005a0a:	461a      	mov	r2, r3
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	4413      	add	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]
    break; 
 8005a12:	e00d      	b.n	8005a30 <wm8994_SetFrequency+0x198>
    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */ 
    counter += CODEC_IO_Write(DeviceAddr, 0x210, 0x0083);
 8005a14:	88fb      	ldrh	r3, [r7, #6]
 8005a16:	b2db      	uxtb	r3, r3
 8005a18:	2283      	movs	r2, #131	; 0x83
 8005a1a:	f44f 7104 	mov.w	r1, #528	; 0x210
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f82e 	bl	8005a80 <CODEC_IO_Write>
 8005a24:	4603      	mov	r3, r0
 8005a26:	461a      	mov	r2, r3
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	60fb      	str	r3, [r7, #12]
    break; 
 8005a2e:	bf00      	nop
  }
  return counter;
 8005a30:	68fb      	ldr	r3, [r7, #12]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
 8005a3a:	bf00      	nop
 8005a3c:	00017700 	.word	0x00017700

08005a40 <wm8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param DeviceAddr: Device address on communication Bus. 
  * @retval 0 if correct communication, else wrong communication
  */
uint32_t wm8994_Reset(uint16_t DeviceAddr)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b084      	sub	sp, #16
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	4603      	mov	r3, r0
 8005a48:	80fb      	strh	r3, [r7, #6]
  uint32_t counter = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  counter = CODEC_IO_Write(DeviceAddr, 0x0000, 0x0000);
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2200      	movs	r2, #0
 8005a54:	2100      	movs	r1, #0
 8005a56:	4618      	mov	r0, r3
 8005a58:	f000 f812 	bl	8005a80 <CODEC_IO_Write>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	60fb      	str	r3, [r7, #12]
  outputEnabled = 0;
 8005a60:	4b05      	ldr	r3, [pc, #20]	; (8005a78 <wm8994_Reset+0x38>)
 8005a62:	2200      	movs	r2, #0
 8005a64:	601a      	str	r2, [r3, #0]
  inputEnabled=0;
 8005a66:	4b05      	ldr	r3, [pc, #20]	; (8005a7c <wm8994_Reset+0x3c>)
 8005a68:	2200      	movs	r2, #0
 8005a6a:	601a      	str	r2, [r3, #0]

  return counter;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3710      	adds	r7, #16
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
 8005a76:	bf00      	nop
 8005a78:	200006f8 	.word	0x200006f8
 8005a7c:	200006fc 	.word	0x200006fc

08005a80 <CODEC_IO_Write>:
  * @param  Reg: Reg address 
  * @param  Value: Data to be written
  * @retval None
  */
static uint8_t CODEC_IO_Write(uint8_t Addr, uint16_t Reg, uint16_t Value)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	4603      	mov	r3, r0
 8005a88:	71fb      	strb	r3, [r7, #7]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	80bb      	strh	r3, [r7, #4]
 8005a8e:	4613      	mov	r3, r2
 8005a90:	807b      	strh	r3, [r7, #2]
  uint32_t result = 0;
 8005a92:	2300      	movs	r3, #0
 8005a94:	60fb      	str	r3, [r7, #12]
  
 AUDIO_IO_Write(Addr, Reg, Value);
 8005a96:	887a      	ldrh	r2, [r7, #2]
 8005a98:	88b9      	ldrh	r1, [r7, #4]
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fc fc09 	bl	80022b4 <AUDIO_IO_Write>
#ifdef VERIFY_WRITTENDATA
  /* Verify that the data has been correctly written */
  result = (AUDIO_IO_Read(Addr, Reg) == Value)? 0:1;
#endif /* VERIFY_WRITTENDATA */
  
  return result;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	b2db      	uxtb	r3, r3
}
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	3710      	adds	r7, #16
 8005aaa:	46bd      	mov	sp, r7
 8005aac:	bd80      	pop	{r7, pc}
	...

08005ab0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005ab0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005ae8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005ab4:	480d      	ldr	r0, [pc, #52]	; (8005aec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8005ab6:	490e      	ldr	r1, [pc, #56]	; (8005af0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005ab8:	4a0e      	ldr	r2, [pc, #56]	; (8005af4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005aba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005abc:	e002      	b.n	8005ac4 <LoopCopyDataInit>

08005abe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005abe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ac0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ac2:	3304      	adds	r3, #4

08005ac4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ac4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ac6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ac8:	d3f9      	bcc.n	8005abe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005aca:	4a0b      	ldr	r2, [pc, #44]	; (8005af8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005acc:	4c0b      	ldr	r4, [pc, #44]	; (8005afc <LoopFillZerobss+0x26>)
  movs r3, #0
 8005ace:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ad0:	e001      	b.n	8005ad6 <LoopFillZerobss>

08005ad2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ad2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ad4:	3204      	adds	r2, #4

08005ad6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ad6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ad8:	d3fb      	bcc.n	8005ad2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005ada:	f7fe fca5 	bl	8004428 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005ade:	f00d fc89 	bl	80133f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005ae2:	f7fb f9f9 	bl	8000ed8 <main>
  bx  lr    
 8005ae6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005ae8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8005aec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005af0:	200000e8 	.word	0x200000e8
  ldr r2, =_sidata
 8005af4:	08015e98 	.word	0x08015e98
  ldr r2, =_sbss
 8005af8:	200000e8 	.word	0x200000e8
  ldr r4, =_ebss
 8005afc:	2000978c 	.word	0x2000978c

08005b00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b00:	e7fe      	b.n	8005b00 <ADC_IRQHandler>
	...

08005b04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8005b08:	4b08      	ldr	r3, [pc, #32]	; (8005b2c <HAL_Init+0x28>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a07      	ldr	r2, [pc, #28]	; (8005b2c <HAL_Init+0x28>)
 8005b0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b12:	6013      	str	r3, [r2, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b14:	2003      	movs	r0, #3
 8005b16:	f000 f8fc 	bl	8005d12 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b1a:	2000      	movs	r0, #0
 8005b1c:	f7fe fb9a 	bl	8004254 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005b20:	f7fd ff6a 	bl	80039f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	40023c00 	.word	0x40023c00

08005b30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b30:	b480      	push	{r7}
 8005b32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b34:	4b06      	ldr	r3, [pc, #24]	; (8005b50 <HAL_IncTick+0x20>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	461a      	mov	r2, r3
 8005b3a:	4b06      	ldr	r3, [pc, #24]	; (8005b54 <HAL_IncTick+0x24>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	4413      	add	r3, r2
 8005b40:	4a04      	ldr	r2, [pc, #16]	; (8005b54 <HAL_IncTick+0x24>)
 8005b42:	6013      	str	r3, [r2, #0]
}
 8005b44:	bf00      	nop
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr
 8005b4e:	bf00      	nop
 8005b50:	2000007c 	.word	0x2000007c
 8005b54:	200092cc 	.word	0x200092cc

08005b58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	af00      	add	r7, sp, #0
  return uwTick;
 8005b5c:	4b03      	ldr	r3, [pc, #12]	; (8005b6c <HAL_GetTick+0x14>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	46bd      	mov	sp, r7
 8005b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b68:	4770      	bx	lr
 8005b6a:	bf00      	nop
 8005b6c:	200092cc 	.word	0x200092cc

08005b70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b78:	f7ff ffee 	bl	8005b58 <HAL_GetTick>
 8005b7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b88:	d005      	beq.n	8005b96 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b8a:	4b0a      	ldr	r3, [pc, #40]	; (8005bb4 <HAL_Delay+0x44>)
 8005b8c:	781b      	ldrb	r3, [r3, #0]
 8005b8e:	461a      	mov	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	4413      	add	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b96:	bf00      	nop
 8005b98:	f7ff ffde 	bl	8005b58 <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	68bb      	ldr	r3, [r7, #8]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d8f7      	bhi.n	8005b98 <HAL_Delay+0x28>
  {
  }
}
 8005ba8:	bf00      	nop
 8005baa:	bf00      	nop
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	2000007c 	.word	0x2000007c

08005bb8 <__NVIC_SetPriorityGrouping>:
{
 8005bb8:	b480      	push	{r7}
 8005bba:	b085      	sub	sp, #20
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f003 0307 	and.w	r3, r3, #7
 8005bc6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bc8:	4b0b      	ldr	r3, [pc, #44]	; (8005bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8005bca:	68db      	ldr	r3, [r3, #12]
 8005bcc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bce:	68ba      	ldr	r2, [r7, #8]
 8005bd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005be0:	4b06      	ldr	r3, [pc, #24]	; (8005bfc <__NVIC_SetPriorityGrouping+0x44>)
 8005be2:	4313      	orrs	r3, r2
 8005be4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005be6:	4a04      	ldr	r2, [pc, #16]	; (8005bf8 <__NVIC_SetPriorityGrouping+0x40>)
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	60d3      	str	r3, [r2, #12]
}
 8005bec:	bf00      	nop
 8005bee:	3714      	adds	r7, #20
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr
 8005bf8:	e000ed00 	.word	0xe000ed00
 8005bfc:	05fa0000 	.word	0x05fa0000

08005c00 <__NVIC_GetPriorityGrouping>:
{
 8005c00:	b480      	push	{r7}
 8005c02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005c04:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <__NVIC_GetPriorityGrouping+0x18>)
 8005c06:	68db      	ldr	r3, [r3, #12]
 8005c08:	0a1b      	lsrs	r3, r3, #8
 8005c0a:	f003 0307 	and.w	r3, r3, #7
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr
 8005c18:	e000ed00 	.word	0xe000ed00

08005c1c <__NVIC_EnableIRQ>:
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	4603      	mov	r3, r0
 8005c24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	db0b      	blt.n	8005c46 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c2e:	79fb      	ldrb	r3, [r7, #7]
 8005c30:	f003 021f 	and.w	r2, r3, #31
 8005c34:	4907      	ldr	r1, [pc, #28]	; (8005c54 <__NVIC_EnableIRQ+0x38>)
 8005c36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c3a:	095b      	lsrs	r3, r3, #5
 8005c3c:	2001      	movs	r0, #1
 8005c3e:	fa00 f202 	lsl.w	r2, r0, r2
 8005c42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005c46:	bf00      	nop
 8005c48:	370c      	adds	r7, #12
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c50:	4770      	bx	lr
 8005c52:	bf00      	nop
 8005c54:	e000e100 	.word	0xe000e100

08005c58 <__NVIC_SetPriority>:
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	4603      	mov	r3, r0
 8005c60:	6039      	str	r1, [r7, #0]
 8005c62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005c64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	db0a      	blt.n	8005c82 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	b2da      	uxtb	r2, r3
 8005c70:	490c      	ldr	r1, [pc, #48]	; (8005ca4 <__NVIC_SetPriority+0x4c>)
 8005c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c76:	0112      	lsls	r2, r2, #4
 8005c78:	b2d2      	uxtb	r2, r2
 8005c7a:	440b      	add	r3, r1
 8005c7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005c80:	e00a      	b.n	8005c98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	b2da      	uxtb	r2, r3
 8005c86:	4908      	ldr	r1, [pc, #32]	; (8005ca8 <__NVIC_SetPriority+0x50>)
 8005c88:	79fb      	ldrb	r3, [r7, #7]
 8005c8a:	f003 030f 	and.w	r3, r3, #15
 8005c8e:	3b04      	subs	r3, #4
 8005c90:	0112      	lsls	r2, r2, #4
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	440b      	add	r3, r1
 8005c96:	761a      	strb	r2, [r3, #24]
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	e000e100 	.word	0xe000e100
 8005ca8:	e000ed00 	.word	0xe000ed00

08005cac <NVIC_EncodePriority>:
{
 8005cac:	b480      	push	{r7}
 8005cae:	b089      	sub	sp, #36	; 0x24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f003 0307 	and.w	r3, r3, #7
 8005cbe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f1c3 0307 	rsb	r3, r3, #7
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	bf28      	it	cs
 8005cca:	2304      	movcs	r3, #4
 8005ccc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	3304      	adds	r3, #4
 8005cd2:	2b06      	cmp	r3, #6
 8005cd4:	d902      	bls.n	8005cdc <NVIC_EncodePriority+0x30>
 8005cd6:	69fb      	ldr	r3, [r7, #28]
 8005cd8:	3b03      	subs	r3, #3
 8005cda:	e000      	b.n	8005cde <NVIC_EncodePriority+0x32>
 8005cdc:	2300      	movs	r3, #0
 8005cde:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005ce0:	f04f 32ff 	mov.w	r2, #4294967295
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cea:	43da      	mvns	r2, r3
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	401a      	ands	r2, r3
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005cf4:	f04f 31ff 	mov.w	r1, #4294967295
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	fa01 f303 	lsl.w	r3, r1, r3
 8005cfe:	43d9      	mvns	r1, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005d04:	4313      	orrs	r3, r2
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3724      	adds	r7, #36	; 0x24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005d12:	b580      	push	{r7, lr}
 8005d14:	b082      	sub	sp, #8
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7ff ff4c 	bl	8005bb8 <__NVIC_SetPriorityGrouping>
}
 8005d20:	bf00      	nop
 8005d22:	3708      	adds	r7, #8
 8005d24:	46bd      	mov	sp, r7
 8005d26:	bd80      	pop	{r7, pc}

08005d28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	4603      	mov	r3, r0
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
 8005d34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005d36:	2300      	movs	r3, #0
 8005d38:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005d3a:	f7ff ff61 	bl	8005c00 <__NVIC_GetPriorityGrouping>
 8005d3e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005d40:	687a      	ldr	r2, [r7, #4]
 8005d42:	68b9      	ldr	r1, [r7, #8]
 8005d44:	6978      	ldr	r0, [r7, #20]
 8005d46:	f7ff ffb1 	bl	8005cac <NVIC_EncodePriority>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d50:	4611      	mov	r1, r2
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff ff80 	bl	8005c58 <__NVIC_SetPriority>
}
 8005d58:	bf00      	nop
 8005d5a:	3718      	adds	r7, #24
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	4603      	mov	r3, r0
 8005d68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005d6e:	4618      	mov	r0, r3
 8005d70:	f7ff ff54 	bl	8005c1c <__NVIC_EnableIRQ>
}
 8005d74:	bf00      	nop
 8005d76:	3708      	adds	r7, #8
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}

08005d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005d88:	f7ff fee6 	bl	8005b58 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d101      	bne.n	8005d98 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005d94:	2301      	movs	r3, #1
 8005d96:	e099      	b.n	8005ecc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	2202      	movs	r2, #2
 8005da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0201 	bic.w	r2, r2, #1
 8005db6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005db8:	e00f      	b.n	8005dda <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005dba:	f7ff fecd 	bl	8005b58 <HAL_GetTick>
 8005dbe:	4602      	mov	r2, r0
 8005dc0:	693b      	ldr	r3, [r7, #16]
 8005dc2:	1ad3      	subs	r3, r2, r3
 8005dc4:	2b05      	cmp	r3, #5
 8005dc6:	d908      	bls.n	8005dda <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2220      	movs	r2, #32
 8005dcc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005dd6:	2303      	movs	r3, #3
 8005dd8:	e078      	b.n	8005ecc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	f003 0301 	and.w	r3, r3, #1
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e8      	bne.n	8005dba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005df0:	697a      	ldr	r2, [r7, #20]
 8005df2:	4b38      	ldr	r3, [pc, #224]	; (8005ed4 <HAL_DMA_Init+0x158>)
 8005df4:	4013      	ands	r3, r2
 8005df6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	685a      	ldr	r2, [r3, #4]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e06:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005e12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	699b      	ldr	r3, [r3, #24]
 8005e18:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005e1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a1b      	ldr	r3, [r3, #32]
 8005e24:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005e26:	697a      	ldr	r2, [r7, #20]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e30:	2b04      	cmp	r3, #4
 8005e32:	d107      	bne.n	8005e44 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	697a      	ldr	r2, [r7, #20]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	695b      	ldr	r3, [r3, #20]
 8005e52:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f023 0307 	bic.w	r3, r3, #7
 8005e5a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	4313      	orrs	r3, r2
 8005e64:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e6a:	2b04      	cmp	r3, #4
 8005e6c:	d117      	bne.n	8005e9e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e72:	697a      	ldr	r2, [r7, #20]
 8005e74:	4313      	orrs	r3, r2
 8005e76:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d00e      	beq.n	8005e9e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f000 fb03 	bl	800648c <DMA_CheckFifoParam>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d008      	beq.n	8005e9e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2240      	movs	r2, #64	; 0x40
 8005e90:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005e9a:	2301      	movs	r3, #1
 8005e9c:	e016      	b.n	8005ecc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	697a      	ldr	r2, [r7, #20]
 8005ea4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 faba 	bl	8006420 <DMA_CalcBaseAndBitshift>
 8005eac:	4603      	mov	r3, r0
 8005eae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb4:	223f      	movs	r2, #63	; 0x3f
 8005eb6:	409a      	lsls	r2, r3
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005eca:	2300      	movs	r3, #0
}
 8005ecc:	4618      	mov	r0, r3
 8005ece:	3718      	adds	r7, #24
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	f010803f 	.word	0xf010803f

08005ed8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005ee6:	2301      	movs	r3, #1
 8005ee8:	e050      	b.n	8005f8c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ef0:	b2db      	uxtb	r3, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d101      	bne.n	8005efa <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005ef6:	2302      	movs	r3, #2
 8005ef8:	e048      	b.n	8005f8c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f022 0201 	bic.w	r2, r2, #1
 8005f08:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2200      	movs	r2, #0
 8005f18:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	2200      	movs	r2, #0
 8005f28:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2221      	movs	r2, #33	; 0x21
 8005f38:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 fa70 	bl	8006420 <DMA_CalcBaseAndBitshift>
 8005f40:	4603      	mov	r3, r0
 8005f42:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	223f      	movs	r2, #63	; 0x3f
 8005f4a:	409a      	lsls	r2, r3
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2200      	movs	r2, #0
 8005f72:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2200      	movs	r2, #0
 8005f86:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005f8a:	2300      	movs	r3, #0
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3710      	adds	r7, #16
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005faa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005fb2:	2b01      	cmp	r3, #1
 8005fb4:	d101      	bne.n	8005fba <HAL_DMA_Start_IT+0x26>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	e048      	b.n	800604c <HAL_DMA_Start_IT+0xb8>
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2201      	movs	r2, #1
 8005fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005fc8:	b2db      	uxtb	r3, r3
 8005fca:	2b01      	cmp	r3, #1
 8005fcc:	d137      	bne.n	800603e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2202      	movs	r2, #2
 8005fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	687a      	ldr	r2, [r7, #4]
 8005fe0:	68b9      	ldr	r1, [r7, #8]
 8005fe2:	68f8      	ldr	r0, [r7, #12]
 8005fe4:	f000 f9ee 	bl	80063c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fec:	223f      	movs	r2, #63	; 0x3f
 8005fee:	409a      	lsls	r2, r3
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	681a      	ldr	r2, [r3, #0]
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f042 0216 	orr.w	r2, r2, #22
 8006002:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	695a      	ldr	r2, [r3, #20]
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006012:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006018:	2b00      	cmp	r3, #0
 800601a:	d007      	beq.n	800602c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0208 	orr.w	r2, r2, #8
 800602a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f042 0201 	orr.w	r2, r2, #1
 800603a:	601a      	str	r2, [r3, #0]
 800603c:	e005      	b.n	800604a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006046:	2302      	movs	r3, #2
 8006048:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800604a:	7dfb      	ldrb	r3, [r7, #23]
}
 800604c:	4618      	mov	r0, r3
 800604e:	3718      	adds	r7, #24
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}

08006054 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006054:	b480      	push	{r7}
 8006056:	b083      	sub	sp, #12
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d004      	beq.n	8006072 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2280      	movs	r2, #128	; 0x80
 800606c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800606e:	2301      	movs	r3, #1
 8006070:	e00c      	b.n	800608c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2205      	movs	r2, #5
 8006076:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f022 0201 	bic.w	r2, r2, #1
 8006088:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800608a:	2300      	movs	r3, #0
}
 800608c:	4618      	mov	r0, r3
 800608e:	370c      	adds	r7, #12
 8006090:	46bd      	mov	sp, r7
 8006092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006096:	4770      	bx	lr

08006098 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80060a0:	2300      	movs	r3, #0
 80060a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80060a4:	4b92      	ldr	r3, [pc, #584]	; (80062f0 <HAL_DMA_IRQHandler+0x258>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a92      	ldr	r2, [pc, #584]	; (80062f4 <HAL_DMA_IRQHandler+0x25c>)
 80060aa:	fba2 2303 	umull	r2, r3, r2, r3
 80060ae:	0a9b      	lsrs	r3, r3, #10
 80060b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80060b8:	693b      	ldr	r3, [r7, #16]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060c2:	2208      	movs	r2, #8
 80060c4:	409a      	lsls	r2, r3
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	4013      	ands	r3, r2
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d01a      	beq.n	8006104 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f003 0304 	and.w	r3, r3, #4
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d013      	beq.n	8006104 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681a      	ldr	r2, [r3, #0]
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f022 0204 	bic.w	r2, r2, #4
 80060ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060f0:	2208      	movs	r2, #8
 80060f2:	409a      	lsls	r2, r3
 80060f4:	693b      	ldr	r3, [r7, #16]
 80060f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060fc:	f043 0201 	orr.w	r2, r3, #1
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006108:	2201      	movs	r2, #1
 800610a:	409a      	lsls	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	4013      	ands	r3, r2
 8006110:	2b00      	cmp	r3, #0
 8006112:	d012      	beq.n	800613a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	695b      	ldr	r3, [r3, #20]
 800611a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800611e:	2b00      	cmp	r3, #0
 8006120:	d00b      	beq.n	800613a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006126:	2201      	movs	r2, #1
 8006128:	409a      	lsls	r2, r3
 800612a:	693b      	ldr	r3, [r7, #16]
 800612c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006132:	f043 0202 	orr.w	r2, r3, #2
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800613e:	2204      	movs	r2, #4
 8006140:	409a      	lsls	r2, r3
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4013      	ands	r3, r2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d012      	beq.n	8006170 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f003 0302 	and.w	r3, r3, #2
 8006154:	2b00      	cmp	r3, #0
 8006156:	d00b      	beq.n	8006170 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615c:	2204      	movs	r2, #4
 800615e:	409a      	lsls	r2, r3
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006168:	f043 0204 	orr.w	r2, r3, #4
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006174:	2210      	movs	r2, #16
 8006176:	409a      	lsls	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	d043      	beq.n	8006208 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b00      	cmp	r3, #0
 800618c:	d03c      	beq.n	8006208 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006192:	2210      	movs	r2, #16
 8006194:	409a      	lsls	r2, r3
 8006196:	693b      	ldr	r3, [r7, #16]
 8006198:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d018      	beq.n	80061da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d108      	bne.n	80061c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d024      	beq.n	8006208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	4798      	blx	r3
 80061c6:	e01f      	b.n	8006208 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d01b      	beq.n	8006208 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	4798      	blx	r3
 80061d8:	e016      	b.n	8006208 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d107      	bne.n	80061f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	681a      	ldr	r2, [r3, #0]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f022 0208 	bic.w	r2, r2, #8
 80061f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800620c:	2220      	movs	r2, #32
 800620e:	409a      	lsls	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	4013      	ands	r3, r2
 8006214:	2b00      	cmp	r3, #0
 8006216:	f000 808e 	beq.w	8006336 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 0310 	and.w	r3, r3, #16
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 8086 	beq.w	8006336 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800622e:	2220      	movs	r2, #32
 8006230:	409a      	lsls	r2, r3
 8006232:	693b      	ldr	r3, [r7, #16]
 8006234:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b05      	cmp	r3, #5
 8006240:	d136      	bne.n	80062b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	681a      	ldr	r2, [r3, #0]
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f022 0216 	bic.w	r2, r2, #22
 8006250:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	695a      	ldr	r2, [r3, #20]
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006260:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006266:	2b00      	cmp	r3, #0
 8006268:	d103      	bne.n	8006272 <HAL_DMA_IRQHandler+0x1da>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800626e:	2b00      	cmp	r3, #0
 8006270:	d007      	beq.n	8006282 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f022 0208 	bic.w	r2, r2, #8
 8006280:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006286:	223f      	movs	r2, #63	; 0x3f
 8006288:	409a      	lsls	r2, r3
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d07d      	beq.n	80063a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	4798      	blx	r3
        }
        return;
 80062ae:	e078      	b.n	80063a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d01c      	beq.n	80062f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d108      	bne.n	80062de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d030      	beq.n	8006336 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	4798      	blx	r3
 80062dc:	e02b      	b.n	8006336 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d027      	beq.n	8006336 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	4798      	blx	r3
 80062ee:	e022      	b.n	8006336 <HAL_DMA_IRQHandler+0x29e>
 80062f0:	20000040 	.word	0x20000040
 80062f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006302:	2b00      	cmp	r3, #0
 8006304:	d10f      	bne.n	8006326 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	681a      	ldr	r2, [r3, #0]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f022 0210 	bic.w	r2, r2, #16
 8006314:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006332:	6878      	ldr	r0, [r7, #4]
 8006334:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800633a:	2b00      	cmp	r3, #0
 800633c:	d032      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006342:	f003 0301 	and.w	r3, r3, #1
 8006346:	2b00      	cmp	r3, #0
 8006348:	d022      	beq.n	8006390 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2205      	movs	r2, #5
 800634e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f022 0201 	bic.w	r2, r2, #1
 8006360:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	3301      	adds	r3, #1
 8006366:	60bb      	str	r3, [r7, #8]
 8006368:	697a      	ldr	r2, [r7, #20]
 800636a:	429a      	cmp	r2, r3
 800636c:	d307      	bcc.n	800637e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0301 	and.w	r3, r3, #1
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1f2      	bne.n	8006362 <HAL_DMA_IRQHandler+0x2ca>
 800637c:	e000      	b.n	8006380 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800637e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006394:	2b00      	cmp	r3, #0
 8006396:	d005      	beq.n	80063a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	4798      	blx	r3
 80063a0:	e000      	b.n	80063a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80063a2:	bf00      	nop
    }
  }
}
 80063a4:	3718      	adds	r7, #24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop

080063ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	370c      	adds	r7, #12
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr

080063c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	60f8      	str	r0, [r7, #12]
 80063cc:	60b9      	str	r1, [r7, #8]
 80063ce:	607a      	str	r2, [r7, #4]
 80063d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	683a      	ldr	r2, [r7, #0]
 80063e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	2b40      	cmp	r3, #64	; 0x40
 80063f0:	d108      	bne.n	8006404 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	687a      	ldr	r2, [r7, #4]
 80063f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68ba      	ldr	r2, [r7, #8]
 8006400:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006402:	e007      	b.n	8006414 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68ba      	ldr	r2, [r7, #8]
 800640a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	60da      	str	r2, [r3, #12]
}
 8006414:	bf00      	nop
 8006416:	3714      	adds	r7, #20
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	b2db      	uxtb	r3, r3
 800642e:	3b10      	subs	r3, #16
 8006430:	4a13      	ldr	r2, [pc, #76]	; (8006480 <DMA_CalcBaseAndBitshift+0x60>)
 8006432:	fba2 2303 	umull	r2, r3, r2, r3
 8006436:	091b      	lsrs	r3, r3, #4
 8006438:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800643a:	4a12      	ldr	r2, [pc, #72]	; (8006484 <DMA_CalcBaseAndBitshift+0x64>)
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	4413      	add	r3, r2
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	461a      	mov	r2, r3
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	2b03      	cmp	r3, #3
 800644c:	d908      	bls.n	8006460 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	461a      	mov	r2, r3
 8006454:	4b0c      	ldr	r3, [pc, #48]	; (8006488 <DMA_CalcBaseAndBitshift+0x68>)
 8006456:	4013      	ands	r3, r2
 8006458:	1d1a      	adds	r2, r3, #4
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	659a      	str	r2, [r3, #88]	; 0x58
 800645e:	e006      	b.n	800646e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	461a      	mov	r2, r3
 8006466:	4b08      	ldr	r3, [pc, #32]	; (8006488 <DMA_CalcBaseAndBitshift+0x68>)
 8006468:	4013      	ands	r3, r2
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006472:	4618      	mov	r0, r3
 8006474:	3714      	adds	r7, #20
 8006476:	46bd      	mov	sp, r7
 8006478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647c:	4770      	bx	lr
 800647e:	bf00      	nop
 8006480:	aaaaaaab 	.word	0xaaaaaaab
 8006484:	08015d98 	.word	0x08015d98
 8006488:	fffffc00 	.word	0xfffffc00

0800648c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800648c:	b480      	push	{r7}
 800648e:	b085      	sub	sp, #20
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800649c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	699b      	ldr	r3, [r3, #24]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d11f      	bne.n	80064e6 <DMA_CheckFifoParam+0x5a>
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d856      	bhi.n	800655a <DMA_CheckFifoParam+0xce>
 80064ac:	a201      	add	r2, pc, #4	; (adr r2, 80064b4 <DMA_CheckFifoParam+0x28>)
 80064ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b2:	bf00      	nop
 80064b4:	080064c5 	.word	0x080064c5
 80064b8:	080064d7 	.word	0x080064d7
 80064bc:	080064c5 	.word	0x080064c5
 80064c0:	0800655b 	.word	0x0800655b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d046      	beq.n	800655e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80064d0:	2301      	movs	r3, #1
 80064d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064d4:	e043      	b.n	800655e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064de:	d140      	bne.n	8006562 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80064e0:	2301      	movs	r3, #1
 80064e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80064e4:	e03d      	b.n	8006562 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	699b      	ldr	r3, [r3, #24]
 80064ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064ee:	d121      	bne.n	8006534 <DMA_CheckFifoParam+0xa8>
 80064f0:	68bb      	ldr	r3, [r7, #8]
 80064f2:	2b03      	cmp	r3, #3
 80064f4:	d837      	bhi.n	8006566 <DMA_CheckFifoParam+0xda>
 80064f6:	a201      	add	r2, pc, #4	; (adr r2, 80064fc <DMA_CheckFifoParam+0x70>)
 80064f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064fc:	0800650d 	.word	0x0800650d
 8006500:	08006513 	.word	0x08006513
 8006504:	0800650d 	.word	0x0800650d
 8006508:	08006525 	.word	0x08006525
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	73fb      	strb	r3, [r7, #15]
      break;
 8006510:	e030      	b.n	8006574 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d025      	beq.n	800656a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006522:	e022      	b.n	800656a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006528:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800652c:	d11f      	bne.n	800656e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006532:	e01c      	b.n	800656e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	2b02      	cmp	r3, #2
 8006538:	d903      	bls.n	8006542 <DMA_CheckFifoParam+0xb6>
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	2b03      	cmp	r3, #3
 800653e:	d003      	beq.n	8006548 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006540:	e018      	b.n	8006574 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	73fb      	strb	r3, [r7, #15]
      break;
 8006546:	e015      	b.n	8006574 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800654c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d00e      	beq.n	8006572 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	73fb      	strb	r3, [r7, #15]
      break;
 8006558:	e00b      	b.n	8006572 <DMA_CheckFifoParam+0xe6>
      break;
 800655a:	bf00      	nop
 800655c:	e00a      	b.n	8006574 <DMA_CheckFifoParam+0xe8>
      break;
 800655e:	bf00      	nop
 8006560:	e008      	b.n	8006574 <DMA_CheckFifoParam+0xe8>
      break;
 8006562:	bf00      	nop
 8006564:	e006      	b.n	8006574 <DMA_CheckFifoParam+0xe8>
      break;
 8006566:	bf00      	nop
 8006568:	e004      	b.n	8006574 <DMA_CheckFifoParam+0xe8>
      break;
 800656a:	bf00      	nop
 800656c:	e002      	b.n	8006574 <DMA_CheckFifoParam+0xe8>
      break;   
 800656e:	bf00      	nop
 8006570:	e000      	b.n	8006574 <DMA_CheckFifoParam+0xe8>
      break;
 8006572:	bf00      	nop
    }
  } 
  
  return status; 
 8006574:	7bfb      	ldrb	r3, [r7, #15]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3714      	adds	r7, #20
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr
 8006582:	bf00      	nop

08006584 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e039      	b.n	800660a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d106      	bne.n	80065b0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f7fd fa4c 	bl	8003a48 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	685a      	ldr	r2, [r3, #4]
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065d4:	f023 0107 	bic.w	r1, r3, #7
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689a      	ldr	r2, [r3, #8]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	430a      	orrs	r2, r1
 80065e2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065ea:	4b0a      	ldr	r3, [pc, #40]	; (8006614 <HAL_DMA2D_Init+0x90>)
 80065ec:	4013      	ands	r3, r2
 80065ee:	687a      	ldr	r2, [r7, #4]
 80065f0:	68d1      	ldr	r1, [r2, #12]
 80065f2:	687a      	ldr	r2, [r7, #4]
 80065f4:	6812      	ldr	r2, [r2, #0]
 80065f6:	430b      	orrs	r3, r1
 80065f8:	6413      	str	r3, [r2, #64]	; 0x40
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2200      	movs	r2, #0
 80065fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006608:	2300      	movs	r3, #0
}
 800660a:	4618      	mov	r0, r3
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	ffffc000 	.word	0xffffc000

08006618 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b086      	sub	sp, #24
 800661c:	af02      	add	r7, sp, #8
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	60b9      	str	r1, [r7, #8]
 8006622:	607a      	str	r2, [r7, #4]
 8006624:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_DMA2D_Start+0x1c>
 8006630:	2302      	movs	r3, #2
 8006632:	e018      	b.n	8006666 <HAL_DMA2D_Start+0x4e>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	68b9      	ldr	r1, [r7, #8]
 800664e:	68f8      	ldr	r0, [r7, #12]
 8006650:	f000 f988 	bl	8006964 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f042 0201 	orr.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006664:	2300      	movs	r3, #0
}
 8006666:	4618      	mov	r0, r3
 8006668:	3710      	adds	r7, #16
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}

0800666e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800666e:	b580      	push	{r7, lr}
 8006670:	b086      	sub	sp, #24
 8006672:	af00      	add	r7, sp, #0
 8006674:	6078      	str	r0, [r7, #4]
 8006676:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006678:	2300      	movs	r3, #0
 800667a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d056      	beq.n	8006738 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800668a:	f7ff fa65 	bl	8005b58 <HAL_GetTick>
 800668e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006690:	e04b      	b.n	800672a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d023      	beq.n	80066ec <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f003 0320 	and.w	r3, r3, #32
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d005      	beq.n	80066ba <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b2:	f043 0202 	orr.w	r2, r3, #2
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d005      	beq.n	80066d0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066c8:	f043 0201 	orr.w	r2, r3, #1
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2221      	movs	r2, #33	; 0x21
 80066d6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2204      	movs	r2, #4
 80066dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80066e8:	2301      	movs	r3, #1
 80066ea:	e0a5      	b.n	8006838 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f2:	d01a      	beq.n	800672a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80066f4:	f7ff fa30 	bl	8005b58 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	683a      	ldr	r2, [r7, #0]
 8006700:	429a      	cmp	r2, r3
 8006702:	d302      	bcc.n	800670a <HAL_DMA2D_PollForTransfer+0x9c>
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d10f      	bne.n	800672a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800670e:	f043 0220 	orr.w	r2, r3, #32
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2203      	movs	r2, #3
 800671a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006726:	2303      	movs	r3, #3
 8006728:	e086      	b.n	8006838 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f003 0302 	and.w	r3, r3, #2
 8006734:	2b00      	cmp	r3, #0
 8006736:	d0ac      	beq.n	8006692 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	69db      	ldr	r3, [r3, #28]
 800673e:	f003 0320 	and.w	r3, r3, #32
 8006742:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800674a:	f003 0320 	and.w	r3, r3, #32
 800674e:	693a      	ldr	r2, [r7, #16]
 8006750:	4313      	orrs	r3, r2
 8006752:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d061      	beq.n	800681e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800675a:	f7ff f9fd 	bl	8005b58 <HAL_GetTick>
 800675e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006760:	e056      	b.n	8006810 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006770:	2b00      	cmp	r3, #0
 8006772:	d02e      	beq.n	80067d2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f003 0308 	and.w	r3, r3, #8
 800677a:	2b00      	cmp	r3, #0
 800677c:	d005      	beq.n	800678a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006782:	f043 0204 	orr.w	r2, r3, #4
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f003 0320 	and.w	r3, r3, #32
 8006790:	2b00      	cmp	r3, #0
 8006792:	d005      	beq.n	80067a0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006798:	f043 0202 	orr.w	r2, r3, #2
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d005      	beq.n	80067b6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067ae:	f043 0201 	orr.w	r2, r3, #1
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	2229      	movs	r2, #41	; 0x29
 80067bc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2204      	movs	r2, #4
 80067c2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e032      	b.n	8006838 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067d8:	d01a      	beq.n	8006810 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80067da:	f7ff f9bd 	bl	8005b58 <HAL_GetTick>
 80067de:	4602      	mov	r2, r0
 80067e0:	697b      	ldr	r3, [r7, #20]
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	683a      	ldr	r2, [r7, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d302      	bcc.n	80067f0 <HAL_DMA2D_PollForTransfer+0x182>
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d10f      	bne.n	8006810 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067f4:	f043 0220 	orr.w	r2, r3, #32
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2203      	movs	r2, #3
 8006800:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 800680c:	2303      	movs	r3, #3
 800680e:	e013      	b.n	8006838 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f003 0310 	and.w	r3, r3, #16
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0a1      	beq.n	8006762 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	2212      	movs	r2, #18
 8006824:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2201      	movs	r2, #1
 800682a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006836:	2300      	movs	r3, #0
}
 8006838:	4618      	mov	r0, r3
 800683a:	3718      	adds	r7, #24
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}

08006840 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006840:	b480      	push	{r7}
 8006842:	b087      	sub	sp, #28
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006858:	2b01      	cmp	r3, #1
 800685a:	d101      	bne.n	8006860 <HAL_DMA2D_ConfigLayer+0x20>
 800685c:	2302      	movs	r3, #2
 800685e:	e079      	b.n	8006954 <HAL_DMA2D_ConfigLayer+0x114>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2201      	movs	r2, #1
 8006864:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2202      	movs	r2, #2
 800686c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	011b      	lsls	r3, r3, #4
 8006874:	3318      	adds	r3, #24
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	4413      	add	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	685a      	ldr	r2, [r3, #4]
 8006880:	693b      	ldr	r3, [r7, #16]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	041b      	lsls	r3, r3, #16
 8006886:	4313      	orrs	r3, r2
 8006888:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800688a:	4b35      	ldr	r3, [pc, #212]	; (8006960 <HAL_DMA2D_ConfigLayer+0x120>)
 800688c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	685b      	ldr	r3, [r3, #4]
 8006892:	2b0a      	cmp	r3, #10
 8006894:	d003      	beq.n	800689e <HAL_DMA2D_ConfigLayer+0x5e>
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b09      	cmp	r3, #9
 800689c:	d107      	bne.n	80068ae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	4313      	orrs	r3, r2
 80068aa:	617b      	str	r3, [r7, #20]
 80068ac:	e005      	b.n	80068ba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	68db      	ldr	r3, [r3, #12]
 80068b2:	061b      	lsls	r3, r3, #24
 80068b4:	697a      	ldr	r2, [r7, #20]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d120      	bne.n	8006902 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	43db      	mvns	r3, r3
 80068ca:	ea02 0103 	and.w	r1, r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	697a      	ldr	r2, [r7, #20]
 80068d4:	430a      	orrs	r2, r1
 80068d6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	693a      	ldr	r2, [r7, #16]
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80068e2:	693b      	ldr	r3, [r7, #16]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	2b0a      	cmp	r3, #10
 80068e8:	d003      	beq.n	80068f2 <HAL_DMA2D_ConfigLayer+0xb2>
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	685b      	ldr	r3, [r3, #4]
 80068ee:	2b09      	cmp	r3, #9
 80068f0:	d127      	bne.n	8006942 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 80068f2:	693b      	ldr	r3, [r7, #16]
 80068f4:	68da      	ldr	r2, [r3, #12]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 80068fe:	629a      	str	r2, [r3, #40]	; 0x28
 8006900:	e01f      	b.n	8006942 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	69da      	ldr	r2, [r3, #28]
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	43db      	mvns	r3, r3
 800690c:	ea02 0103 	and.w	r1, r2, r3
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	697a      	ldr	r2, [r7, #20]
 8006916:	430a      	orrs	r2, r1
 8006918:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	6812      	ldr	r2, [r2, #0]
 8006922:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	2b0a      	cmp	r3, #10
 800692a:	d003      	beq.n	8006934 <HAL_DMA2D_ConfigLayer+0xf4>
 800692c:	693b      	ldr	r3, [r7, #16]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	2b09      	cmp	r3, #9
 8006932:	d106      	bne.n	8006942 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	68da      	ldr	r2, [r3, #12]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006940:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006952:	2300      	movs	r3, #0
}
 8006954:	4618      	mov	r0, r3
 8006956:	371c      	adds	r7, #28
 8006958:	46bd      	mov	sp, r7
 800695a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695e:	4770      	bx	lr
 8006960:	ff03000f 	.word	0xff03000f

08006964 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8006964:	b480      	push	{r7}
 8006966:	b08b      	sub	sp, #44	; 0x2c
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006978:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	041a      	lsls	r2, r3, #16
 8006980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006982:	431a      	orrs	r2, r3
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800699c:	d174      	bne.n	8006a88 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80069a4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069ac:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80069b4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d108      	bne.n	80069d6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 80069c4:	69ba      	ldr	r2, [r7, #24]
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	431a      	orrs	r2, r3
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	697a      	ldr	r2, [r7, #20]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
 80069d4:	e053      	b.n	8006a7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	2b01      	cmp	r3, #1
 80069dc:	d106      	bne.n	80069ec <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 80069de:	69ba      	ldr	r2, [r7, #24]
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	627b      	str	r3, [r7, #36]	; 0x24
 80069ea:	e048      	b.n	8006a7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d111      	bne.n	8006a18 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	0cdb      	lsrs	r3, r3, #19
 80069f8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80069fa:	69bb      	ldr	r3, [r7, #24]
 80069fc:	0a9b      	lsrs	r3, r3, #10
 80069fe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	08db      	lsrs	r3, r3, #3
 8006a04:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	015a      	lsls	r2, r3, #5
 8006a0a:	69fb      	ldr	r3, [r7, #28]
 8006a0c:	02db      	lsls	r3, r3, #11
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	697a      	ldr	r2, [r7, #20]
 8006a12:	4313      	orrs	r3, r2
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24
 8006a16:	e032      	b.n	8006a7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	689b      	ldr	r3, [r3, #8]
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d117      	bne.n	8006a50 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	0fdb      	lsrs	r3, r3, #31
 8006a24:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	0cdb      	lsrs	r3, r3, #19
 8006a2a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	0adb      	lsrs	r3, r3, #11
 8006a30:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 8006a32:	697b      	ldr	r3, [r7, #20]
 8006a34:	08db      	lsrs	r3, r3, #3
 8006a36:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	015a      	lsls	r2, r3, #5
 8006a3c:	69fb      	ldr	r3, [r7, #28]
 8006a3e:	029b      	lsls	r3, r3, #10
 8006a40:	431a      	orrs	r2, r3
 8006a42:	6a3b      	ldr	r3, [r7, #32]
 8006a44:	03db      	lsls	r3, r3, #15
 8006a46:	4313      	orrs	r3, r2
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a4e:	e016      	b.n	8006a7e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006a50:	6a3b      	ldr	r3, [r7, #32]
 8006a52:	0f1b      	lsrs	r3, r3, #28
 8006a54:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	0d1b      	lsrs	r3, r3, #20
 8006a5a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	0b1b      	lsrs	r3, r3, #12
 8006a60:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	091b      	lsrs	r3, r3, #4
 8006a66:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	011a      	lsls	r2, r3, #4
 8006a6c:	69fb      	ldr	r3, [r7, #28]
 8006a6e:	021b      	lsls	r3, r3, #8
 8006a70:	431a      	orrs	r2, r3
 8006a72:	6a3b      	ldr	r3, [r7, #32]
 8006a74:	031b      	lsls	r3, r3, #12
 8006a76:	4313      	orrs	r3, r2
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a84:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006a86:	e003      	b.n	8006a90 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	68ba      	ldr	r2, [r7, #8]
 8006a8e:	60da      	str	r2, [r3, #12]
}
 8006a90:	bf00      	nop
 8006a92:	372c      	adds	r7, #44	; 0x2c
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr

08006a9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b089      	sub	sp, #36	; 0x24
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006aaa:	2300      	movs	r3, #0
 8006aac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006aae:	2300      	movs	r3, #0
 8006ab0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	61fb      	str	r3, [r7, #28]
 8006aba:	e175      	b.n	8006da8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006abc:	2201      	movs	r2, #1
 8006abe:	69fb      	ldr	r3, [r7, #28]
 8006ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ac4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	697a      	ldr	r2, [r7, #20]
 8006acc:	4013      	ands	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	f040 8164 	bne.w	8006da2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d00b      	beq.n	8006afa <HAL_GPIO_Init+0x5e>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	2b02      	cmp	r3, #2
 8006ae8:	d007      	beq.n	8006afa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006aee:	2b11      	cmp	r3, #17
 8006af0:	d003      	beq.n	8006afa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	2b12      	cmp	r3, #18
 8006af8:	d130      	bne.n	8006b5c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	005b      	lsls	r3, r3, #1
 8006b04:	2203      	movs	r2, #3
 8006b06:	fa02 f303 	lsl.w	r3, r2, r3
 8006b0a:	43db      	mvns	r3, r3
 8006b0c:	69ba      	ldr	r2, [r7, #24]
 8006b0e:	4013      	ands	r3, r2
 8006b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	68da      	ldr	r2, [r3, #12]
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	005b      	lsls	r3, r3, #1
 8006b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b1e:	69ba      	ldr	r2, [r7, #24]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	69ba      	ldr	r2, [r7, #24]
 8006b28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006b30:	2201      	movs	r2, #1
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	fa02 f303 	lsl.w	r3, r2, r3
 8006b38:	43db      	mvns	r3, r3
 8006b3a:	69ba      	ldr	r2, [r7, #24]
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	091b      	lsrs	r3, r3, #4
 8006b46:	f003 0201 	and.w	r2, r3, #1
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b50:	69ba      	ldr	r2, [r7, #24]
 8006b52:	4313      	orrs	r3, r2
 8006b54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	69ba      	ldr	r2, [r7, #24]
 8006b5a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006b62:	69fb      	ldr	r3, [r7, #28]
 8006b64:	005b      	lsls	r3, r3, #1
 8006b66:	2203      	movs	r2, #3
 8006b68:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6c:	43db      	mvns	r3, r3
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	4013      	ands	r3, r2
 8006b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689a      	ldr	r2, [r3, #8]
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	005b      	lsls	r3, r3, #1
 8006b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006b80:	69ba      	ldr	r2, [r7, #24]
 8006b82:	4313      	orrs	r3, r2
 8006b84:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69ba      	ldr	r2, [r7, #24]
 8006b8a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d003      	beq.n	8006b9c <HAL_GPIO_Init+0x100>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	2b12      	cmp	r3, #18
 8006b9a:	d123      	bne.n	8006be4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006b9c:	69fb      	ldr	r3, [r7, #28]
 8006b9e:	08da      	lsrs	r2, r3, #3
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	3208      	adds	r2, #8
 8006ba4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	f003 0307 	and.w	r3, r3, #7
 8006bb0:	009b      	lsls	r3, r3, #2
 8006bb2:	220f      	movs	r2, #15
 8006bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006bb8:	43db      	mvns	r3, r3
 8006bba:	69ba      	ldr	r2, [r7, #24]
 8006bbc:	4013      	ands	r3, r2
 8006bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006bc0:	683b      	ldr	r3, [r7, #0]
 8006bc2:	691a      	ldr	r2, [r3, #16]
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	f003 0307 	and.w	r3, r3, #7
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	fa02 f303 	lsl.w	r3, r2, r3
 8006bd0:	69ba      	ldr	r2, [r7, #24]
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006bd6:	69fb      	ldr	r3, [r7, #28]
 8006bd8:	08da      	lsrs	r2, r3, #3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3208      	adds	r2, #8
 8006bde:	69b9      	ldr	r1, [r7, #24]
 8006be0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006bea:	69fb      	ldr	r3, [r7, #28]
 8006bec:	005b      	lsls	r3, r3, #1
 8006bee:	2203      	movs	r2, #3
 8006bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8006bf4:	43db      	mvns	r3, r3
 8006bf6:	69ba      	ldr	r2, [r7, #24]
 8006bf8:	4013      	ands	r3, r2
 8006bfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f003 0203 	and.w	r2, r3, #3
 8006c04:	69fb      	ldr	r3, [r7, #28]
 8006c06:	005b      	lsls	r3, r3, #1
 8006c08:	fa02 f303 	lsl.w	r3, r2, r3
 8006c0c:	69ba      	ldr	r2, [r7, #24]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	69ba      	ldr	r2, [r7, #24]
 8006c16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 80be 	beq.w	8006da2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006c26:	4b66      	ldr	r3, [pc, #408]	; (8006dc0 <HAL_GPIO_Init+0x324>)
 8006c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c2a:	4a65      	ldr	r2, [pc, #404]	; (8006dc0 <HAL_GPIO_Init+0x324>)
 8006c2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c30:	6453      	str	r3, [r2, #68]	; 0x44
 8006c32:	4b63      	ldr	r3, [pc, #396]	; (8006dc0 <HAL_GPIO_Init+0x324>)
 8006c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006c3a:	60fb      	str	r3, [r7, #12]
 8006c3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006c3e:	4a61      	ldr	r2, [pc, #388]	; (8006dc4 <HAL_GPIO_Init+0x328>)
 8006c40:	69fb      	ldr	r3, [r7, #28]
 8006c42:	089b      	lsrs	r3, r3, #2
 8006c44:	3302      	adds	r3, #2
 8006c46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006c4c:	69fb      	ldr	r3, [r7, #28]
 8006c4e:	f003 0303 	and.w	r3, r3, #3
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	220f      	movs	r2, #15
 8006c56:	fa02 f303 	lsl.w	r3, r2, r3
 8006c5a:	43db      	mvns	r3, r3
 8006c5c:	69ba      	ldr	r2, [r7, #24]
 8006c5e:	4013      	ands	r3, r2
 8006c60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a58      	ldr	r2, [pc, #352]	; (8006dc8 <HAL_GPIO_Init+0x32c>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d037      	beq.n	8006cda <HAL_GPIO_Init+0x23e>
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	4a57      	ldr	r2, [pc, #348]	; (8006dcc <HAL_GPIO_Init+0x330>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d031      	beq.n	8006cd6 <HAL_GPIO_Init+0x23a>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	4a56      	ldr	r2, [pc, #344]	; (8006dd0 <HAL_GPIO_Init+0x334>)
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d02b      	beq.n	8006cd2 <HAL_GPIO_Init+0x236>
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4a55      	ldr	r2, [pc, #340]	; (8006dd4 <HAL_GPIO_Init+0x338>)
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d025      	beq.n	8006cce <HAL_GPIO_Init+0x232>
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	4a54      	ldr	r2, [pc, #336]	; (8006dd8 <HAL_GPIO_Init+0x33c>)
 8006c86:	4293      	cmp	r3, r2
 8006c88:	d01f      	beq.n	8006cca <HAL_GPIO_Init+0x22e>
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	4a53      	ldr	r2, [pc, #332]	; (8006ddc <HAL_GPIO_Init+0x340>)
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d019      	beq.n	8006cc6 <HAL_GPIO_Init+0x22a>
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a52      	ldr	r2, [pc, #328]	; (8006de0 <HAL_GPIO_Init+0x344>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d013      	beq.n	8006cc2 <HAL_GPIO_Init+0x226>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a51      	ldr	r2, [pc, #324]	; (8006de4 <HAL_GPIO_Init+0x348>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d00d      	beq.n	8006cbe <HAL_GPIO_Init+0x222>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	4a50      	ldr	r2, [pc, #320]	; (8006de8 <HAL_GPIO_Init+0x34c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d007      	beq.n	8006cba <HAL_GPIO_Init+0x21e>
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	4a4f      	ldr	r2, [pc, #316]	; (8006dec <HAL_GPIO_Init+0x350>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d101      	bne.n	8006cb6 <HAL_GPIO_Init+0x21a>
 8006cb2:	2309      	movs	r3, #9
 8006cb4:	e012      	b.n	8006cdc <HAL_GPIO_Init+0x240>
 8006cb6:	230a      	movs	r3, #10
 8006cb8:	e010      	b.n	8006cdc <HAL_GPIO_Init+0x240>
 8006cba:	2308      	movs	r3, #8
 8006cbc:	e00e      	b.n	8006cdc <HAL_GPIO_Init+0x240>
 8006cbe:	2307      	movs	r3, #7
 8006cc0:	e00c      	b.n	8006cdc <HAL_GPIO_Init+0x240>
 8006cc2:	2306      	movs	r3, #6
 8006cc4:	e00a      	b.n	8006cdc <HAL_GPIO_Init+0x240>
 8006cc6:	2305      	movs	r3, #5
 8006cc8:	e008      	b.n	8006cdc <HAL_GPIO_Init+0x240>
 8006cca:	2304      	movs	r3, #4
 8006ccc:	e006      	b.n	8006cdc <HAL_GPIO_Init+0x240>
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e004      	b.n	8006cdc <HAL_GPIO_Init+0x240>
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e002      	b.n	8006cdc <HAL_GPIO_Init+0x240>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e000      	b.n	8006cdc <HAL_GPIO_Init+0x240>
 8006cda:	2300      	movs	r3, #0
 8006cdc:	69fa      	ldr	r2, [r7, #28]
 8006cde:	f002 0203 	and.w	r2, r2, #3
 8006ce2:	0092      	lsls	r2, r2, #2
 8006ce4:	4093      	lsls	r3, r2
 8006ce6:	69ba      	ldr	r2, [r7, #24]
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006cec:	4935      	ldr	r1, [pc, #212]	; (8006dc4 <HAL_GPIO_Init+0x328>)
 8006cee:	69fb      	ldr	r3, [r7, #28]
 8006cf0:	089b      	lsrs	r3, r3, #2
 8006cf2:	3302      	adds	r3, #2
 8006cf4:	69ba      	ldr	r2, [r7, #24]
 8006cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006cfa:	4b3d      	ldr	r3, [pc, #244]	; (8006df0 <HAL_GPIO_Init+0x354>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	43db      	mvns	r3, r3
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	4013      	ands	r3, r2
 8006d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006d16:	69ba      	ldr	r2, [r7, #24]
 8006d18:	693b      	ldr	r3, [r7, #16]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006d1e:	4a34      	ldr	r2, [pc, #208]	; (8006df0 <HAL_GPIO_Init+0x354>)
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006d24:	4b32      	ldr	r3, [pc, #200]	; (8006df0 <HAL_GPIO_Init+0x354>)
 8006d26:	685b      	ldr	r3, [r3, #4]
 8006d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d2a:	693b      	ldr	r3, [r7, #16]
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	69ba      	ldr	r2, [r7, #24]
 8006d30:	4013      	ands	r3, r2
 8006d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	685b      	ldr	r3, [r3, #4]
 8006d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d003      	beq.n	8006d48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006d40:	69ba      	ldr	r2, [r7, #24]
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	4313      	orrs	r3, r2
 8006d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006d48:	4a29      	ldr	r2, [pc, #164]	; (8006df0 <HAL_GPIO_Init+0x354>)
 8006d4a:	69bb      	ldr	r3, [r7, #24]
 8006d4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006d4e:	4b28      	ldr	r3, [pc, #160]	; (8006df0 <HAL_GPIO_Init+0x354>)
 8006d50:	689b      	ldr	r3, [r3, #8]
 8006d52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d54:	693b      	ldr	r3, [r7, #16]
 8006d56:	43db      	mvns	r3, r3
 8006d58:	69ba      	ldr	r2, [r7, #24]
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d5e:	683b      	ldr	r3, [r7, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006d72:	4a1f      	ldr	r2, [pc, #124]	; (8006df0 <HAL_GPIO_Init+0x354>)
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006d78:	4b1d      	ldr	r3, [pc, #116]	; (8006df0 <HAL_GPIO_Init+0x354>)
 8006d7a:	68db      	ldr	r3, [r3, #12]
 8006d7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	43db      	mvns	r3, r3
 8006d82:	69ba      	ldr	r2, [r7, #24]
 8006d84:	4013      	ands	r3, r2
 8006d86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	685b      	ldr	r3, [r3, #4]
 8006d8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d003      	beq.n	8006d9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006d94:	69ba      	ldr	r2, [r7, #24]
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	4313      	orrs	r3, r2
 8006d9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006d9c:	4a14      	ldr	r2, [pc, #80]	; (8006df0 <HAL_GPIO_Init+0x354>)
 8006d9e:	69bb      	ldr	r3, [r7, #24]
 8006da0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	3301      	adds	r3, #1
 8006da6:	61fb      	str	r3, [r7, #28]
 8006da8:	69fb      	ldr	r3, [r7, #28]
 8006daa:	2b0f      	cmp	r3, #15
 8006dac:	f67f ae86 	bls.w	8006abc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006db0:	bf00      	nop
 8006db2:	bf00      	nop
 8006db4:	3724      	adds	r7, #36	; 0x24
 8006db6:	46bd      	mov	sp, r7
 8006db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbc:	4770      	bx	lr
 8006dbe:	bf00      	nop
 8006dc0:	40023800 	.word	0x40023800
 8006dc4:	40013800 	.word	0x40013800
 8006dc8:	40020000 	.word	0x40020000
 8006dcc:	40020400 	.word	0x40020400
 8006dd0:	40020800 	.word	0x40020800
 8006dd4:	40020c00 	.word	0x40020c00
 8006dd8:	40021000 	.word	0x40021000
 8006ddc:	40021400 	.word	0x40021400
 8006de0:	40021800 	.word	0x40021800
 8006de4:	40021c00 	.word	0x40021c00
 8006de8:	40022000 	.word	0x40022000
 8006dec:	40022400 	.word	0x40022400
 8006df0:	40013c00 	.word	0x40013c00

08006df4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b087      	sub	sp, #28
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006e02:	2300      	movs	r3, #0
 8006e04:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006e06:	2300      	movs	r3, #0
 8006e08:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	617b      	str	r3, [r7, #20]
 8006e0e:	e0d9      	b.n	8006fc4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e10:	2201      	movs	r2, #1
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8006e1a:	683a      	ldr	r2, [r7, #0]
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	4013      	ands	r3, r2
 8006e20:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	429a      	cmp	r2, r3
 8006e28:	f040 80c9 	bne.w	8006fbe <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 8006e2c:	4a6b      	ldr	r2, [pc, #428]	; (8006fdc <HAL_GPIO_DeInit+0x1e8>)
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	089b      	lsrs	r3, r3, #2
 8006e32:	3302      	adds	r3, #2
 8006e34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e38:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f003 0303 	and.w	r3, r3, #3
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	220f      	movs	r2, #15
 8006e44:	fa02 f303 	lsl.w	r3, r2, r3
 8006e48:	68ba      	ldr	r2, [r7, #8]
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a63      	ldr	r2, [pc, #396]	; (8006fe0 <HAL_GPIO_DeInit+0x1ec>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d037      	beq.n	8006ec6 <HAL_GPIO_DeInit+0xd2>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a62      	ldr	r2, [pc, #392]	; (8006fe4 <HAL_GPIO_DeInit+0x1f0>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d031      	beq.n	8006ec2 <HAL_GPIO_DeInit+0xce>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a61      	ldr	r2, [pc, #388]	; (8006fe8 <HAL_GPIO_DeInit+0x1f4>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d02b      	beq.n	8006ebe <HAL_GPIO_DeInit+0xca>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a60      	ldr	r2, [pc, #384]	; (8006fec <HAL_GPIO_DeInit+0x1f8>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d025      	beq.n	8006eba <HAL_GPIO_DeInit+0xc6>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a5f      	ldr	r2, [pc, #380]	; (8006ff0 <HAL_GPIO_DeInit+0x1fc>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d01f      	beq.n	8006eb6 <HAL_GPIO_DeInit+0xc2>
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	4a5e      	ldr	r2, [pc, #376]	; (8006ff4 <HAL_GPIO_DeInit+0x200>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d019      	beq.n	8006eb2 <HAL_GPIO_DeInit+0xbe>
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	4a5d      	ldr	r2, [pc, #372]	; (8006ff8 <HAL_GPIO_DeInit+0x204>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d013      	beq.n	8006eae <HAL_GPIO_DeInit+0xba>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	4a5c      	ldr	r2, [pc, #368]	; (8006ffc <HAL_GPIO_DeInit+0x208>)
 8006e8a:	4293      	cmp	r3, r2
 8006e8c:	d00d      	beq.n	8006eaa <HAL_GPIO_DeInit+0xb6>
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	4a5b      	ldr	r2, [pc, #364]	; (8007000 <HAL_GPIO_DeInit+0x20c>)
 8006e92:	4293      	cmp	r3, r2
 8006e94:	d007      	beq.n	8006ea6 <HAL_GPIO_DeInit+0xb2>
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	4a5a      	ldr	r2, [pc, #360]	; (8007004 <HAL_GPIO_DeInit+0x210>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d101      	bne.n	8006ea2 <HAL_GPIO_DeInit+0xae>
 8006e9e:	2309      	movs	r3, #9
 8006ea0:	e012      	b.n	8006ec8 <HAL_GPIO_DeInit+0xd4>
 8006ea2:	230a      	movs	r3, #10
 8006ea4:	e010      	b.n	8006ec8 <HAL_GPIO_DeInit+0xd4>
 8006ea6:	2308      	movs	r3, #8
 8006ea8:	e00e      	b.n	8006ec8 <HAL_GPIO_DeInit+0xd4>
 8006eaa:	2307      	movs	r3, #7
 8006eac:	e00c      	b.n	8006ec8 <HAL_GPIO_DeInit+0xd4>
 8006eae:	2306      	movs	r3, #6
 8006eb0:	e00a      	b.n	8006ec8 <HAL_GPIO_DeInit+0xd4>
 8006eb2:	2305      	movs	r3, #5
 8006eb4:	e008      	b.n	8006ec8 <HAL_GPIO_DeInit+0xd4>
 8006eb6:	2304      	movs	r3, #4
 8006eb8:	e006      	b.n	8006ec8 <HAL_GPIO_DeInit+0xd4>
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e004      	b.n	8006ec8 <HAL_GPIO_DeInit+0xd4>
 8006ebe:	2302      	movs	r3, #2
 8006ec0:	e002      	b.n	8006ec8 <HAL_GPIO_DeInit+0xd4>
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e000      	b.n	8006ec8 <HAL_GPIO_DeInit+0xd4>
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	f002 0203 	and.w	r2, r2, #3
 8006ece:	0092      	lsls	r2, r2, #2
 8006ed0:	4093      	lsls	r3, r2
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	429a      	cmp	r2, r3
 8006ed6:	d132      	bne.n	8006f3e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006ed8:	4b4b      	ldr	r3, [pc, #300]	; (8007008 <HAL_GPIO_DeInit+0x214>)
 8006eda:	681a      	ldr	r2, [r3, #0]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	43db      	mvns	r3, r3
 8006ee0:	4949      	ldr	r1, [pc, #292]	; (8007008 <HAL_GPIO_DeInit+0x214>)
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8006ee6:	4b48      	ldr	r3, [pc, #288]	; (8007008 <HAL_GPIO_DeInit+0x214>)
 8006ee8:	685a      	ldr	r2, [r3, #4]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	43db      	mvns	r3, r3
 8006eee:	4946      	ldr	r1, [pc, #280]	; (8007008 <HAL_GPIO_DeInit+0x214>)
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8006ef4:	4b44      	ldr	r3, [pc, #272]	; (8007008 <HAL_GPIO_DeInit+0x214>)
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	43db      	mvns	r3, r3
 8006efc:	4942      	ldr	r1, [pc, #264]	; (8007008 <HAL_GPIO_DeInit+0x214>)
 8006efe:	4013      	ands	r3, r2
 8006f00:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006f02:	4b41      	ldr	r3, [pc, #260]	; (8007008 <HAL_GPIO_DeInit+0x214>)
 8006f04:	68da      	ldr	r2, [r3, #12]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	43db      	mvns	r3, r3
 8006f0a:	493f      	ldr	r1, [pc, #252]	; (8007008 <HAL_GPIO_DeInit+0x214>)
 8006f0c:	4013      	ands	r3, r2
 8006f0e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	f003 0303 	and.w	r3, r3, #3
 8006f16:	009b      	lsls	r3, r3, #2
 8006f18:	220f      	movs	r2, #15
 8006f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f1e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006f20:	4a2e      	ldr	r2, [pc, #184]	; (8006fdc <HAL_GPIO_DeInit+0x1e8>)
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	089b      	lsrs	r3, r3, #2
 8006f26:	3302      	adds	r3, #2
 8006f28:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8006f2c:	68bb      	ldr	r3, [r7, #8]
 8006f2e:	43da      	mvns	r2, r3
 8006f30:	482a      	ldr	r0, [pc, #168]	; (8006fdc <HAL_GPIO_DeInit+0x1e8>)
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	089b      	lsrs	r3, r3, #2
 8006f36:	400a      	ands	r2, r1
 8006f38:	3302      	adds	r3, #2
 8006f3a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	2103      	movs	r1, #3
 8006f48:	fa01 f303 	lsl.w	r3, r1, r3
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	401a      	ands	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006f54:	697b      	ldr	r3, [r7, #20]
 8006f56:	08da      	lsrs	r2, r3, #3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3208      	adds	r2, #8
 8006f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	f003 0307 	and.w	r3, r3, #7
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	220f      	movs	r2, #15
 8006f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006f6e:	43db      	mvns	r3, r3
 8006f70:	697a      	ldr	r2, [r7, #20]
 8006f72:	08d2      	lsrs	r2, r2, #3
 8006f74:	4019      	ands	r1, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	3208      	adds	r2, #8
 8006f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68da      	ldr	r2, [r3, #12]
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	005b      	lsls	r3, r3, #1
 8006f86:	2103      	movs	r1, #3
 8006f88:	fa01 f303 	lsl.w	r3, r1, r3
 8006f8c:	43db      	mvns	r3, r3
 8006f8e:	401a      	ands	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	2101      	movs	r1, #1
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006fa0:	43db      	mvns	r3, r3
 8006fa2:	401a      	ands	r2, r3
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	689a      	ldr	r2, [r3, #8]
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	005b      	lsls	r3, r3, #1
 8006fb0:	2103      	movs	r1, #3
 8006fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8006fb6:	43db      	mvns	r3, r3
 8006fb8:	401a      	ands	r2, r3
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	617b      	str	r3, [r7, #20]
 8006fc4:	697b      	ldr	r3, [r7, #20]
 8006fc6:	2b0f      	cmp	r3, #15
 8006fc8:	f67f af22 	bls.w	8006e10 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006fcc:	bf00      	nop
 8006fce:	bf00      	nop
 8006fd0:	371c      	adds	r7, #28
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd8:	4770      	bx	lr
 8006fda:	bf00      	nop
 8006fdc:	40013800 	.word	0x40013800
 8006fe0:	40020000 	.word	0x40020000
 8006fe4:	40020400 	.word	0x40020400
 8006fe8:	40020800 	.word	0x40020800
 8006fec:	40020c00 	.word	0x40020c00
 8006ff0:	40021000 	.word	0x40021000
 8006ff4:	40021400 	.word	0x40021400
 8006ff8:	40021800 	.word	0x40021800
 8006ffc:	40021c00 	.word	0x40021c00
 8007000:	40022000 	.word	0x40022000
 8007004:	40022400 	.word	0x40022400
 8007008:	40013c00 	.word	0x40013c00

0800700c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800700c:	b480      	push	{r7}
 800700e:	b085      	sub	sp, #20
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
 8007014:	460b      	mov	r3, r1
 8007016:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	691a      	ldr	r2, [r3, #16]
 800701c:	887b      	ldrh	r3, [r7, #2]
 800701e:	4013      	ands	r3, r2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d002      	beq.n	800702a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007024:	2301      	movs	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]
 8007028:	e001      	b.n	800702e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800702e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007030:	4618      	mov	r0, r3
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr

0800703c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800703c:	b480      	push	{r7}
 800703e:	b083      	sub	sp, #12
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	460b      	mov	r3, r1
 8007046:	807b      	strh	r3, [r7, #2]
 8007048:	4613      	mov	r3, r2
 800704a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800704c:	787b      	ldrb	r3, [r7, #1]
 800704e:	2b00      	cmp	r3, #0
 8007050:	d003      	beq.n	800705a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007052:	887a      	ldrh	r2, [r7, #2]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007058:	e003      	b.n	8007062 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800705a:	887b      	ldrh	r3, [r7, #2]
 800705c:	041a      	lsls	r2, r3, #16
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	619a      	str	r2, [r3, #24]
}
 8007062:	bf00      	nop
 8007064:	370c      	adds	r7, #12
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
	...

08007070 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b082      	sub	sp, #8
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e07f      	b.n	8007182 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007088:	b2db      	uxtb	r3, r3
 800708a:	2b00      	cmp	r3, #0
 800708c:	d106      	bne.n	800709c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007096:	6878      	ldr	r0, [r7, #4]
 8007098:	f000 f8a9 	bl	80071ee <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2224      	movs	r2, #36	; 0x24
 80070a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f022 0201 	bic.w	r2, r2, #1
 80070b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80070c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	68db      	ldr	r3, [r3, #12]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d107      	bne.n	80070ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070e6:	609a      	str	r2, [r3, #8]
 80070e8:	e006      	b.n	80070f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689a      	ldr	r2, [r3, #8]
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80070f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d104      	bne.n	800710a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007108:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6859      	ldr	r1, [r3, #4]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681a      	ldr	r2, [r3, #0]
 8007114:	4b1d      	ldr	r3, [pc, #116]	; (800718c <HAL_I2C_Init+0x11c>)
 8007116:	430b      	orrs	r3, r1
 8007118:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007128:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	691a      	ldr	r2, [r3, #16]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	695b      	ldr	r3, [r3, #20]
 8007132:	ea42 0103 	orr.w	r1, r2, r3
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	699b      	ldr	r3, [r3, #24]
 800713a:	021a      	lsls	r2, r3, #8
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	430a      	orrs	r2, r1
 8007142:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	69d9      	ldr	r1, [r3, #28]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6a1a      	ldr	r2, [r3, #32]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	430a      	orrs	r2, r1
 8007152:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	681a      	ldr	r2, [r3, #0]
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f042 0201 	orr.w	r2, r2, #1
 8007162:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2220      	movs	r2, #32
 800716e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2200      	movs	r2, #0
 8007176:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2200      	movs	r2, #0
 800717c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007180:	2300      	movs	r3, #0
}
 8007182:	4618      	mov	r0, r3
 8007184:	3708      	adds	r7, #8
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	02008000 	.word	0x02008000

08007190 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d101      	bne.n	80071a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e021      	b.n	80071e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2224      	movs	r2, #36	; 0x24
 80071a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	681a      	ldr	r2, [r3, #0]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f022 0201 	bic.w	r2, r2, #1
 80071b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f821 	bl	8007202 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2200      	movs	r2, #0
 80071d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2200      	movs	r2, #0
 80071e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80071e4:	2300      	movs	r3, #0
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3708      	adds	r7, #8
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}

080071ee <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80071ee:	b480      	push	{r7}
 80071f0:	b083      	sub	sp, #12
 80071f2:	af00      	add	r7, sp, #0
 80071f4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80071f6:	bf00      	nop
 80071f8:	370c      	adds	r7, #12
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007202:	b480      	push	{r7}
 8007204:	b083      	sub	sp, #12
 8007206:	af00      	add	r7, sp, #0
 8007208:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
	...

08007218 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b088      	sub	sp, #32
 800721c:	af02      	add	r7, sp, #8
 800721e:	60f8      	str	r0, [r7, #12]
 8007220:	4608      	mov	r0, r1
 8007222:	4611      	mov	r1, r2
 8007224:	461a      	mov	r2, r3
 8007226:	4603      	mov	r3, r0
 8007228:	817b      	strh	r3, [r7, #10]
 800722a:	460b      	mov	r3, r1
 800722c:	813b      	strh	r3, [r7, #8]
 800722e:	4613      	mov	r3, r2
 8007230:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b20      	cmp	r3, #32
 800723c:	f040 80f9 	bne.w	8007432 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007240:	6a3b      	ldr	r3, [r7, #32]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <HAL_I2C_Mem_Write+0x34>
 8007246:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007248:	2b00      	cmp	r3, #0
 800724a:	d105      	bne.n	8007258 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007252:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e0ed      	b.n	8007434 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800725e:	2b01      	cmp	r3, #1
 8007260:	d101      	bne.n	8007266 <HAL_I2C_Mem_Write+0x4e>
 8007262:	2302      	movs	r3, #2
 8007264:	e0e6      	b.n	8007434 <HAL_I2C_Mem_Write+0x21c>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800726e:	f7fe fc73 	bl	8005b58 <HAL_GetTick>
 8007272:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007274:	697b      	ldr	r3, [r7, #20]
 8007276:	9300      	str	r3, [sp, #0]
 8007278:	2319      	movs	r3, #25
 800727a:	2201      	movs	r2, #1
 800727c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 fad1 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800728c:	2301      	movs	r3, #1
 800728e:	e0d1      	b.n	8007434 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2221      	movs	r2, #33	; 0x21
 8007294:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2240      	movs	r2, #64	; 0x40
 800729c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	2200      	movs	r2, #0
 80072a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6a3a      	ldr	r2, [r7, #32]
 80072aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80072b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2200      	movs	r2, #0
 80072b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80072b8:	88f8      	ldrh	r0, [r7, #6]
 80072ba:	893a      	ldrh	r2, [r7, #8]
 80072bc:	8979      	ldrh	r1, [r7, #10]
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	9301      	str	r3, [sp, #4]
 80072c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	4603      	mov	r3, r0
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f9e1 	bl	8007690 <I2C_RequestMemoryWrite>
 80072ce:	4603      	mov	r3, r0
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d005      	beq.n	80072e0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2200      	movs	r2, #0
 80072d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80072dc:	2301      	movs	r3, #1
 80072de:	e0a9      	b.n	8007434 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	2bff      	cmp	r3, #255	; 0xff
 80072e8:	d90e      	bls.n	8007308 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	22ff      	movs	r2, #255	; 0xff
 80072ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072f4:	b2da      	uxtb	r2, r3
 80072f6:	8979      	ldrh	r1, [r7, #10]
 80072f8:	2300      	movs	r3, #0
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f000 fbb3 	bl	8007a6c <I2C_TransferConfig>
 8007306:	e00f      	b.n	8007328 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800730c:	b29a      	uxth	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007316:	b2da      	uxtb	r2, r3
 8007318:	8979      	ldrh	r1, [r7, #10]
 800731a:	2300      	movs	r3, #0
 800731c:	9300      	str	r3, [sp, #0]
 800731e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f000 fba2 	bl	8007a6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007328:	697a      	ldr	r2, [r7, #20]
 800732a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 fabb 	bl	80078a8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007338:	2301      	movs	r3, #1
 800733a:	e07b      	b.n	8007434 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007340:	781a      	ldrb	r2, [r3, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800734c:	1c5a      	adds	r2, r3, #1
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007356:	b29b      	uxth	r3, r3
 8007358:	3b01      	subs	r3, #1
 800735a:	b29a      	uxth	r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007364:	3b01      	subs	r3, #1
 8007366:	b29a      	uxth	r2, r3
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007370:	b29b      	uxth	r3, r3
 8007372:	2b00      	cmp	r3, #0
 8007374:	d034      	beq.n	80073e0 <HAL_I2C_Mem_Write+0x1c8>
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800737a:	2b00      	cmp	r3, #0
 800737c:	d130      	bne.n	80073e0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800737e:	697b      	ldr	r3, [r7, #20]
 8007380:	9300      	str	r3, [sp, #0]
 8007382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007384:	2200      	movs	r2, #0
 8007386:	2180      	movs	r1, #128	; 0x80
 8007388:	68f8      	ldr	r0, [r7, #12]
 800738a:	f000 fa4d 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 800738e:	4603      	mov	r3, r0
 8007390:	2b00      	cmp	r3, #0
 8007392:	d001      	beq.n	8007398 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8007394:	2301      	movs	r3, #1
 8007396:	e04d      	b.n	8007434 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739c:	b29b      	uxth	r3, r3
 800739e:	2bff      	cmp	r3, #255	; 0xff
 80073a0:	d90e      	bls.n	80073c0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	22ff      	movs	r2, #255	; 0xff
 80073a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ac:	b2da      	uxtb	r2, r3
 80073ae:	8979      	ldrh	r1, [r7, #10]
 80073b0:	2300      	movs	r3, #0
 80073b2:	9300      	str	r3, [sp, #0]
 80073b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80073b8:	68f8      	ldr	r0, [r7, #12]
 80073ba:	f000 fb57 	bl	8007a6c <I2C_TransferConfig>
 80073be:	e00f      	b.n	80073e0 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073ce:	b2da      	uxtb	r2, r3
 80073d0:	8979      	ldrh	r1, [r7, #10]
 80073d2:	2300      	movs	r3, #0
 80073d4:	9300      	str	r3, [sp, #0]
 80073d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073da:	68f8      	ldr	r0, [r7, #12]
 80073dc:	f000 fb46 	bl	8007a6c <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d19e      	bne.n	8007328 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80073ea:	697a      	ldr	r2, [r7, #20]
 80073ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80073ee:	68f8      	ldr	r0, [r7, #12]
 80073f0:	f000 fa9a 	bl	8007928 <I2C_WaitOnSTOPFlagUntilTimeout>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e01a      	b.n	8007434 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	2220      	movs	r2, #32
 8007404:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	6859      	ldr	r1, [r3, #4]
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681a      	ldr	r2, [r3, #0]
 8007410:	4b0a      	ldr	r3, [pc, #40]	; (800743c <HAL_I2C_Mem_Write+0x224>)
 8007412:	400b      	ands	r3, r1
 8007414:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2220      	movs	r2, #32
 800741a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2200      	movs	r2, #0
 800742a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800742e:	2300      	movs	r3, #0
 8007430:	e000      	b.n	8007434 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8007432:	2302      	movs	r3, #2
  }
}
 8007434:	4618      	mov	r0, r3
 8007436:	3718      	adds	r7, #24
 8007438:	46bd      	mov	sp, r7
 800743a:	bd80      	pop	{r7, pc}
 800743c:	fe00e800 	.word	0xfe00e800

08007440 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af02      	add	r7, sp, #8
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	4608      	mov	r0, r1
 800744a:	4611      	mov	r1, r2
 800744c:	461a      	mov	r2, r3
 800744e:	4603      	mov	r3, r0
 8007450:	817b      	strh	r3, [r7, #10]
 8007452:	460b      	mov	r3, r1
 8007454:	813b      	strh	r3, [r7, #8]
 8007456:	4613      	mov	r3, r2
 8007458:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b20      	cmp	r3, #32
 8007464:	f040 80fd 	bne.w	8007662 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007468:	6a3b      	ldr	r3, [r7, #32]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d002      	beq.n	8007474 <HAL_I2C_Mem_Read+0x34>
 800746e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007470:	2b00      	cmp	r3, #0
 8007472:	d105      	bne.n	8007480 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	f44f 7200 	mov.w	r2, #512	; 0x200
 800747a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e0f1      	b.n	8007664 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_I2C_Mem_Read+0x4e>
 800748a:	2302      	movs	r3, #2
 800748c:	e0ea      	b.n	8007664 <HAL_I2C_Mem_Read+0x224>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007496:	f7fe fb5f 	bl	8005b58 <HAL_GetTick>
 800749a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	2319      	movs	r3, #25
 80074a2:	2201      	movs	r2, #1
 80074a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80074a8:	68f8      	ldr	r0, [r7, #12]
 80074aa:	f000 f9bd 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d001      	beq.n	80074b8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	e0d5      	b.n	8007664 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	2222      	movs	r2, #34	; 0x22
 80074bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	2240      	movs	r2, #64	; 0x40
 80074c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2200      	movs	r2, #0
 80074cc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	6a3a      	ldr	r2, [r7, #32]
 80074d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80074d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	2200      	movs	r2, #0
 80074de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80074e0:	88f8      	ldrh	r0, [r7, #6]
 80074e2:	893a      	ldrh	r2, [r7, #8]
 80074e4:	8979      	ldrh	r1, [r7, #10]
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	9301      	str	r3, [sp, #4]
 80074ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ec:	9300      	str	r3, [sp, #0]
 80074ee:	4603      	mov	r3, r0
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f000 f921 	bl	8007738 <I2C_RequestMemoryRead>
 80074f6:	4603      	mov	r3, r0
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d005      	beq.n	8007508 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007504:	2301      	movs	r3, #1
 8007506:	e0ad      	b.n	8007664 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800750c:	b29b      	uxth	r3, r3
 800750e:	2bff      	cmp	r3, #255	; 0xff
 8007510:	d90e      	bls.n	8007530 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	22ff      	movs	r2, #255	; 0xff
 8007516:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800751c:	b2da      	uxtb	r2, r3
 800751e:	8979      	ldrh	r1, [r7, #10]
 8007520:	4b52      	ldr	r3, [pc, #328]	; (800766c <HAL_I2C_Mem_Read+0x22c>)
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007528:	68f8      	ldr	r0, [r7, #12]
 800752a:	f000 fa9f 	bl	8007a6c <I2C_TransferConfig>
 800752e:	e00f      	b.n	8007550 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800753e:	b2da      	uxtb	r2, r3
 8007540:	8979      	ldrh	r1, [r7, #10]
 8007542:	4b4a      	ldr	r3, [pc, #296]	; (800766c <HAL_I2C_Mem_Read+0x22c>)
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800754a:	68f8      	ldr	r0, [r7, #12]
 800754c:	f000 fa8e 	bl	8007a6c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	9300      	str	r3, [sp, #0]
 8007554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007556:	2200      	movs	r2, #0
 8007558:	2104      	movs	r1, #4
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	f000 f964 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8007560:	4603      	mov	r3, r0
 8007562:	2b00      	cmp	r3, #0
 8007564:	d001      	beq.n	800756a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e07c      	b.n	8007664 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007574:	b2d2      	uxtb	r2, r2
 8007576:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800757c:	1c5a      	adds	r2, r3, #1
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007586:	3b01      	subs	r3, #1
 8007588:	b29a      	uxth	r2, r3
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007592:	b29b      	uxth	r3, r3
 8007594:	3b01      	subs	r3, #1
 8007596:	b29a      	uxth	r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d034      	beq.n	8007610 <HAL_I2C_Mem_Read+0x1d0>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d130      	bne.n	8007610 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	9300      	str	r3, [sp, #0]
 80075b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075b4:	2200      	movs	r2, #0
 80075b6:	2180      	movs	r1, #128	; 0x80
 80075b8:	68f8      	ldr	r0, [r7, #12]
 80075ba:	f000 f935 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 80075be:	4603      	mov	r3, r0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d001      	beq.n	80075c8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80075c4:	2301      	movs	r3, #1
 80075c6:	e04d      	b.n	8007664 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075cc:	b29b      	uxth	r3, r3
 80075ce:	2bff      	cmp	r3, #255	; 0xff
 80075d0:	d90e      	bls.n	80075f0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	22ff      	movs	r2, #255	; 0xff
 80075d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075dc:	b2da      	uxtb	r2, r3
 80075de:	8979      	ldrh	r1, [r7, #10]
 80075e0:	2300      	movs	r3, #0
 80075e2:	9300      	str	r3, [sp, #0]
 80075e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80075e8:	68f8      	ldr	r0, [r7, #12]
 80075ea:	f000 fa3f 	bl	8007a6c <I2C_TransferConfig>
 80075ee:	e00f      	b.n	8007610 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80075fe:	b2da      	uxtb	r2, r3
 8007600:	8979      	ldrh	r1, [r7, #10]
 8007602:	2300      	movs	r3, #0
 8007604:	9300      	str	r3, [sp, #0]
 8007606:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800760a:	68f8      	ldr	r0, [r7, #12]
 800760c:	f000 fa2e 	bl	8007a6c <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007614:	b29b      	uxth	r3, r3
 8007616:	2b00      	cmp	r3, #0
 8007618:	d19a      	bne.n	8007550 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800761a:	697a      	ldr	r2, [r7, #20]
 800761c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800761e:	68f8      	ldr	r0, [r7, #12]
 8007620:	f000 f982 	bl	8007928 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e01a      	b.n	8007664 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	2220      	movs	r2, #32
 8007634:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6859      	ldr	r1, [r3, #4]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	4b0b      	ldr	r3, [pc, #44]	; (8007670 <HAL_I2C_Mem_Read+0x230>)
 8007642:	400b      	ands	r3, r1
 8007644:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2220      	movs	r2, #32
 800764a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	e000      	b.n	8007664 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007662:	2302      	movs	r3, #2
  }
}
 8007664:	4618      	mov	r0, r3
 8007666:	3718      	adds	r7, #24
 8007668:	46bd      	mov	sp, r7
 800766a:	bd80      	pop	{r7, pc}
 800766c:	80002400 	.word	0x80002400
 8007670:	fe00e800 	.word	0xfe00e800

08007674 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007674:	b480      	push	{r7}
 8007676:	b083      	sub	sp, #12
 8007678:	af00      	add	r7, sp, #0
 800767a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007682:	b2db      	uxtb	r3, r3
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768e:	4770      	bx	lr

08007690 <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b086      	sub	sp, #24
 8007694:	af02      	add	r7, sp, #8
 8007696:	60f8      	str	r0, [r7, #12]
 8007698:	4608      	mov	r0, r1
 800769a:	4611      	mov	r1, r2
 800769c:	461a      	mov	r2, r3
 800769e:	4603      	mov	r3, r0
 80076a0:	817b      	strh	r3, [r7, #10]
 80076a2:	460b      	mov	r3, r1
 80076a4:	813b      	strh	r3, [r7, #8]
 80076a6:	4613      	mov	r3, r2
 80076a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80076aa:	88fb      	ldrh	r3, [r7, #6]
 80076ac:	b2da      	uxtb	r2, r3
 80076ae:	8979      	ldrh	r1, [r7, #10]
 80076b0:	4b20      	ldr	r3, [pc, #128]	; (8007734 <I2C_RequestMemoryWrite+0xa4>)
 80076b2:	9300      	str	r3, [sp, #0]
 80076b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f000 f9d7 	bl	8007a6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076be:	69fa      	ldr	r2, [r7, #28]
 80076c0:	69b9      	ldr	r1, [r7, #24]
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 f8f0 	bl	80078a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80076c8:	4603      	mov	r3, r0
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80076ce:	2301      	movs	r3, #1
 80076d0:	e02c      	b.n	800772c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80076d2:	88fb      	ldrh	r3, [r7, #6]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d105      	bne.n	80076e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80076d8:	893b      	ldrh	r3, [r7, #8]
 80076da:	b2da      	uxtb	r2, r3
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	629a      	str	r2, [r3, #40]	; 0x28
 80076e2:	e015      	b.n	8007710 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80076e4:	893b      	ldrh	r3, [r7, #8]
 80076e6:	0a1b      	lsrs	r3, r3, #8
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	b2da      	uxtb	r2, r3
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80076f2:	69fa      	ldr	r2, [r7, #28]
 80076f4:	69b9      	ldr	r1, [r7, #24]
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f000 f8d6 	bl	80078a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d001      	beq.n	8007706 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007702:	2301      	movs	r3, #1
 8007704:	e012      	b.n	800772c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007706:	893b      	ldrh	r3, [r7, #8]
 8007708:	b2da      	uxtb	r2, r3
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007710:	69fb      	ldr	r3, [r7, #28]
 8007712:	9300      	str	r3, [sp, #0]
 8007714:	69bb      	ldr	r3, [r7, #24]
 8007716:	2200      	movs	r2, #0
 8007718:	2180      	movs	r1, #128	; 0x80
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 f884 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e000      	b.n	800772c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3710      	adds	r7, #16
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	80002000 	.word	0x80002000

08007738 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	4608      	mov	r0, r1
 8007742:	4611      	mov	r1, r2
 8007744:	461a      	mov	r2, r3
 8007746:	4603      	mov	r3, r0
 8007748:	817b      	strh	r3, [r7, #10]
 800774a:	460b      	mov	r3, r1
 800774c:	813b      	strh	r3, [r7, #8]
 800774e:	4613      	mov	r3, r2
 8007750:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007752:	88fb      	ldrh	r3, [r7, #6]
 8007754:	b2da      	uxtb	r2, r3
 8007756:	8979      	ldrh	r1, [r7, #10]
 8007758:	4b20      	ldr	r3, [pc, #128]	; (80077dc <I2C_RequestMemoryRead+0xa4>)
 800775a:	9300      	str	r3, [sp, #0]
 800775c:	2300      	movs	r3, #0
 800775e:	68f8      	ldr	r0, [r7, #12]
 8007760:	f000 f984 	bl	8007a6c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007764:	69fa      	ldr	r2, [r7, #28]
 8007766:	69b9      	ldr	r1, [r7, #24]
 8007768:	68f8      	ldr	r0, [r7, #12]
 800776a:	f000 f89d 	bl	80078a8 <I2C_WaitOnTXISFlagUntilTimeout>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e02c      	b.n	80077d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007778:	88fb      	ldrh	r3, [r7, #6]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d105      	bne.n	800778a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800777e:	893b      	ldrh	r3, [r7, #8]
 8007780:	b2da      	uxtb	r2, r3
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	629a      	str	r2, [r3, #40]	; 0x28
 8007788:	e015      	b.n	80077b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800778a:	893b      	ldrh	r3, [r7, #8]
 800778c:	0a1b      	lsrs	r3, r3, #8
 800778e:	b29b      	uxth	r3, r3
 8007790:	b2da      	uxtb	r2, r3
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007798:	69fa      	ldr	r2, [r7, #28]
 800779a:	69b9      	ldr	r1, [r7, #24]
 800779c:	68f8      	ldr	r0, [r7, #12]
 800779e:	f000 f883 	bl	80078a8 <I2C_WaitOnTXISFlagUntilTimeout>
 80077a2:	4603      	mov	r3, r0
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d001      	beq.n	80077ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80077a8:	2301      	movs	r3, #1
 80077aa:	e012      	b.n	80077d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80077ac:	893b      	ldrh	r3, [r7, #8]
 80077ae:	b2da      	uxtb	r2, r3
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	9300      	str	r3, [sp, #0]
 80077ba:	69bb      	ldr	r3, [r7, #24]
 80077bc:	2200      	movs	r2, #0
 80077be:	2140      	movs	r1, #64	; 0x40
 80077c0:	68f8      	ldr	r0, [r7, #12]
 80077c2:	f000 f831 	bl	8007828 <I2C_WaitOnFlagUntilTimeout>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80077cc:	2301      	movs	r3, #1
 80077ce:	e000      	b.n	80077d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80077d0:	2300      	movs	r3, #0
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	80002000 	.word	0x80002000

080077e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b083      	sub	sp, #12
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	f003 0302 	and.w	r3, r3, #2
 80077f2:	2b02      	cmp	r3, #2
 80077f4:	d103      	bne.n	80077fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	2200      	movs	r2, #0
 80077fc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	699b      	ldr	r3, [r3, #24]
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b01      	cmp	r3, #1
 800780a:	d007      	beq.n	800781c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f042 0201 	orr.w	r2, r2, #1
 800781a:	619a      	str	r2, [r3, #24]
  }
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8007828:	b580      	push	{r7, lr}
 800782a:	b084      	sub	sp, #16
 800782c:	af00      	add	r7, sp, #0
 800782e:	60f8      	str	r0, [r7, #12]
 8007830:	60b9      	str	r1, [r7, #8]
 8007832:	603b      	str	r3, [r7, #0]
 8007834:	4613      	mov	r3, r2
 8007836:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007838:	e022      	b.n	8007880 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007840:	d01e      	beq.n	8007880 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007842:	f7fe f989 	bl	8005b58 <HAL_GetTick>
 8007846:	4602      	mov	r2, r0
 8007848:	69bb      	ldr	r3, [r7, #24]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	683a      	ldr	r2, [r7, #0]
 800784e:	429a      	cmp	r2, r3
 8007850:	d302      	bcc.n	8007858 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d113      	bne.n	8007880 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800785c:	f043 0220 	orr.w	r2, r3, #32
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	2220      	movs	r2, #32
 8007868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e00f      	b.n	80078a0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	699a      	ldr	r2, [r3, #24]
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	4013      	ands	r3, r2
 800788a:	68ba      	ldr	r2, [r7, #8]
 800788c:	429a      	cmp	r2, r3
 800788e:	bf0c      	ite	eq
 8007890:	2301      	moveq	r3, #1
 8007892:	2300      	movne	r3, #0
 8007894:	b2db      	uxtb	r3, r3
 8007896:	461a      	mov	r2, r3
 8007898:	79fb      	ldrb	r3, [r7, #7]
 800789a:	429a      	cmp	r2, r3
 800789c:	d0cd      	beq.n	800783a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800789e:	2300      	movs	r3, #0
}
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078a8:	b580      	push	{r7, lr}
 80078aa:	b084      	sub	sp, #16
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	60f8      	str	r0, [r7, #12]
 80078b0:	60b9      	str	r1, [r7, #8]
 80078b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078b4:	e02c      	b.n	8007910 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80078b6:	687a      	ldr	r2, [r7, #4]
 80078b8:	68b9      	ldr	r1, [r7, #8]
 80078ba:	68f8      	ldr	r0, [r7, #12]
 80078bc:	f000 f870 	bl	80079a0 <I2C_IsAcknowledgeFailed>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e02a      	b.n	8007920 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d0:	d01e      	beq.n	8007910 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078d2:	f7fe f941 	bl	8005b58 <HAL_GetTick>
 80078d6:	4602      	mov	r2, r0
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	1ad3      	subs	r3, r2, r3
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	429a      	cmp	r2, r3
 80078e0:	d302      	bcc.n	80078e8 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d113      	bne.n	8007910 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ec:	f043 0220 	orr.w	r2, r3, #32
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	2220      	movs	r2, #32
 80078f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e007      	b.n	8007920 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	699b      	ldr	r3, [r3, #24]
 8007916:	f003 0302 	and.w	r3, r3, #2
 800791a:	2b02      	cmp	r3, #2
 800791c:	d1cb      	bne.n	80078b6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800791e:	2300      	movs	r3, #0
}
 8007920:	4618      	mov	r0, r3
 8007922:	3710      	adds	r7, #16
 8007924:	46bd      	mov	sp, r7
 8007926:	bd80      	pop	{r7, pc}

08007928 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007928:	b580      	push	{r7, lr}
 800792a:	b084      	sub	sp, #16
 800792c:	af00      	add	r7, sp, #0
 800792e:	60f8      	str	r0, [r7, #12]
 8007930:	60b9      	str	r1, [r7, #8]
 8007932:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007934:	e028      	b.n	8007988 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	68b9      	ldr	r1, [r7, #8]
 800793a:	68f8      	ldr	r0, [r7, #12]
 800793c:	f000 f830 	bl	80079a0 <I2C_IsAcknowledgeFailed>
 8007940:	4603      	mov	r3, r0
 8007942:	2b00      	cmp	r3, #0
 8007944:	d001      	beq.n	800794a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007946:	2301      	movs	r3, #1
 8007948:	e026      	b.n	8007998 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800794a:	f7fe f905 	bl	8005b58 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	429a      	cmp	r2, r3
 8007958:	d302      	bcc.n	8007960 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d113      	bne.n	8007988 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007964:	f043 0220 	orr.w	r2, r3, #32
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007984:	2301      	movs	r3, #1
 8007986:	e007      	b.n	8007998 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	699b      	ldr	r3, [r3, #24]
 800798e:	f003 0320 	and.w	r3, r3, #32
 8007992:	2b20      	cmp	r3, #32
 8007994:	d1cf      	bne.n	8007936 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	3710      	adds	r7, #16
 800799c:	46bd      	mov	sp, r7
 800799e:	bd80      	pop	{r7, pc}

080079a0 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	699b      	ldr	r3, [r3, #24]
 80079b2:	f003 0310 	and.w	r3, r3, #16
 80079b6:	2b10      	cmp	r3, #16
 80079b8:	d151      	bne.n	8007a5e <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80079ba:	e022      	b.n	8007a02 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c2:	d01e      	beq.n	8007a02 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079c4:	f7fe f8c8 	bl	8005b58 <HAL_GetTick>
 80079c8:	4602      	mov	r2, r0
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	1ad3      	subs	r3, r2, r3
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	429a      	cmp	r2, r3
 80079d2:	d302      	bcc.n	80079da <I2C_IsAcknowledgeFailed+0x3a>
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d113      	bne.n	8007a02 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079de:	f043 0220 	orr.w	r2, r3, #32
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2220      	movs	r2, #32
 80079ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 80079fe:	2301      	movs	r3, #1
 8007a00:	e02e      	b.n	8007a60 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	699b      	ldr	r3, [r3, #24]
 8007a08:	f003 0320 	and.w	r3, r3, #32
 8007a0c:	2b20      	cmp	r3, #32
 8007a0e:	d1d5      	bne.n	80079bc <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2210      	movs	r2, #16
 8007a16:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2220      	movs	r2, #32
 8007a1e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a20:	68f8      	ldr	r0, [r7, #12]
 8007a22:	f7ff fedd 	bl	80077e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	6859      	ldr	r1, [r3, #4]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	681a      	ldr	r2, [r3, #0]
 8007a30:	4b0d      	ldr	r3, [pc, #52]	; (8007a68 <I2C_IsAcknowledgeFailed+0xc8>)
 8007a32:	400b      	ands	r3, r1
 8007a34:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3a:	f043 0204 	orr.w	r2, r3, #4
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e000      	b.n	8007a60 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}
 8007a68:	fe00e800 	.word	0xfe00e800

08007a6c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b085      	sub	sp, #20
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	60f8      	str	r0, [r7, #12]
 8007a74:	607b      	str	r3, [r7, #4]
 8007a76:	460b      	mov	r3, r1
 8007a78:	817b      	strh	r3, [r7, #10]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	685a      	ldr	r2, [r3, #4]
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	0d5b      	lsrs	r3, r3, #21
 8007a88:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007a8c:	4b0d      	ldr	r3, [pc, #52]	; (8007ac4 <I2C_TransferConfig+0x58>)
 8007a8e:	430b      	orrs	r3, r1
 8007a90:	43db      	mvns	r3, r3
 8007a92:	ea02 0103 	and.w	r1, r2, r3
 8007a96:	897b      	ldrh	r3, [r7, #10]
 8007a98:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007a9c:	7a7b      	ldrb	r3, [r7, #9]
 8007a9e:	041b      	lsls	r3, r3, #16
 8007aa0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007aa4:	431a      	orrs	r2, r3
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	431a      	orrs	r2, r3
 8007aaa:	69bb      	ldr	r3, [r7, #24]
 8007aac:	431a      	orrs	r2, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	430a      	orrs	r2, r1
 8007ab4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007ab6:	bf00      	nop
 8007ab8:	3714      	adds	r7, #20
 8007aba:	46bd      	mov	sp, r7
 8007abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac0:	4770      	bx	lr
 8007ac2:	bf00      	nop
 8007ac4:	03ff63ff 	.word	0x03ff63ff

08007ac8 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b084      	sub	sp, #16
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d101      	bne.n	8007ada <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e0bf      	b.n	8007c5a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d106      	bne.n	8007af4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007aee:	6878      	ldr	r0, [r7, #4]
 8007af0:	f7fb ffca 	bl	8003a88 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2202      	movs	r2, #2
 8007af8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007b0a:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	6999      	ldr	r1, [r3, #24]
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	685a      	ldr	r2, [r3, #4]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	689b      	ldr	r3, [r3, #8]
 8007b1a:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007b20:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	6899      	ldr	r1, [r3, #8]
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	4b4a      	ldr	r3, [pc, #296]	; (8007c64 <HAL_LTDC_Init+0x19c>)
 8007b3c:	400b      	ands	r3, r1
 8007b3e:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	695b      	ldr	r3, [r3, #20]
 8007b44:	041b      	lsls	r3, r3, #16
 8007b46:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6899      	ldr	r1, [r3, #8]
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	699a      	ldr	r2, [r3, #24]
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	431a      	orrs	r2, r3
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68d9      	ldr	r1, [r3, #12]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681a      	ldr	r2, [r3, #0]
 8007b68:	4b3e      	ldr	r3, [pc, #248]	; (8007c64 <HAL_LTDC_Init+0x19c>)
 8007b6a:	400b      	ands	r3, r1
 8007b6c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	69db      	ldr	r3, [r3, #28]
 8007b72:	041b      	lsls	r3, r3, #16
 8007b74:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	68d9      	ldr	r1, [r3, #12]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	6a1a      	ldr	r2, [r3, #32]
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	431a      	orrs	r2, r3
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	430a      	orrs	r2, r1
 8007b8a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	6919      	ldr	r1, [r3, #16]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681a      	ldr	r2, [r3, #0]
 8007b96:	4b33      	ldr	r3, [pc, #204]	; (8007c64 <HAL_LTDC_Init+0x19c>)
 8007b98:	400b      	ands	r3, r1
 8007b9a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ba0:	041b      	lsls	r3, r3, #16
 8007ba2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	6919      	ldr	r1, [r3, #16]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	431a      	orrs	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6959      	ldr	r1, [r3, #20]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	4b27      	ldr	r3, [pc, #156]	; (8007c64 <HAL_LTDC_Init+0x19c>)
 8007bc6:	400b      	ands	r3, r1
 8007bc8:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	041b      	lsls	r3, r3, #16
 8007bd0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	6959      	ldr	r1, [r3, #20]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	431a      	orrs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	430a      	orrs	r2, r1
 8007be6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007bee:	021b      	lsls	r3, r3, #8
 8007bf0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007bf8:	041b      	lsls	r3, r3, #16
 8007bfa:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8007c0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c12:	68ba      	ldr	r2, [r7, #8]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	4313      	orrs	r3, r2
 8007c18:	687a      	ldr	r2, [r7, #4]
 8007c1a:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007c1e:	431a      	orrs	r2, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	430a      	orrs	r2, r1
 8007c26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f042 0206 	orr.w	r2, r2, #6
 8007c36:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	699a      	ldr	r2, [r3, #24]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f042 0201 	orr.w	r2, r2, #1
 8007c46:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2201      	movs	r2, #1
 8007c54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007c58:	2300      	movs	r3, #0
}
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	3710      	adds	r7, #16
 8007c5e:	46bd      	mov	sp, r7
 8007c60:	bd80      	pop	{r7, pc}
 8007c62:	bf00      	nop
 8007c64:	f000f800 	.word	0xf000f800

08007c68 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b084      	sub	sp, #16
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c76:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c7e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	f003 0304 	and.w	r3, r3, #4
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d023      	beq.n	8007cd2 <HAL_LTDC_IRQHandler+0x6a>
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	f003 0304 	and.w	r3, r3, #4
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d01e      	beq.n	8007cd2 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0204 	bic.w	r2, r2, #4
 8007ca2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2204      	movs	r2, #4
 8007caa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007cb2:	f043 0201 	orr.w	r2, r3, #1
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2204      	movs	r2, #4
 8007cc0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f000 f86f 	bl	8007db0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d023      	beq.n	8007d24 <HAL_LTDC_IRQHandler+0xbc>
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	f003 0302 	and.w	r3, r3, #2
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d01e      	beq.n	8007d24 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f022 0202 	bic.w	r2, r2, #2
 8007cf4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2202      	movs	r2, #2
 8007cfc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007d04:	f043 0202 	orr.w	r2, r3, #2
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2204      	movs	r2, #4
 8007d12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2200      	movs	r2, #0
 8007d1a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f846 	bl	8007db0 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d01b      	beq.n	8007d66 <HAL_LTDC_IRQHandler+0xfe>
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d016      	beq.n	8007d66 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f022 0201 	bic.w	r2, r2, #1
 8007d46:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2201      	movs	r2, #1
 8007d54:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f000 f82f 	bl	8007dc4 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	f003 0308 	and.w	r3, r3, #8
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d01b      	beq.n	8007da8 <HAL_LTDC_IRQHandler+0x140>
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	f003 0308 	and.w	r3, r3, #8
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d016      	beq.n	8007da8 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f022 0208 	bic.w	r2, r2, #8
 8007d88:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	2208      	movs	r2, #8
 8007d90:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2201      	movs	r2, #1
 8007d96:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f818 	bl	8007dd8 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007da8:	bf00      	nop
 8007daa:	3710      	adds	r7, #16
 8007dac:	46bd      	mov	sp, r7
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007db8:	bf00      	nop
 8007dba:	370c      	adds	r7, #12
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc2:	4770      	bx	lr

08007dc4 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b083      	sub	sp, #12
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007dcc:	bf00      	nop
 8007dce:	370c      	adds	r7, #12
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007dec:	b5b0      	push	{r4, r5, r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	60f8      	str	r0, [r7, #12]
 8007df4:	60b9      	str	r1, [r7, #8]
 8007df6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007dfe:	2b01      	cmp	r3, #1
 8007e00:	d101      	bne.n	8007e06 <HAL_LTDC_ConfigLayer+0x1a>
 8007e02:	2302      	movs	r3, #2
 8007e04:	e02c      	b.n	8007e60 <HAL_LTDC_ConfigLayer+0x74>
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2202      	movs	r2, #2
 8007e12:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2134      	movs	r1, #52	; 0x34
 8007e1c:	fb01 f303 	mul.w	r3, r1, r3
 8007e20:	4413      	add	r3, r2
 8007e22:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	4614      	mov	r4, r2
 8007e2a:	461d      	mov	r5, r3
 8007e2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007e38:	682b      	ldr	r3, [r5, #0]
 8007e3a:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007e3c:	687a      	ldr	r2, [r7, #4]
 8007e3e:	68b9      	ldr	r1, [r7, #8]
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f000 f81f 	bl	8007e84 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007e5e:	2300      	movs	r3, #0
}
 8007e60:	4618      	mov	r0, r3
 8007e62:	3710      	adds	r7, #16
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bdb0      	pop	{r4, r5, r7, pc}

08007e68 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007e76:	b2db      	uxtb	r3, r3
}
 8007e78:	4618      	mov	r0, r3
 8007e7a:	370c      	adds	r7, #12
 8007e7c:	46bd      	mov	sp, r7
 8007e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e82:	4770      	bx	lr

08007e84 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b089      	sub	sp, #36	; 0x24
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	60f8      	str	r0, [r7, #12]
 8007e8c:	60b9      	str	r1, [r7, #8]
 8007e8e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	685a      	ldr	r2, [r3, #4]
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	68db      	ldr	r3, [r3, #12]
 8007e9a:	0c1b      	lsrs	r3, r3, #16
 8007e9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007ea0:	4413      	add	r3, r2
 8007ea2:	041b      	lsls	r3, r3, #16
 8007ea4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	461a      	mov	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	01db      	lsls	r3, r3, #7
 8007eb0:	4413      	add	r3, r2
 8007eb2:	3384      	adds	r3, #132	; 0x84
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	68fa      	ldr	r2, [r7, #12]
 8007eb8:	6812      	ldr	r2, [r2, #0]
 8007eba:	4611      	mov	r1, r2
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	01d2      	lsls	r2, r2, #7
 8007ec0:	440a      	add	r2, r1
 8007ec2:	3284      	adds	r2, #132	; 0x84
 8007ec4:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007ec8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	0c1b      	lsrs	r3, r3, #16
 8007ed6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007eda:	4413      	add	r3, r2
 8007edc:	1c5a      	adds	r2, r3, #1
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4619      	mov	r1, r3
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	01db      	lsls	r3, r3, #7
 8007ee8:	440b      	add	r3, r1
 8007eea:	3384      	adds	r3, #132	; 0x84
 8007eec:	4619      	mov	r1, r3
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	68da      	ldr	r2, [r3, #12]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f02:	4413      	add	r3, r2
 8007f04:	041b      	lsls	r3, r3, #16
 8007f06:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	461a      	mov	r2, r3
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	01db      	lsls	r3, r3, #7
 8007f12:	4413      	add	r3, r2
 8007f14:	3384      	adds	r3, #132	; 0x84
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	6812      	ldr	r2, [r2, #0]
 8007f1c:	4611      	mov	r1, r2
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	01d2      	lsls	r2, r2, #7
 8007f22:	440a      	add	r2, r1
 8007f24:	3284      	adds	r2, #132	; 0x84
 8007f26:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007f2a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	689a      	ldr	r2, [r3, #8]
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	68db      	ldr	r3, [r3, #12]
 8007f36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f3a:	4413      	add	r3, r2
 8007f3c:	1c5a      	adds	r2, r3, #1
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4619      	mov	r1, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	01db      	lsls	r3, r3, #7
 8007f48:	440b      	add	r3, r1
 8007f4a:	3384      	adds	r3, #132	; 0x84
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	4313      	orrs	r3, r2
 8007f52:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	461a      	mov	r2, r3
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	01db      	lsls	r3, r3, #7
 8007f5e:	4413      	add	r3, r2
 8007f60:	3384      	adds	r3, #132	; 0x84
 8007f62:	691b      	ldr	r3, [r3, #16]
 8007f64:	68fa      	ldr	r2, [r7, #12]
 8007f66:	6812      	ldr	r2, [r2, #0]
 8007f68:	4611      	mov	r1, r2
 8007f6a:	687a      	ldr	r2, [r7, #4]
 8007f6c:	01d2      	lsls	r2, r2, #7
 8007f6e:	440a      	add	r2, r1
 8007f70:	3284      	adds	r2, #132	; 0x84
 8007f72:	f023 0307 	bic.w	r3, r3, #7
 8007f76:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	461a      	mov	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	01db      	lsls	r3, r3, #7
 8007f82:	4413      	add	r3, r2
 8007f84:	3384      	adds	r3, #132	; 0x84
 8007f86:	461a      	mov	r2, r3
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	691b      	ldr	r3, [r3, #16]
 8007f8c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007f94:	021b      	lsls	r3, r3, #8
 8007f96:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007f9e:	041b      	lsls	r3, r3, #16
 8007fa0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	061b      	lsls	r3, r3, #24
 8007fa8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	01db      	lsls	r3, r3, #7
 8007fb4:	4413      	add	r3, r2
 8007fb6:	3384      	adds	r3, #132	; 0x84
 8007fb8:	699b      	ldr	r3, [r3, #24]
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	461a      	mov	r2, r3
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	01db      	lsls	r3, r3, #7
 8007fc4:	4413      	add	r3, r2
 8007fc6:	3384      	adds	r3, #132	; 0x84
 8007fc8:	461a      	mov	r2, r3
 8007fca:	2300      	movs	r3, #0
 8007fcc:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007fce:	68bb      	ldr	r3, [r7, #8]
 8007fd0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007fd4:	461a      	mov	r2, r3
 8007fd6:	69fb      	ldr	r3, [r7, #28]
 8007fd8:	431a      	orrs	r2, r3
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4619      	mov	r1, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	01db      	lsls	r3, r3, #7
 8007fe8:	440b      	add	r3, r1
 8007fea:	3384      	adds	r3, #132	; 0x84
 8007fec:	4619      	mov	r1, r3
 8007fee:	697b      	ldr	r3, [r7, #20]
 8007ff0:	4313      	orrs	r3, r2
 8007ff2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	461a      	mov	r2, r3
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	01db      	lsls	r3, r3, #7
 8007ffe:	4413      	add	r3, r2
 8008000:	3384      	adds	r3, #132	; 0x84
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	6812      	ldr	r2, [r2, #0]
 8008008:	4611      	mov	r1, r2
 800800a:	687a      	ldr	r2, [r7, #4]
 800800c:	01d2      	lsls	r2, r2, #7
 800800e:	440a      	add	r2, r1
 8008010:	3284      	adds	r2, #132	; 0x84
 8008012:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008016:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	461a      	mov	r2, r3
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	01db      	lsls	r3, r3, #7
 8008022:	4413      	add	r3, r2
 8008024:	3384      	adds	r3, #132	; 0x84
 8008026:	461a      	mov	r2, r3
 8008028:	68bb      	ldr	r3, [r7, #8]
 800802a:	695b      	ldr	r3, [r3, #20]
 800802c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	01db      	lsls	r3, r3, #7
 8008038:	4413      	add	r3, r2
 800803a:	3384      	adds	r3, #132	; 0x84
 800803c:	69da      	ldr	r2, [r3, #28]
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4619      	mov	r1, r3
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	01db      	lsls	r3, r3, #7
 8008048:	440b      	add	r3, r1
 800804a:	3384      	adds	r3, #132	; 0x84
 800804c:	4619      	mov	r1, r3
 800804e:	4b58      	ldr	r3, [pc, #352]	; (80081b0 <LTDC_SetConfig+0x32c>)
 8008050:	4013      	ands	r3, r2
 8008052:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	69da      	ldr	r2, [r3, #28]
 8008058:	68bb      	ldr	r3, [r7, #8]
 800805a:	6a1b      	ldr	r3, [r3, #32]
 800805c:	68f9      	ldr	r1, [r7, #12]
 800805e:	6809      	ldr	r1, [r1, #0]
 8008060:	4608      	mov	r0, r1
 8008062:	6879      	ldr	r1, [r7, #4]
 8008064:	01c9      	lsls	r1, r1, #7
 8008066:	4401      	add	r1, r0
 8008068:	3184      	adds	r1, #132	; 0x84
 800806a:	4313      	orrs	r3, r2
 800806c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	461a      	mov	r2, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	01db      	lsls	r3, r3, #7
 8008078:	4413      	add	r3, r2
 800807a:	3384      	adds	r3, #132	; 0x84
 800807c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	461a      	mov	r2, r3
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	01db      	lsls	r3, r3, #7
 8008088:	4413      	add	r3, r2
 800808a:	3384      	adds	r3, #132	; 0x84
 800808c:	461a      	mov	r2, r3
 800808e:	2300      	movs	r3, #0
 8008090:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	461a      	mov	r2, r3
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	01db      	lsls	r3, r3, #7
 800809c:	4413      	add	r3, r2
 800809e:	3384      	adds	r3, #132	; 0x84
 80080a0:	461a      	mov	r2, r3
 80080a2:	68bb      	ldr	r3, [r7, #8]
 80080a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a6:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80080a8:	68bb      	ldr	r3, [r7, #8]
 80080aa:	691b      	ldr	r3, [r3, #16]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d102      	bne.n	80080b6 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80080b0:	2304      	movs	r3, #4
 80080b2:	61fb      	str	r3, [r7, #28]
 80080b4:	e01b      	b.n	80080ee <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80080b6:	68bb      	ldr	r3, [r7, #8]
 80080b8:	691b      	ldr	r3, [r3, #16]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d102      	bne.n	80080c4 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80080be:	2303      	movs	r3, #3
 80080c0:	61fb      	str	r3, [r7, #28]
 80080c2:	e014      	b.n	80080ee <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	691b      	ldr	r3, [r3, #16]
 80080c8:	2b04      	cmp	r3, #4
 80080ca:	d00b      	beq.n	80080e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80080d0:	2b02      	cmp	r3, #2
 80080d2:	d007      	beq.n	80080e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80080d4:	68bb      	ldr	r3, [r7, #8]
 80080d6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80080d8:	2b03      	cmp	r3, #3
 80080da:	d003      	beq.n	80080e4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80080e0:	2b07      	cmp	r3, #7
 80080e2:	d102      	bne.n	80080ea <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80080e4:	2302      	movs	r3, #2
 80080e6:	61fb      	str	r3, [r7, #28]
 80080e8:	e001      	b.n	80080ee <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80080ea:	2301      	movs	r3, #1
 80080ec:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	461a      	mov	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	01db      	lsls	r3, r3, #7
 80080f8:	4413      	add	r3, r2
 80080fa:	3384      	adds	r3, #132	; 0x84
 80080fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	6812      	ldr	r2, [r2, #0]
 8008102:	4611      	mov	r1, r2
 8008104:	687a      	ldr	r2, [r7, #4]
 8008106:	01d2      	lsls	r2, r2, #7
 8008108:	440a      	add	r2, r1
 800810a:	3284      	adds	r2, #132	; 0x84
 800810c:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008110:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008116:	69fa      	ldr	r2, [r7, #28]
 8008118:	fb02 f303 	mul.w	r3, r2, r3
 800811c:	041a      	lsls	r2, r3, #16
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	6859      	ldr	r1, [r3, #4]
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	1acb      	subs	r3, r1, r3
 8008128:	69f9      	ldr	r1, [r7, #28]
 800812a:	fb01 f303 	mul.w	r3, r1, r3
 800812e:	3303      	adds	r3, #3
 8008130:	68f9      	ldr	r1, [r7, #12]
 8008132:	6809      	ldr	r1, [r1, #0]
 8008134:	4608      	mov	r0, r1
 8008136:	6879      	ldr	r1, [r7, #4]
 8008138:	01c9      	lsls	r1, r1, #7
 800813a:	4401      	add	r1, r0
 800813c:	3184      	adds	r1, #132	; 0x84
 800813e:	4313      	orrs	r3, r2
 8008140:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	461a      	mov	r2, r3
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	01db      	lsls	r3, r3, #7
 800814c:	4413      	add	r3, r2
 800814e:	3384      	adds	r3, #132	; 0x84
 8008150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4619      	mov	r1, r3
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	01db      	lsls	r3, r3, #7
 800815c:	440b      	add	r3, r1
 800815e:	3384      	adds	r3, #132	; 0x84
 8008160:	4619      	mov	r1, r3
 8008162:	4b14      	ldr	r3, [pc, #80]	; (80081b4 <LTDC_SetConfig+0x330>)
 8008164:	4013      	ands	r3, r2
 8008166:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	461a      	mov	r2, r3
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	01db      	lsls	r3, r3, #7
 8008172:	4413      	add	r3, r2
 8008174:	3384      	adds	r3, #132	; 0x84
 8008176:	461a      	mov	r2, r3
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800817c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	461a      	mov	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	01db      	lsls	r3, r3, #7
 8008188:	4413      	add	r3, r2
 800818a:	3384      	adds	r3, #132	; 0x84
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68fa      	ldr	r2, [r7, #12]
 8008190:	6812      	ldr	r2, [r2, #0]
 8008192:	4611      	mov	r1, r2
 8008194:	687a      	ldr	r2, [r7, #4]
 8008196:	01d2      	lsls	r2, r2, #7
 8008198:	440a      	add	r2, r1
 800819a:	3284      	adds	r2, #132	; 0x84
 800819c:	f043 0301 	orr.w	r3, r3, #1
 80081a0:	6013      	str	r3, [r2, #0]
}
 80081a2:	bf00      	nop
 80081a4:	3724      	adds	r7, #36	; 0x24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	fffff8f8 	.word	0xfffff8f8
 80081b4:	fffff800 	.word	0xfffff800

080081b8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80081b8:	b480      	push	{r7}
 80081ba:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80081bc:	4b05      	ldr	r3, [pc, #20]	; (80081d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a04      	ldr	r2, [pc, #16]	; (80081d4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80081c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081c6:	6013      	str	r3, [r2, #0]
}
 80081c8:	bf00      	nop
 80081ca:	46bd      	mov	sp, r7
 80081cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d0:	4770      	bx	lr
 80081d2:	bf00      	nop
 80081d4:	40007000 	.word	0x40007000

080081d8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80081de:	2300      	movs	r3, #0
 80081e0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80081e2:	4b23      	ldr	r3, [pc, #140]	; (8008270 <HAL_PWREx_EnableOverDrive+0x98>)
 80081e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e6:	4a22      	ldr	r2, [pc, #136]	; (8008270 <HAL_PWREx_EnableOverDrive+0x98>)
 80081e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80081ec:	6413      	str	r3, [r2, #64]	; 0x40
 80081ee:	4b20      	ldr	r3, [pc, #128]	; (8008270 <HAL_PWREx_EnableOverDrive+0x98>)
 80081f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80081f6:	603b      	str	r3, [r7, #0]
 80081f8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80081fa:	4b1e      	ldr	r3, [pc, #120]	; (8008274 <HAL_PWREx_EnableOverDrive+0x9c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	4a1d      	ldr	r2, [pc, #116]	; (8008274 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008200:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008204:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008206:	f7fd fca7 	bl	8005b58 <HAL_GetTick>
 800820a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800820c:	e009      	b.n	8008222 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800820e:	f7fd fca3 	bl	8005b58 <HAL_GetTick>
 8008212:	4602      	mov	r2, r0
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	1ad3      	subs	r3, r2, r3
 8008218:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800821c:	d901      	bls.n	8008222 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800821e:	2303      	movs	r3, #3
 8008220:	e022      	b.n	8008268 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008222:	4b14      	ldr	r3, [pc, #80]	; (8008274 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800822a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800822e:	d1ee      	bne.n	800820e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008230:	4b10      	ldr	r3, [pc, #64]	; (8008274 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a0f      	ldr	r2, [pc, #60]	; (8008274 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800823a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800823c:	f7fd fc8c 	bl	8005b58 <HAL_GetTick>
 8008240:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008242:	e009      	b.n	8008258 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008244:	f7fd fc88 	bl	8005b58 <HAL_GetTick>
 8008248:	4602      	mov	r2, r0
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008252:	d901      	bls.n	8008258 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008254:	2303      	movs	r3, #3
 8008256:	e007      	b.n	8008268 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008258:	4b06      	ldr	r3, [pc, #24]	; (8008274 <HAL_PWREx_EnableOverDrive+0x9c>)
 800825a:	685b      	ldr	r3, [r3, #4]
 800825c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008260:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008264:	d1ee      	bne.n	8008244 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	3708      	adds	r7, #8
 800826c:	46bd      	mov	sp, r7
 800826e:	bd80      	pop	{r7, pc}
 8008270:	40023800 	.word	0x40023800
 8008274:	40007000 	.word	0x40007000

08008278 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b086      	sub	sp, #24
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008280:	2300      	movs	r3, #0
 8008282:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d101      	bne.n	800828e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800828a:	2301      	movs	r3, #1
 800828c:	e291      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f003 0301 	and.w	r3, r3, #1
 8008296:	2b00      	cmp	r3, #0
 8008298:	f000 8087 	beq.w	80083aa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800829c:	4b96      	ldr	r3, [pc, #600]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	f003 030c 	and.w	r3, r3, #12
 80082a4:	2b04      	cmp	r3, #4
 80082a6:	d00c      	beq.n	80082c2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80082a8:	4b93      	ldr	r3, [pc, #588]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80082aa:	689b      	ldr	r3, [r3, #8]
 80082ac:	f003 030c 	and.w	r3, r3, #12
 80082b0:	2b08      	cmp	r3, #8
 80082b2:	d112      	bne.n	80082da <HAL_RCC_OscConfig+0x62>
 80082b4:	4b90      	ldr	r3, [pc, #576]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80082b6:	685b      	ldr	r3, [r3, #4]
 80082b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80082c0:	d10b      	bne.n	80082da <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80082c2:	4b8d      	ldr	r3, [pc, #564]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d06c      	beq.n	80083a8 <HAL_RCC_OscConfig+0x130>
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	685b      	ldr	r3, [r3, #4]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d168      	bne.n	80083a8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e26b      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082e2:	d106      	bne.n	80082f2 <HAL_RCC_OscConfig+0x7a>
 80082e4:	4b84      	ldr	r3, [pc, #528]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	4a83      	ldr	r2, [pc, #524]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80082ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082ee:	6013      	str	r3, [r2, #0]
 80082f0:	e02e      	b.n	8008350 <HAL_RCC_OscConfig+0xd8>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d10c      	bne.n	8008314 <HAL_RCC_OscConfig+0x9c>
 80082fa:	4b7f      	ldr	r3, [pc, #508]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a7e      	ldr	r2, [pc, #504]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008300:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008304:	6013      	str	r3, [r2, #0]
 8008306:	4b7c      	ldr	r3, [pc, #496]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a7b      	ldr	r2, [pc, #492]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 800830c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008310:	6013      	str	r3, [r2, #0]
 8008312:	e01d      	b.n	8008350 <HAL_RCC_OscConfig+0xd8>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800831c:	d10c      	bne.n	8008338 <HAL_RCC_OscConfig+0xc0>
 800831e:	4b76      	ldr	r3, [pc, #472]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a75      	ldr	r2, [pc, #468]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008324:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008328:	6013      	str	r3, [r2, #0]
 800832a:	4b73      	ldr	r3, [pc, #460]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a72      	ldr	r2, [pc, #456]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008334:	6013      	str	r3, [r2, #0]
 8008336:	e00b      	b.n	8008350 <HAL_RCC_OscConfig+0xd8>
 8008338:	4b6f      	ldr	r3, [pc, #444]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	4a6e      	ldr	r2, [pc, #440]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 800833e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	4b6c      	ldr	r3, [pc, #432]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a6b      	ldr	r2, [pc, #428]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 800834a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800834e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	685b      	ldr	r3, [r3, #4]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d013      	beq.n	8008380 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008358:	f7fd fbfe 	bl	8005b58 <HAL_GetTick>
 800835c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800835e:	e008      	b.n	8008372 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008360:	f7fd fbfa 	bl	8005b58 <HAL_GetTick>
 8008364:	4602      	mov	r2, r0
 8008366:	693b      	ldr	r3, [r7, #16]
 8008368:	1ad3      	subs	r3, r2, r3
 800836a:	2b64      	cmp	r3, #100	; 0x64
 800836c:	d901      	bls.n	8008372 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800836e:	2303      	movs	r3, #3
 8008370:	e21f      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008372:	4b61      	ldr	r3, [pc, #388]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800837a:	2b00      	cmp	r3, #0
 800837c:	d0f0      	beq.n	8008360 <HAL_RCC_OscConfig+0xe8>
 800837e:	e014      	b.n	80083aa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008380:	f7fd fbea 	bl	8005b58 <HAL_GetTick>
 8008384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008386:	e008      	b.n	800839a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008388:	f7fd fbe6 	bl	8005b58 <HAL_GetTick>
 800838c:	4602      	mov	r2, r0
 800838e:	693b      	ldr	r3, [r7, #16]
 8008390:	1ad3      	subs	r3, r2, r3
 8008392:	2b64      	cmp	r3, #100	; 0x64
 8008394:	d901      	bls.n	800839a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008396:	2303      	movs	r3, #3
 8008398:	e20b      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800839a:	4b57      	ldr	r3, [pc, #348]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d1f0      	bne.n	8008388 <HAL_RCC_OscConfig+0x110>
 80083a6:	e000      	b.n	80083aa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f003 0302 	and.w	r3, r3, #2
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d069      	beq.n	800848a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80083b6:	4b50      	ldr	r3, [pc, #320]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	f003 030c 	and.w	r3, r3, #12
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d00b      	beq.n	80083da <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80083c2:	4b4d      	ldr	r3, [pc, #308]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f003 030c 	and.w	r3, r3, #12
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	d11c      	bne.n	8008408 <HAL_RCC_OscConfig+0x190>
 80083ce:	4b4a      	ldr	r3, [pc, #296]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d116      	bne.n	8008408 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80083da:	4b47      	ldr	r3, [pc, #284]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d005      	beq.n	80083f2 <HAL_RCC_OscConfig+0x17a>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d001      	beq.n	80083f2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80083ee:	2301      	movs	r3, #1
 80083f0:	e1df      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80083f2:	4b41      	ldr	r3, [pc, #260]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	691b      	ldr	r3, [r3, #16]
 80083fe:	00db      	lsls	r3, r3, #3
 8008400:	493d      	ldr	r1, [pc, #244]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008402:	4313      	orrs	r3, r2
 8008404:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008406:	e040      	b.n	800848a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	68db      	ldr	r3, [r3, #12]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d023      	beq.n	8008458 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008410:	4b39      	ldr	r3, [pc, #228]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a38      	ldr	r2, [pc, #224]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008416:	f043 0301 	orr.w	r3, r3, #1
 800841a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800841c:	f7fd fb9c 	bl	8005b58 <HAL_GetTick>
 8008420:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008422:	e008      	b.n	8008436 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008424:	f7fd fb98 	bl	8005b58 <HAL_GetTick>
 8008428:	4602      	mov	r2, r0
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	1ad3      	subs	r3, r2, r3
 800842e:	2b02      	cmp	r3, #2
 8008430:	d901      	bls.n	8008436 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008432:	2303      	movs	r3, #3
 8008434:	e1bd      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008436:	4b30      	ldr	r3, [pc, #192]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	f003 0302 	and.w	r3, r3, #2
 800843e:	2b00      	cmp	r3, #0
 8008440:	d0f0      	beq.n	8008424 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008442:	4b2d      	ldr	r3, [pc, #180]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	00db      	lsls	r3, r3, #3
 8008450:	4929      	ldr	r1, [pc, #164]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008452:	4313      	orrs	r3, r2
 8008454:	600b      	str	r3, [r1, #0]
 8008456:	e018      	b.n	800848a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008458:	4b27      	ldr	r3, [pc, #156]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a26      	ldr	r2, [pc, #152]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 800845e:	f023 0301 	bic.w	r3, r3, #1
 8008462:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008464:	f7fd fb78 	bl	8005b58 <HAL_GetTick>
 8008468:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800846a:	e008      	b.n	800847e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800846c:	f7fd fb74 	bl	8005b58 <HAL_GetTick>
 8008470:	4602      	mov	r2, r0
 8008472:	693b      	ldr	r3, [r7, #16]
 8008474:	1ad3      	subs	r3, r2, r3
 8008476:	2b02      	cmp	r3, #2
 8008478:	d901      	bls.n	800847e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800847a:	2303      	movs	r3, #3
 800847c:	e199      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800847e:	4b1e      	ldr	r3, [pc, #120]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d1f0      	bne.n	800846c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f003 0308 	and.w	r3, r3, #8
 8008492:	2b00      	cmp	r3, #0
 8008494:	d038      	beq.n	8008508 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	695b      	ldr	r3, [r3, #20]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d019      	beq.n	80084d2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800849e:	4b16      	ldr	r3, [pc, #88]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80084a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084a2:	4a15      	ldr	r2, [pc, #84]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80084a4:	f043 0301 	orr.w	r3, r3, #1
 80084a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084aa:	f7fd fb55 	bl	8005b58 <HAL_GetTick>
 80084ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084b0:	e008      	b.n	80084c4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084b2:	f7fd fb51 	bl	8005b58 <HAL_GetTick>
 80084b6:	4602      	mov	r2, r0
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	1ad3      	subs	r3, r2, r3
 80084bc:	2b02      	cmp	r3, #2
 80084be:	d901      	bls.n	80084c4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e176      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80084c4:	4b0c      	ldr	r3, [pc, #48]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80084c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0f0      	beq.n	80084b2 <HAL_RCC_OscConfig+0x23a>
 80084d0:	e01a      	b.n	8008508 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80084d2:	4b09      	ldr	r3, [pc, #36]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80084d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084d6:	4a08      	ldr	r2, [pc, #32]	; (80084f8 <HAL_RCC_OscConfig+0x280>)
 80084d8:	f023 0301 	bic.w	r3, r3, #1
 80084dc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80084de:	f7fd fb3b 	bl	8005b58 <HAL_GetTick>
 80084e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084e4:	e00a      	b.n	80084fc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80084e6:	f7fd fb37 	bl	8005b58 <HAL_GetTick>
 80084ea:	4602      	mov	r2, r0
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	1ad3      	subs	r3, r2, r3
 80084f0:	2b02      	cmp	r3, #2
 80084f2:	d903      	bls.n	80084fc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80084f4:	2303      	movs	r3, #3
 80084f6:	e15c      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
 80084f8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80084fc:	4b91      	ldr	r3, [pc, #580]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80084fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008500:	f003 0302 	and.w	r3, r3, #2
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1ee      	bne.n	80084e6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f003 0304 	and.w	r3, r3, #4
 8008510:	2b00      	cmp	r3, #0
 8008512:	f000 80a4 	beq.w	800865e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008516:	4b8b      	ldr	r3, [pc, #556]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d10d      	bne.n	800853e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008522:	4b88      	ldr	r3, [pc, #544]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008526:	4a87      	ldr	r2, [pc, #540]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008528:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800852c:	6413      	str	r3, [r2, #64]	; 0x40
 800852e:	4b85      	ldr	r3, [pc, #532]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008536:	60bb      	str	r3, [r7, #8]
 8008538:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800853a:	2301      	movs	r3, #1
 800853c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800853e:	4b82      	ldr	r3, [pc, #520]	; (8008748 <HAL_RCC_OscConfig+0x4d0>)
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008546:	2b00      	cmp	r3, #0
 8008548:	d118      	bne.n	800857c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800854a:	4b7f      	ldr	r3, [pc, #508]	; (8008748 <HAL_RCC_OscConfig+0x4d0>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	4a7e      	ldr	r2, [pc, #504]	; (8008748 <HAL_RCC_OscConfig+0x4d0>)
 8008550:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008554:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008556:	f7fd faff 	bl	8005b58 <HAL_GetTick>
 800855a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800855c:	e008      	b.n	8008570 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800855e:	f7fd fafb 	bl	8005b58 <HAL_GetTick>
 8008562:	4602      	mov	r2, r0
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	1ad3      	subs	r3, r2, r3
 8008568:	2b64      	cmp	r3, #100	; 0x64
 800856a:	d901      	bls.n	8008570 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800856c:	2303      	movs	r3, #3
 800856e:	e120      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008570:	4b75      	ldr	r3, [pc, #468]	; (8008748 <HAL_RCC_OscConfig+0x4d0>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008578:	2b00      	cmp	r3, #0
 800857a:	d0f0      	beq.n	800855e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	2b01      	cmp	r3, #1
 8008582:	d106      	bne.n	8008592 <HAL_RCC_OscConfig+0x31a>
 8008584:	4b6f      	ldr	r3, [pc, #444]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008588:	4a6e      	ldr	r2, [pc, #440]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 800858a:	f043 0301 	orr.w	r3, r3, #1
 800858e:	6713      	str	r3, [r2, #112]	; 0x70
 8008590:	e02d      	b.n	80085ee <HAL_RCC_OscConfig+0x376>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	689b      	ldr	r3, [r3, #8]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d10c      	bne.n	80085b4 <HAL_RCC_OscConfig+0x33c>
 800859a:	4b6a      	ldr	r3, [pc, #424]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 800859c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800859e:	4a69      	ldr	r2, [pc, #420]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80085a0:	f023 0301 	bic.w	r3, r3, #1
 80085a4:	6713      	str	r3, [r2, #112]	; 0x70
 80085a6:	4b67      	ldr	r3, [pc, #412]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80085a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085aa:	4a66      	ldr	r2, [pc, #408]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80085ac:	f023 0304 	bic.w	r3, r3, #4
 80085b0:	6713      	str	r3, [r2, #112]	; 0x70
 80085b2:	e01c      	b.n	80085ee <HAL_RCC_OscConfig+0x376>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	2b05      	cmp	r3, #5
 80085ba:	d10c      	bne.n	80085d6 <HAL_RCC_OscConfig+0x35e>
 80085bc:	4b61      	ldr	r3, [pc, #388]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80085be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085c0:	4a60      	ldr	r2, [pc, #384]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80085c2:	f043 0304 	orr.w	r3, r3, #4
 80085c6:	6713      	str	r3, [r2, #112]	; 0x70
 80085c8:	4b5e      	ldr	r3, [pc, #376]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80085ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085cc:	4a5d      	ldr	r2, [pc, #372]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80085ce:	f043 0301 	orr.w	r3, r3, #1
 80085d2:	6713      	str	r3, [r2, #112]	; 0x70
 80085d4:	e00b      	b.n	80085ee <HAL_RCC_OscConfig+0x376>
 80085d6:	4b5b      	ldr	r3, [pc, #364]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80085d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085da:	4a5a      	ldr	r2, [pc, #360]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80085dc:	f023 0301 	bic.w	r3, r3, #1
 80085e0:	6713      	str	r3, [r2, #112]	; 0x70
 80085e2:	4b58      	ldr	r3, [pc, #352]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80085e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80085e6:	4a57      	ldr	r2, [pc, #348]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80085e8:	f023 0304 	bic.w	r3, r3, #4
 80085ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	689b      	ldr	r3, [r3, #8]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d015      	beq.n	8008622 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085f6:	f7fd faaf 	bl	8005b58 <HAL_GetTick>
 80085fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085fc:	e00a      	b.n	8008614 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085fe:	f7fd faab 	bl	8005b58 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	693b      	ldr	r3, [r7, #16]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	f241 3288 	movw	r2, #5000	; 0x1388
 800860c:	4293      	cmp	r3, r2
 800860e:	d901      	bls.n	8008614 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e0ce      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008614:	4b4b      	ldr	r3, [pc, #300]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008618:	f003 0302 	and.w	r3, r3, #2
 800861c:	2b00      	cmp	r3, #0
 800861e:	d0ee      	beq.n	80085fe <HAL_RCC_OscConfig+0x386>
 8008620:	e014      	b.n	800864c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008622:	f7fd fa99 	bl	8005b58 <HAL_GetTick>
 8008626:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008628:	e00a      	b.n	8008640 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800862a:	f7fd fa95 	bl	8005b58 <HAL_GetTick>
 800862e:	4602      	mov	r2, r0
 8008630:	693b      	ldr	r3, [r7, #16]
 8008632:	1ad3      	subs	r3, r2, r3
 8008634:	f241 3288 	movw	r2, #5000	; 0x1388
 8008638:	4293      	cmp	r3, r2
 800863a:	d901      	bls.n	8008640 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800863c:	2303      	movs	r3, #3
 800863e:	e0b8      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008640:	4b40      	ldr	r3, [pc, #256]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008642:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008644:	f003 0302 	and.w	r3, r3, #2
 8008648:	2b00      	cmp	r3, #0
 800864a:	d1ee      	bne.n	800862a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800864c:	7dfb      	ldrb	r3, [r7, #23]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d105      	bne.n	800865e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008652:	4b3c      	ldr	r3, [pc, #240]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008656:	4a3b      	ldr	r2, [pc, #236]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008658:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800865c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	699b      	ldr	r3, [r3, #24]
 8008662:	2b00      	cmp	r3, #0
 8008664:	f000 80a4 	beq.w	80087b0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008668:	4b36      	ldr	r3, [pc, #216]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 800866a:	689b      	ldr	r3, [r3, #8]
 800866c:	f003 030c 	and.w	r3, r3, #12
 8008670:	2b08      	cmp	r3, #8
 8008672:	d06b      	beq.n	800874c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	2b02      	cmp	r3, #2
 800867a:	d149      	bne.n	8008710 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800867c:	4b31      	ldr	r3, [pc, #196]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a30      	ldr	r2, [pc, #192]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008688:	f7fd fa66 	bl	8005b58 <HAL_GetTick>
 800868c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800868e:	e008      	b.n	80086a2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008690:	f7fd fa62 	bl	8005b58 <HAL_GetTick>
 8008694:	4602      	mov	r2, r0
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	1ad3      	subs	r3, r2, r3
 800869a:	2b02      	cmp	r3, #2
 800869c:	d901      	bls.n	80086a2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800869e:	2303      	movs	r3, #3
 80086a0:	e087      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80086a2:	4b28      	ldr	r3, [pc, #160]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d1f0      	bne.n	8008690 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	69da      	ldr	r2, [r3, #28]
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6a1b      	ldr	r3, [r3, #32]
 80086b6:	431a      	orrs	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086bc:	019b      	lsls	r3, r3, #6
 80086be:	431a      	orrs	r2, r3
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086c4:	085b      	lsrs	r3, r3, #1
 80086c6:	3b01      	subs	r3, #1
 80086c8:	041b      	lsls	r3, r3, #16
 80086ca:	431a      	orrs	r2, r3
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d0:	061b      	lsls	r3, r3, #24
 80086d2:	4313      	orrs	r3, r2
 80086d4:	4a1b      	ldr	r2, [pc, #108]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80086d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80086da:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80086dc:	4b19      	ldr	r3, [pc, #100]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	4a18      	ldr	r2, [pc, #96]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 80086e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086e8:	f7fd fa36 	bl	8005b58 <HAL_GetTick>
 80086ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80086ee:	e008      	b.n	8008702 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80086f0:	f7fd fa32 	bl	8005b58 <HAL_GetTick>
 80086f4:	4602      	mov	r2, r0
 80086f6:	693b      	ldr	r3, [r7, #16]
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	2b02      	cmp	r3, #2
 80086fc:	d901      	bls.n	8008702 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80086fe:	2303      	movs	r3, #3
 8008700:	e057      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008702:	4b10      	ldr	r3, [pc, #64]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800870a:	2b00      	cmp	r3, #0
 800870c:	d0f0      	beq.n	80086f0 <HAL_RCC_OscConfig+0x478>
 800870e:	e04f      	b.n	80087b0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008710:	4b0c      	ldr	r3, [pc, #48]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a0b      	ldr	r2, [pc, #44]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800871a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800871c:	f7fd fa1c 	bl	8005b58 <HAL_GetTick>
 8008720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008722:	e008      	b.n	8008736 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008724:	f7fd fa18 	bl	8005b58 <HAL_GetTick>
 8008728:	4602      	mov	r2, r0
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	2b02      	cmp	r3, #2
 8008730:	d901      	bls.n	8008736 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008732:	2303      	movs	r3, #3
 8008734:	e03d      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008736:	4b03      	ldr	r3, [pc, #12]	; (8008744 <HAL_RCC_OscConfig+0x4cc>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800873e:	2b00      	cmp	r3, #0
 8008740:	d1f0      	bne.n	8008724 <HAL_RCC_OscConfig+0x4ac>
 8008742:	e035      	b.n	80087b0 <HAL_RCC_OscConfig+0x538>
 8008744:	40023800 	.word	0x40023800
 8008748:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800874c:	4b1b      	ldr	r3, [pc, #108]	; (80087bc <HAL_RCC_OscConfig+0x544>)
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	699b      	ldr	r3, [r3, #24]
 8008756:	2b01      	cmp	r3, #1
 8008758:	d028      	beq.n	80087ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008764:	429a      	cmp	r2, r3
 8008766:	d121      	bne.n	80087ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008772:	429a      	cmp	r2, r3
 8008774:	d11a      	bne.n	80087ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008776:	68fa      	ldr	r2, [r7, #12]
 8008778:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800877c:	4013      	ands	r3, r2
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008782:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008784:	4293      	cmp	r3, r2
 8008786:	d111      	bne.n	80087ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008792:	085b      	lsrs	r3, r3, #1
 8008794:	3b01      	subs	r3, #1
 8008796:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008798:	429a      	cmp	r2, r3
 800879a:	d107      	bne.n	80087ac <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800879c:	68fb      	ldr	r3, [r7, #12]
 800879e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80087a8:	429a      	cmp	r2, r3
 80087aa:	d001      	beq.n	80087b0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80087ac:	2301      	movs	r3, #1
 80087ae:	e000      	b.n	80087b2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80087b0:	2300      	movs	r3, #0
}
 80087b2:	4618      	mov	r0, r3
 80087b4:	3718      	adds	r7, #24
 80087b6:	46bd      	mov	sp, r7
 80087b8:	bd80      	pop	{r7, pc}
 80087ba:	bf00      	nop
 80087bc:	40023800 	.word	0x40023800

080087c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
 80087c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80087ca:	2300      	movs	r3, #0
 80087cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e0d0      	b.n	800897a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80087d8:	4b6a      	ldr	r3, [pc, #424]	; (8008984 <HAL_RCC_ClockConfig+0x1c4>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f003 030f 	and.w	r3, r3, #15
 80087e0:	683a      	ldr	r2, [r7, #0]
 80087e2:	429a      	cmp	r2, r3
 80087e4:	d910      	bls.n	8008808 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80087e6:	4b67      	ldr	r3, [pc, #412]	; (8008984 <HAL_RCC_ClockConfig+0x1c4>)
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	f023 020f 	bic.w	r2, r3, #15
 80087ee:	4965      	ldr	r1, [pc, #404]	; (8008984 <HAL_RCC_ClockConfig+0x1c4>)
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	4313      	orrs	r3, r2
 80087f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80087f6:	4b63      	ldr	r3, [pc, #396]	; (8008984 <HAL_RCC_ClockConfig+0x1c4>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f003 030f 	and.w	r3, r3, #15
 80087fe:	683a      	ldr	r2, [r7, #0]
 8008800:	429a      	cmp	r2, r3
 8008802:	d001      	beq.n	8008808 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008804:	2301      	movs	r3, #1
 8008806:	e0b8      	b.n	800897a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0302 	and.w	r3, r3, #2
 8008810:	2b00      	cmp	r3, #0
 8008812:	d020      	beq.n	8008856 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0304 	and.w	r3, r3, #4
 800881c:	2b00      	cmp	r3, #0
 800881e:	d005      	beq.n	800882c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008820:	4b59      	ldr	r3, [pc, #356]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	4a58      	ldr	r2, [pc, #352]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 8008826:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800882a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f003 0308 	and.w	r3, r3, #8
 8008834:	2b00      	cmp	r3, #0
 8008836:	d005      	beq.n	8008844 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008838:	4b53      	ldr	r3, [pc, #332]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 800883a:	689b      	ldr	r3, [r3, #8]
 800883c:	4a52      	ldr	r2, [pc, #328]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 800883e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008842:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008844:	4b50      	ldr	r3, [pc, #320]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 8008846:	689b      	ldr	r3, [r3, #8]
 8008848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	494d      	ldr	r1, [pc, #308]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 8008852:	4313      	orrs	r3, r2
 8008854:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	f003 0301 	and.w	r3, r3, #1
 800885e:	2b00      	cmp	r3, #0
 8008860:	d040      	beq.n	80088e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d107      	bne.n	800887a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800886a:	4b47      	ldr	r3, [pc, #284]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008872:	2b00      	cmp	r3, #0
 8008874:	d115      	bne.n	80088a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e07f      	b.n	800897a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	2b02      	cmp	r3, #2
 8008880:	d107      	bne.n	8008892 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008882:	4b41      	ldr	r3, [pc, #260]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800888a:	2b00      	cmp	r3, #0
 800888c:	d109      	bne.n	80088a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800888e:	2301      	movs	r3, #1
 8008890:	e073      	b.n	800897a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008892:	4b3d      	ldr	r3, [pc, #244]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f003 0302 	and.w	r3, r3, #2
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e06b      	b.n	800897a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80088a2:	4b39      	ldr	r3, [pc, #228]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 80088a4:	689b      	ldr	r3, [r3, #8]
 80088a6:	f023 0203 	bic.w	r2, r3, #3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	4936      	ldr	r1, [pc, #216]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 80088b0:	4313      	orrs	r3, r2
 80088b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088b4:	f7fd f950 	bl	8005b58 <HAL_GetTick>
 80088b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088ba:	e00a      	b.n	80088d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80088bc:	f7fd f94c 	bl	8005b58 <HAL_GetTick>
 80088c0:	4602      	mov	r2, r0
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	1ad3      	subs	r3, r2, r3
 80088c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d901      	bls.n	80088d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e053      	b.n	800897a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80088d2:	4b2d      	ldr	r3, [pc, #180]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	f003 020c 	and.w	r2, r3, #12
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	685b      	ldr	r3, [r3, #4]
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	429a      	cmp	r2, r3
 80088e2:	d1eb      	bne.n	80088bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80088e4:	4b27      	ldr	r3, [pc, #156]	; (8008984 <HAL_RCC_ClockConfig+0x1c4>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 030f 	and.w	r3, r3, #15
 80088ec:	683a      	ldr	r2, [r7, #0]
 80088ee:	429a      	cmp	r2, r3
 80088f0:	d210      	bcs.n	8008914 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80088f2:	4b24      	ldr	r3, [pc, #144]	; (8008984 <HAL_RCC_ClockConfig+0x1c4>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	f023 020f 	bic.w	r2, r3, #15
 80088fa:	4922      	ldr	r1, [pc, #136]	; (8008984 <HAL_RCC_ClockConfig+0x1c4>)
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	4313      	orrs	r3, r2
 8008900:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008902:	4b20      	ldr	r3, [pc, #128]	; (8008984 <HAL_RCC_ClockConfig+0x1c4>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	f003 030f 	and.w	r3, r3, #15
 800890a:	683a      	ldr	r2, [r7, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d001      	beq.n	8008914 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e032      	b.n	800897a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f003 0304 	and.w	r3, r3, #4
 800891c:	2b00      	cmp	r3, #0
 800891e:	d008      	beq.n	8008932 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008920:	4b19      	ldr	r3, [pc, #100]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 8008922:	689b      	ldr	r3, [r3, #8]
 8008924:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	4916      	ldr	r1, [pc, #88]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 800892e:	4313      	orrs	r3, r2
 8008930:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0308 	and.w	r3, r3, #8
 800893a:	2b00      	cmp	r3, #0
 800893c:	d009      	beq.n	8008952 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800893e:	4b12      	ldr	r3, [pc, #72]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	691b      	ldr	r3, [r3, #16]
 800894a:	00db      	lsls	r3, r3, #3
 800894c:	490e      	ldr	r1, [pc, #56]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 800894e:	4313      	orrs	r3, r2
 8008950:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008952:	f000 f821 	bl	8008998 <HAL_RCC_GetSysClockFreq>
 8008956:	4602      	mov	r2, r0
 8008958:	4b0b      	ldr	r3, [pc, #44]	; (8008988 <HAL_RCC_ClockConfig+0x1c8>)
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	091b      	lsrs	r3, r3, #4
 800895e:	f003 030f 	and.w	r3, r3, #15
 8008962:	490a      	ldr	r1, [pc, #40]	; (800898c <HAL_RCC_ClockConfig+0x1cc>)
 8008964:	5ccb      	ldrb	r3, [r1, r3]
 8008966:	fa22 f303 	lsr.w	r3, r2, r3
 800896a:	4a09      	ldr	r2, [pc, #36]	; (8008990 <HAL_RCC_ClockConfig+0x1d0>)
 800896c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800896e:	4b09      	ldr	r3, [pc, #36]	; (8008994 <HAL_RCC_ClockConfig+0x1d4>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4618      	mov	r0, r3
 8008974:	f7fb fc6e 	bl	8004254 <HAL_InitTick>

  return HAL_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}
 8008982:	bf00      	nop
 8008984:	40023c00 	.word	0x40023c00
 8008988:	40023800 	.word	0x40023800
 800898c:	08015d80 	.word	0x08015d80
 8008990:	20000040 	.word	0x20000040
 8008994:	20000078 	.word	0x20000078

08008998 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008998:	b5b0      	push	{r4, r5, r7, lr}
 800899a:	b084      	sub	sp, #16
 800899c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800899e:	2100      	movs	r1, #0
 80089a0:	6079      	str	r1, [r7, #4]
 80089a2:	2100      	movs	r1, #0
 80089a4:	60f9      	str	r1, [r7, #12]
 80089a6:	2100      	movs	r1, #0
 80089a8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80089aa:	2100      	movs	r1, #0
 80089ac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80089ae:	4952      	ldr	r1, [pc, #328]	; (8008af8 <HAL_RCC_GetSysClockFreq+0x160>)
 80089b0:	6889      	ldr	r1, [r1, #8]
 80089b2:	f001 010c 	and.w	r1, r1, #12
 80089b6:	2908      	cmp	r1, #8
 80089b8:	d00d      	beq.n	80089d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80089ba:	2908      	cmp	r1, #8
 80089bc:	f200 8094 	bhi.w	8008ae8 <HAL_RCC_GetSysClockFreq+0x150>
 80089c0:	2900      	cmp	r1, #0
 80089c2:	d002      	beq.n	80089ca <HAL_RCC_GetSysClockFreq+0x32>
 80089c4:	2904      	cmp	r1, #4
 80089c6:	d003      	beq.n	80089d0 <HAL_RCC_GetSysClockFreq+0x38>
 80089c8:	e08e      	b.n	8008ae8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80089ca:	4b4c      	ldr	r3, [pc, #304]	; (8008afc <HAL_RCC_GetSysClockFreq+0x164>)
 80089cc:	60bb      	str	r3, [r7, #8]
      break;
 80089ce:	e08e      	b.n	8008aee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80089d0:	4b4b      	ldr	r3, [pc, #300]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x168>)
 80089d2:	60bb      	str	r3, [r7, #8]
      break;
 80089d4:	e08b      	b.n	8008aee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80089d6:	4948      	ldr	r1, [pc, #288]	; (8008af8 <HAL_RCC_GetSysClockFreq+0x160>)
 80089d8:	6849      	ldr	r1, [r1, #4]
 80089da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80089de:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80089e0:	4945      	ldr	r1, [pc, #276]	; (8008af8 <HAL_RCC_GetSysClockFreq+0x160>)
 80089e2:	6849      	ldr	r1, [r1, #4]
 80089e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80089e8:	2900      	cmp	r1, #0
 80089ea:	d024      	beq.n	8008a36 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80089ec:	4942      	ldr	r1, [pc, #264]	; (8008af8 <HAL_RCC_GetSysClockFreq+0x160>)
 80089ee:	6849      	ldr	r1, [r1, #4]
 80089f0:	0989      	lsrs	r1, r1, #6
 80089f2:	4608      	mov	r0, r1
 80089f4:	f04f 0100 	mov.w	r1, #0
 80089f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80089fc:	f04f 0500 	mov.w	r5, #0
 8008a00:	ea00 0204 	and.w	r2, r0, r4
 8008a04:	ea01 0305 	and.w	r3, r1, r5
 8008a08:	493d      	ldr	r1, [pc, #244]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x168>)
 8008a0a:	fb01 f003 	mul.w	r0, r1, r3
 8008a0e:	2100      	movs	r1, #0
 8008a10:	fb01 f102 	mul.w	r1, r1, r2
 8008a14:	1844      	adds	r4, r0, r1
 8008a16:	493a      	ldr	r1, [pc, #232]	; (8008b00 <HAL_RCC_GetSysClockFreq+0x168>)
 8008a18:	fba2 0101 	umull	r0, r1, r2, r1
 8008a1c:	1863      	adds	r3, r4, r1
 8008a1e:	4619      	mov	r1, r3
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	461a      	mov	r2, r3
 8008a24:	f04f 0300 	mov.w	r3, #0
 8008a28:	f7f7 fc4a 	bl	80002c0 <__aeabi_uldivmod>
 8008a2c:	4602      	mov	r2, r0
 8008a2e:	460b      	mov	r3, r1
 8008a30:	4613      	mov	r3, r2
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	e04a      	b.n	8008acc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008a36:	4b30      	ldr	r3, [pc, #192]	; (8008af8 <HAL_RCC_GetSysClockFreq+0x160>)
 8008a38:	685b      	ldr	r3, [r3, #4]
 8008a3a:	099b      	lsrs	r3, r3, #6
 8008a3c:	461a      	mov	r2, r3
 8008a3e:	f04f 0300 	mov.w	r3, #0
 8008a42:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008a46:	f04f 0100 	mov.w	r1, #0
 8008a4a:	ea02 0400 	and.w	r4, r2, r0
 8008a4e:	ea03 0501 	and.w	r5, r3, r1
 8008a52:	4620      	mov	r0, r4
 8008a54:	4629      	mov	r1, r5
 8008a56:	f04f 0200 	mov.w	r2, #0
 8008a5a:	f04f 0300 	mov.w	r3, #0
 8008a5e:	014b      	lsls	r3, r1, #5
 8008a60:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008a64:	0142      	lsls	r2, r0, #5
 8008a66:	4610      	mov	r0, r2
 8008a68:	4619      	mov	r1, r3
 8008a6a:	1b00      	subs	r0, r0, r4
 8008a6c:	eb61 0105 	sbc.w	r1, r1, r5
 8008a70:	f04f 0200 	mov.w	r2, #0
 8008a74:	f04f 0300 	mov.w	r3, #0
 8008a78:	018b      	lsls	r3, r1, #6
 8008a7a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008a7e:	0182      	lsls	r2, r0, #6
 8008a80:	1a12      	subs	r2, r2, r0
 8008a82:	eb63 0301 	sbc.w	r3, r3, r1
 8008a86:	f04f 0000 	mov.w	r0, #0
 8008a8a:	f04f 0100 	mov.w	r1, #0
 8008a8e:	00d9      	lsls	r1, r3, #3
 8008a90:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008a94:	00d0      	lsls	r0, r2, #3
 8008a96:	4602      	mov	r2, r0
 8008a98:	460b      	mov	r3, r1
 8008a9a:	1912      	adds	r2, r2, r4
 8008a9c:	eb45 0303 	adc.w	r3, r5, r3
 8008aa0:	f04f 0000 	mov.w	r0, #0
 8008aa4:	f04f 0100 	mov.w	r1, #0
 8008aa8:	0299      	lsls	r1, r3, #10
 8008aaa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008aae:	0290      	lsls	r0, r2, #10
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	460b      	mov	r3, r1
 8008ab4:	4610      	mov	r0, r2
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	461a      	mov	r2, r3
 8008abc:	f04f 0300 	mov.w	r3, #0
 8008ac0:	f7f7 fbfe 	bl	80002c0 <__aeabi_uldivmod>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	460b      	mov	r3, r1
 8008ac8:	4613      	mov	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008acc:	4b0a      	ldr	r3, [pc, #40]	; (8008af8 <HAL_RCC_GetSysClockFreq+0x160>)
 8008ace:	685b      	ldr	r3, [r3, #4]
 8008ad0:	0c1b      	lsrs	r3, r3, #16
 8008ad2:	f003 0303 	and.w	r3, r3, #3
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	005b      	lsls	r3, r3, #1
 8008ada:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008adc:	68fa      	ldr	r2, [r7, #12]
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae4:	60bb      	str	r3, [r7, #8]
      break;
 8008ae6:	e002      	b.n	8008aee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ae8:	4b04      	ldr	r3, [pc, #16]	; (8008afc <HAL_RCC_GetSysClockFreq+0x164>)
 8008aea:	60bb      	str	r3, [r7, #8]
      break;
 8008aec:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008aee:	68bb      	ldr	r3, [r7, #8]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3710      	adds	r7, #16
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bdb0      	pop	{r4, r5, r7, pc}
 8008af8:	40023800 	.word	0x40023800
 8008afc:	00f42400 	.word	0x00f42400
 8008b00:	017d7840 	.word	0x017d7840

08008b04 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008b04:	b480      	push	{r7}
 8008b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008b08:	4b03      	ldr	r3, [pc, #12]	; (8008b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	46bd      	mov	sp, r7
 8008b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b14:	4770      	bx	lr
 8008b16:	bf00      	nop
 8008b18:	20000040 	.word	0x20000040

08008b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008b20:	f7ff fff0 	bl	8008b04 <HAL_RCC_GetHCLKFreq>
 8008b24:	4602      	mov	r2, r0
 8008b26:	4b05      	ldr	r3, [pc, #20]	; (8008b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	0a9b      	lsrs	r3, r3, #10
 8008b2c:	f003 0307 	and.w	r3, r3, #7
 8008b30:	4903      	ldr	r1, [pc, #12]	; (8008b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b32:	5ccb      	ldrb	r3, [r1, r3]
 8008b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	40023800 	.word	0x40023800
 8008b40:	08015d90 	.word	0x08015d90

08008b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008b48:	f7ff ffdc 	bl	8008b04 <HAL_RCC_GetHCLKFreq>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	4b05      	ldr	r3, [pc, #20]	; (8008b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b50:	689b      	ldr	r3, [r3, #8]
 8008b52:	0b5b      	lsrs	r3, r3, #13
 8008b54:	f003 0307 	and.w	r3, r3, #7
 8008b58:	4903      	ldr	r1, [pc, #12]	; (8008b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b5a:	5ccb      	ldrb	r3, [r1, r3]
 8008b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	40023800 	.word	0x40023800
 8008b68:	08015d90 	.word	0x08015d90

08008b6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	220f      	movs	r2, #15
 8008b7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008b7c:	4b12      	ldr	r3, [pc, #72]	; (8008bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	f003 0203 	and.w	r2, r3, #3
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008b88:	4b0f      	ldr	r3, [pc, #60]	; (8008bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8008b8a:	689b      	ldr	r3, [r3, #8]
 8008b8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008b94:	4b0c      	ldr	r3, [pc, #48]	; (8008bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008ba0:	4b09      	ldr	r3, [pc, #36]	; (8008bc8 <HAL_RCC_GetClockConfig+0x5c>)
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	08db      	lsrs	r3, r3, #3
 8008ba6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008bae:	4b07      	ldr	r3, [pc, #28]	; (8008bcc <HAL_RCC_GetClockConfig+0x60>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	f003 020f 	and.w	r2, r3, #15
 8008bb6:	683b      	ldr	r3, [r7, #0]
 8008bb8:	601a      	str	r2, [r3, #0]
}
 8008bba:	bf00      	nop
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	40023800 	.word	0x40023800
 8008bcc:	40023c00 	.word	0x40023c00

08008bd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b088      	sub	sp, #32
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008be0:	2300      	movs	r3, #0
 8008be2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008be8:	2300      	movs	r3, #0
 8008bea:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	f003 0301 	and.w	r3, r3, #1
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d012      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008bf8:	4b69      	ldr	r3, [pc, #420]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	4a68      	ldr	r2, [pc, #416]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008bfe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008c02:	6093      	str	r3, [r2, #8]
 8008c04:	4b66      	ldr	r3, [pc, #408]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c06:	689a      	ldr	r2, [r3, #8]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0c:	4964      	ldr	r1, [pc, #400]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c0e:	4313      	orrs	r3, r2
 8008c10:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d101      	bne.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008c1a:	2301      	movs	r3, #1
 8008c1c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d017      	beq.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008c2a:	4b5d      	ldr	r3, [pc, #372]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c38:	4959      	ldr	r1, [pc, #356]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c3a:	4313      	orrs	r3, r2
 8008c3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c44:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c48:	d101      	bne.n	8008c4e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d101      	bne.n	8008c5a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008c56:	2301      	movs	r3, #1
 8008c58:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d017      	beq.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008c66:	4b4e      	ldr	r3, [pc, #312]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008c6c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c74:	494a      	ldr	r1, [pc, #296]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c84:	d101      	bne.n	8008c8a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008c86:	2301      	movs	r3, #1
 8008c88:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d101      	bne.n	8008c96 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008c92:	2301      	movs	r3, #1
 8008c94:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d001      	beq.n	8008ca6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008ca2:	2301      	movs	r3, #1
 8008ca4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f003 0320 	and.w	r3, r3, #32
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 808b 	beq.w	8008dca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008cb4:	4b3a      	ldr	r3, [pc, #232]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cb8:	4a39      	ldr	r2, [pc, #228]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8008cc0:	4b37      	ldr	r3, [pc, #220]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008cc8:	60bb      	str	r3, [r7, #8]
 8008cca:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008ccc:	4b35      	ldr	r3, [pc, #212]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	4a34      	ldr	r2, [pc, #208]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cd8:	f7fc ff3e 	bl	8005b58 <HAL_GetTick>
 8008cdc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008cde:	e008      	b.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008ce0:	f7fc ff3a 	bl	8005b58 <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	2b64      	cmp	r3, #100	; 0x64
 8008cec:	d901      	bls.n	8008cf2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8008cee:	2303      	movs	r3, #3
 8008cf0:	e357      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008cf2:	4b2c      	ldr	r3, [pc, #176]	; (8008da4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d0f0      	beq.n	8008ce0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008cfe:	4b28      	ldr	r3, [pc, #160]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d06:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d035      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d16:	693a      	ldr	r2, [r7, #16]
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	d02e      	beq.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008d1c:	4b20      	ldr	r3, [pc, #128]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008d24:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008d26:	4b1e      	ldr	r3, [pc, #120]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d2a:	4a1d      	ldr	r2, [pc, #116]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d30:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8008d32:	4b1b      	ldr	r3, [pc, #108]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d36:	4a1a      	ldr	r2, [pc, #104]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d3c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8008d3e:	4a18      	ldr	r2, [pc, #96]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d40:	693b      	ldr	r3, [r7, #16]
 8008d42:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008d44:	4b16      	ldr	r3, [pc, #88]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d114      	bne.n	8008d7a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d50:	f7fc ff02 	bl	8005b58 <HAL_GetTick>
 8008d54:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d56:	e00a      	b.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008d58:	f7fc fefe 	bl	8005b58 <HAL_GetTick>
 8008d5c:	4602      	mov	r2, r0
 8008d5e:	697b      	ldr	r3, [r7, #20]
 8008d60:	1ad3      	subs	r3, r2, r3
 8008d62:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d901      	bls.n	8008d6e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008d6a:	2303      	movs	r3, #3
 8008d6c:	e319      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008d6e:	4b0c      	ldr	r3, [pc, #48]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d72:	f003 0302 	and.w	r3, r3, #2
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d0ee      	beq.n	8008d58 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008d82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d86:	d111      	bne.n	8008dac <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008d88:	4b05      	ldr	r3, [pc, #20]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008d94:	4b04      	ldr	r3, [pc, #16]	; (8008da8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008d96:	400b      	ands	r3, r1
 8008d98:	4901      	ldr	r1, [pc, #4]	; (8008da0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	608b      	str	r3, [r1, #8]
 8008d9e:	e00b      	b.n	8008db8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008da0:	40023800 	.word	0x40023800
 8008da4:	40007000 	.word	0x40007000
 8008da8:	0ffffcff 	.word	0x0ffffcff
 8008dac:	4bb1      	ldr	r3, [pc, #708]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	4ab0      	ldr	r2, [pc, #704]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008db2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008db6:	6093      	str	r3, [r2, #8]
 8008db8:	4bae      	ldr	r3, [pc, #696]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008dba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008dc4:	49ab      	ldr	r1, [pc, #684]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008dc6:	4313      	orrs	r3, r2
 8008dc8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0310 	and.w	r3, r3, #16
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d010      	beq.n	8008df8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008dd6:	4ba7      	ldr	r3, [pc, #668]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008dd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ddc:	4aa5      	ldr	r2, [pc, #660]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008de2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008de6:	4ba3      	ldr	r3, [pc, #652]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008de8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df0:	49a0      	ldr	r1, [pc, #640]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008df2:	4313      	orrs	r3, r2
 8008df4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e00:	2b00      	cmp	r3, #0
 8008e02:	d00a      	beq.n	8008e1a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008e04:	4b9b      	ldr	r3, [pc, #620]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e0a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008e12:	4998      	ldr	r1, [pc, #608]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e14:	4313      	orrs	r3, r2
 8008e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d00a      	beq.n	8008e3c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008e26:	4b93      	ldr	r3, [pc, #588]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e2c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008e34:	498f      	ldr	r1, [pc, #572]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e36:	4313      	orrs	r3, r2
 8008e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d00a      	beq.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008e48:	4b8a      	ldr	r3, [pc, #552]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e4e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e56:	4987      	ldr	r1, [pc, #540]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e58:	4313      	orrs	r3, r2
 8008e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d00a      	beq.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008e6a:	4b82      	ldr	r3, [pc, #520]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e70:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e78:	497e      	ldr	r1, [pc, #504]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e7a:	4313      	orrs	r3, r2
 8008e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d00a      	beq.n	8008ea2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008e8c:	4b79      	ldr	r3, [pc, #484]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e92:	f023 0203 	bic.w	r2, r3, #3
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e9a:	4976      	ldr	r1, [pc, #472]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008e9c:	4313      	orrs	r3, r2
 8008e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d00a      	beq.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008eae:	4b71      	ldr	r3, [pc, #452]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008eb4:	f023 020c 	bic.w	r2, r3, #12
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008ebc:	496d      	ldr	r1, [pc, #436]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00a      	beq.n	8008ee6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008ed0:	4b68      	ldr	r3, [pc, #416]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ed6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ede:	4965      	ldr	r1, [pc, #404]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00a      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008ef2:	4b60      	ldr	r3, [pc, #384]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ef8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f00:	495c      	ldr	r1, [pc, #368]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d00a      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f14:	4b57      	ldr	r3, [pc, #348]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f22:	4954      	ldr	r1, [pc, #336]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f24:	4313      	orrs	r3, r2
 8008f26:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d00a      	beq.n	8008f4c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008f36:	4b4f      	ldr	r3, [pc, #316]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f3c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008f44:	494b      	ldr	r1, [pc, #300]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f46:	4313      	orrs	r3, r2
 8008f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d00a      	beq.n	8008f6e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008f58:	4b46      	ldr	r3, [pc, #280]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f5e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f66:	4943      	ldr	r1, [pc, #268]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f68:	4313      	orrs	r3, r2
 8008f6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d00a      	beq.n	8008f90 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008f7a:	4b3e      	ldr	r3, [pc, #248]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008f80:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f88:	493a      	ldr	r1, [pc, #232]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f8a:	4313      	orrs	r3, r2
 8008f8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d00a      	beq.n	8008fb2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008f9c:	4b35      	ldr	r3, [pc, #212]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fa2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008faa:	4932      	ldr	r1, [pc, #200]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fac:	4313      	orrs	r3, r2
 8008fae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d011      	beq.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008fbe:	4b2d      	ldr	r3, [pc, #180]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008fc4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fcc:	4929      	ldr	r1, [pc, #164]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008fdc:	d101      	bne.n	8008fe2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f003 0308 	and.w	r3, r3, #8
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d00a      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008ffe:	4b1d      	ldr	r3, [pc, #116]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009004:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800900c:	4919      	ldr	r1, [pc, #100]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800900e:	4313      	orrs	r3, r2
 8009010:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800901c:	2b00      	cmp	r3, #0
 800901e:	d00b      	beq.n	8009038 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009020:	4b14      	ldr	r3, [pc, #80]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009026:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009030:	4910      	ldr	r1, [pc, #64]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009032:	4313      	orrs	r3, r2
 8009034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	2b01      	cmp	r3, #1
 800903c:	d006      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009046:	2b00      	cmp	r3, #0
 8009048:	f000 80d9 	beq.w	80091fe <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800904c:	4b09      	ldr	r3, [pc, #36]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	4a08      	ldr	r2, [pc, #32]	; (8009074 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8009052:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009056:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009058:	f7fc fd7e 	bl	8005b58 <HAL_GetTick>
 800905c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800905e:	e00b      	b.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009060:	f7fc fd7a 	bl	8005b58 <HAL_GetTick>
 8009064:	4602      	mov	r2, r0
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	1ad3      	subs	r3, r2, r3
 800906a:	2b64      	cmp	r3, #100	; 0x64
 800906c:	d904      	bls.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800906e:	2303      	movs	r3, #3
 8009070:	e197      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009072:	bf00      	nop
 8009074:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009078:	4b6c      	ldr	r3, [pc, #432]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009080:	2b00      	cmp	r3, #0
 8009082:	d1ed      	bne.n	8009060 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f003 0301 	and.w	r3, r3, #1
 800908c:	2b00      	cmp	r3, #0
 800908e:	d021      	beq.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009094:	2b00      	cmp	r3, #0
 8009096:	d11d      	bne.n	80090d4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009098:	4b64      	ldr	r3, [pc, #400]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800909a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800909e:	0c1b      	lsrs	r3, r3, #16
 80090a0:	f003 0303 	and.w	r3, r3, #3
 80090a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80090a6:	4b61      	ldr	r3, [pc, #388]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80090ac:	0e1b      	lsrs	r3, r3, #24
 80090ae:	f003 030f 	and.w	r3, r3, #15
 80090b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	685b      	ldr	r3, [r3, #4]
 80090b8:	019a      	lsls	r2, r3, #6
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	041b      	lsls	r3, r3, #16
 80090be:	431a      	orrs	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	061b      	lsls	r3, r3, #24
 80090c4:	431a      	orrs	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	071b      	lsls	r3, r3, #28
 80090cc:	4957      	ldr	r1, [pc, #348]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d004      	beq.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090e4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090e8:	d00a      	beq.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d02e      	beq.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090fe:	d129      	bne.n	8009154 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009100:	4b4a      	ldr	r3, [pc, #296]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009102:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009106:	0c1b      	lsrs	r3, r3, #16
 8009108:	f003 0303 	and.w	r3, r3, #3
 800910c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800910e:	4b47      	ldr	r3, [pc, #284]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009110:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009114:	0f1b      	lsrs	r3, r3, #28
 8009116:	f003 0307 	and.w	r3, r3, #7
 800911a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	685b      	ldr	r3, [r3, #4]
 8009120:	019a      	lsls	r2, r3, #6
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	041b      	lsls	r3, r3, #16
 8009126:	431a      	orrs	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	061b      	lsls	r3, r3, #24
 800912e:	431a      	orrs	r2, r3
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	071b      	lsls	r3, r3, #28
 8009134:	493d      	ldr	r1, [pc, #244]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009136:	4313      	orrs	r3, r2
 8009138:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800913c:	4b3b      	ldr	r3, [pc, #236]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800913e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009142:	f023 021f 	bic.w	r2, r3, #31
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	3b01      	subs	r3, #1
 800914c:	4937      	ldr	r1, [pc, #220]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800914e:	4313      	orrs	r3, r2
 8009150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800915c:	2b00      	cmp	r3, #0
 800915e:	d01d      	beq.n	800919c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009160:	4b32      	ldr	r3, [pc, #200]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009162:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009166:	0e1b      	lsrs	r3, r3, #24
 8009168:	f003 030f 	and.w	r3, r3, #15
 800916c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800916e:	4b2f      	ldr	r3, [pc, #188]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009170:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009174:	0f1b      	lsrs	r3, r3, #28
 8009176:	f003 0307 	and.w	r3, r3, #7
 800917a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	685b      	ldr	r3, [r3, #4]
 8009180:	019a      	lsls	r2, r3, #6
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	691b      	ldr	r3, [r3, #16]
 8009186:	041b      	lsls	r3, r3, #16
 8009188:	431a      	orrs	r2, r3
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	061b      	lsls	r3, r3, #24
 800918e:	431a      	orrs	r2, r3
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	071b      	lsls	r3, r3, #28
 8009194:	4925      	ldr	r1, [pc, #148]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009196:	4313      	orrs	r3, r2
 8009198:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d011      	beq.n	80091cc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	019a      	lsls	r2, r3, #6
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	691b      	ldr	r3, [r3, #16]
 80091b2:	041b      	lsls	r3, r3, #16
 80091b4:	431a      	orrs	r2, r3
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	68db      	ldr	r3, [r3, #12]
 80091ba:	061b      	lsls	r3, r3, #24
 80091bc:	431a      	orrs	r2, r3
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	071b      	lsls	r3, r3, #28
 80091c4:	4919      	ldr	r1, [pc, #100]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091c6:	4313      	orrs	r3, r2
 80091c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80091cc:	4b17      	ldr	r3, [pc, #92]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a16      	ldr	r2, [pc, #88]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091d2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80091d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80091d8:	f7fc fcbe 	bl	8005b58 <HAL_GetTick>
 80091dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091de:	e008      	b.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80091e0:	f7fc fcba 	bl	8005b58 <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	2b64      	cmp	r3, #100	; 0x64
 80091ec:	d901      	bls.n	80091f2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80091ee:	2303      	movs	r3, #3
 80091f0:	e0d7      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80091f2:	4b0e      	ldr	r3, [pc, #56]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d0f0      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80091fe:	69bb      	ldr	r3, [r7, #24]
 8009200:	2b01      	cmp	r3, #1
 8009202:	f040 80cd 	bne.w	80093a0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009206:	4b09      	ldr	r3, [pc, #36]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a08      	ldr	r2, [pc, #32]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800920c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009210:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009212:	f7fc fca1 	bl	8005b58 <HAL_GetTick>
 8009216:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009218:	e00a      	b.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800921a:	f7fc fc9d 	bl	8005b58 <HAL_GetTick>
 800921e:	4602      	mov	r2, r0
 8009220:	697b      	ldr	r3, [r7, #20]
 8009222:	1ad3      	subs	r3, r2, r3
 8009224:	2b64      	cmp	r3, #100	; 0x64
 8009226:	d903      	bls.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009228:	2303      	movs	r3, #3
 800922a:	e0ba      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800922c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009230:	4b5e      	ldr	r3, [pc, #376]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009238:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800923c:	d0ed      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009246:	2b00      	cmp	r3, #0
 8009248:	d003      	beq.n	8009252 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924e:	2b00      	cmp	r3, #0
 8009250:	d009      	beq.n	8009266 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800925a:	2b00      	cmp	r3, #0
 800925c:	d02e      	beq.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009262:	2b00      	cmp	r3, #0
 8009264:	d12a      	bne.n	80092bc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009266:	4b51      	ldr	r3, [pc, #324]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800926c:	0c1b      	lsrs	r3, r3, #16
 800926e:	f003 0303 	and.w	r3, r3, #3
 8009272:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009274:	4b4d      	ldr	r3, [pc, #308]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800927a:	0f1b      	lsrs	r3, r3, #28
 800927c:	f003 0307 	and.w	r3, r3, #7
 8009280:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	695b      	ldr	r3, [r3, #20]
 8009286:	019a      	lsls	r2, r3, #6
 8009288:	693b      	ldr	r3, [r7, #16]
 800928a:	041b      	lsls	r3, r3, #16
 800928c:	431a      	orrs	r2, r3
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	699b      	ldr	r3, [r3, #24]
 8009292:	061b      	lsls	r3, r3, #24
 8009294:	431a      	orrs	r2, r3
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	071b      	lsls	r3, r3, #28
 800929a:	4944      	ldr	r1, [pc, #272]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800929c:	4313      	orrs	r3, r2
 800929e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80092a2:	4b42      	ldr	r3, [pc, #264]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80092a8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80092b0:	3b01      	subs	r3, #1
 80092b2:	021b      	lsls	r3, r3, #8
 80092b4:	493d      	ldr	r1, [pc, #244]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092b6:	4313      	orrs	r3, r2
 80092b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d022      	beq.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092cc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092d0:	d11d      	bne.n	800930e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80092d2:	4b36      	ldr	r3, [pc, #216]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092d8:	0e1b      	lsrs	r3, r3, #24
 80092da:	f003 030f 	and.w	r3, r3, #15
 80092de:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80092e0:	4b32      	ldr	r3, [pc, #200]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80092e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80092e6:	0f1b      	lsrs	r3, r3, #28
 80092e8:	f003 0307 	and.w	r3, r3, #7
 80092ec:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	019a      	lsls	r2, r3, #6
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	6a1b      	ldr	r3, [r3, #32]
 80092f8:	041b      	lsls	r3, r3, #16
 80092fa:	431a      	orrs	r2, r3
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	061b      	lsls	r3, r3, #24
 8009300:	431a      	orrs	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	071b      	lsls	r3, r3, #28
 8009306:	4929      	ldr	r1, [pc, #164]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009308:	4313      	orrs	r3, r2
 800930a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f003 0308 	and.w	r3, r3, #8
 8009316:	2b00      	cmp	r3, #0
 8009318:	d028      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800931a:	4b24      	ldr	r3, [pc, #144]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800931c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009320:	0e1b      	lsrs	r3, r3, #24
 8009322:	f003 030f 	and.w	r3, r3, #15
 8009326:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009328:	4b20      	ldr	r3, [pc, #128]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800932a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800932e:	0c1b      	lsrs	r3, r3, #16
 8009330:	f003 0303 	and.w	r3, r3, #3
 8009334:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	695b      	ldr	r3, [r3, #20]
 800933a:	019a      	lsls	r2, r3, #6
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	041b      	lsls	r3, r3, #16
 8009340:	431a      	orrs	r2, r3
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	061b      	lsls	r3, r3, #24
 8009346:	431a      	orrs	r2, r3
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	69db      	ldr	r3, [r3, #28]
 800934c:	071b      	lsls	r3, r3, #28
 800934e:	4917      	ldr	r1, [pc, #92]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009350:	4313      	orrs	r3, r2
 8009352:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009356:	4b15      	ldr	r3, [pc, #84]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009358:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800935c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009364:	4911      	ldr	r1, [pc, #68]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009366:	4313      	orrs	r3, r2
 8009368:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800936c:	4b0f      	ldr	r3, [pc, #60]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a0e      	ldr	r2, [pc, #56]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009376:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009378:	f7fc fbee 	bl	8005b58 <HAL_GetTick>
 800937c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800937e:	e008      	b.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009380:	f7fc fbea 	bl	8005b58 <HAL_GetTick>
 8009384:	4602      	mov	r2, r0
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	1ad3      	subs	r3, r2, r3
 800938a:	2b64      	cmp	r3, #100	; 0x64
 800938c:	d901      	bls.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800938e:	2303      	movs	r3, #3
 8009390:	e007      	b.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009392:	4b06      	ldr	r3, [pc, #24]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800939a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800939e:	d1ef      	bne.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80093a0:	2300      	movs	r3, #0
}
 80093a2:	4618      	mov	r0, r3
 80093a4:	3720      	adds	r7, #32
 80093a6:	46bd      	mov	sp, r7
 80093a8:	bd80      	pop	{r7, pc}
 80093aa:	bf00      	nop
 80093ac:	40023800 	.word	0x40023800

080093b0 <HAL_RCCEx_GetPeriphCLKConfig>:
  *         RCC configuration registers.
  * @param  PeriphClkInit pointer to the configured RCC_PeriphCLKInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b085      	sub	sp, #20
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0;
 80093b8:	2300      	movs	r3, #0
 80093ba:	60fb      	str	r3, [r7, #12]
                                        RCC_PERIPHCLK_USART6   | RCC_PERIPHCLK_UART7    |\
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48    | RCC_PERIPHCLK_SDMMC2   |\
                                        RCC_PERIPHCLK_DFSDM1   | RCC_PERIPHCLK_DFSDM1_AUDIO;
#else
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S      | RCC_PERIPHCLK_LPTIM1   |\
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	4a80      	ldr	r2, [pc, #512]	; (80095c0 <HAL_RCCEx_GetPeriphCLKConfig+0x210>)
 80093c0:	601a      	str	r2, [r3, #0]
                                        RCC_PERIPHCLK_UART8    | RCC_PERIPHCLK_SDMMC1   |\
                                        RCC_PERIPHCLK_CLK48;
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the PLLI2S Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 80093c2:	4b80      	ldr	r3, [pc, #512]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80093c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093c8:	099b      	lsrs	r3, r3, #6
 80093ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SP = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80093d2:	4b7c      	ldr	r3, [pc, #496]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80093d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093d8:	0c1b      	lsrs	r3, r3, #16
 80093da:	f003 0203 	and.w	r2, r3, #3
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLLI2S.PLLI2SQ = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80093e2:	4b78      	ldr	r3, [pc, #480]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80093e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e8:	0e1b      	lsrs	r3, r3, #24
 80093ea:	f003 020f 	and.w	r2, r3, #15
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80093f2:	4b74      	ldr	r3, [pc, #464]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80093f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093f8:	0f1b      	lsrs	r3, r3, #28
 80093fa:	f003 0207 	and.w	r2, r3, #7
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	609a      	str	r2, [r3, #8]

  /* Get the PLLSAI Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLLSAI.PLLSAIN = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> RCC_PLLSAICFGR_PLLSAIN_Pos);
 8009402:	4b70      	ldr	r3, [pc, #448]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009404:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009408:	099b      	lsrs	r3, r3, #6
 800940a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLLSAI.PLLSAIP = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009412:	4b6c      	ldr	r3, [pc, #432]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009418:	0c1b      	lsrs	r3, r3, #16
 800941a:	f003 0203 	and.w	r2, r3, #3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	621a      	str	r2, [r3, #32]
  PeriphClkInit->PLLSAI.PLLSAIQ = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009422:	4b68      	ldr	r3, [pc, #416]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009428:	0e1b      	lsrs	r3, r3, #24
 800942a:	f003 020f 	and.w	r2, r3, #15
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLLSAI.PLLSAIR = (uint32_t)((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009432:	4b64      	ldr	r3, [pc, #400]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009438:	0f1b      	lsrs	r3, r3, #28
 800943a:	f003 0207 	and.w	r2, r3, #7
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	61da      	str	r2, [r3, #28]

  /* Get the PLLSAI/PLLI2S division factors -------------------------------------------*/
  PeriphClkInit->PLLI2SDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) >> RCC_DCKCFGR1_PLLI2SDIVQ_Pos);
 8009442:	4b60      	ldr	r3, [pc, #384]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009444:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009448:	f003 021f 	and.w	r2, r3, #31
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	625a      	str	r2, [r3, #36]	; 0x24
  PeriphClkInit->PLLSAIDivQ = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> RCC_DCKCFGR1_PLLSAIDIVQ_Pos);
 8009450:	4b5c      	ldr	r3, [pc, #368]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009452:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009456:	0a1b      	lsrs	r3, r3, #8
 8009458:	f003 021f 	and.w	r2, r3, #31
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	629a      	str	r2, [r3, #40]	; 0x28
  PeriphClkInit->PLLSAIDivR = (uint32_t)((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVR) >> RCC_DCKCFGR1_PLLSAIDIVR_Pos);
 8009460:	4b58      	ldr	r3, [pc, #352]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009462:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009466:	0c1b      	lsrs	r3, r3, #16
 8009468:	f003 0203 	and.w	r2, r3, #3
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Get the SAI1 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection = __HAL_RCC_GET_SAI1_SOURCE();
 8009470:	4b54      	ldr	r3, [pc, #336]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009476:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Get the SAI2 clock configuration ----------------------------------------------*/
  PeriphClkInit->Sai2ClockSelection = __HAL_RCC_GET_SAI2_SOURCE();
 800947e:	4b51      	ldr	r3, [pc, #324]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009484:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get the I2S clock configuration ------------------------------------------*/
  PeriphClkInit->I2sClockSelection = __HAL_RCC_GET_I2SCLKSOURCE();
 800948c:	4b4d      	ldr	r3, [pc, #308]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800948e:	689b      	ldr	r3, [r3, #8]
 8009490:	f403 0200 	and.w	r2, r3, #8388608	; 0x800000
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	635a      	str	r2, [r3, #52]	; 0x34

  /* Get the I2C1 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c1ClockSelection = __HAL_RCC_GET_I2C1_SOURCE();
 8009498:	4b4a      	ldr	r3, [pc, #296]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800949a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800949e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Get the I2C2 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c2ClockSelection = __HAL_RCC_GET_I2C2_SOURCE();
 80094a6:	4b47      	ldr	r3, [pc, #284]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80094a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ac:	f403 2240 	and.w	r2, r3, #786432	; 0xc0000
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	669a      	str	r2, [r3, #104]	; 0x68

  /* Get the I2C3 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c3ClockSelection = __HAL_RCC_GET_I2C3_SOURCE();
 80094b4:	4b43      	ldr	r3, [pc, #268]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80094b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ba:	f403 1240 	and.w	r2, r3, #3145728	; 0x300000
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Get the I2C4 clock configuration ------------------------------------------*/
  PeriphClkInit->I2c4ClockSelection = __HAL_RCC_GET_I2C4_SOURCE();
 80094c2:	4b40      	ldr	r3, [pc, #256]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80094c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094c8:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	671a      	str	r2, [r3, #112]	; 0x70

  /* Get the USART1 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart1ClockSelection = __HAL_RCC_GET_USART1_SOURCE();
 80094d0:	4b3c      	ldr	r3, [pc, #240]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80094d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094d6:	f003 0203 	and.w	r2, r3, #3
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get the USART2 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart2ClockSelection = __HAL_RCC_GET_USART2_SOURCE();
 80094de:	4b39      	ldr	r3, [pc, #228]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80094e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094e4:	f003 020c 	and.w	r2, r3, #12
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	649a      	str	r2, [r3, #72]	; 0x48

  /* Get the USART3 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart3ClockSelection = __HAL_RCC_GET_USART3_SOURCE();
 80094ec:	4b35      	ldr	r3, [pc, #212]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80094ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094f2:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get the UART4 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart4ClockSelection = __HAL_RCC_GET_UART4_SOURCE();
 80094fa:	4b32      	ldr	r3, [pc, #200]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 80094fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009500:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get the UART5 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart5ClockSelection = __HAL_RCC_GET_UART5_SOURCE();
 8009508:	4b2e      	ldr	r3, [pc, #184]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800950a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800950e:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get the USART6 clock configuration ------------------------------------------*/
  PeriphClkInit->Usart6ClockSelection = __HAL_RCC_GET_USART6_SOURCE();
 8009516:	4b2b      	ldr	r3, [pc, #172]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800951c:	f403 6240 	and.w	r2, r3, #3072	; 0xc00
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	659a      	str	r2, [r3, #88]	; 0x58

  /* Get the UART7 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart7ClockSelection = __HAL_RCC_GET_UART7_SOURCE();
 8009524:	4b27      	ldr	r3, [pc, #156]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800952a:	f403 5240 	and.w	r2, r3, #12288	; 0x3000
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get the UART8 clock configuration ------------------------------------------*/
  PeriphClkInit->Uart8ClockSelection = __HAL_RCC_GET_UART8_SOURCE();
 8009532:	4b24      	ldr	r3, [pc, #144]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009538:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Get the LPTIM1 clock configuration ------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009540:	4b20      	ldr	r3, [pc, #128]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009546:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Get the CEC clock configuration -----------------------------------------------*/
  PeriphClkInit->CecClockSelection = __HAL_RCC_GET_CEC_SOURCE();
 800954e:	4b1d      	ldr	r3, [pc, #116]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009550:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009554:	f003 6280 	and.w	r2, r3, #67108864	; 0x4000000
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Get the CK48 clock configuration -----------------------------------------------*/
  PeriphClkInit->Clk48ClockSelection = __HAL_RCC_GET_CLK48_SOURCE();
 800955c:	4b19      	ldr	r3, [pc, #100]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800955e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009562:	f003 6200 	and.w	r2, r3, #134217728	; 0x8000000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Get the SDMMC1 clock configuration -----------------------------------------------*/
  PeriphClkInit->Sdmmc1ClockSelection = __HAL_RCC_GET_SDMMC1_SOURCE();
 800956a:	4b16      	ldr	r3, [pc, #88]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800956c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009570:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  /* Get the DFSDM AUDIO clock configuration -----------------------------------------------*/
  PeriphClkInit->Dfsdm1AudioClockSelection = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /* Get the RTC Clock configuration -----------------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800957a:	4b12      	ldr	r3, [pc, #72]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 800957c:	689b      	ldr	r3, [r3, #8]
 800957e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009582:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8009584:	4b0f      	ldr	r3, [pc, #60]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009588:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	431a      	orrs	r2, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	631a      	str	r2, [r3, #48]	; 0x30

  /* Get the TIM Prescaler configuration --------------------------------------------*/
  if ((RCC->DCKCFGR1 & RCC_DCKCFGR1_TIMPRE) == RESET)
 8009594:	4b0b      	ldr	r3, [pc, #44]	; (80095c4 <HAL_RCCEx_GetPeriphCLKConfig+0x214>)
 8009596:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800959a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d103      	bne.n	80095aa <HAL_RCCEx_GetPeriphCLKConfig+0x1fa>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2200      	movs	r2, #0
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 80095a8:	e003      	b.n	80095b2 <HAL_RCCEx_GetPeriphCLKConfig+0x202>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80095b0:	639a      	str	r2, [r3, #56]	; 0x38
}
 80095b2:	bf00      	nop
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop
 80095c0:	00fffff1 	.word	0x00fffff1
 80095c4:	40023800 	.word	0x40023800

080095c8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_SAI1: SAI1 peripheral clock
  *            @arg RCC_PERIPHCLK_SAI2: SAI2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b087      	sub	sp, #28
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80095d0:	2300      	movs	r3, #0
 80095d2:	60fb      	str	r3, [r7, #12]
  /* This variable is used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0;
 80095d4:	2300      	movs	r3, #0
 80095d6:	617b      	str	r3, [r7, #20]
  /* This variable is used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0;
 80095d8:	2300      	movs	r3, #0
 80095da:	613b      	str	r3, [r7, #16]
  /* This variable is used to store the SAI clock source */
  uint32_t saiclocksource = 0;
 80095dc:	2300      	movs	r3, #0
 80095de:	60bb      	str	r3, [r7, #8]

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80095e6:	f040 808c 	bne.w	8009702 <HAL_RCCEx_GetPeriphCLKFreq+0x13a>
  {
    saiclocksource = RCC->DCKCFGR1;
 80095ea:	4b95      	ldr	r3, [pc, #596]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80095ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095f0:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI1SEL;
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80095f8:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009600:	d07c      	beq.n	80096fc <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009608:	d87d      	bhi.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 800960a:	68bb      	ldr	r3, [r7, #8]
 800960c:	2b00      	cmp	r3, #0
 800960e:	d004      	beq.n	800961a <HAL_RCCEx_GetPeriphCLKFreq+0x52>
 8009610:	68bb      	ldr	r3, [r7, #8]
 8009612:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009616:	d039      	beq.n	800968c <HAL_RCCEx_GetPeriphCLKFreq+0xc4>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009618:	e075      	b.n	8009706 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800961a:	4b89      	ldr	r3, [pc, #548]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800961c:	685b      	ldr	r3, [r3, #4]
 800961e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009622:	2b00      	cmp	r3, #0
 8009624:	d108      	bne.n	8009638 <HAL_RCCEx_GetPeriphCLKFreq+0x70>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009626:	4b86      	ldr	r3, [pc, #536]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009628:	685b      	ldr	r3, [r3, #4]
 800962a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800962e:	4a85      	ldr	r2, [pc, #532]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009630:	fbb2 f3f3 	udiv	r3, r2, r3
 8009634:	613b      	str	r3, [r7, #16]
 8009636:	e007      	b.n	8009648 <HAL_RCCEx_GetPeriphCLKFreq+0x80>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009638:	4b81      	ldr	r3, [pc, #516]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800963a:	685b      	ldr	r3, [r3, #4]
 800963c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009640:	4a81      	ldr	r2, [pc, #516]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 8009642:	fbb2 f3f3 	udiv	r3, r2, r3
 8009646:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009648:	4b7d      	ldr	r3, [pc, #500]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800964a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800964e:	0e1b      	lsrs	r3, r3, #24
 8009650:	f003 030f 	and.w	r3, r3, #15
 8009654:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 8009656:	4b7a      	ldr	r3, [pc, #488]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009658:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800965c:	099b      	lsrs	r3, r3, #6
 800965e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	fb02 f203 	mul.w	r2, r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	fbb2 f3f3 	udiv	r3, r2, r3
 800966e:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009670:	4b73      	ldr	r3, [pc, #460]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009672:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009676:	0a1b      	lsrs	r3, r3, #8
 8009678:	f003 031f 	and.w	r3, r3, #31
 800967c:	3301      	adds	r3, #1
 800967e:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009680:	697a      	ldr	r2, [r7, #20]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	fbb2 f3f3 	udiv	r3, r2, r3
 8009688:	617b      	str	r3, [r7, #20]
        break;
 800968a:	e03d      	b.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800968c:	4b6c      	ldr	r3, [pc, #432]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009694:	2b00      	cmp	r3, #0
 8009696:	d108      	bne.n	80096aa <HAL_RCCEx_GetPeriphCLKFreq+0xe2>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009698:	4b69      	ldr	r3, [pc, #420]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096a0:	4a68      	ldr	r2, [pc, #416]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80096a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80096a6:	613b      	str	r3, [r7, #16]
 80096a8:	e007      	b.n	80096ba <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80096aa:	4b65      	ldr	r3, [pc, #404]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80096ac:	685b      	ldr	r3, [r3, #4]
 80096ae:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096b2:	4a65      	ldr	r2, [pc, #404]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80096b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096b8:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80096ba:	4b61      	ldr	r3, [pc, #388]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80096bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096c0:	0e1b      	lsrs	r3, r3, #24
 80096c2:	f003 030f 	and.w	r3, r3, #15
 80096c6:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80096c8:	4b5d      	ldr	r3, [pc, #372]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80096ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ce:	099b      	lsrs	r3, r3, #6
 80096d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096d4:	693a      	ldr	r2, [r7, #16]
 80096d6:	fb02 f203 	mul.w	r2, r2, r3
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80096e0:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 80096e2:	4b57      	ldr	r3, [pc, #348]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80096e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e8:	f003 031f 	and.w	r3, r3, #31
 80096ec:	3301      	adds	r3, #1
 80096ee:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80096f8:	617b      	str	r3, [r7, #20]
        break;
 80096fa:	e005      	b.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        frequency = EXTERNAL_CLOCK_VALUE;
 80096fc:	4b53      	ldr	r3, [pc, #332]	; (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 80096fe:	617b      	str	r3, [r7, #20]
        break;
 8009700:	e002      	b.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      }
    }
  }
 8009702:	bf00      	nop
 8009704:	e000      	b.n	8009708 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        break;
 8009706:	bf00      	nop

  if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800970e:	f040 808c 	bne.w	800982a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
  {
    saiclocksource = RCC->DCKCFGR1;
 8009712:	4b4b      	ldr	r3, [pc, #300]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009714:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009718:	60bb      	str	r3, [r7, #8]
    saiclocksource &= RCC_DCKCFGR1_SAI2SEL;
 800971a:	68bb      	ldr	r3, [r7, #8]
 800971c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8009720:	60bb      	str	r3, [r7, #8]
    switch (saiclocksource)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009728:	d07c      	beq.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 800972a:	68bb      	ldr	r3, [r7, #8]
 800972c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009730:	d87d      	bhi.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
 8009732:	68bb      	ldr	r3, [r7, #8]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d004      	beq.n	8009742 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
 8009738:	68bb      	ldr	r3, [r7, #8]
 800973a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800973e:	d039      	beq.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1ec>
        break;
      }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */
    default :
      {
        break;
 8009740:	e075      	b.n	800982e <HAL_RCCEx_GetPeriphCLKFreq+0x266>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8009742:	4b3f      	ldr	r3, [pc, #252]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009744:	685b      	ldr	r3, [r3, #4]
 8009746:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d108      	bne.n	8009760 <HAL_RCCEx_GetPeriphCLKFreq+0x198>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800974e:	4b3c      	ldr	r3, [pc, #240]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009750:	685b      	ldr	r3, [r3, #4]
 8009752:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009756:	4a3b      	ldr	r2, [pc, #236]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 8009758:	fbb2 f3f3 	udiv	r3, r2, r3
 800975c:	613b      	str	r3, [r7, #16]
 800975e:	e007      	b.n	8009770 <HAL_RCCEx_GetPeriphCLKFreq+0x1a8>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8009760:	4b37      	ldr	r3, [pc, #220]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009768:	4a37      	ldr	r2, [pc, #220]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 800976a:	fbb2 f3f3 	udiv	r3, r2, r3
 800976e:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24;
 8009770:	4b33      	ldr	r3, [pc, #204]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009776:	0e1b      	lsrs	r3, r3, #24
 8009778:	f003 030f 	and.w	r3, r3, #15
 800977c:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6))/(tmpreg);
 800977e:	4b30      	ldr	r3, [pc, #192]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 8009780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009784:	099b      	lsrs	r3, r3, #6
 8009786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	fb02 f203 	mul.w	r2, r2, r3
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	fbb2 f3f3 	udiv	r3, r2, r3
 8009796:	617b      	str	r3, [r7, #20]
        tmpreg = (((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLSAIDIVQ) >> 8) + 1);
 8009798:	4b29      	ldr	r3, [pc, #164]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800979a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800979e:	0a1b      	lsrs	r3, r3, #8
 80097a0:	f003 031f 	and.w	r3, r3, #31
 80097a4:	3301      	adds	r3, #1
 80097a6:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 80097a8:	697a      	ldr	r2, [r7, #20]
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80097b0:	617b      	str	r3, [r7, #20]
        break;
 80097b2:	e03d      	b.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80097b4:	4b22      	ldr	r3, [pc, #136]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097b6:	685b      	ldr	r3, [r3, #4]
 80097b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d108      	bne.n	80097d2 <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
          vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80097c0:	4b1f      	ldr	r3, [pc, #124]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097c2:	685b      	ldr	r3, [r3, #4]
 80097c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097c8:	4a1e      	ldr	r2, [pc, #120]	; (8009844 <HAL_RCCEx_GetPeriphCLKFreq+0x27c>)
 80097ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ce:	613b      	str	r3, [r7, #16]
 80097d0:	e007      	b.n	80097e2 <HAL_RCCEx_GetPeriphCLKFreq+0x21a>
          vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 80097d2:	4b1b      	ldr	r3, [pc, #108]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097d4:	685b      	ldr	r3, [r3, #4]
 80097d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80097da:	4a1b      	ldr	r2, [pc, #108]	; (8009848 <HAL_RCCEx_GetPeriphCLKFreq+0x280>)
 80097dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e0:	613b      	str	r3, [r7, #16]
        tmpreg = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24;
 80097e2:	4b17      	ldr	r3, [pc, #92]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097e8:	0e1b      	lsrs	r3, r3, #24
 80097ea:	f003 030f 	and.w	r3, r3, #15
 80097ee:	60fb      	str	r3, [r7, #12]
        frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6))/(tmpreg);
 80097f0:	4b13      	ldr	r3, [pc, #76]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 80097f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097f6:	099b      	lsrs	r3, r3, #6
 80097f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	fb02 f203 	mul.w	r2, r2, r3
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	fbb2 f3f3 	udiv	r3, r2, r3
 8009808:	617b      	str	r3, [r7, #20]
        tmpreg = ((RCC->DCKCFGR1 & RCC_DCKCFGR1_PLLI2SDIVQ) + 1);
 800980a:	4b0d      	ldr	r3, [pc, #52]	; (8009840 <HAL_RCCEx_GetPeriphCLKFreq+0x278>)
 800980c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009810:	f003 031f 	and.w	r3, r3, #31
 8009814:	3301      	adds	r3, #1
 8009816:	60fb      	str	r3, [r7, #12]
        frequency = frequency/(tmpreg);
 8009818:	697a      	ldr	r2, [r7, #20]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009820:	617b      	str	r3, [r7, #20]
        break;
 8009822:	e005      	b.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        frequency = EXTERNAL_CLOCK_VALUE;
 8009824:	4b09      	ldr	r3, [pc, #36]	; (800984c <HAL_RCCEx_GetPeriphCLKFreq+0x284>)
 8009826:	617b      	str	r3, [r7, #20]
        break;
 8009828:	e002      	b.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
      }
    }
  }
 800982a:	bf00      	nop
 800982c:	e000      	b.n	8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x268>
        break;
 800982e:	bf00      	nop

  return frequency;
 8009830:	697b      	ldr	r3, [r7, #20]
}
 8009832:	4618      	mov	r0, r3
 8009834:	371c      	adds	r7, #28
 8009836:	46bd      	mov	sp, r7
 8009838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800983c:	4770      	bx	lr
 800983e:	bf00      	nop
 8009840:	40023800 	.word	0x40023800
 8009844:	00f42400 	.word	0x00f42400
 8009848:	017d7840 	.word	0x017d7840
 800984c:	00bb8000 	.word	0x00bb8000

08009850 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b088      	sub	sp, #32
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0;
 8009858:	2300      	movs	r3, #0
 800985a:	61fb      	str	r3, [r7, #28]
  uint32_t ckstr_bits = 0;
 800985c:	2300      	movs	r3, #0
 800985e:	61bb      	str	r3, [r7, #24]
  uint32_t syncen_bits = 0;
 8009860:	2300      	movs	r3, #0
 8009862:	617b      	str	r3, [r7, #20]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d101      	bne.n	800986e <HAL_SAI_Init+0x1e>
  {
    return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e156      	b.n	8009b1c <HAL_SAI_Init+0x2cc>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b00      	cmp	r3, #0
 8009878:	d106      	bne.n	8009888 <HAL_SAI_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	2200      	movs	r2, #0
 800987e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7fa fbae 	bl	8003fe4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2202      	movs	r2, #2
 800988c:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 fb13 	bl	8009ebc <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	2b02      	cmp	r3, #2
 800989c:	d00c      	beq.n	80098b8 <HAL_SAI_Init+0x68>
 800989e:	2b02      	cmp	r3, #2
 80098a0:	d80d      	bhi.n	80098be <HAL_SAI_Init+0x6e>
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d002      	beq.n	80098ac <HAL_SAI_Init+0x5c>
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d003      	beq.n	80098b2 <HAL_SAI_Init+0x62>
      break;
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
      break;
    default:
      break;
 80098aa:	e008      	b.n	80098be <HAL_SAI_Init+0x6e>
      tmpregisterGCR = 0;
 80098ac:	2300      	movs	r3, #0
 80098ae:	61fb      	str	r3, [r7, #28]
      break;
 80098b0:	e006      	b.n	80098c0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80098b2:	2310      	movs	r3, #16
 80098b4:	61fb      	str	r3, [r7, #28]
      break;
 80098b6:	e003      	b.n	80098c0 <HAL_SAI_Init+0x70>
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80098b8:	2320      	movs	r3, #32
 80098ba:	61fb      	str	r3, [r7, #28]
      break;
 80098bc:	e000      	b.n	80098c0 <HAL_SAI_Init+0x70>
      break;
 80098be:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	2b03      	cmp	r3, #3
 80098c6:	d81e      	bhi.n	8009906 <HAL_SAI_Init+0xb6>
 80098c8:	a201      	add	r2, pc, #4	; (adr r2, 80098d0 <HAL_SAI_Init+0x80>)
 80098ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098ce:	bf00      	nop
 80098d0:	080098e1 	.word	0x080098e1
 80098d4:	080098e7 	.word	0x080098e7
 80098d8:	080098ef 	.word	0x080098ef
 80098dc:	080098f7 	.word	0x080098f7
  {
    case SAI_ASYNCHRONOUS :
    {
      syncen_bits = 0;
 80098e0:	2300      	movs	r3, #0
 80098e2:	617b      	str	r3, [r7, #20]
    }
    break;
 80098e4:	e010      	b.n	8009908 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS :
    {
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80098e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80098ea:	617b      	str	r3, [r7, #20]
    }
    break;
 80098ec:	e00c      	b.n	8009908 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80098ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098f2:	617b      	str	r3, [r7, #20]
    }
    break;
 80098f4:	e008      	b.n	8009908 <HAL_SAI_Init+0xb8>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
 80098f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80098fa:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80098fc:	69fb      	ldr	r3, [r7, #28]
 80098fe:	f043 0301 	orr.w	r3, r3, #1
 8009902:	61fb      	str	r3, [r7, #28]
    }
    break;
 8009904:	e000      	b.n	8009908 <HAL_SAI_Init+0xb8>
    default:
      break;
 8009906:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a85      	ldr	r2, [pc, #532]	; (8009b24 <HAL_SAI_Init+0x2d4>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d004      	beq.n	800991c <HAL_SAI_Init+0xcc>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a84      	ldr	r2, [pc, #528]	; (8009b28 <HAL_SAI_Init+0x2d8>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d103      	bne.n	8009924 <HAL_SAI_Init+0xd4>
  {
    SAI1->GCR = tmpregisterGCR;
 800991c:	4a83      	ldr	r2, [pc, #524]	; (8009b2c <HAL_SAI_Init+0x2dc>)
 800991e:	69fb      	ldr	r3, [r7, #28]
 8009920:	6013      	str	r3, [r2, #0]
 8009922:	e002      	b.n	800992a <HAL_SAI_Init+0xda>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8009924:	4a82      	ldr	r2, [pc, #520]	; (8009b30 <HAL_SAI_Init+0x2e0>)
 8009926:	69fb      	ldr	r3, [r7, #28]
 8009928:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	69db      	ldr	r3, [r3, #28]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d04c      	beq.n	80099cc <HAL_SAI_Init+0x17c>
  {
    uint32_t freq = 0;
 8009932:	2300      	movs	r3, #0
 8009934:	613b      	str	r3, [r7, #16]
    uint32_t tmpval;

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a7a      	ldr	r2, [pc, #488]	; (8009b24 <HAL_SAI_Init+0x2d4>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d004      	beq.n	800994a <HAL_SAI_Init+0xfa>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a78      	ldr	r2, [pc, #480]	; (8009b28 <HAL_SAI_Init+0x2d8>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d104      	bne.n	8009954 <HAL_SAI_Init+0x104>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800994a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 800994e:	f7ff fe3b 	bl	80095c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009952:	6138      	str	r0, [r7, #16]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	4a76      	ldr	r2, [pc, #472]	; (8009b34 <HAL_SAI_Init+0x2e4>)
 800995a:	4293      	cmp	r3, r2
 800995c:	d004      	beq.n	8009968 <HAL_SAI_Init+0x118>
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	4a75      	ldr	r2, [pc, #468]	; (8009b38 <HAL_SAI_Init+0x2e8>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d104      	bne.n	8009972 <HAL_SAI_Init+0x122>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009968:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800996c:	f7ff fe2c 	bl	80095c8 <HAL_RCCEx_GetPeriphCLKFreq>
 8009970:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10) / (hsai->Init.AudioFrequency * 2 * 256);
 8009972:	693a      	ldr	r2, [r7, #16]
 8009974:	4613      	mov	r3, r2
 8009976:	009b      	lsls	r3, r3, #2
 8009978:	4413      	add	r3, r2
 800997a:	005b      	lsls	r3, r3, #1
 800997c:	461a      	mov	r2, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	69db      	ldr	r3, [r3, #28]
 8009982:	025b      	lsls	r3, r3, #9
 8009984:	fbb2 f3f3 	udiv	r3, r2, r3
 8009988:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	4a6b      	ldr	r2, [pc, #428]	; (8009b3c <HAL_SAI_Init+0x2ec>)
 800998e:	fba2 2303 	umull	r2, r3, r2, r3
 8009992:	08da      	lsrs	r2, r3, #3
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10) > 8)
 8009998:	68f9      	ldr	r1, [r7, #12]
 800999a:	4b68      	ldr	r3, [pc, #416]	; (8009b3c <HAL_SAI_Init+0x2ec>)
 800999c:	fba3 2301 	umull	r2, r3, r3, r1
 80099a0:	08da      	lsrs	r2, r3, #3
 80099a2:	4613      	mov	r3, r2
 80099a4:	009b      	lsls	r3, r3, #2
 80099a6:	4413      	add	r3, r2
 80099a8:	005b      	lsls	r3, r3, #1
 80099aa:	1aca      	subs	r2, r1, r3
 80099ac:	2a08      	cmp	r2, #8
 80099ae:	d904      	bls.n	80099ba <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv += 1;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a1b      	ldr	r3, [r3, #32]
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	621a      	str	r2, [r3, #32]
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099be:	2b04      	cmp	r3, #4
 80099c0:	d104      	bne.n	80099cc <HAL_SAI_Init+0x17c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	6a1b      	ldr	r3, [r3, #32]
 80099c6:	085a      	lsrs	r2, r3, #1
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d003      	beq.n	80099dc <HAL_SAI_Init+0x18c>
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	685b      	ldr	r3, [r3, #4]
 80099d8:	2b02      	cmp	r3, #2
 80099da:	d109      	bne.n	80099f0 <HAL_SAI_Init+0x1a0>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0 : SAI_xCR1_CKSTR;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d101      	bne.n	80099e8 <HAL_SAI_Init+0x198>
 80099e4:	2300      	movs	r3, #0
 80099e6:	e001      	b.n	80099ec <HAL_SAI_Init+0x19c>
 80099e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099ec:	61bb      	str	r3, [r7, #24]
 80099ee:	e008      	b.n	8009a02 <HAL_SAI_Init+0x1b2>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80099f4:	2b01      	cmp	r3, #1
 80099f6:	d102      	bne.n	80099fe <HAL_SAI_Init+0x1ae>
 80099f8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80099fc:	e000      	b.n	8009a00 <HAL_SAI_Init+0x1b0>
 80099fe:	2300      	movs	r3, #0
 8009a00:	61bb      	str	r3, [r7, #24]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	6819      	ldr	r1, [r3, #0]
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	4b4c      	ldr	r3, [pc, #304]	; (8009b40 <HAL_SAI_Init+0x2f0>)
 8009a0e:	400b      	ands	r3, r1
 8009a10:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	6819      	ldr	r1, [r3, #0]
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	685a      	ldr	r2, [r3, #4]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a20:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a26:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2c:	431a      	orrs	r2, r3
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                               \
 8009a32:	697b      	ldr	r3, [r7, #20]
 8009a34:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                               \
 8009a3a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	691b      	ldr	r3, [r3, #16]
 8009a40:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009a46:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6a1b      	ldr	r3, [r3, #32]
 8009a4c:	051b      	lsls	r3, r3, #20
 8009a4e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	430a      	orrs	r2, r1
 8009a56:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	6859      	ldr	r1, [r3, #4]
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681a      	ldr	r2, [r3, #0]
 8009a62:	4b38      	ldr	r3, [pc, #224]	; (8009b44 <HAL_SAI_Init+0x2f4>)
 8009a64:	400b      	ands	r3, r1
 8009a66:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	6859      	ldr	r1, [r3, #4]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	699a      	ldr	r2, [r3, #24]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009a76:	431a      	orrs	r2, r3
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a7c:	431a      	orrs	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	430a      	orrs	r2, r1
 8009a84:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6899      	ldr	r1, [r3, #8]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681a      	ldr	r2, [r3, #0]
 8009a90:	4b2d      	ldr	r3, [pc, #180]	; (8009b48 <HAL_SAI_Init+0x2f8>)
 8009a92:	400b      	ands	r3, r1
 8009a94:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6899      	ldr	r1, [r3, #8]
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aa0:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009aa6:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8009aac:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8009ab2:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1) << 8));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ab8:	3b01      	subs	r3, #1
 8009aba:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8009abc:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1) |
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |            \
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	68d9      	ldr	r1, [r3, #12]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	f24f 0320 	movw	r3, #61472	; 0xf020
 8009ad4:	400b      	ands	r3, r1
 8009ad6:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	68d9      	ldr	r1, [r3, #12]
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae6:	431a      	orrs	r2, r3
                            | (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1) <<  8);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009aec:	041b      	lsls	r3, r3, #16
 8009aee:	431a      	orrs	r2, r3
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009af4:	3b01      	subs	r3, #1
 8009af6:	021b      	lsls	r3, r3, #8
 8009af8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	430a      	orrs	r2, r1
 8009b00:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2200      	movs	r2, #0
 8009b06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	2200      	movs	r2, #0
 8009b16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009b1a:	2300      	movs	r3, #0
}
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	3720      	adds	r7, #32
 8009b20:	46bd      	mov	sp, r7
 8009b22:	bd80      	pop	{r7, pc}
 8009b24:	40015804 	.word	0x40015804
 8009b28:	40015824 	.word	0x40015824
 8009b2c:	40015800 	.word	0x40015800
 8009b30:	40015c00 	.word	0x40015c00
 8009b34:	40015c04 	.word	0x40015c04
 8009b38:	40015c24 	.word	0x40015c24
 8009b3c:	cccccccd 	.word	0xcccccccd
 8009b40:	ff05c010 	.word	0xff05c010
 8009b44:	ffff1ff0 	.word	0xffff1ff0
 8009b48:	fff88000 	.word	0xfff88000

08009b4c <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8009b4c:	b580      	push	{r7, lr}
 8009b4e:	b082      	sub	sp, #8
 8009b50:	af00      	add	r7, sp, #0
 8009b52:	6078      	str	r0, [r7, #4]
  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d101      	bne.n	8009b5e <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8009b5a:	2301      	movs	r3, #1
 8009b5c:	e027      	b.n	8009bae <HAL_SAI_DeInit+0x62>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2202      	movs	r2, #2
 8009b62:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	f04f 32ff 	mov.w	r2, #4294967295
 8009b76:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  SAI_Disable(hsai);
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	f000 f99f 	bl	8009ebc <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f042 0208 	orr.w	r2, r2, #8
 8009b8c:	605a      	str	r2, [r3, #4]
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7fa fb06 	bl	80041a0 <HAL_SAI_MspDeInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8009bac:	2300      	movs	r3, #0
}
 8009bae:	4618      	mov	r0, r3
 8009bb0:	3708      	adds	r7, #8
 8009bb2:	46bd      	mov	sp, r7
 8009bb4:	bd80      	pop	{r7, pc}
	...

08009bb8 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b086      	sub	sp, #24
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	60f8      	str	r0, [r7, #12]
 8009bc0:	60b9      	str	r1, [r7, #8]
 8009bc2:	4613      	mov	r3, r2
 8009bc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8009bc6:	f7fb ffc7 	bl	8005b58 <HAL_GetTick>
 8009bca:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0))
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d002      	beq.n	8009bd8 <HAL_SAI_Transmit_DMA+0x20>
 8009bd2:	88fb      	ldrh	r3, [r7, #6]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e093      	b.n	8009d04 <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	f040 808c 	bne.w	8009d02 <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009bf0:	2b01      	cmp	r3, #1
 8009bf2:	d101      	bne.n	8009bf8 <HAL_SAI_Transmit_DMA+0x40>
 8009bf4:	2302      	movs	r3, #2
 8009bf6:	e085      	b.n	8009d04 <HAL_SAI_Transmit_DMA+0x14c>
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2201      	movs	r2, #1
 8009bfc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	88fa      	ldrh	r2, [r7, #6]
 8009c0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	88fa      	ldrh	r2, [r7, #6]
 8009c12:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	2200      	movs	r2, #0
 8009c1a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	2212      	movs	r2, #18
 8009c22:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c2a:	4a38      	ldr	r2, [pc, #224]	; (8009d0c <HAL_SAI_Transmit_DMA+0x154>)
 8009c2c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c32:	4a37      	ldr	r2, [pc, #220]	; (8009d10 <HAL_SAI_Transmit_DMA+0x158>)
 8009c34:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c3a:	4a36      	ldr	r2, [pc, #216]	; (8009d14 <HAL_SAI_Transmit_DMA+0x15c>)
 8009c3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c42:	2200      	movs	r2, #0
 8009c44:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009c4e:	4619      	mov	r1, r3
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	331c      	adds	r3, #28
 8009c56:	461a      	mov	r2, r3
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009c5e:	f7fc f999 	bl	8005f94 <HAL_DMA_Start_IT>
 8009c62:	4603      	mov	r3, r0
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d005      	beq.n	8009c74 <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8009c70:	2301      	movs	r3, #1
 8009c72:	e047      	b.n	8009d04 <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009c74:	2100      	movs	r1, #0
 8009c76:	68f8      	ldr	r0, [r7, #12]
 8009c78:	f000 f8ea 	bl	8009e50 <SAI_InterruptFlag>
 8009c7c:	4601      	mov	r1, r0
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	691a      	ldr	r2, [r3, #16]
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	430a      	orrs	r2, r1
 8009c8a:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	681a      	ldr	r2, [r3, #0]
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009c9a:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009c9c:	e015      	b.n	8009cca <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8009c9e:	f7fb ff5b 	bl	8005b58 <HAL_GetTick>
 8009ca2:	4602      	mov	r2, r0
 8009ca4:	697b      	ldr	r3, [r7, #20]
 8009ca6:	1ad3      	subs	r3, r2, r3
 8009ca8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cac:	d90d      	bls.n	8009cca <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009cb4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8009cc6:	2303      	movs	r3, #3
 8009cc8:	e01c      	b.n	8009d04 <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	695b      	ldr	r3, [r3, #20]
 8009cd0:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d0e2      	beq.n	8009c9e <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d107      	bne.n	8009cf6 <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	681a      	ldr	r2, [r3, #0]
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009cf4:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
 8009d00:	e000      	b.n	8009d04 <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 8009d02:	2302      	movs	r3, #2
  }
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}
 8009d0c:	08009f8d 	.word	0x08009f8d
 8009d10:	08009f2d 	.word	0x08009f2d
 8009d14:	0800a025 	.word	0x0800a025

08009d18 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b084      	sub	sp, #16
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	4613      	mov	r3, r2
 8009d24:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0))
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d002      	beq.n	8009d32 <HAL_SAI_Receive_DMA+0x1a>
 8009d2c:	88fb      	ldrh	r3, [r7, #6]
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d101      	bne.n	8009d36 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009d32:	2301      	movs	r3, #1
 8009d34:	e074      	b.n	8009e20 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d16d      	bne.n	8009e1e <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d101      	bne.n	8009d50 <HAL_SAI_Receive_DMA+0x38>
 8009d4c:	2302      	movs	r3, #2
 8009d4e:	e067      	b.n	8009e20 <HAL_SAI_Receive_DMA+0x108>
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    hsai->pBuffPtr = pData;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	68ba      	ldr	r2, [r7, #8]
 8009d5c:	665a      	str	r2, [r3, #100]	; 0x64
    hsai->XferSize = Size;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	88fa      	ldrh	r2, [r7, #6]
 8009d62:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    hsai->XferCount = Size;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	88fa      	ldrh	r2, [r7, #6]
 8009d6a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	2200      	movs	r2, #0
 8009d72:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2222      	movs	r2, #34	; 0x22
 8009d7a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d82:	4a29      	ldr	r2, [pc, #164]	; (8009e28 <HAL_SAI_Receive_DMA+0x110>)
 8009d84:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8a:	4a28      	ldr	r2, [pc, #160]	; (8009e2c <HAL_SAI_Receive_DMA+0x114>)
 8009d8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d92:	4a27      	ldr	r2, [pc, #156]	; (8009e30 <HAL_SAI_Receive_DMA+0x118>)
 8009d94:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	6f18      	ldr	r0, [r3, #112]	; 0x70
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	331c      	adds	r3, #28
 8009da8:	4619      	mov	r1, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009dae:	461a      	mov	r2, r3
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009db6:	f7fc f8ed 	bl	8005f94 <HAL_DMA_Start_IT>
 8009dba:	4603      	mov	r3, r0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d005      	beq.n	8009dcc <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      return  HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e029      	b.n	8009e20 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009dcc:	2100      	movs	r1, #0
 8009dce:	68f8      	ldr	r0, [r7, #12]
 8009dd0:	f000 f83e 	bl	8009e50 <SAI_InterruptFlag>
 8009dd4:	4601      	mov	r1, r0
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	430a      	orrs	r2, r1
 8009de2:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	681a      	ldr	r2, [r3, #0]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8009df2:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d107      	bne.n	8009e12 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009e02:	68fb      	ldr	r3, [r7, #12]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	681a      	ldr	r2, [r3, #0]
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009e10:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2200      	movs	r2, #0
 8009e16:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	e000      	b.n	8009e20 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8009e1e:	2302      	movs	r3, #2
  }
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	3710      	adds	r7, #16
 8009e24:	46bd      	mov	sp, r7
 8009e26:	bd80      	pop	{r7, pc}
 8009e28:	0800a009 	.word	0x0800a009
 8009e2c:	08009fa9 	.word	0x08009fa9
 8009e30:	0800a025 	.word	0x0800a025

08009e34 <HAL_SAI_GetState>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval HAL state
  */
HAL_SAI_StateTypeDef HAL_SAI_GetState(SAI_HandleTypeDef *hsai)
{
 8009e34:	b480      	push	{r7}
 8009e36:	b083      	sub	sp, #12
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	6078      	str	r0, [r7, #4]
  return hsai->State;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8009e42:	b2db      	uxtb	r3, r3
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <SAI_InterruptFlag>:
  *                the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b085      	sub	sp, #20
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	2b01      	cmp	r3, #1
 8009e62:	d103      	bne.n	8009e6c <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f043 0308 	orr.w	r3, r3, #8
 8009e6a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e70:	2b08      	cmp	r3, #8
 8009e72:	d10b      	bne.n	8009e8c <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8009e78:	2b03      	cmp	r3, #3
 8009e7a:	d003      	beq.n	8009e84 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d103      	bne.n	8009e8c <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	f043 0310 	orr.w	r3, r3, #16
 8009e8a:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	2b03      	cmp	r3, #3
 8009e92:	d003      	beq.n	8009e9c <SAI_InterruptFlag+0x4c>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	685b      	ldr	r3, [r3, #4]
 8009e98:	2b02      	cmp	r3, #2
 8009e9a:	d104      	bne.n	8009ea6 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009ea2:	60fb      	str	r3, [r7, #12]
 8009ea4:	e003      	b.n	8009eae <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f043 0304 	orr.w	r3, r3, #4
 8009eac:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8009eae:	68fb      	ldr	r3, [r7, #12]
}
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	3714      	adds	r7, #20
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr

08009ebc <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *                the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b085      	sub	sp, #20
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7 / 1000);
 8009ec4:	4b17      	ldr	r3, [pc, #92]	; (8009f24 <SAI_Disable+0x68>)
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a17      	ldr	r2, [pc, #92]	; (8009f28 <SAI_Disable+0x6c>)
 8009eca:	fba2 2303 	umull	r2, r3, r2, r3
 8009ece:	0b1b      	lsrs	r3, r3, #12
 8009ed0:	009b      	lsls	r3, r3, #2
 8009ed2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	681a      	ldr	r2, [r3, #0]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009ee6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0)
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	1e5a      	subs	r2, r3, #1
 8009eec:	60fa      	str	r2, [r7, #12]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d10a      	bne.n	8009f08 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ef8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8009f02:	2303      	movs	r3, #3
 8009f04:	72fb      	strb	r3, [r7, #11]
      break;
 8009f06:	e006      	b.n	8009f16 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d1e8      	bne.n	8009ee8 <SAI_Disable+0x2c>

  return status;
 8009f16:	7afb      	ldrb	r3, [r7, #11]
}
 8009f18:	4618      	mov	r0, r3
 8009f1a:	3714      	adds	r7, #20
 8009f1c:	46bd      	mov	sp, r7
 8009f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f22:	4770      	bx	lr
 8009f24:	20000040 	.word	0x20000040
 8009f28:	95cbec1b 	.word	0x95cbec1b

08009f2c <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8009f2c:	b580      	push	{r7, lr}
 8009f2e:	b084      	sub	sp, #16
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f38:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	69db      	ldr	r3, [r3, #28]
 8009f3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009f42:	d01c      	beq.n	8009f7e <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	681a      	ldr	r2, [r3, #0]
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009f5a:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f7ff ff76 	bl	8009e50 <SAI_InterruptFlag>
 8009f64:	4603      	mov	r3, r0
 8009f66:	43d9      	mvns	r1, r3
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	691a      	ldr	r2, [r3, #16]
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	400a      	ands	r2, r1
 8009f74:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	2201      	movs	r2, #1
 8009f7a:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8009f7e:	68f8      	ldr	r0, [r7, #12]
 8009f80:	f7f8 fa92 	bl	80024a8 <HAL_SAI_TxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009f84:	bf00      	nop
 8009f86:	3710      	adds	r7, #16
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	bd80      	pop	{r7, pc}

08009f8c <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009f8c:	b580      	push	{r7, lr}
 8009f8e:	b084      	sub	sp, #16
 8009f90:	af00      	add	r7, sp, #0
 8009f92:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f98:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8009f9a:	68f8      	ldr	r0, [r7, #12]
 8009f9c:	f7f8 fa8e 	bl	80024bc <HAL_SAI_TxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009fa0:	bf00      	nop
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}

08009fa8 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b084      	sub	sp, #16
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb4:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	69db      	ldr	r3, [r3, #28]
 8009fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fbe:	d01c      	beq.n	8009ffa <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	681b      	ldr	r3, [r3, #0]
 8009fc4:	681a      	ldr	r2, [r3, #0]
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009fce:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8009fd8:	2100      	movs	r1, #0
 8009fda:	68f8      	ldr	r0, [r7, #12]
 8009fdc:	f7ff ff38 	bl	8009e50 <SAI_InterruptFlag>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	43d9      	mvns	r1, r3
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691a      	ldr	r2, [r3, #16]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	400a      	ands	r2, r1
 8009ff0:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8009ff2:	68fb      	ldr	r3, [r7, #12]
 8009ff4:	2201      	movs	r2, #1
 8009ff6:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8009ffa:	68f8      	ldr	r0, [r7, #12]
 8009ffc:	f7f8 fc84 	bl	8002908 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a000:	bf00      	nop
 800a002:	3710      	adds	r7, #16
 800a004:	46bd      	mov	sp, r7
 800a006:	bd80      	pop	{r7, pc}

0800a008 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b084      	sub	sp, #16
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a014:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f7f8 fc80 	bl	800291c <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a01c:	bf00      	nop
 800a01e:	3710      	adds	r7, #16
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b084      	sub	sp, #16
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a030:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a038:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800a042:	68fb      	ldr	r3, [r7, #12]
 800a044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a046:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d004      	beq.n	800a056 <SAI_DMAError+0x32>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a052:	2b01      	cmp	r3, #1
 800a054:	d112      	bne.n	800a07c <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800a064:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800a066:	68f8      	ldr	r0, [r7, #12]
 800a068:	f7ff ff28 	bl	8009ebc <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2201      	movs	r2, #1
 800a070:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2200      	movs	r2, #0
 800a078:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800a07c:	68f8      	ldr	r0, [r7, #12]
 800a07e:	f7f8 fa27 	bl	80024d0 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800a082:	bf00      	nop
 800a084:	3710      	adds	r7, #16
 800a086:	46bd      	mov	sp, r7
 800a088:	bd80      	pop	{r7, pc}

0800a08a <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800a08a:	b580      	push	{r7, lr}
 800a08c:	b082      	sub	sp, #8
 800a08e:	af00      	add	r7, sp, #0
 800a090:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d101      	bne.n	800a09c <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800a098:	2301      	movs	r3, #1
 800a09a:	e022      	b.n	800a0e2 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d105      	bne.n	800a0b4 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800a0ae:	6878      	ldr	r0, [r7, #4]
 800a0b0:	f7f9 fdb2 	bl	8003c18 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	2203      	movs	r2, #3
 800a0b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800a0bc:	6878      	ldr	r0, [r7, #4]
 800a0be:	f000 f815 	bl	800a0ec <HAL_SD_InitCard>
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d001      	beq.n	800a0cc <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800a0c8:	2301      	movs	r3, #1
 800a0ca:	e00a      	b.n	800a0e2 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	2200      	movs	r2, #0
 800a0d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	2201      	movs	r2, #1
 800a0dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800a0e0:	2300      	movs	r3, #0
}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3708      	adds	r7, #8
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}
	...

0800a0ec <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800a0ec:	b5b0      	push	{r4, r5, r7, lr}
 800a0ee:	b08e      	sub	sp, #56	; 0x38
 800a0f0:	af04      	add	r7, sp, #16
 800a0f2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800a0fc:	2300      	movs	r3, #0
 800a0fe:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800a100:	2300      	movs	r3, #0
 800a102:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800a104:	2300      	movs	r3, #0
 800a106:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800a108:	2376      	movs	r3, #118	; 0x76
 800a10a:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681d      	ldr	r5, [r3, #0]
 800a110:	466c      	mov	r4, sp
 800a112:	f107 0314 	add.w	r3, r7, #20
 800a116:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a11a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a11e:	f107 0308 	add.w	r3, r7, #8
 800a122:	cb0e      	ldmia	r3, {r1, r2, r3}
 800a124:	4628      	mov	r0, r5
 800a126:	f002 fb63 	bl	800c7f0 <SDMMC_Init>
 800a12a:	4603      	mov	r3, r0
 800a12c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800a130:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a134:	2b00      	cmp	r3, #0
 800a136:	d001      	beq.n	800a13c <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800a138:	2301      	movs	r3, #1
 800a13a:	e056      	b.n	800a1ea <HAL_SD_InitCard+0xfe>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	685a      	ldr	r2, [r3, #4]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a14a:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	4618      	mov	r0, r3
 800a152:	f002 fb97 	bl	800c884 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a164:	605a      	str	r2, [r3, #4]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800a166:	6878      	ldr	r0, [r7, #4]
 800a168:	f000 fff2 	bl	800b150 <SD_PowerON>
 800a16c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a16e:	6a3b      	ldr	r3, [r7, #32]
 800a170:	2b00      	cmp	r3, #0
 800a172:	d00b      	beq.n	800a18c <HAL_SD_InitCard+0xa0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2201      	movs	r2, #1
 800a178:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a180:	6a3b      	ldr	r3, [r7, #32]
 800a182:	431a      	orrs	r2, r3
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a188:	2301      	movs	r3, #1
 800a18a:	e02e      	b.n	800a1ea <HAL_SD_InitCard+0xfe>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800a18c:	6878      	ldr	r0, [r7, #4]
 800a18e:	f000 ff13 	bl	800afb8 <SD_InitCard>
 800a192:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a194:	6a3b      	ldr	r3, [r7, #32]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d00b      	beq.n	800a1b2 <HAL_SD_InitCard+0xc6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2201      	movs	r2, #1
 800a19e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1a6:	6a3b      	ldr	r3, [r7, #32]
 800a1a8:	431a      	orrs	r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	e01b      	b.n	800a1ea <HAL_SD_InitCard+0xfe>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	f002 fbf6 	bl	800c9ac <SDMMC_CmdBlockLength>
 800a1c0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800a1c2:	6a3b      	ldr	r3, [r7, #32]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d00f      	beq.n	800a1e8 <HAL_SD_InitCard+0xfc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a09      	ldr	r2, [pc, #36]	; (800a1f4 <HAL_SD_InitCard+0x108>)
 800a1ce:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1d4:	6a3b      	ldr	r3, [r7, #32]
 800a1d6:	431a      	orrs	r2, r3
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	2201      	movs	r2, #1
 800a1e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800a1e4:	2301      	movs	r3, #1
 800a1e6:	e000      	b.n	800a1ea <HAL_SD_InitCard+0xfe>
  }

  return HAL_OK;
 800a1e8:	2300      	movs	r3, #0
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3728      	adds	r7, #40	; 0x28
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a1f2:	bf00      	nop
 800a1f4:	004005ff 	.word	0x004005ff

0800a1f8 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b08c      	sub	sp, #48	; 0x30
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
 800a204:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d107      	bne.n	800a220 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a214:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a21c:	2301      	movs	r3, #1
 800a21e:	e0c3      	b.n	800a3a8 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a226:	b2db      	uxtb	r3, r3
 800a228:	2b01      	cmp	r3, #1
 800a22a:	f040 80bc 	bne.w	800a3a6 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	2200      	movs	r2, #0
 800a232:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a234:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	441a      	add	r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a23e:	429a      	cmp	r2, r3
 800a240:	d907      	bls.n	800a252 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a246:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	e0aa      	b.n	800a3a8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	2203      	movs	r2, #3
 800a256:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	2200      	movs	r2, #0
 800a260:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800a270:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a276:	4a4e      	ldr	r2, [pc, #312]	; (800a3b0 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 800a278:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a27e:	4a4d      	ldr	r2, [pc, #308]	; (800a3b4 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 800a280:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a286:	2200      	movs	r2, #0
 800a288:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a28e:	2200      	movs	r2, #0
 800a290:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a2:	689a      	ldr	r2, [r3, #8]
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	430a      	orrs	r2, r1
 800a2ac:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	3380      	adds	r3, #128	; 0x80
 800a2b8:	4619      	mov	r1, r3
 800a2ba:	68ba      	ldr	r2, [r7, #8]
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	025b      	lsls	r3, r3, #9
 800a2c0:	089b      	lsrs	r3, r3, #2
 800a2c2:	f7fb fe67 	bl	8005f94 <HAL_DMA_Start_IT>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d017      	beq.n	800a2fc <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 800a2da:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4a35      	ldr	r2, [pc, #212]	; (800a3b8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a2e2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2e8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	2201      	movs	r2, #1
 800a2f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e055      	b.n	800a3a8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f042 0208 	orr.w	r2, r2, #8
 800a30a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a310:	2b01      	cmp	r3, #1
 800a312:	d002      	beq.n	800a31a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 800a314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a316:	025b      	lsls	r3, r3, #9
 800a318:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a31a:	f04f 33ff 	mov.w	r3, #4294967295
 800a31e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a320:	683b      	ldr	r3, [r7, #0]
 800a322:	025b      	lsls	r3, r3, #9
 800a324:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a326:	2390      	movs	r3, #144	; 0x90
 800a328:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800a32a:	2302      	movs	r3, #2
 800a32c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a32e:	2300      	movs	r3, #0
 800a330:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a332:	2301      	movs	r3, #1
 800a334:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	f107 0210 	add.w	r2, r7, #16
 800a33e:	4611      	mov	r1, r2
 800a340:	4618      	mov	r0, r3
 800a342:	f002 fb07 	bl	800c954 <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 800a346:	683b      	ldr	r3, [r7, #0]
 800a348:	2b01      	cmp	r3, #1
 800a34a:	d90a      	bls.n	800a362 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2282      	movs	r2, #130	; 0x82
 800a350:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a358:	4618      	mov	r0, r3
 800a35a:	f002 fb6b 	bl	800ca34 <SDMMC_CmdReadMultiBlock>
 800a35e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a360:	e009      	b.n	800a376 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2281      	movs	r2, #129	; 0x81
 800a366:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a36e:	4618      	mov	r0, r3
 800a370:	f002 fb3e 	bl	800c9f0 <SDMMC_CmdReadSingleBlock>
 800a374:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 800a376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d012      	beq.n	800a3a2 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a0d      	ldr	r2, [pc, #52]	; (800a3b8 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 800a382:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a38a:	431a      	orrs	r2, r3
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2201      	movs	r2, #1
 800a394:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	2200      	movs	r2, #0
 800a39c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e002      	b.n	800a3a8 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	e000      	b.n	800a3a8 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 800a3a6:	2302      	movs	r3, #2
  }
}
 800a3a8:	4618      	mov	r0, r3
 800a3aa:	3730      	adds	r7, #48	; 0x30
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}
 800a3b0:	0800adc7 	.word	0x0800adc7
 800a3b4:	0800ae39 	.word	0x0800ae39
 800a3b8:	004005ff 	.word	0x004005ff

0800a3bc <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b08c      	sub	sp, #48	; 0x30
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	60f8      	str	r0, [r7, #12]
 800a3c4:	60b9      	str	r1, [r7, #8]
 800a3c6:	607a      	str	r2, [r7, #4]
 800a3c8:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d107      	bne.n	800a3e4 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d8:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800a3e0:	2301      	movs	r3, #1
 800a3e2:	e0c6      	b.n	800a572 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a3ea:	b2db      	uxtb	r3, r3
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	f040 80bf 	bne.w	800a570 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800a3f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	441a      	add	r2, r3
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a402:	429a      	cmp	r2, r3
 800a404:	d907      	bls.n	800a416 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a40a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	e0ad      	b.n	800a572 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2203      	movs	r2, #3
 800a41a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	2200      	movs	r2, #0
 800a424:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f042 021a 	orr.w	r2, r2, #26
 800a434:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a43a:	4a50      	ldr	r2, [pc, #320]	; (800a57c <HAL_SD_WriteBlocks_DMA+0x1c0>)
 800a43c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a442:	4a4f      	ldr	r2, [pc, #316]	; (800a580 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 800a444:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a44a:	2200      	movs	r2, #0
 800a44c:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a452:	2b01      	cmp	r3, #1
 800a454:	d002      	beq.n	800a45c <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 800a456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a458:	025b      	lsls	r3, r3, #9
 800a45a:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800a45c:	683b      	ldr	r3, [r7, #0]
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d90a      	bls.n	800a478 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	22a0      	movs	r2, #160	; 0xa0
 800a466:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a46e:	4618      	mov	r0, r3
 800a470:	f002 fb24 	bl	800cabc <SDMMC_CmdWriteMultiBlock>
 800a474:	62f8      	str	r0, [r7, #44]	; 0x2c
 800a476:	e009      	b.n	800a48c <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	2290      	movs	r2, #144	; 0x90
 800a47c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a484:	4618      	mov	r0, r3
 800a486:	f002 faf7 	bl	800ca78 <SDMMC_CmdWriteSingleBlock>
 800a48a:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d012      	beq.n	800a4b8 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a3b      	ldr	r2, [pc, #236]	; (800a584 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a498:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a49e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2201      	movs	r2, #1
 800a4aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	e05c      	b.n	800a572 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	f042 0208 	orr.w	r2, r2, #8
 800a4c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4cc:	2240      	movs	r2, #64	; 0x40
 800a4ce:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e0:	689a      	ldr	r2, [r3, #8]
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	430a      	orrs	r2, r1
 800a4ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800a4f0:	68b9      	ldr	r1, [r7, #8]
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	3380      	adds	r3, #128	; 0x80
 800a4f8:	461a      	mov	r2, r3
 800a4fa:	683b      	ldr	r3, [r7, #0]
 800a4fc:	025b      	lsls	r3, r3, #9
 800a4fe:	089b      	lsrs	r3, r3, #2
 800a500:	f7fb fd48 	bl	8005f94 <HAL_DMA_Start_IT>
 800a504:	4603      	mov	r3, r0
 800a506:	2b00      	cmp	r3, #0
 800a508:	d01a      	beq.n	800a540 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	f022 021a 	bic.w	r2, r2, #26
 800a518:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	4a19      	ldr	r2, [pc, #100]	; (800a584 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 800a520:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a526:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	2200      	movs	r2, #0
 800a53a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800a53c:	2301      	movs	r3, #1
 800a53e:	e018      	b.n	800a572 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800a540:	f04f 33ff 	mov.w	r3, #4294967295
 800a544:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800a546:	683b      	ldr	r3, [r7, #0]
 800a548:	025b      	lsls	r3, r3, #9
 800a54a:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800a54c:	2390      	movs	r3, #144	; 0x90
 800a54e:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800a550:	2300      	movs	r3, #0
 800a552:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800a554:	2300      	movs	r3, #0
 800a556:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 800a558:	2301      	movs	r3, #1
 800a55a:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f107 0210 	add.w	r2, r7, #16
 800a564:	4611      	mov	r1, r2
 800a566:	4618      	mov	r0, r3
 800a568:	f002 f9f4 	bl	800c954 <SDMMC_ConfigData>

      return HAL_OK;
 800a56c:	2300      	movs	r3, #0
 800a56e:	e000      	b.n	800a572 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 800a570:	2302      	movs	r3, #2
  }
}
 800a572:	4618      	mov	r0, r3
 800a574:	3730      	adds	r7, #48	; 0x30
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	0800ad9d 	.word	0x0800ad9d
 800a580:	0800ae39 	.word	0x0800ae39
 800a584:	004005ff 	.word	0x004005ff

0800a588 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a594:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d008      	beq.n	800a5b6 <HAL_SD_IRQHandler+0x2e>
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f003 0308 	and.w	r3, r3, #8
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d003      	beq.n	800a5b6 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800a5ae:	6878      	ldr	r0, [r7, #4]
 800a5b0:	f000 ffed 	bl	800b58e <SD_Read_IT>
 800a5b4:	e153      	b.n	800a85e <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	f000 808d 	beq.w	800a6e0 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a5ce:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	4ba3      	ldr	r3, [pc, #652]	; (800a868 <HAL_SD_IRQHandler+0x2e0>)
 800a5dc:	400b      	ands	r3, r1
 800a5de:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	f022 0201 	bic.w	r2, r2, #1
 800a5ee:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f003 0308 	and.w	r3, r3, #8
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d039      	beq.n	800a66e <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f003 0302 	and.w	r3, r3, #2
 800a600:	2b00      	cmp	r3, #0
 800a602:	d104      	bne.n	800a60e <HAL_SD_IRQHandler+0x86>
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	f003 0320 	and.w	r3, r3, #32
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d011      	beq.n	800a632 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4618      	mov	r0, r3
 800a614:	f002 fa74 	bl	800cb00 <SDMMC_CmdStopTransfer>
 800a618:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d008      	beq.n	800a632 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	431a      	orrs	r2, r3
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800a62c:	6878      	ldr	r0, [r7, #4]
 800a62e:	f000 f921 	bl	800a874 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f240 523a 	movw	r2, #1338	; 0x53a
 800a63a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2201      	movs	r2, #1
 800a640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a64a:	68fb      	ldr	r3, [r7, #12]
 800a64c:	f003 0301 	and.w	r3, r3, #1
 800a650:	2b00      	cmp	r3, #0
 800a652:	d104      	bne.n	800a65e <HAL_SD_IRQHandler+0xd6>
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	f003 0302 	and.w	r3, r3, #2
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d003      	beq.n	800a666 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f002 fee4 	bl	800d42c <HAL_SD_RxCpltCallback>
 800a664:	e0fb      	b.n	800a85e <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800a666:	6878      	ldr	r0, [r7, #4]
 800a668:	f002 fed6 	bl	800d418 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a66c:	e0f7      	b.n	800a85e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 80f2 	beq.w	800a85e <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	f003 0320 	and.w	r3, r3, #32
 800a680:	2b00      	cmp	r3, #0
 800a682:	d011      	beq.n	800a6a8 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4618      	mov	r0, r3
 800a68a:	f002 fa39 	bl	800cb00 <SDMMC_CmdStopTransfer>
 800a68e:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d008      	beq.n	800a6a8 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	431a      	orrs	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f000 f8e6 	bl	800a874 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	f003 0301 	and.w	r3, r3, #1
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	f040 80d5 	bne.w	800a85e <HAL_SD_IRQHandler+0x2d6>
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f003 0302 	and.w	r3, r3, #2
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	f040 80cf 	bne.w	800a85e <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f022 0208 	bic.w	r2, r2, #8
 800a6ce:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2201      	movs	r2, #1
 800a6d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 800a6d8:	6878      	ldr	r0, [r7, #4]
 800a6da:	f002 fe9d 	bl	800d418 <HAL_SD_TxCpltCallback>
}
 800a6de:	e0be      	b.n	800a85e <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a6e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d008      	beq.n	800a700 <HAL_SD_IRQHandler+0x178>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f003 0308 	and.w	r3, r3, #8
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d003      	beq.n	800a700 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 ff99 	bl	800b630 <SD_Write_IT>
 800a6fe:	e0ae      	b.n	800a85e <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a706:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	f000 80a7 	beq.w	800a85e <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a716:	f003 0302 	and.w	r3, r3, #2
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d005      	beq.n	800a72a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a722:	f043 0202 	orr.w	r2, r3, #2
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	681b      	ldr	r3, [r3, #0]
 800a72e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a730:	f003 0308 	and.w	r3, r3, #8
 800a734:	2b00      	cmp	r3, #0
 800a736:	d005      	beq.n	800a744 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a73c:	f043 0208 	orr.w	r2, r3, #8
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a74a:	f003 0320 	and.w	r3, r3, #32
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d005      	beq.n	800a75e <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a756:	f043 0220 	orr.w	r2, r3, #32
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a764:	f003 0310 	and.w	r3, r3, #16
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d005      	beq.n	800a778 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a770:	f043 0210 	orr.w	r2, r3, #16
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f240 523a 	movw	r2, #1338	; 0x53a
 800a780:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800a790:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	4618      	mov	r0, r3
 800a798:	f002 f9b2 	bl	800cb00 <SDMMC_CmdStopTransfer>
 800a79c:	4602      	mov	r2, r0
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a2:	431a      	orrs	r2, r3
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	f003 0308 	and.w	r3, r3, #8
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d00a      	beq.n	800a7c8 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 f857 	bl	800a874 <HAL_SD_ErrorCallback>
}
 800a7c6:	e04a      	b.n	800a85e <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d045      	beq.n	800a85e <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	f003 0310 	and.w	r3, r3, #16
 800a7d8:	2b00      	cmp	r3, #0
 800a7da:	d104      	bne.n	800a7e6 <HAL_SD_IRQHandler+0x25e>
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	f003 0320 	and.w	r3, r3, #32
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d011      	beq.n	800a80a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7ea:	4a20      	ldr	r2, [pc, #128]	; (800a86c <HAL_SD_IRQHandler+0x2e4>)
 800a7ec:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7fb fc2e 	bl	8006054 <HAL_DMA_Abort_IT>
 800a7f8:	4603      	mov	r3, r0
 800a7fa:	2b00      	cmp	r3, #0
 800a7fc:	d02f      	beq.n	800a85e <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a802:	4618      	mov	r0, r3
 800a804:	f000 fb6a 	bl	800aedc <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800a808:	e029      	b.n	800a85e <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	f003 0301 	and.w	r3, r3, #1
 800a810:	2b00      	cmp	r3, #0
 800a812:	d104      	bne.n	800a81e <HAL_SD_IRQHandler+0x296>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f003 0302 	and.w	r3, r3, #2
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d011      	beq.n	800a842 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a822:	4a13      	ldr	r2, [pc, #76]	; (800a870 <HAL_SD_IRQHandler+0x2e8>)
 800a824:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a82a:	4618      	mov	r0, r3
 800a82c:	f7fb fc12 	bl	8006054 <HAL_DMA_Abort_IT>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d013      	beq.n	800a85e <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 fb85 	bl	800af4a <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 800a840:	e00d      	b.n	800a85e <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	2200      	movs	r2, #0
 800a846:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	2200      	movs	r2, #0
 800a854:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 800a856:	6878      	ldr	r0, [r7, #4]
 800a858:	f002 fdd4 	bl	800d404 <HAL_SD_AbortCallback>
}
 800a85c:	e7ff      	b.n	800a85e <HAL_SD_IRQHandler+0x2d6>
 800a85e:	bf00      	nop
 800a860:	3710      	adds	r7, #16
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	ffff3ec5 	.word	0xffff3ec5
 800a86c:	0800aedd 	.word	0x0800aedd
 800a870:	0800af4b 	.word	0x0800af4b

0800a874 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800a87c:	bf00      	nop
 800a87e:	370c      	adds	r7, #12
 800a880:	46bd      	mov	sp, r7
 800a882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a886:	4770      	bx	lr

0800a888 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800a888:	b480      	push	{r7}
 800a88a:	b083      	sub	sp, #12
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a896:	0f9b      	lsrs	r3, r3, #30
 800a898:	b2da      	uxtb	r2, r3
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8a2:	0e9b      	lsrs	r3, r3, #26
 800a8a4:	b2db      	uxtb	r3, r3
 800a8a6:	f003 030f 	and.w	r3, r3, #15
 800a8aa:	b2da      	uxtb	r2, r3
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8b4:	0e1b      	lsrs	r3, r3, #24
 800a8b6:	b2db      	uxtb	r3, r3
 800a8b8:	f003 0303 	and.w	r3, r3, #3
 800a8bc:	b2da      	uxtb	r2, r3
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8c6:	0c1b      	lsrs	r3, r3, #16
 800a8c8:	b2da      	uxtb	r2, r3
 800a8ca:	683b      	ldr	r3, [r7, #0]
 800a8cc:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8d2:	0a1b      	lsrs	r3, r3, #8
 800a8d4:	b2da      	uxtb	r2, r3
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a8de:	b2da      	uxtb	r2, r3
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8e8:	0d1b      	lsrs	r3, r3, #20
 800a8ea:	b29a      	uxth	r2, r3
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a8f4:	0c1b      	lsrs	r3, r3, #16
 800a8f6:	b2db      	uxtb	r3, r3
 800a8f8:	f003 030f 	and.w	r3, r3, #15
 800a8fc:	b2da      	uxtb	r2, r3
 800a8fe:	683b      	ldr	r3, [r7, #0]
 800a900:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a906:	0bdb      	lsrs	r3, r3, #15
 800a908:	b2db      	uxtb	r3, r3
 800a90a:	f003 0301 	and.w	r3, r3, #1
 800a90e:	b2da      	uxtb	r2, r3
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a918:	0b9b      	lsrs	r3, r3, #14
 800a91a:	b2db      	uxtb	r3, r3
 800a91c:	f003 0301 	and.w	r3, r3, #1
 800a920:	b2da      	uxtb	r2, r3
 800a922:	683b      	ldr	r3, [r7, #0]
 800a924:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a92a:	0b5b      	lsrs	r3, r3, #13
 800a92c:	b2db      	uxtb	r3, r3
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	b2da      	uxtb	r2, r3
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a93c:	0b1b      	lsrs	r3, r3, #12
 800a93e:	b2db      	uxtb	r3, r3
 800a940:	f003 0301 	and.w	r3, r3, #1
 800a944:	b2da      	uxtb	r2, r3
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	2200      	movs	r2, #0
 800a94e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a954:	2b00      	cmp	r3, #0
 800a956:	d163      	bne.n	800aa20 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a95c:	009a      	lsls	r2, r3, #2
 800a95e:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a962:	4013      	ands	r3, r2
 800a964:	687a      	ldr	r2, [r7, #4]
 800a966:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a968:	0f92      	lsrs	r2, r2, #30
 800a96a:	431a      	orrs	r2, r3
 800a96c:	683b      	ldr	r3, [r7, #0]
 800a96e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a974:	0edb      	lsrs	r3, r3, #27
 800a976:	b2db      	uxtb	r3, r3
 800a978:	f003 0307 	and.w	r3, r3, #7
 800a97c:	b2da      	uxtb	r2, r3
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a986:	0e1b      	lsrs	r3, r3, #24
 800a988:	b2db      	uxtb	r3, r3
 800a98a:	f003 0307 	and.w	r3, r3, #7
 800a98e:	b2da      	uxtb	r2, r3
 800a990:	683b      	ldr	r3, [r7, #0]
 800a992:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a998:	0d5b      	lsrs	r3, r3, #21
 800a99a:	b2db      	uxtb	r3, r3
 800a99c:	f003 0307 	and.w	r3, r3, #7
 800a9a0:	b2da      	uxtb	r2, r3
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9aa:	0c9b      	lsrs	r3, r3, #18
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	f003 0307 	and.w	r3, r3, #7
 800a9b2:	b2da      	uxtb	r2, r3
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9bc:	0bdb      	lsrs	r3, r3, #15
 800a9be:	b2db      	uxtb	r3, r3
 800a9c0:	f003 0307 	and.w	r3, r3, #7
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800a9ca:	683b      	ldr	r3, [r7, #0]
 800a9cc:	691b      	ldr	r3, [r3, #16]
 800a9ce:	1c5a      	adds	r2, r3, #1
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800a9d4:	683b      	ldr	r3, [r7, #0]
 800a9d6:	7e1b      	ldrb	r3, [r3, #24]
 800a9d8:	b2db      	uxtb	r3, r3
 800a9da:	f003 0307 	and.w	r3, r3, #7
 800a9de:	3302      	adds	r3, #2
 800a9e0:	2201      	movs	r2, #1
 800a9e2:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e6:	687a      	ldr	r2, [r7, #4]
 800a9e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a9ea:	fb02 f203 	mul.w	r2, r2, r3
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	7a1b      	ldrb	r3, [r3, #8]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	f003 030f 	and.w	r3, r3, #15
 800a9fc:	2201      	movs	r2, #1
 800a9fe:	409a      	lsls	r2, r3
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa08:	687a      	ldr	r2, [r7, #4]
 800aa0a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800aa0c:	0a52      	lsrs	r2, r2, #9
 800aa0e:	fb02 f203 	mul.w	r2, r2, r3
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa1c:	661a      	str	r2, [r3, #96]	; 0x60
 800aa1e:	e031      	b.n	800aa84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa24:	2b01      	cmp	r3, #1
 800aa26:	d11d      	bne.n	800aa64 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800aa2c:	041b      	lsls	r3, r3, #16
 800aa2e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa36:	0c1b      	lsrs	r3, r3, #16
 800aa38:	431a      	orrs	r2, r3
 800aa3a:	683b      	ldr	r3, [r7, #0]
 800aa3c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	691b      	ldr	r3, [r3, #16]
 800aa42:	3301      	adds	r3, #1
 800aa44:	029a      	lsls	r2, r3, #10
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa58:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	661a      	str	r2, [r3, #96]	; 0x60
 800aa62:	e00f      	b.n	800aa84 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a58      	ldr	r2, [pc, #352]	; (800abcc <HAL_SD_GetCardCSD+0x344>)
 800aa6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa70:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	e09d      	b.n	800abc0 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa88:	0b9b      	lsrs	r3, r3, #14
 800aa8a:	b2db      	uxtb	r3, r3
 800aa8c:	f003 0301 	and.w	r3, r3, #1
 800aa90:	b2da      	uxtb	r2, r3
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa9a:	09db      	lsrs	r3, r3, #7
 800aa9c:	b2db      	uxtb	r3, r3
 800aa9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aaa2:	b2da      	uxtb	r2, r3
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaac:	b2db      	uxtb	r3, r3
 800aaae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aabc:	0fdb      	lsrs	r3, r3, #31
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aac8:	0f5b      	lsrs	r3, r3, #29
 800aaca:	b2db      	uxtb	r3, r3
 800aacc:	f003 0303 	and.w	r3, r3, #3
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aada:	0e9b      	lsrs	r3, r3, #26
 800aadc:	b2db      	uxtb	r3, r3
 800aade:	f003 0307 	and.w	r3, r3, #7
 800aae2:	b2da      	uxtb	r2, r3
 800aae4:	683b      	ldr	r3, [r7, #0]
 800aae6:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aaec:	0d9b      	lsrs	r3, r3, #22
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	f003 030f 	and.w	r3, r3, #15
 800aaf4:	b2da      	uxtb	r2, r3
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aafe:	0d5b      	lsrs	r3, r3, #21
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	f003 0301 	and.w	r3, r3, #1
 800ab06:	b2da      	uxtb	r2, r3
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800ab0e:	683b      	ldr	r3, [r7, #0]
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab1a:	0c1b      	lsrs	r3, r3, #16
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	f003 0301 	and.w	r3, r3, #1
 800ab22:	b2da      	uxtb	r2, r3
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab2e:	0bdb      	lsrs	r3, r3, #15
 800ab30:	b2db      	uxtb	r3, r3
 800ab32:	f003 0301 	and.w	r3, r3, #1
 800ab36:	b2da      	uxtb	r2, r3
 800ab38:	683b      	ldr	r3, [r7, #0]
 800ab3a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab42:	0b9b      	lsrs	r3, r3, #14
 800ab44:	b2db      	uxtb	r3, r3
 800ab46:	f003 0301 	and.w	r3, r3, #1
 800ab4a:	b2da      	uxtb	r2, r3
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab56:	0b5b      	lsrs	r3, r3, #13
 800ab58:	b2db      	uxtb	r3, r3
 800ab5a:	f003 0301 	and.w	r3, r3, #1
 800ab5e:	b2da      	uxtb	r2, r3
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab6a:	0b1b      	lsrs	r3, r3, #12
 800ab6c:	b2db      	uxtb	r3, r3
 800ab6e:	f003 0301 	and.w	r3, r3, #1
 800ab72:	b2da      	uxtb	r2, r3
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab7e:	0a9b      	lsrs	r3, r3, #10
 800ab80:	b2db      	uxtb	r3, r3
 800ab82:	f003 0303 	and.w	r3, r3, #3
 800ab86:	b2da      	uxtb	r2, r3
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ab92:	0a1b      	lsrs	r3, r3, #8
 800ab94:	b2db      	uxtb	r3, r3
 800ab96:	f003 0303 	and.w	r3, r3, #3
 800ab9a:	b2da      	uxtb	r2, r3
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba6:	085b      	lsrs	r3, r3, #1
 800aba8:	b2db      	uxtb	r3, r3
 800abaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abae:	b2da      	uxtb	r2, r3
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800abb6:	683b      	ldr	r3, [r7, #0]
 800abb8:	2201      	movs	r2, #1
 800abba:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800abbe:	2300      	movs	r3, #0
}
 800abc0:	4618      	mov	r0, r3
 800abc2:	370c      	adds	r7, #12
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	004005ff 	.word	0x004005ff

0800abd0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800abd0:	b480      	push	{r7}
 800abd2:	b083      	sub	sp, #12
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
 800abd8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800abde:	683b      	ldr	r3, [r7, #0]
 800abe0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800abe6:	683b      	ldr	r3, [r7, #0]
 800abe8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800abf6:	683b      	ldr	r3, [r7, #0]
 800abf8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800abfe:	683b      	ldr	r3, [r7, #0]
 800ac00:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ac06:	683b      	ldr	r3, [r7, #0]
 800ac08:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800ac16:	683b      	ldr	r3, [r7, #0]
 800ac18:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ac1a:	2300      	movs	r3, #0
}
 800ac1c:	4618      	mov	r0, r3
 800ac1e:	370c      	adds	r7, #12
 800ac20:	46bd      	mov	sp, r7
 800ac22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac26:	4770      	bx	lr

0800ac28 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800ac28:	b5b0      	push	{r4, r5, r7, lr}
 800ac2a:	b08e      	sub	sp, #56	; 0x38
 800ac2c:	af04      	add	r7, sp, #16
 800ac2e:	6078      	str	r0, [r7, #4]
 800ac30:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ac32:	2300      	movs	r3, #0
 800ac34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	2203      	movs	r2, #3
 800ac3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac44:	2b03      	cmp	r3, #3
 800ac46:	d02e      	beq.n	800aca6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ac4e:	d106      	bne.n	800ac5e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac54:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	639a      	str	r2, [r3, #56]	; 0x38
 800ac5c:	e029      	b.n	800acb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac64:	d10a      	bne.n	800ac7c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 fb28 	bl	800b2bc <SD_WideBus_Enable>
 800ac6c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac72:	6a3b      	ldr	r3, [r7, #32]
 800ac74:	431a      	orrs	r2, r3
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	639a      	str	r2, [r3, #56]	; 0x38
 800ac7a:	e01a      	b.n	800acb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	2b00      	cmp	r3, #0
 800ac80:	d10a      	bne.n	800ac98 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800ac82:	6878      	ldr	r0, [r7, #4]
 800ac84:	f000 fb65 	bl	800b352 <SD_WideBus_Disable>
 800ac88:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ac8e:	6a3b      	ldr	r3, [r7, #32]
 800ac90:	431a      	orrs	r2, r3
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	639a      	str	r2, [r3, #56]	; 0x38
 800ac96:	e00c      	b.n	800acb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac9c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	639a      	str	r2, [r3, #56]	; 0x38
 800aca4:	e005      	b.n	800acb2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acaa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00b      	beq.n	800acd2 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	681b      	ldr	r3, [r3, #0]
 800acbe:	4a26      	ldr	r2, [pc, #152]	; (800ad58 <HAL_SD_ConfigWideBusOperation+0x130>)
 800acc0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2201      	movs	r2, #1
 800acc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800acca:	2301      	movs	r3, #1
 800accc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800acd0:	e01f      	b.n	800ad12 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	689b      	ldr	r3, [r3, #8]
 800acdc:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	68db      	ldr	r3, [r3, #12]
 800ace2:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	699b      	ldr	r3, [r3, #24]
 800acf2:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681d      	ldr	r5, [r3, #0]
 800acf8:	466c      	mov	r4, sp
 800acfa:	f107 0314 	add.w	r3, r7, #20
 800acfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ad02:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ad06:	f107 0308 	add.w	r3, r7, #8
 800ad0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad0c:	4628      	mov	r0, r5
 800ad0e:	f001 fd6f 	bl	800c7f0 <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	f44f 7100 	mov.w	r1, #512	; 0x200
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f001 fe46 	bl	800c9ac <SDMMC_CmdBlockLength>
 800ad20:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad22:	6a3b      	ldr	r3, [r7, #32]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d00c      	beq.n	800ad42 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	4a0a      	ldr	r2, [pc, #40]	; (800ad58 <HAL_SD_ConfigWideBusOperation+0x130>)
 800ad2e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad34:	6a3b      	ldr	r3, [r7, #32]
 800ad36:	431a      	orrs	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800ad3c:	2301      	movs	r3, #1
 800ad3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800ad4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800ad4e:	4618      	mov	r0, r3
 800ad50:	3728      	adds	r7, #40	; 0x28
 800ad52:	46bd      	mov	sp, r7
 800ad54:	bdb0      	pop	{r4, r5, r7, pc}
 800ad56:	bf00      	nop
 800ad58:	004005ff 	.word	0x004005ff

0800ad5c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b086      	sub	sp, #24
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800ad64:	2300      	movs	r3, #0
 800ad66:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800ad68:	f107 030c 	add.w	r3, r7, #12
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f000 fa7c 	bl	800b26c <SD_SendStatus>
 800ad74:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d005      	beq.n	800ad88 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ad80:	697b      	ldr	r3, [r7, #20]
 800ad82:	431a      	orrs	r2, r3
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	0a5b      	lsrs	r3, r3, #9
 800ad8c:	f003 030f 	and.w	r3, r3, #15
 800ad90:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800ad92:	693b      	ldr	r3, [r7, #16]
}
 800ad94:	4618      	mov	r0, r3
 800ad96:	3718      	adds	r7, #24
 800ad98:	46bd      	mov	sp, r7
 800ad9a:	bd80      	pop	{r7, pc}

0800ad9c <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b085      	sub	sp, #20
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ada8:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adb8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800adba:	bf00      	nop
 800adbc:	3714      	adds	r7, #20
 800adbe:	46bd      	mov	sp, r7
 800adc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc4:	4770      	bx	lr

0800adc6 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800adc6:	b580      	push	{r7, lr}
 800adc8:	b084      	sub	sp, #16
 800adca:	af00      	add	r7, sp, #0
 800adcc:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add2:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800add8:	2b82      	cmp	r3, #130	; 0x82
 800adda:	d111      	bne.n	800ae00 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	681b      	ldr	r3, [r3, #0]
 800ade0:	4618      	mov	r0, r3
 800ade2:	f001 fe8d 	bl	800cb00 <SDMMC_CmdStopTransfer>
 800ade6:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	2b00      	cmp	r3, #0
 800adec:	d008      	beq.n	800ae00 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	431a      	orrs	r2, r3
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800adfa:	68f8      	ldr	r0, [r7, #12]
 800adfc:	f7ff fd3a 	bl	800a874 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f022 0208 	bic.w	r2, r2, #8
 800ae0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	f240 523a 	movw	r2, #1338	; 0x53a
 800ae18:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	2201      	movs	r2, #1
 800ae1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	2200      	movs	r2, #0
 800ae26:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 800ae28:	68f8      	ldr	r0, [r7, #12]
 800ae2a:	f002 faff 	bl	800d42c <HAL_SD_RxCpltCallback>
#endif
}
 800ae2e:	bf00      	nop
 800ae30:	3710      	adds	r7, #16
 800ae32:	46bd      	mov	sp, r7
 800ae34:	bd80      	pop	{r7, pc}
	...

0800ae38 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae44:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7fb fab0 	bl	80063ac <HAL_DMA_GetError>
 800ae4c:	4603      	mov	r3, r0
 800ae4e:	2b02      	cmp	r3, #2
 800ae50:	d03e      	beq.n	800aed0 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 800ae52:	697b      	ldr	r3, [r7, #20]
 800ae54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae58:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ae5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae60:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d002      	beq.n	800ae6e <SD_DMAError+0x36>
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d12d      	bne.n	800aeca <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	4a19      	ldr	r2, [pc, #100]	; (800aed8 <SD_DMAError+0xa0>)
 800ae74:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800ae84:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 800ae86:	697b      	ldr	r3, [r7, #20]
 800ae88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ae8e:	697b      	ldr	r3, [r7, #20]
 800ae90:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 800ae92:	6978      	ldr	r0, [r7, #20]
 800ae94:	f7ff ff62 	bl	800ad5c <HAL_SD_GetCardState>
 800ae98:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800ae9a:	68bb      	ldr	r3, [r7, #8]
 800ae9c:	2b06      	cmp	r3, #6
 800ae9e:	d002      	beq.n	800aea6 <SD_DMAError+0x6e>
 800aea0:	68bb      	ldr	r3, [r7, #8]
 800aea2:	2b05      	cmp	r3, #5
 800aea4:	d10a      	bne.n	800aebc <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800aea6:	697b      	ldr	r3, [r7, #20]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4618      	mov	r0, r3
 800aeac:	f001 fe28 	bl	800cb00 <SDMMC_CmdStopTransfer>
 800aeb0:	4602      	mov	r2, r0
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb6:	431a      	orrs	r2, r3
 800aeb8:	697b      	ldr	r3, [r7, #20]
 800aeba:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	2201      	movs	r2, #1
 800aec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800aec4:	697b      	ldr	r3, [r7, #20]
 800aec6:	2200      	movs	r2, #0
 800aec8:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 800aeca:	6978      	ldr	r0, [r7, #20]
 800aecc:	f7ff fcd2 	bl	800a874 <HAL_SD_ErrorCallback>
#endif
  }
}
 800aed0:	bf00      	nop
 800aed2:	3718      	adds	r7, #24
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}
 800aed8:	004005ff 	.word	0x004005ff

0800aedc <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 800aedc:	b580      	push	{r7, lr}
 800aede:	b084      	sub	sp, #16
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aee8:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f240 523a 	movw	r2, #1338	; 0x53a
 800aef2:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800aef4:	68f8      	ldr	r0, [r7, #12]
 800aef6:	f7ff ff31 	bl	800ad5c <HAL_SD_GetCardState>
 800aefa:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	2201      	movs	r2, #1
 800af00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800af04:	68fb      	ldr	r3, [r7, #12]
 800af06:	2200      	movs	r2, #0
 800af08:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	2b06      	cmp	r3, #6
 800af0e:	d002      	beq.n	800af16 <SD_DMATxAbort+0x3a>
 800af10:	68bb      	ldr	r3, [r7, #8]
 800af12:	2b05      	cmp	r3, #5
 800af14:	d10a      	bne.n	800af2c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	4618      	mov	r0, r3
 800af1c:	f001 fdf0 	bl	800cb00 <SDMMC_CmdStopTransfer>
 800af20:	4602      	mov	r2, r0
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af26:	431a      	orrs	r2, r3
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af30:	2b00      	cmp	r3, #0
 800af32:	d103      	bne.n	800af3c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800af34:	68f8      	ldr	r0, [r7, #12]
 800af36:	f002 fa65 	bl	800d404 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800af3a:	e002      	b.n	800af42 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f7ff fc99 	bl	800a874 <HAL_SD_ErrorCallback>
}
 800af42:	bf00      	nop
 800af44:	3710      	adds	r7, #16
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af56:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	f240 523a 	movw	r2, #1338	; 0x53a
 800af60:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f7ff fefa 	bl	800ad5c <HAL_SD_GetCardState>
 800af68:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	2201      	movs	r2, #1
 800af6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	2200      	movs	r2, #0
 800af76:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 800af78:	68bb      	ldr	r3, [r7, #8]
 800af7a:	2b06      	cmp	r3, #6
 800af7c:	d002      	beq.n	800af84 <SD_DMARxAbort+0x3a>
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	2b05      	cmp	r3, #5
 800af82:	d10a      	bne.n	800af9a <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	4618      	mov	r0, r3
 800af8a:	f001 fdb9 	bl	800cb00 <SDMMC_CmdStopTransfer>
 800af8e:	4602      	mov	r2, r0
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af94:	431a      	orrs	r2, r3
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d103      	bne.n	800afaa <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f002 fa2e 	bl	800d404 <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 800afa8:	e002      	b.n	800afb0 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 800afaa:	68f8      	ldr	r0, [r7, #12]
 800afac:	f7ff fc62 	bl	800a874 <HAL_SD_ErrorCallback>
}
 800afb0:	bf00      	nop
 800afb2:	3710      	adds	r7, #16
 800afb4:	46bd      	mov	sp, r7
 800afb6:	bd80      	pop	{r7, pc}

0800afb8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800afb8:	b5b0      	push	{r4, r5, r7, lr}
 800afba:	b094      	sub	sp, #80	; 0x50
 800afbc:	af04      	add	r7, sp, #16
 800afbe:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800afc0:	2301      	movs	r3, #1
 800afc2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	4618      	mov	r0, r3
 800afca:	f001 fc6a 	bl	800c8a2 <SDMMC_GetPowerState>
 800afce:	4603      	mov	r3, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d102      	bne.n	800afda <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800afd4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800afd8:	e0b6      	b.n	800b148 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800afde:	2b03      	cmp	r3, #3
 800afe0:	d02f      	beq.n	800b042 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	4618      	mov	r0, r3
 800afe8:	f001 fe95 	bl	800cd16 <SDMMC_CmdSendCID>
 800afec:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800afee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d001      	beq.n	800aff8 <SD_InitCard+0x40>
    {
      return errorstate;
 800aff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aff6:	e0a7      	b.n	800b148 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2100      	movs	r1, #0
 800affe:	4618      	mov	r0, r3
 800b000:	f001 fc95 	bl	800c92e <SDMMC_GetResponse>
 800b004:	4602      	mov	r2, r0
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	2104      	movs	r1, #4
 800b010:	4618      	mov	r0, r3
 800b012:	f001 fc8c 	bl	800c92e <SDMMC_GetResponse>
 800b016:	4602      	mov	r2, r0
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	2108      	movs	r1, #8
 800b022:	4618      	mov	r0, r3
 800b024:	f001 fc83 	bl	800c92e <SDMMC_GetResponse>
 800b028:	4602      	mov	r2, r0
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	210c      	movs	r1, #12
 800b034:	4618      	mov	r0, r3
 800b036:	f001 fc7a 	bl	800c92e <SDMMC_GetResponse>
 800b03a:	4602      	mov	r2, r0
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b046:	2b03      	cmp	r3, #3
 800b048:	d00d      	beq.n	800b066 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	f107 020e 	add.w	r2, r7, #14
 800b052:	4611      	mov	r1, r2
 800b054:	4618      	mov	r0, r3
 800b056:	f001 fe9b 	bl	800cd90 <SDMMC_CmdSetRelAdd>
 800b05a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b05c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d001      	beq.n	800b066 <SD_InitCard+0xae>
    {
      return errorstate;
 800b062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b064:	e070      	b.n	800b148 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b06a:	2b03      	cmp	r3, #3
 800b06c:	d036      	beq.n	800b0dc <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800b06e:	89fb      	ldrh	r3, [r7, #14]
 800b070:	461a      	mov	r2, r3
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	681a      	ldr	r2, [r3, #0]
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b07e:	041b      	lsls	r3, r3, #16
 800b080:	4619      	mov	r1, r3
 800b082:	4610      	mov	r0, r2
 800b084:	f001 fe65 	bl	800cd52 <SDMMC_CmdSendCSD>
 800b088:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800b08a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <SD_InitCard+0xdc>
    {
      return errorstate;
 800b090:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b092:	e059      	b.n	800b148 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2100      	movs	r1, #0
 800b09a:	4618      	mov	r0, r3
 800b09c:	f001 fc47 	bl	800c92e <SDMMC_GetResponse>
 800b0a0:	4602      	mov	r2, r0
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	2104      	movs	r1, #4
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	f001 fc3e 	bl	800c92e <SDMMC_GetResponse>
 800b0b2:	4602      	mov	r2, r0
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	2108      	movs	r1, #8
 800b0be:	4618      	mov	r0, r3
 800b0c0:	f001 fc35 	bl	800c92e <SDMMC_GetResponse>
 800b0c4:	4602      	mov	r2, r0
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	210c      	movs	r1, #12
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f001 fc2c 	bl	800c92e <SDMMC_GetResponse>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2104      	movs	r1, #4
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	f001 fc23 	bl	800c92e <SDMMC_GetResponse>
 800b0e8:	4603      	mov	r3, r0
 800b0ea:	0d1a      	lsrs	r2, r3, #20
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800b0f0:	f107 0310 	add.w	r3, r7, #16
 800b0f4:	4619      	mov	r1, r3
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f7ff fbc6 	bl	800a888 <HAL_SD_GetCardCSD>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d002      	beq.n	800b108 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b102:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b106:	e01f      	b.n	800b148 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	6819      	ldr	r1, [r3, #0]
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b110:	041b      	lsls	r3, r3, #16
 800b112:	461a      	mov	r2, r3
 800b114:	f04f 0300 	mov.w	r3, #0
 800b118:	4608      	mov	r0, r1
 800b11a:	f001 fd13 	bl	800cb44 <SDMMC_CmdSelDesel>
 800b11e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800b120:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b122:	2b00      	cmp	r3, #0
 800b124:	d001      	beq.n	800b12a <SD_InitCard+0x172>
  {
    return errorstate;
 800b126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b128:	e00e      	b.n	800b148 <SD_InitCard+0x190>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681d      	ldr	r5, [r3, #0]
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	466c      	mov	r4, sp
 800b132:	f103 0210 	add.w	r2, r3, #16
 800b136:	ca07      	ldmia	r2, {r0, r1, r2}
 800b138:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800b13c:	3304      	adds	r3, #4
 800b13e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b140:	4628      	mov	r0, r5
 800b142:	f001 fb55 	bl	800c7f0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800b146:	2300      	movs	r3, #0
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3740      	adds	r7, #64	; 0x40
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bdb0      	pop	{r4, r5, r7, pc}

0800b150 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b158:	2300      	movs	r3, #0
 800b15a:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 800b15c:	2300      	movs	r3, #0
 800b15e:	617b      	str	r3, [r7, #20]
 800b160:	2300      	movs	r3, #0
 800b162:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4618      	mov	r0, r3
 800b16a:	f001 fd0e 	bl	800cb8a <SDMMC_CmdGoIdleState>
 800b16e:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2b00      	cmp	r3, #0
 800b174:	d001      	beq.n	800b17a <SD_PowerON+0x2a>
  {
    return errorstate;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	e072      	b.n	800b260 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4618      	mov	r0, r3
 800b180:	f001 fd21 	bl	800cbc6 <SDMMC_CmdOperCond>
 800b184:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d00d      	beq.n	800b1a8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2200      	movs	r2, #0
 800b190:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4618      	mov	r0, r3
 800b198:	f001 fcf7 	bl	800cb8a <SDMMC_CmdGoIdleState>
 800b19c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d004      	beq.n	800b1ae <SD_PowerON+0x5e>
    {
      return errorstate;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	e05b      	b.n	800b260 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1b2:	2b01      	cmp	r3, #1
 800b1b4:	d137      	bne.n	800b226 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2100      	movs	r1, #0
 800b1bc:	4618      	mov	r0, r3
 800b1be:	f001 fd21 	bl	800cc04 <SDMMC_CmdAppCommand>
 800b1c2:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	d02d      	beq.n	800b226 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b1ce:	e047      	b.n	800b260 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	4618      	mov	r0, r3
 800b1d8:	f001 fd14 	bl	800cc04 <SDMMC_CmdAppCommand>
 800b1dc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d001      	beq.n	800b1e8 <SD_PowerON+0x98>
    {
      return errorstate;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	e03b      	b.n	800b260 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	491e      	ldr	r1, [pc, #120]	; (800b268 <SD_PowerON+0x118>)
 800b1ee:	4618      	mov	r0, r3
 800b1f0:	f001 fd2a 	bl	800cc48 <SDMMC_CmdAppOperCommand>
 800b1f4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d002      	beq.n	800b202 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800b1fc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800b200:	e02e      	b.n	800b260 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2100      	movs	r1, #0
 800b208:	4618      	mov	r0, r3
 800b20a:	f001 fb90 	bl	800c92e <SDMMC_GetResponse>
 800b20e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	0fdb      	lsrs	r3, r3, #31
 800b214:	2b01      	cmp	r3, #1
 800b216:	d101      	bne.n	800b21c <SD_PowerON+0xcc>
 800b218:	2301      	movs	r3, #1
 800b21a:	e000      	b.n	800b21e <SD_PowerON+0xce>
 800b21c:	2300      	movs	r3, #0
 800b21e:	613b      	str	r3, [r7, #16]

    count++;
 800b220:	68bb      	ldr	r3, [r7, #8]
 800b222:	3301      	adds	r3, #1
 800b224:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800b226:	68bb      	ldr	r3, [r7, #8]
 800b228:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b22c:	4293      	cmp	r3, r2
 800b22e:	d802      	bhi.n	800b236 <SD_PowerON+0xe6>
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d0cc      	beq.n	800b1d0 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800b236:	68bb      	ldr	r3, [r7, #8]
 800b238:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800b23c:	4293      	cmp	r3, r2
 800b23e:	d902      	bls.n	800b246 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800b240:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b244:	e00c      	b.n	800b260 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800b246:	697b      	ldr	r3, [r7, #20]
 800b248:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	d003      	beq.n	800b258 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	645a      	str	r2, [r3, #68]	; 0x44
 800b256:	e002      	b.n	800b25e <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2200      	movs	r2, #0
 800b25c:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800b25e:	2300      	movs	r3, #0
}
 800b260:	4618      	mov	r0, r3
 800b262:	3718      	adds	r7, #24
 800b264:	46bd      	mov	sp, r7
 800b266:	bd80      	pop	{r7, pc}
 800b268:	c1100000 	.word	0xc1100000

0800b26c <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b084      	sub	sp, #16
 800b270:	af00      	add	r7, sp, #0
 800b272:	6078      	str	r0, [r7, #4]
 800b274:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800b276:	683b      	ldr	r3, [r7, #0]
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d102      	bne.n	800b282 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800b27c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b280:	e018      	b.n	800b2b4 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681a      	ldr	r2, [r3, #0]
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b28a:	041b      	lsls	r3, r3, #16
 800b28c:	4619      	mov	r1, r3
 800b28e:	4610      	mov	r0, r2
 800b290:	f001 fd9f 	bl	800cdd2 <SDMMC_CmdSendStatus>
 800b294:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d001      	beq.n	800b2a0 <SD_SendStatus+0x34>
  {
    return errorstate;
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	e009      	b.n	800b2b4 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	2100      	movs	r1, #0
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	f001 fb41 	bl	800c92e <SDMMC_GetResponse>
 800b2ac:	4602      	mov	r2, r0
 800b2ae:	683b      	ldr	r3, [r7, #0]
 800b2b0:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3710      	adds	r7, #16
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b086      	sub	sp, #24
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	60fb      	str	r3, [r7, #12]
 800b2c8:	2300      	movs	r3, #0
 800b2ca:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	2100      	movs	r1, #0
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	f001 fb2b 	bl	800c92e <SDMMC_GetResponse>
 800b2d8:	4603      	mov	r3, r0
 800b2da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2e2:	d102      	bne.n	800b2ea <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b2e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b2e8:	e02f      	b.n	800b34a <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b2ea:	f107 030c 	add.w	r3, r7, #12
 800b2ee:	4619      	mov	r1, r3
 800b2f0:	6878      	ldr	r0, [r7, #4]
 800b2f2:	f000 f879 	bl	800b3e8 <SD_FindSCR>
 800b2f6:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d001      	beq.n	800b302 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	e023      	b.n	800b34a <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b302:	693b      	ldr	r3, [r7, #16]
 800b304:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d01c      	beq.n	800b346 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b314:	041b      	lsls	r3, r3, #16
 800b316:	4619      	mov	r1, r3
 800b318:	4610      	mov	r0, r2
 800b31a:	f001 fc73 	bl	800cc04 <SDMMC_CmdAppCommand>
 800b31e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b320:	697b      	ldr	r3, [r7, #20]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d001      	beq.n	800b32a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800b326:	697b      	ldr	r3, [r7, #20]
 800b328:	e00f      	b.n	800b34a <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2102      	movs	r1, #2
 800b330:	4618      	mov	r0, r3
 800b332:	f001 fcad 	bl	800cc90 <SDMMC_CmdBusWidth>
 800b336:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b338:	697b      	ldr	r3, [r7, #20]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d001      	beq.n	800b342 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800b33e:	697b      	ldr	r3, [r7, #20]
 800b340:	e003      	b.n	800b34a <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b342:	2300      	movs	r3, #0
 800b344:	e001      	b.n	800b34a <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b346:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b34a:	4618      	mov	r0, r3
 800b34c:	3718      	adds	r7, #24
 800b34e:	46bd      	mov	sp, r7
 800b350:	bd80      	pop	{r7, pc}

0800b352 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800b352:	b580      	push	{r7, lr}
 800b354:	b086      	sub	sp, #24
 800b356:	af00      	add	r7, sp, #0
 800b358:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 800b35a:	2300      	movs	r3, #0
 800b35c:	60fb      	str	r3, [r7, #12]
 800b35e:	2300      	movs	r3, #0
 800b360:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2100      	movs	r1, #0
 800b368:	4618      	mov	r0, r3
 800b36a:	f001 fae0 	bl	800c92e <SDMMC_GetResponse>
 800b36e:	4603      	mov	r3, r0
 800b370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b374:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b378:	d102      	bne.n	800b380 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800b37a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b37e:	e02f      	b.n	800b3e0 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800b380:	f107 030c 	add.w	r3, r7, #12
 800b384:	4619      	mov	r1, r3
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 f82e 	bl	800b3e8 <SD_FindSCR>
 800b38c:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	e023      	b.n	800b3e0 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d01c      	beq.n	800b3dc <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681a      	ldr	r2, [r3, #0]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3aa:	041b      	lsls	r3, r3, #16
 800b3ac:	4619      	mov	r1, r3
 800b3ae:	4610      	mov	r0, r2
 800b3b0:	f001 fc28 	bl	800cc04 <SDMMC_CmdAppCommand>
 800b3b4:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3b6:	697b      	ldr	r3, [r7, #20]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d001      	beq.n	800b3c0 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	e00f      	b.n	800b3e0 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	2100      	movs	r1, #0
 800b3c6:	4618      	mov	r0, r3
 800b3c8:	f001 fc62 	bl	800cc90 <SDMMC_CmdBusWidth>
 800b3cc:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800b3ce:	697b      	ldr	r3, [r7, #20]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	d001      	beq.n	800b3d8 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800b3d4:	697b      	ldr	r3, [r7, #20]
 800b3d6:	e003      	b.n	800b3e0 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800b3d8:	2300      	movs	r3, #0
 800b3da:	e001      	b.n	800b3e0 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800b3dc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3718      	adds	r7, #24
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	bd80      	pop	{r7, pc}

0800b3e8 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800b3e8:	b590      	push	{r4, r7, lr}
 800b3ea:	b08f      	sub	sp, #60	; 0x3c
 800b3ec:	af00      	add	r7, sp, #0
 800b3ee:	6078      	str	r0, [r7, #4]
 800b3f0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800b3f2:	f7fa fbb1 	bl	8005b58 <HAL_GetTick>
 800b3f6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	60bb      	str	r3, [r7, #8]
 800b400:	2300      	movs	r3, #0
 800b402:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	2108      	movs	r1, #8
 800b40e:	4618      	mov	r0, r3
 800b410:	f001 facc 	bl	800c9ac <SDMMC_CmdBlockLength>
 800b414:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d001      	beq.n	800b420 <SD_FindSCR+0x38>
  {
    return errorstate;
 800b41c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b41e:	e0b2      	b.n	800b586 <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681a      	ldr	r2, [r3, #0]
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b428:	041b      	lsls	r3, r3, #16
 800b42a:	4619      	mov	r1, r3
 800b42c:	4610      	mov	r0, r2
 800b42e:	f001 fbe9 	bl	800cc04 <SDMMC_CmdAppCommand>
 800b432:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b436:	2b00      	cmp	r3, #0
 800b438:	d001      	beq.n	800b43e <SD_FindSCR+0x56>
  {
    return errorstate;
 800b43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43c:	e0a3      	b.n	800b586 <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800b43e:	f04f 33ff 	mov.w	r3, #4294967295
 800b442:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800b444:	2308      	movs	r3, #8
 800b446:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800b448:	2330      	movs	r3, #48	; 0x30
 800b44a:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800b44c:	2302      	movs	r3, #2
 800b44e:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800b450:	2300      	movs	r3, #0
 800b452:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800b454:	2301      	movs	r3, #1
 800b456:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	f107 0210 	add.w	r2, r7, #16
 800b460:	4611      	mov	r1, r2
 800b462:	4618      	mov	r0, r3
 800b464:	f001 fa76 	bl	800c954 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4618      	mov	r0, r3
 800b46e:	f001 fc31 	bl	800ccd4 <SDMMC_CmdSendSCR>
 800b472:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800b474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b476:	2b00      	cmp	r3, #0
 800b478:	d02a      	beq.n	800b4d0 <SD_FindSCR+0xe8>
  {
    return errorstate;
 800b47a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b47c:	e083      	b.n	800b586 <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b484:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d00f      	beq.n	800b4ac <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6819      	ldr	r1, [r3, #0]
 800b490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b492:	009b      	lsls	r3, r3, #2
 800b494:	f107 0208 	add.w	r2, r7, #8
 800b498:	18d4      	adds	r4, r2, r3
 800b49a:	4608      	mov	r0, r1
 800b49c:	f001 f9d4 	bl	800c848 <SDMMC_ReadFIFO>
 800b4a0:	4603      	mov	r3, r0
 800b4a2:	6023      	str	r3, [r4, #0]
      index++;
 800b4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4a6:	3301      	adds	r3, #1
 800b4a8:	637b      	str	r3, [r7, #52]	; 0x34
 800b4aa:	e006      	b.n	800b4ba <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d012      	beq.n	800b4e0 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800b4ba:	f7fa fb4d 	bl	8005b58 <HAL_GetTick>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4c8:	d102      	bne.n	800b4d0 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800b4ca:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b4ce:	e05a      	b.n	800b586 <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4d6:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d0cf      	beq.n	800b47e <SD_FindSCR+0x96>
 800b4de:	e000      	b.n	800b4e2 <SD_FindSCR+0xfa>
      break;
 800b4e0:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b4e8:	f003 0308 	and.w	r3, r3, #8
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d005      	beq.n	800b4fc <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	2208      	movs	r2, #8
 800b4f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800b4f8:	2308      	movs	r3, #8
 800b4fa:	e044      	b.n	800b586 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b502:	f003 0302 	and.w	r3, r3, #2
 800b506:	2b00      	cmp	r3, #0
 800b508:	d005      	beq.n	800b516 <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2202      	movs	r2, #2
 800b510:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800b512:	2302      	movs	r3, #2
 800b514:	e037      	b.n	800b586 <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b51c:	f003 0320 	and.w	r3, r3, #32
 800b520:	2b00      	cmp	r3, #0
 800b522:	d005      	beq.n	800b530 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	681b      	ldr	r3, [r3, #0]
 800b528:	2220      	movs	r2, #32
 800b52a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800b52c:	2320      	movs	r3, #32
 800b52e:	e02a      	b.n	800b586 <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f240 523a 	movw	r2, #1338	; 0x53a
 800b538:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b53a:	68fb      	ldr	r3, [r7, #12]
 800b53c:	061a      	lsls	r2, r3, #24
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	021b      	lsls	r3, r3, #8
 800b542:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b546:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	0a1b      	lsrs	r3, r3, #8
 800b54c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b550:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	0e1b      	lsrs	r3, r3, #24
 800b556:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800b558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55a:	601a      	str	r2, [r3, #0]
    scr++;
 800b55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b55e:	3304      	adds	r3, #4
 800b560:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b562:	68bb      	ldr	r3, [r7, #8]
 800b564:	061a      	lsls	r2, r3, #24
 800b566:	68bb      	ldr	r3, [r7, #8]
 800b568:	021b      	lsls	r3, r3, #8
 800b56a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800b56e:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	0a1b      	lsrs	r3, r3, #8
 800b574:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b578:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	0e1b      	lsrs	r3, r3, #24
 800b57e:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800b580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b582:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800b584:	2300      	movs	r3, #0
}
 800b586:	4618      	mov	r0, r3
 800b588:	373c      	adds	r7, #60	; 0x3c
 800b58a:	46bd      	mov	sp, r7
 800b58c:	bd90      	pop	{r4, r7, pc}

0800b58e <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800b58e:	b580      	push	{r7, lr}
 800b590:	b086      	sub	sp, #24
 800b592:	af00      	add	r7, sp, #0
 800b594:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b59a:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a0:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b5a2:	693b      	ldr	r3, [r7, #16]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d03f      	beq.n	800b628 <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800b5a8:	2300      	movs	r3, #0
 800b5aa:	617b      	str	r3, [r7, #20]
 800b5ac:	e033      	b.n	800b616 <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f001 f948 	bl	800c848 <SDMMC_ReadFIFO>
 800b5b8:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b5c8:	693b      	ldr	r3, [r7, #16]
 800b5ca:	3b01      	subs	r3, #1
 800b5cc:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	0a1b      	lsrs	r3, r3, #8
 800b5d2:	b2da      	uxtb	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	3301      	adds	r3, #1
 800b5dc:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	3b01      	subs	r3, #1
 800b5e2:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800b5e4:	68bb      	ldr	r3, [r7, #8]
 800b5e6:	0c1b      	lsrs	r3, r3, #16
 800b5e8:	b2da      	uxtb	r2, r3
 800b5ea:	68fb      	ldr	r3, [r7, #12]
 800b5ec:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b5ee:	68fb      	ldr	r3, [r7, #12]
 800b5f0:	3301      	adds	r3, #1
 800b5f2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b5f4:	693b      	ldr	r3, [r7, #16]
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	0e1b      	lsrs	r3, r3, #24
 800b5fe:	b2da      	uxtb	r2, r3
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	701a      	strb	r2, [r3, #0]
      tmp++;
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	3301      	adds	r3, #1
 800b608:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b60a:	693b      	ldr	r3, [r7, #16]
 800b60c:	3b01      	subs	r3, #1
 800b60e:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800b610:	697b      	ldr	r3, [r7, #20]
 800b612:	3301      	adds	r3, #1
 800b614:	617b      	str	r3, [r7, #20]
 800b616:	697b      	ldr	r3, [r7, #20]
 800b618:	2b07      	cmp	r3, #7
 800b61a:	d9c8      	bls.n	800b5ae <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	693a      	ldr	r2, [r7, #16]
 800b626:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800b628:	bf00      	nop
 800b62a:	3718      	adds	r7, #24
 800b62c:	46bd      	mov	sp, r7
 800b62e:	bd80      	pop	{r7, pc}

0800b630 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b086      	sub	sp, #24
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	6a1b      	ldr	r3, [r3, #32]
 800b63c:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b642:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 800b644:	693b      	ldr	r3, [r7, #16]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d043      	beq.n	800b6d2 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800b64a:	2300      	movs	r3, #0
 800b64c:	617b      	str	r3, [r7, #20]
 800b64e:	e037      	b.n	800b6c0 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	781b      	ldrb	r3, [r3, #0]
 800b654:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	3301      	adds	r3, #1
 800b65a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b65c:	693b      	ldr	r3, [r7, #16]
 800b65e:	3b01      	subs	r3, #1
 800b660:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800b662:	68fb      	ldr	r3, [r7, #12]
 800b664:	781b      	ldrb	r3, [r3, #0]
 800b666:	021a      	lsls	r2, r3, #8
 800b668:	68bb      	ldr	r3, [r7, #8]
 800b66a:	4313      	orrs	r3, r2
 800b66c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b66e:	68fb      	ldr	r3, [r7, #12]
 800b670:	3301      	adds	r3, #1
 800b672:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b674:	693b      	ldr	r3, [r7, #16]
 800b676:	3b01      	subs	r3, #1
 800b678:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	041a      	lsls	r2, r3, #16
 800b680:	68bb      	ldr	r3, [r7, #8]
 800b682:	4313      	orrs	r3, r2
 800b684:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b686:	68fb      	ldr	r3, [r7, #12]
 800b688:	3301      	adds	r3, #1
 800b68a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b68c:	693b      	ldr	r3, [r7, #16]
 800b68e:	3b01      	subs	r3, #1
 800b690:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	781b      	ldrb	r3, [r3, #0]
 800b696:	061a      	lsls	r2, r3, #24
 800b698:	68bb      	ldr	r3, [r7, #8]
 800b69a:	4313      	orrs	r3, r2
 800b69c:	60bb      	str	r3, [r7, #8]
      tmp++;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800b6a4:	693b      	ldr	r3, [r7, #16]
 800b6a6:	3b01      	subs	r3, #1
 800b6a8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	f107 0208 	add.w	r2, r7, #8
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f001 f8d4 	bl	800c862 <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800b6ba:	697b      	ldr	r3, [r7, #20]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	617b      	str	r3, [r7, #20]
 800b6c0:	697b      	ldr	r3, [r7, #20]
 800b6c2:	2b07      	cmp	r3, #7
 800b6c4:	d9c4      	bls.n	800b650 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	68fa      	ldr	r2, [r7, #12]
 800b6ca:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	693a      	ldr	r2, [r7, #16]
 800b6d0:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800b6d2:	bf00      	nop
 800b6d4:	3718      	adds	r7, #24
 800b6d6:	46bd      	mov	sp, r7
 800b6d8:	bd80      	pop	{r7, pc}

0800b6da <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800b6da:	b580      	push	{r7, lr}
 800b6dc:	b082      	sub	sp, #8
 800b6de:	af00      	add	r7, sp, #0
 800b6e0:	6078      	str	r0, [r7, #4]
 800b6e2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d101      	bne.n	800b6ee <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800b6ea:	2301      	movs	r3, #1
 800b6ec:	e025      	b.n	800b73a <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d106      	bne.n	800b708 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b702:	6878      	ldr	r0, [r7, #4]
 800b704:	f7f8 fc64 	bl	8003fd0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	2202      	movs	r2, #2
 800b70c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	681a      	ldr	r2, [r3, #0]
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	3304      	adds	r3, #4
 800b718:	4619      	mov	r1, r3
 800b71a:	4610      	mov	r0, r2
 800b71c:	f000 ff3e 	bl	800c59c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6818      	ldr	r0, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	685b      	ldr	r3, [r3, #4]
 800b728:	461a      	mov	r2, r3
 800b72a:	6839      	ldr	r1, [r7, #0]
 800b72c:	f000 ffa8 	bl	800c680 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2201      	movs	r2, #1
 800b734:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800b738:	2300      	movs	r3, #0
}
 800b73a:	4618      	mov	r0, r3
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}

0800b742 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b742:	b580      	push	{r7, lr}
 800b744:	b084      	sub	sp, #16
 800b746:	af00      	add	r7, sp, #0
 800b748:	60f8      	str	r0, [r7, #12]
 800b74a:	60b9      	str	r1, [r7, #8]
 800b74c:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b754:	b2db      	uxtb	r3, r3
 800b756:	2b02      	cmp	r3, #2
 800b758:	d101      	bne.n	800b75e <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800b75a:	2302      	movs	r3, #2
 800b75c:	e018      	b.n	800b790 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	2202      	movs	r2, #2
 800b762:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	687a      	ldr	r2, [r7, #4]
 800b76c:	68b9      	ldr	r1, [r7, #8]
 800b76e:	4618      	mov	r0, r3
 800b770:	f001 f806 	bl	800c780 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b774:	68bb      	ldr	r3, [r7, #8]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b02      	cmp	r3, #2
 800b77a:	d104      	bne.n	800b786 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2205      	movs	r2, #5
 800b780:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800b784:	e003      	b.n	800b78e <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	2201      	movs	r2, #1
 800b78a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800b78e:	2300      	movs	r3, #0
}
 800b790:	4618      	mov	r0, r3
 800b792:	3710      	adds	r7, #16
 800b794:	46bd      	mov	sp, r7
 800b796:	bd80      	pop	{r7, pc}

0800b798 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
 800b79e:	6078      	str	r0, [r7, #4]
 800b7a0:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800b7a8:	b2db      	uxtb	r3, r3
 800b7aa:	2b02      	cmp	r3, #2
 800b7ac:	d101      	bne.n	800b7b2 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800b7ae:	2302      	movs	r3, #2
 800b7b0:	e00e      	b.n	800b7d0 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2202      	movs	r2, #2
 800b7b6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	6839      	ldr	r1, [r7, #0]
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	f001 f801 	bl	800c7c8 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3708      	adds	r7, #8
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}

0800b7d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b082      	sub	sp, #8
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d101      	bne.n	800b7ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e049      	b.n	800b87e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7f0:	b2db      	uxtb	r3, r3
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d106      	bne.n	800b804 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f000 f841 	bl	800b886 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2202      	movs	r2, #2
 800b808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681a      	ldr	r2, [r3, #0]
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	3304      	adds	r3, #4
 800b814:	4619      	mov	r1, r3
 800b816:	4610      	mov	r0, r2
 800b818:	f000 fa00 	bl	800bc1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	2201      	movs	r2, #1
 800b820:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	2201      	movs	r2, #1
 800b828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	2201      	movs	r2, #1
 800b830:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	2201      	movs	r2, #1
 800b838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2201      	movs	r2, #1
 800b840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2201      	movs	r2, #1
 800b848:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	2201      	movs	r2, #1
 800b850:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2201      	movs	r2, #1
 800b858:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2201      	movs	r2, #1
 800b860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	2201      	movs	r2, #1
 800b868:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	2201      	movs	r2, #1
 800b870:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2201      	movs	r2, #1
 800b878:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b87c:	2300      	movs	r3, #0
}
 800b87e:	4618      	mov	r0, r3
 800b880:	3708      	adds	r7, #8
 800b882:	46bd      	mov	sp, r7
 800b884:	bd80      	pop	{r7, pc}

0800b886 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b886:	b480      	push	{r7}
 800b888:	b083      	sub	sp, #12
 800b88a:	af00      	add	r7, sp, #0
 800b88c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b88e:	bf00      	nop
 800b890:	370c      	adds	r7, #12
 800b892:	46bd      	mov	sp, r7
 800b894:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b898:	4770      	bx	lr
	...

0800b89c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b085      	sub	sp, #20
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	2b01      	cmp	r3, #1
 800b8ae:	d001      	beq.n	800b8b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	e054      	b.n	800b95e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2202      	movs	r2, #2
 800b8b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	68da      	ldr	r2, [r3, #12]
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f042 0201 	orr.w	r2, r2, #1
 800b8ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	681b      	ldr	r3, [r3, #0]
 800b8d0:	4a26      	ldr	r2, [pc, #152]	; (800b96c <HAL_TIM_Base_Start_IT+0xd0>)
 800b8d2:	4293      	cmp	r3, r2
 800b8d4:	d022      	beq.n	800b91c <HAL_TIM_Base_Start_IT+0x80>
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8de:	d01d      	beq.n	800b91c <HAL_TIM_Base_Start_IT+0x80>
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	4a22      	ldr	r2, [pc, #136]	; (800b970 <HAL_TIM_Base_Start_IT+0xd4>)
 800b8e6:	4293      	cmp	r3, r2
 800b8e8:	d018      	beq.n	800b91c <HAL_TIM_Base_Start_IT+0x80>
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4a21      	ldr	r2, [pc, #132]	; (800b974 <HAL_TIM_Base_Start_IT+0xd8>)
 800b8f0:	4293      	cmp	r3, r2
 800b8f2:	d013      	beq.n	800b91c <HAL_TIM_Base_Start_IT+0x80>
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	4a1f      	ldr	r2, [pc, #124]	; (800b978 <HAL_TIM_Base_Start_IT+0xdc>)
 800b8fa:	4293      	cmp	r3, r2
 800b8fc:	d00e      	beq.n	800b91c <HAL_TIM_Base_Start_IT+0x80>
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	4a1e      	ldr	r2, [pc, #120]	; (800b97c <HAL_TIM_Base_Start_IT+0xe0>)
 800b904:	4293      	cmp	r3, r2
 800b906:	d009      	beq.n	800b91c <HAL_TIM_Base_Start_IT+0x80>
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	4a1c      	ldr	r2, [pc, #112]	; (800b980 <HAL_TIM_Base_Start_IT+0xe4>)
 800b90e:	4293      	cmp	r3, r2
 800b910:	d004      	beq.n	800b91c <HAL_TIM_Base_Start_IT+0x80>
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	4a1b      	ldr	r2, [pc, #108]	; (800b984 <HAL_TIM_Base_Start_IT+0xe8>)
 800b918:	4293      	cmp	r3, r2
 800b91a:	d115      	bne.n	800b948 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	689a      	ldr	r2, [r3, #8]
 800b922:	4b19      	ldr	r3, [pc, #100]	; (800b988 <HAL_TIM_Base_Start_IT+0xec>)
 800b924:	4013      	ands	r3, r2
 800b926:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b928:	68fb      	ldr	r3, [r7, #12]
 800b92a:	2b06      	cmp	r3, #6
 800b92c:	d015      	beq.n	800b95a <HAL_TIM_Base_Start_IT+0xbe>
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b934:	d011      	beq.n	800b95a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681a      	ldr	r2, [r3, #0]
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f042 0201 	orr.w	r2, r2, #1
 800b944:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b946:	e008      	b.n	800b95a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	681a      	ldr	r2, [r3, #0]
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	f042 0201 	orr.w	r2, r2, #1
 800b956:	601a      	str	r2, [r3, #0]
 800b958:	e000      	b.n	800b95c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b95a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b95c:	2300      	movs	r3, #0
}
 800b95e:	4618      	mov	r0, r3
 800b960:	3714      	adds	r7, #20
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr
 800b96a:	bf00      	nop
 800b96c:	40010000 	.word	0x40010000
 800b970:	40000400 	.word	0x40000400
 800b974:	40000800 	.word	0x40000800
 800b978:	40000c00 	.word	0x40000c00
 800b97c:	40010400 	.word	0x40010400
 800b980:	40014000 	.word	0x40014000
 800b984:	40001800 	.word	0x40001800
 800b988:	00010007 	.word	0x00010007

0800b98c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b082      	sub	sp, #8
 800b990:	af00      	add	r7, sp, #0
 800b992:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	691b      	ldr	r3, [r3, #16]
 800b99a:	f003 0302 	and.w	r3, r3, #2
 800b99e:	2b02      	cmp	r3, #2
 800b9a0:	d122      	bne.n	800b9e8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	68db      	ldr	r3, [r3, #12]
 800b9a8:	f003 0302 	and.w	r3, r3, #2
 800b9ac:	2b02      	cmp	r3, #2
 800b9ae:	d11b      	bne.n	800b9e8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	f06f 0202 	mvn.w	r2, #2
 800b9b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	2201      	movs	r2, #1
 800b9be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	699b      	ldr	r3, [r3, #24]
 800b9c6:	f003 0303 	and.w	r3, r3, #3
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d003      	beq.n	800b9d6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f000 f905 	bl	800bbde <HAL_TIM_IC_CaptureCallback>
 800b9d4:	e005      	b.n	800b9e2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f8f7 	bl	800bbca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 f908 	bl	800bbf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	691b      	ldr	r3, [r3, #16]
 800b9ee:	f003 0304 	and.w	r3, r3, #4
 800b9f2:	2b04      	cmp	r3, #4
 800b9f4:	d122      	bne.n	800ba3c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	f003 0304 	and.w	r3, r3, #4
 800ba00:	2b04      	cmp	r3, #4
 800ba02:	d11b      	bne.n	800ba3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	f06f 0204 	mvn.w	r2, #4
 800ba0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	2202      	movs	r2, #2
 800ba12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	699b      	ldr	r3, [r3, #24]
 800ba1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba1e:	2b00      	cmp	r3, #0
 800ba20:	d003      	beq.n	800ba2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba22:	6878      	ldr	r0, [r7, #4]
 800ba24:	f000 f8db 	bl	800bbde <HAL_TIM_IC_CaptureCallback>
 800ba28:	e005      	b.n	800ba36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 f8cd 	bl	800bbca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f000 f8de 	bl	800bbf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2200      	movs	r2, #0
 800ba3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	691b      	ldr	r3, [r3, #16]
 800ba42:	f003 0308 	and.w	r3, r3, #8
 800ba46:	2b08      	cmp	r3, #8
 800ba48:	d122      	bne.n	800ba90 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	68db      	ldr	r3, [r3, #12]
 800ba50:	f003 0308 	and.w	r3, r3, #8
 800ba54:	2b08      	cmp	r3, #8
 800ba56:	d11b      	bne.n	800ba90 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f06f 0208 	mvn.w	r2, #8
 800ba60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	2204      	movs	r2, #4
 800ba66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	69db      	ldr	r3, [r3, #28]
 800ba6e:	f003 0303 	and.w	r3, r3, #3
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	d003      	beq.n	800ba7e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba76:	6878      	ldr	r0, [r7, #4]
 800ba78:	f000 f8b1 	bl	800bbde <HAL_TIM_IC_CaptureCallback>
 800ba7c:	e005      	b.n	800ba8a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f8a3 	bl	800bbca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba84:	6878      	ldr	r0, [r7, #4]
 800ba86:	f000 f8b4 	bl	800bbf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2200      	movs	r2, #0
 800ba8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	691b      	ldr	r3, [r3, #16]
 800ba96:	f003 0310 	and.w	r3, r3, #16
 800ba9a:	2b10      	cmp	r3, #16
 800ba9c:	d122      	bne.n	800bae4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	68db      	ldr	r3, [r3, #12]
 800baa4:	f003 0310 	and.w	r3, r3, #16
 800baa8:	2b10      	cmp	r3, #16
 800baaa:	d11b      	bne.n	800bae4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f06f 0210 	mvn.w	r2, #16
 800bab4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	2208      	movs	r2, #8
 800baba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	69db      	ldr	r3, [r3, #28]
 800bac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d003      	beq.n	800bad2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800baca:	6878      	ldr	r0, [r7, #4]
 800bacc:	f000 f887 	bl	800bbde <HAL_TIM_IC_CaptureCallback>
 800bad0:	e005      	b.n	800bade <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f879 	bl	800bbca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 f88a 	bl	800bbf2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2200      	movs	r2, #0
 800bae2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	f003 0301 	and.w	r3, r3, #1
 800baee:	2b01      	cmp	r3, #1
 800baf0:	d10e      	bne.n	800bb10 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	68db      	ldr	r3, [r3, #12]
 800baf8:	f003 0301 	and.w	r3, r3, #1
 800bafc:	2b01      	cmp	r3, #1
 800bafe:	d107      	bne.n	800bb10 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	f06f 0201 	mvn.w	r2, #1
 800bb08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f7f6 fa52 	bl	8001fb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb1a:	2b80      	cmp	r3, #128	; 0x80
 800bb1c:	d10e      	bne.n	800bb3c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	681b      	ldr	r3, [r3, #0]
 800bb22:	68db      	ldr	r3, [r3, #12]
 800bb24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb28:	2b80      	cmp	r3, #128	; 0x80
 800bb2a:	d107      	bne.n	800bb3c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	f000 f91a 	bl	800bd70 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	691b      	ldr	r3, [r3, #16]
 800bb42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bb4a:	d10e      	bne.n	800bb6a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	68db      	ldr	r3, [r3, #12]
 800bb52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb56:	2b80      	cmp	r3, #128	; 0x80
 800bb58:	d107      	bne.n	800bb6a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800bb62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f000 f90d 	bl	800bd84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	691b      	ldr	r3, [r3, #16]
 800bb70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb74:	2b40      	cmp	r3, #64	; 0x40
 800bb76:	d10e      	bne.n	800bb96 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	68db      	ldr	r3, [r3, #12]
 800bb7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb82:	2b40      	cmp	r3, #64	; 0x40
 800bb84:	d107      	bne.n	800bb96 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb90:	6878      	ldr	r0, [r7, #4]
 800bb92:	f000 f838 	bl	800bc06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	691b      	ldr	r3, [r3, #16]
 800bb9c:	f003 0320 	and.w	r3, r3, #32
 800bba0:	2b20      	cmp	r3, #32
 800bba2:	d10e      	bne.n	800bbc2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	f003 0320 	and.w	r3, r3, #32
 800bbae:	2b20      	cmp	r3, #32
 800bbb0:	d107      	bne.n	800bbc2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f06f 0220 	mvn.w	r2, #32
 800bbba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f8cd 	bl	800bd5c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bbc2:	bf00      	nop
 800bbc4:	3708      	adds	r7, #8
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	bd80      	pop	{r7, pc}

0800bbca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbca:	b480      	push	{r7}
 800bbcc:	b083      	sub	sp, #12
 800bbce:	af00      	add	r7, sp, #0
 800bbd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbd2:	bf00      	nop
 800bbd4:	370c      	adds	r7, #12
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbdc:	4770      	bx	lr

0800bbde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bbde:	b480      	push	{r7}
 800bbe0:	b083      	sub	sp, #12
 800bbe2:	af00      	add	r7, sp, #0
 800bbe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bbe6:	bf00      	nop
 800bbe8:	370c      	adds	r7, #12
 800bbea:	46bd      	mov	sp, r7
 800bbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf0:	4770      	bx	lr

0800bbf2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbf2:	b480      	push	{r7}
 800bbf4:	b083      	sub	sp, #12
 800bbf6:	af00      	add	r7, sp, #0
 800bbf8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbfa:	bf00      	nop
 800bbfc:	370c      	adds	r7, #12
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc04:	4770      	bx	lr

0800bc06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bc06:	b480      	push	{r7}
 800bc08:	b083      	sub	sp, #12
 800bc0a:	af00      	add	r7, sp, #0
 800bc0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc0e:	bf00      	nop
 800bc10:	370c      	adds	r7, #12
 800bc12:	46bd      	mov	sp, r7
 800bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc18:	4770      	bx	lr
	...

0800bc1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bc1c:	b480      	push	{r7}
 800bc1e:	b085      	sub	sp, #20
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	4a40      	ldr	r2, [pc, #256]	; (800bd30 <TIM_Base_SetConfig+0x114>)
 800bc30:	4293      	cmp	r3, r2
 800bc32:	d013      	beq.n	800bc5c <TIM_Base_SetConfig+0x40>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc3a:	d00f      	beq.n	800bc5c <TIM_Base_SetConfig+0x40>
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4a3d      	ldr	r2, [pc, #244]	; (800bd34 <TIM_Base_SetConfig+0x118>)
 800bc40:	4293      	cmp	r3, r2
 800bc42:	d00b      	beq.n	800bc5c <TIM_Base_SetConfig+0x40>
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	4a3c      	ldr	r2, [pc, #240]	; (800bd38 <TIM_Base_SetConfig+0x11c>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d007      	beq.n	800bc5c <TIM_Base_SetConfig+0x40>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	4a3b      	ldr	r2, [pc, #236]	; (800bd3c <TIM_Base_SetConfig+0x120>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d003      	beq.n	800bc5c <TIM_Base_SetConfig+0x40>
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	4a3a      	ldr	r2, [pc, #232]	; (800bd40 <TIM_Base_SetConfig+0x124>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d108      	bne.n	800bc6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc64:	683b      	ldr	r3, [r7, #0]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	68fa      	ldr	r2, [r7, #12]
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	4a2f      	ldr	r2, [pc, #188]	; (800bd30 <TIM_Base_SetConfig+0x114>)
 800bc72:	4293      	cmp	r3, r2
 800bc74:	d02b      	beq.n	800bcce <TIM_Base_SetConfig+0xb2>
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc7c:	d027      	beq.n	800bcce <TIM_Base_SetConfig+0xb2>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	4a2c      	ldr	r2, [pc, #176]	; (800bd34 <TIM_Base_SetConfig+0x118>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d023      	beq.n	800bcce <TIM_Base_SetConfig+0xb2>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	4a2b      	ldr	r2, [pc, #172]	; (800bd38 <TIM_Base_SetConfig+0x11c>)
 800bc8a:	4293      	cmp	r3, r2
 800bc8c:	d01f      	beq.n	800bcce <TIM_Base_SetConfig+0xb2>
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	4a2a      	ldr	r2, [pc, #168]	; (800bd3c <TIM_Base_SetConfig+0x120>)
 800bc92:	4293      	cmp	r3, r2
 800bc94:	d01b      	beq.n	800bcce <TIM_Base_SetConfig+0xb2>
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	4a29      	ldr	r2, [pc, #164]	; (800bd40 <TIM_Base_SetConfig+0x124>)
 800bc9a:	4293      	cmp	r3, r2
 800bc9c:	d017      	beq.n	800bcce <TIM_Base_SetConfig+0xb2>
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	4a28      	ldr	r2, [pc, #160]	; (800bd44 <TIM_Base_SetConfig+0x128>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d013      	beq.n	800bcce <TIM_Base_SetConfig+0xb2>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	4a27      	ldr	r2, [pc, #156]	; (800bd48 <TIM_Base_SetConfig+0x12c>)
 800bcaa:	4293      	cmp	r3, r2
 800bcac:	d00f      	beq.n	800bcce <TIM_Base_SetConfig+0xb2>
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	4a26      	ldr	r2, [pc, #152]	; (800bd4c <TIM_Base_SetConfig+0x130>)
 800bcb2:	4293      	cmp	r3, r2
 800bcb4:	d00b      	beq.n	800bcce <TIM_Base_SetConfig+0xb2>
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	4a25      	ldr	r2, [pc, #148]	; (800bd50 <TIM_Base_SetConfig+0x134>)
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	d007      	beq.n	800bcce <TIM_Base_SetConfig+0xb2>
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	4a24      	ldr	r2, [pc, #144]	; (800bd54 <TIM_Base_SetConfig+0x138>)
 800bcc2:	4293      	cmp	r3, r2
 800bcc4:	d003      	beq.n	800bcce <TIM_Base_SetConfig+0xb2>
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	4a23      	ldr	r2, [pc, #140]	; (800bd58 <TIM_Base_SetConfig+0x13c>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d108      	bne.n	800bce0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bcd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	68db      	ldr	r3, [r3, #12]
 800bcda:	68fa      	ldr	r2, [r7, #12]
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	695b      	ldr	r3, [r3, #20]
 800bcea:	4313      	orrs	r3, r2
 800bcec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	689a      	ldr	r2, [r3, #8]
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcfc:	683b      	ldr	r3, [r7, #0]
 800bcfe:	681a      	ldr	r2, [r3, #0]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a0a      	ldr	r2, [pc, #40]	; (800bd30 <TIM_Base_SetConfig+0x114>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d003      	beq.n	800bd14 <TIM_Base_SetConfig+0xf8>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a0c      	ldr	r2, [pc, #48]	; (800bd40 <TIM_Base_SetConfig+0x124>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d103      	bne.n	800bd1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	691a      	ldr	r2, [r3, #16]
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2201      	movs	r2, #1
 800bd20:	615a      	str	r2, [r3, #20]
}
 800bd22:	bf00      	nop
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr
 800bd2e:	bf00      	nop
 800bd30:	40010000 	.word	0x40010000
 800bd34:	40000400 	.word	0x40000400
 800bd38:	40000800 	.word	0x40000800
 800bd3c:	40000c00 	.word	0x40000c00
 800bd40:	40010400 	.word	0x40010400
 800bd44:	40014000 	.word	0x40014000
 800bd48:	40014400 	.word	0x40014400
 800bd4c:	40014800 	.word	0x40014800
 800bd50:	40001800 	.word	0x40001800
 800bd54:	40001c00 	.word	0x40001c00
 800bd58:	40002000 	.word	0x40002000

0800bd5c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bd5c:	b480      	push	{r7}
 800bd5e:	b083      	sub	sp, #12
 800bd60:	af00      	add	r7, sp, #0
 800bd62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bd64:	bf00      	nop
 800bd66:	370c      	adds	r7, #12
 800bd68:	46bd      	mov	sp, r7
 800bd6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6e:	4770      	bx	lr

0800bd70 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bd70:	b480      	push	{r7}
 800bd72:	b083      	sub	sp, #12
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bd78:	bf00      	nop
 800bd7a:	370c      	adds	r7, #12
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b083      	sub	sp, #12
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bd8c:	bf00      	nop
 800bd8e:	370c      	adds	r7, #12
 800bd90:	46bd      	mov	sp, r7
 800bd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd96:	4770      	bx	lr

0800bd98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
 800bd9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d101      	bne.n	800bdaa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bda6:	2301      	movs	r3, #1
 800bda8:	e040      	b.n	800be2c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d106      	bne.n	800bdc0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2200      	movs	r2, #0
 800bdb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bdba:	6878      	ldr	r0, [r7, #4]
 800bdbc:	f7f8 f816 	bl	8003dec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2224      	movs	r2, #36	; 0x24
 800bdc4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681a      	ldr	r2, [r3, #0]
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f022 0201 	bic.w	r2, r2, #1
 800bdd4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bdd6:	6878      	ldr	r0, [r7, #4]
 800bdd8:	f000 f82c 	bl	800be34 <UART_SetConfig>
 800bddc:	4603      	mov	r3, r0
 800bdde:	2b01      	cmp	r3, #1
 800bde0:	d101      	bne.n	800bde6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800bde2:	2301      	movs	r3, #1
 800bde4:	e022      	b.n	800be2c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	d002      	beq.n	800bdf4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800bdee:	6878      	ldr	r0, [r7, #4]
 800bdf0:	f000 fa82 	bl	800c2f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	685a      	ldr	r2, [r3, #4]
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800be02:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	689a      	ldr	r2, [r3, #8]
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800be12:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681b      	ldr	r3, [r3, #0]
 800be18:	681a      	ldr	r2, [r3, #0]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	f042 0201 	orr.w	r2, r2, #1
 800be22:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800be24:	6878      	ldr	r0, [r7, #4]
 800be26:	f000 fb09 	bl	800c43c <UART_CheckIdleState>
 800be2a:	4603      	mov	r3, r0
}
 800be2c:	4618      	mov	r0, r3
 800be2e:	3708      	adds	r7, #8
 800be30:	46bd      	mov	sp, r7
 800be32:	bd80      	pop	{r7, pc}

0800be34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800be34:	b580      	push	{r7, lr}
 800be36:	b088      	sub	sp, #32
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800be3c:	2300      	movs	r3, #0
 800be3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	689a      	ldr	r2, [r3, #8]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	691b      	ldr	r3, [r3, #16]
 800be48:	431a      	orrs	r2, r3
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	695b      	ldr	r3, [r3, #20]
 800be4e:	431a      	orrs	r2, r3
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	69db      	ldr	r3, [r3, #28]
 800be54:	4313      	orrs	r3, r2
 800be56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	681a      	ldr	r2, [r3, #0]
 800be5e:	4ba7      	ldr	r3, [pc, #668]	; (800c0fc <UART_SetConfig+0x2c8>)
 800be60:	4013      	ands	r3, r2
 800be62:	687a      	ldr	r2, [r7, #4]
 800be64:	6812      	ldr	r2, [r2, #0]
 800be66:	6979      	ldr	r1, [r7, #20]
 800be68:	430b      	orrs	r3, r1
 800be6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	685b      	ldr	r3, [r3, #4]
 800be72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	68da      	ldr	r2, [r3, #12]
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	430a      	orrs	r2, r1
 800be80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	699b      	ldr	r3, [r3, #24]
 800be86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a1b      	ldr	r3, [r3, #32]
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	4313      	orrs	r3, r2
 800be90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	689b      	ldr	r3, [r3, #8]
 800be98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	697a      	ldr	r2, [r7, #20]
 800bea2:	430a      	orrs	r2, r1
 800bea4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	681b      	ldr	r3, [r3, #0]
 800beaa:	4a95      	ldr	r2, [pc, #596]	; (800c100 <UART_SetConfig+0x2cc>)
 800beac:	4293      	cmp	r3, r2
 800beae:	d120      	bne.n	800bef2 <UART_SetConfig+0xbe>
 800beb0:	4b94      	ldr	r3, [pc, #592]	; (800c104 <UART_SetConfig+0x2d0>)
 800beb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800beb6:	f003 0303 	and.w	r3, r3, #3
 800beba:	2b03      	cmp	r3, #3
 800bebc:	d816      	bhi.n	800beec <UART_SetConfig+0xb8>
 800bebe:	a201      	add	r2, pc, #4	; (adr r2, 800bec4 <UART_SetConfig+0x90>)
 800bec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bec4:	0800bed5 	.word	0x0800bed5
 800bec8:	0800bee1 	.word	0x0800bee1
 800becc:	0800bedb 	.word	0x0800bedb
 800bed0:	0800bee7 	.word	0x0800bee7
 800bed4:	2301      	movs	r3, #1
 800bed6:	77fb      	strb	r3, [r7, #31]
 800bed8:	e14f      	b.n	800c17a <UART_SetConfig+0x346>
 800beda:	2302      	movs	r3, #2
 800bedc:	77fb      	strb	r3, [r7, #31]
 800bede:	e14c      	b.n	800c17a <UART_SetConfig+0x346>
 800bee0:	2304      	movs	r3, #4
 800bee2:	77fb      	strb	r3, [r7, #31]
 800bee4:	e149      	b.n	800c17a <UART_SetConfig+0x346>
 800bee6:	2308      	movs	r3, #8
 800bee8:	77fb      	strb	r3, [r7, #31]
 800beea:	e146      	b.n	800c17a <UART_SetConfig+0x346>
 800beec:	2310      	movs	r3, #16
 800beee:	77fb      	strb	r3, [r7, #31]
 800bef0:	e143      	b.n	800c17a <UART_SetConfig+0x346>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	681b      	ldr	r3, [r3, #0]
 800bef6:	4a84      	ldr	r2, [pc, #528]	; (800c108 <UART_SetConfig+0x2d4>)
 800bef8:	4293      	cmp	r3, r2
 800befa:	d132      	bne.n	800bf62 <UART_SetConfig+0x12e>
 800befc:	4b81      	ldr	r3, [pc, #516]	; (800c104 <UART_SetConfig+0x2d0>)
 800befe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf02:	f003 030c 	and.w	r3, r3, #12
 800bf06:	2b0c      	cmp	r3, #12
 800bf08:	d828      	bhi.n	800bf5c <UART_SetConfig+0x128>
 800bf0a:	a201      	add	r2, pc, #4	; (adr r2, 800bf10 <UART_SetConfig+0xdc>)
 800bf0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf10:	0800bf45 	.word	0x0800bf45
 800bf14:	0800bf5d 	.word	0x0800bf5d
 800bf18:	0800bf5d 	.word	0x0800bf5d
 800bf1c:	0800bf5d 	.word	0x0800bf5d
 800bf20:	0800bf51 	.word	0x0800bf51
 800bf24:	0800bf5d 	.word	0x0800bf5d
 800bf28:	0800bf5d 	.word	0x0800bf5d
 800bf2c:	0800bf5d 	.word	0x0800bf5d
 800bf30:	0800bf4b 	.word	0x0800bf4b
 800bf34:	0800bf5d 	.word	0x0800bf5d
 800bf38:	0800bf5d 	.word	0x0800bf5d
 800bf3c:	0800bf5d 	.word	0x0800bf5d
 800bf40:	0800bf57 	.word	0x0800bf57
 800bf44:	2300      	movs	r3, #0
 800bf46:	77fb      	strb	r3, [r7, #31]
 800bf48:	e117      	b.n	800c17a <UART_SetConfig+0x346>
 800bf4a:	2302      	movs	r3, #2
 800bf4c:	77fb      	strb	r3, [r7, #31]
 800bf4e:	e114      	b.n	800c17a <UART_SetConfig+0x346>
 800bf50:	2304      	movs	r3, #4
 800bf52:	77fb      	strb	r3, [r7, #31]
 800bf54:	e111      	b.n	800c17a <UART_SetConfig+0x346>
 800bf56:	2308      	movs	r3, #8
 800bf58:	77fb      	strb	r3, [r7, #31]
 800bf5a:	e10e      	b.n	800c17a <UART_SetConfig+0x346>
 800bf5c:	2310      	movs	r3, #16
 800bf5e:	77fb      	strb	r3, [r7, #31]
 800bf60:	e10b      	b.n	800c17a <UART_SetConfig+0x346>
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	4a69      	ldr	r2, [pc, #420]	; (800c10c <UART_SetConfig+0x2d8>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d120      	bne.n	800bfae <UART_SetConfig+0x17a>
 800bf6c:	4b65      	ldr	r3, [pc, #404]	; (800c104 <UART_SetConfig+0x2d0>)
 800bf6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bf76:	2b30      	cmp	r3, #48	; 0x30
 800bf78:	d013      	beq.n	800bfa2 <UART_SetConfig+0x16e>
 800bf7a:	2b30      	cmp	r3, #48	; 0x30
 800bf7c:	d814      	bhi.n	800bfa8 <UART_SetConfig+0x174>
 800bf7e:	2b20      	cmp	r3, #32
 800bf80:	d009      	beq.n	800bf96 <UART_SetConfig+0x162>
 800bf82:	2b20      	cmp	r3, #32
 800bf84:	d810      	bhi.n	800bfa8 <UART_SetConfig+0x174>
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d002      	beq.n	800bf90 <UART_SetConfig+0x15c>
 800bf8a:	2b10      	cmp	r3, #16
 800bf8c:	d006      	beq.n	800bf9c <UART_SetConfig+0x168>
 800bf8e:	e00b      	b.n	800bfa8 <UART_SetConfig+0x174>
 800bf90:	2300      	movs	r3, #0
 800bf92:	77fb      	strb	r3, [r7, #31]
 800bf94:	e0f1      	b.n	800c17a <UART_SetConfig+0x346>
 800bf96:	2302      	movs	r3, #2
 800bf98:	77fb      	strb	r3, [r7, #31]
 800bf9a:	e0ee      	b.n	800c17a <UART_SetConfig+0x346>
 800bf9c:	2304      	movs	r3, #4
 800bf9e:	77fb      	strb	r3, [r7, #31]
 800bfa0:	e0eb      	b.n	800c17a <UART_SetConfig+0x346>
 800bfa2:	2308      	movs	r3, #8
 800bfa4:	77fb      	strb	r3, [r7, #31]
 800bfa6:	e0e8      	b.n	800c17a <UART_SetConfig+0x346>
 800bfa8:	2310      	movs	r3, #16
 800bfaa:	77fb      	strb	r3, [r7, #31]
 800bfac:	e0e5      	b.n	800c17a <UART_SetConfig+0x346>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	4a57      	ldr	r2, [pc, #348]	; (800c110 <UART_SetConfig+0x2dc>)
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	d120      	bne.n	800bffa <UART_SetConfig+0x1c6>
 800bfb8:	4b52      	ldr	r3, [pc, #328]	; (800c104 <UART_SetConfig+0x2d0>)
 800bfba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bfbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bfc2:	2bc0      	cmp	r3, #192	; 0xc0
 800bfc4:	d013      	beq.n	800bfee <UART_SetConfig+0x1ba>
 800bfc6:	2bc0      	cmp	r3, #192	; 0xc0
 800bfc8:	d814      	bhi.n	800bff4 <UART_SetConfig+0x1c0>
 800bfca:	2b80      	cmp	r3, #128	; 0x80
 800bfcc:	d009      	beq.n	800bfe2 <UART_SetConfig+0x1ae>
 800bfce:	2b80      	cmp	r3, #128	; 0x80
 800bfd0:	d810      	bhi.n	800bff4 <UART_SetConfig+0x1c0>
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d002      	beq.n	800bfdc <UART_SetConfig+0x1a8>
 800bfd6:	2b40      	cmp	r3, #64	; 0x40
 800bfd8:	d006      	beq.n	800bfe8 <UART_SetConfig+0x1b4>
 800bfda:	e00b      	b.n	800bff4 <UART_SetConfig+0x1c0>
 800bfdc:	2300      	movs	r3, #0
 800bfde:	77fb      	strb	r3, [r7, #31]
 800bfe0:	e0cb      	b.n	800c17a <UART_SetConfig+0x346>
 800bfe2:	2302      	movs	r3, #2
 800bfe4:	77fb      	strb	r3, [r7, #31]
 800bfe6:	e0c8      	b.n	800c17a <UART_SetConfig+0x346>
 800bfe8:	2304      	movs	r3, #4
 800bfea:	77fb      	strb	r3, [r7, #31]
 800bfec:	e0c5      	b.n	800c17a <UART_SetConfig+0x346>
 800bfee:	2308      	movs	r3, #8
 800bff0:	77fb      	strb	r3, [r7, #31]
 800bff2:	e0c2      	b.n	800c17a <UART_SetConfig+0x346>
 800bff4:	2310      	movs	r3, #16
 800bff6:	77fb      	strb	r3, [r7, #31]
 800bff8:	e0bf      	b.n	800c17a <UART_SetConfig+0x346>
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	4a45      	ldr	r2, [pc, #276]	; (800c114 <UART_SetConfig+0x2e0>)
 800c000:	4293      	cmp	r3, r2
 800c002:	d125      	bne.n	800c050 <UART_SetConfig+0x21c>
 800c004:	4b3f      	ldr	r3, [pc, #252]	; (800c104 <UART_SetConfig+0x2d0>)
 800c006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c00a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c00e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c012:	d017      	beq.n	800c044 <UART_SetConfig+0x210>
 800c014:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c018:	d817      	bhi.n	800c04a <UART_SetConfig+0x216>
 800c01a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c01e:	d00b      	beq.n	800c038 <UART_SetConfig+0x204>
 800c020:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c024:	d811      	bhi.n	800c04a <UART_SetConfig+0x216>
 800c026:	2b00      	cmp	r3, #0
 800c028:	d003      	beq.n	800c032 <UART_SetConfig+0x1fe>
 800c02a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c02e:	d006      	beq.n	800c03e <UART_SetConfig+0x20a>
 800c030:	e00b      	b.n	800c04a <UART_SetConfig+0x216>
 800c032:	2300      	movs	r3, #0
 800c034:	77fb      	strb	r3, [r7, #31]
 800c036:	e0a0      	b.n	800c17a <UART_SetConfig+0x346>
 800c038:	2302      	movs	r3, #2
 800c03a:	77fb      	strb	r3, [r7, #31]
 800c03c:	e09d      	b.n	800c17a <UART_SetConfig+0x346>
 800c03e:	2304      	movs	r3, #4
 800c040:	77fb      	strb	r3, [r7, #31]
 800c042:	e09a      	b.n	800c17a <UART_SetConfig+0x346>
 800c044:	2308      	movs	r3, #8
 800c046:	77fb      	strb	r3, [r7, #31]
 800c048:	e097      	b.n	800c17a <UART_SetConfig+0x346>
 800c04a:	2310      	movs	r3, #16
 800c04c:	77fb      	strb	r3, [r7, #31]
 800c04e:	e094      	b.n	800c17a <UART_SetConfig+0x346>
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	4a30      	ldr	r2, [pc, #192]	; (800c118 <UART_SetConfig+0x2e4>)
 800c056:	4293      	cmp	r3, r2
 800c058:	d125      	bne.n	800c0a6 <UART_SetConfig+0x272>
 800c05a:	4b2a      	ldr	r3, [pc, #168]	; (800c104 <UART_SetConfig+0x2d0>)
 800c05c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c060:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c064:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c068:	d017      	beq.n	800c09a <UART_SetConfig+0x266>
 800c06a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c06e:	d817      	bhi.n	800c0a0 <UART_SetConfig+0x26c>
 800c070:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c074:	d00b      	beq.n	800c08e <UART_SetConfig+0x25a>
 800c076:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c07a:	d811      	bhi.n	800c0a0 <UART_SetConfig+0x26c>
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d003      	beq.n	800c088 <UART_SetConfig+0x254>
 800c080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c084:	d006      	beq.n	800c094 <UART_SetConfig+0x260>
 800c086:	e00b      	b.n	800c0a0 <UART_SetConfig+0x26c>
 800c088:	2301      	movs	r3, #1
 800c08a:	77fb      	strb	r3, [r7, #31]
 800c08c:	e075      	b.n	800c17a <UART_SetConfig+0x346>
 800c08e:	2302      	movs	r3, #2
 800c090:	77fb      	strb	r3, [r7, #31]
 800c092:	e072      	b.n	800c17a <UART_SetConfig+0x346>
 800c094:	2304      	movs	r3, #4
 800c096:	77fb      	strb	r3, [r7, #31]
 800c098:	e06f      	b.n	800c17a <UART_SetConfig+0x346>
 800c09a:	2308      	movs	r3, #8
 800c09c:	77fb      	strb	r3, [r7, #31]
 800c09e:	e06c      	b.n	800c17a <UART_SetConfig+0x346>
 800c0a0:	2310      	movs	r3, #16
 800c0a2:	77fb      	strb	r3, [r7, #31]
 800c0a4:	e069      	b.n	800c17a <UART_SetConfig+0x346>
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	4a1c      	ldr	r2, [pc, #112]	; (800c11c <UART_SetConfig+0x2e8>)
 800c0ac:	4293      	cmp	r3, r2
 800c0ae:	d137      	bne.n	800c120 <UART_SetConfig+0x2ec>
 800c0b0:	4b14      	ldr	r3, [pc, #80]	; (800c104 <UART_SetConfig+0x2d0>)
 800c0b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c0b6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800c0ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c0be:	d017      	beq.n	800c0f0 <UART_SetConfig+0x2bc>
 800c0c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c0c4:	d817      	bhi.n	800c0f6 <UART_SetConfig+0x2c2>
 800c0c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0ca:	d00b      	beq.n	800c0e4 <UART_SetConfig+0x2b0>
 800c0cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0d0:	d811      	bhi.n	800c0f6 <UART_SetConfig+0x2c2>
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d003      	beq.n	800c0de <UART_SetConfig+0x2aa>
 800c0d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0da:	d006      	beq.n	800c0ea <UART_SetConfig+0x2b6>
 800c0dc:	e00b      	b.n	800c0f6 <UART_SetConfig+0x2c2>
 800c0de:	2300      	movs	r3, #0
 800c0e0:	77fb      	strb	r3, [r7, #31]
 800c0e2:	e04a      	b.n	800c17a <UART_SetConfig+0x346>
 800c0e4:	2302      	movs	r3, #2
 800c0e6:	77fb      	strb	r3, [r7, #31]
 800c0e8:	e047      	b.n	800c17a <UART_SetConfig+0x346>
 800c0ea:	2304      	movs	r3, #4
 800c0ec:	77fb      	strb	r3, [r7, #31]
 800c0ee:	e044      	b.n	800c17a <UART_SetConfig+0x346>
 800c0f0:	2308      	movs	r3, #8
 800c0f2:	77fb      	strb	r3, [r7, #31]
 800c0f4:	e041      	b.n	800c17a <UART_SetConfig+0x346>
 800c0f6:	2310      	movs	r3, #16
 800c0f8:	77fb      	strb	r3, [r7, #31]
 800c0fa:	e03e      	b.n	800c17a <UART_SetConfig+0x346>
 800c0fc:	efff69f3 	.word	0xefff69f3
 800c100:	40011000 	.word	0x40011000
 800c104:	40023800 	.word	0x40023800
 800c108:	40004400 	.word	0x40004400
 800c10c:	40004800 	.word	0x40004800
 800c110:	40004c00 	.word	0x40004c00
 800c114:	40005000 	.word	0x40005000
 800c118:	40011400 	.word	0x40011400
 800c11c:	40007800 	.word	0x40007800
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a71      	ldr	r2, [pc, #452]	; (800c2ec <UART_SetConfig+0x4b8>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d125      	bne.n	800c176 <UART_SetConfig+0x342>
 800c12a:	4b71      	ldr	r3, [pc, #452]	; (800c2f0 <UART_SetConfig+0x4bc>)
 800c12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c130:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800c134:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c138:	d017      	beq.n	800c16a <UART_SetConfig+0x336>
 800c13a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800c13e:	d817      	bhi.n	800c170 <UART_SetConfig+0x33c>
 800c140:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c144:	d00b      	beq.n	800c15e <UART_SetConfig+0x32a>
 800c146:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c14a:	d811      	bhi.n	800c170 <UART_SetConfig+0x33c>
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d003      	beq.n	800c158 <UART_SetConfig+0x324>
 800c150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c154:	d006      	beq.n	800c164 <UART_SetConfig+0x330>
 800c156:	e00b      	b.n	800c170 <UART_SetConfig+0x33c>
 800c158:	2300      	movs	r3, #0
 800c15a:	77fb      	strb	r3, [r7, #31]
 800c15c:	e00d      	b.n	800c17a <UART_SetConfig+0x346>
 800c15e:	2302      	movs	r3, #2
 800c160:	77fb      	strb	r3, [r7, #31]
 800c162:	e00a      	b.n	800c17a <UART_SetConfig+0x346>
 800c164:	2304      	movs	r3, #4
 800c166:	77fb      	strb	r3, [r7, #31]
 800c168:	e007      	b.n	800c17a <UART_SetConfig+0x346>
 800c16a:	2308      	movs	r3, #8
 800c16c:	77fb      	strb	r3, [r7, #31]
 800c16e:	e004      	b.n	800c17a <UART_SetConfig+0x346>
 800c170:	2310      	movs	r3, #16
 800c172:	77fb      	strb	r3, [r7, #31]
 800c174:	e001      	b.n	800c17a <UART_SetConfig+0x346>
 800c176:	2310      	movs	r3, #16
 800c178:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	69db      	ldr	r3, [r3, #28]
 800c17e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c182:	d15b      	bne.n	800c23c <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800c184:	7ffb      	ldrb	r3, [r7, #31]
 800c186:	2b08      	cmp	r3, #8
 800c188:	d827      	bhi.n	800c1da <UART_SetConfig+0x3a6>
 800c18a:	a201      	add	r2, pc, #4	; (adr r2, 800c190 <UART_SetConfig+0x35c>)
 800c18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c190:	0800c1b5 	.word	0x0800c1b5
 800c194:	0800c1bd 	.word	0x0800c1bd
 800c198:	0800c1c5 	.word	0x0800c1c5
 800c19c:	0800c1db 	.word	0x0800c1db
 800c1a0:	0800c1cb 	.word	0x0800c1cb
 800c1a4:	0800c1db 	.word	0x0800c1db
 800c1a8:	0800c1db 	.word	0x0800c1db
 800c1ac:	0800c1db 	.word	0x0800c1db
 800c1b0:	0800c1d3 	.word	0x0800c1d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1b4:	f7fc fcb2 	bl	8008b1c <HAL_RCC_GetPCLK1Freq>
 800c1b8:	61b8      	str	r0, [r7, #24]
        break;
 800c1ba:	e013      	b.n	800c1e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1bc:	f7fc fcc2 	bl	8008b44 <HAL_RCC_GetPCLK2Freq>
 800c1c0:	61b8      	str	r0, [r7, #24]
        break;
 800c1c2:	e00f      	b.n	800c1e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c1c4:	4b4b      	ldr	r3, [pc, #300]	; (800c2f4 <UART_SetConfig+0x4c0>)
 800c1c6:	61bb      	str	r3, [r7, #24]
        break;
 800c1c8:	e00c      	b.n	800c1e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c1ca:	f7fc fbe5 	bl	8008998 <HAL_RCC_GetSysClockFreq>
 800c1ce:	61b8      	str	r0, [r7, #24]
        break;
 800c1d0:	e008      	b.n	800c1e4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c1d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c1d6:	61bb      	str	r3, [r7, #24]
        break;
 800c1d8:	e004      	b.n	800c1e4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800c1da:	2300      	movs	r3, #0
 800c1dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	77bb      	strb	r3, [r7, #30]
        break;
 800c1e2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c1e4:	69bb      	ldr	r3, [r7, #24]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d074      	beq.n	800c2d4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c1ea:	69bb      	ldr	r3, [r7, #24]
 800c1ec:	005a      	lsls	r2, r3, #1
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	685b      	ldr	r3, [r3, #4]
 800c1f2:	085b      	lsrs	r3, r3, #1
 800c1f4:	441a      	add	r2, r3
 800c1f6:	687b      	ldr	r3, [r7, #4]
 800c1f8:	685b      	ldr	r3, [r3, #4]
 800c1fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1fe:	b29b      	uxth	r3, r3
 800c200:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c202:	693b      	ldr	r3, [r7, #16]
 800c204:	2b0f      	cmp	r3, #15
 800c206:	d916      	bls.n	800c236 <UART_SetConfig+0x402>
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c20e:	d212      	bcs.n	800c236 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c210:	693b      	ldr	r3, [r7, #16]
 800c212:	b29b      	uxth	r3, r3
 800c214:	f023 030f 	bic.w	r3, r3, #15
 800c218:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c21a:	693b      	ldr	r3, [r7, #16]
 800c21c:	085b      	lsrs	r3, r3, #1
 800c21e:	b29b      	uxth	r3, r3
 800c220:	f003 0307 	and.w	r3, r3, #7
 800c224:	b29a      	uxth	r2, r3
 800c226:	89fb      	ldrh	r3, [r7, #14]
 800c228:	4313      	orrs	r3, r2
 800c22a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	89fa      	ldrh	r2, [r7, #14]
 800c232:	60da      	str	r2, [r3, #12]
 800c234:	e04e      	b.n	800c2d4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800c236:	2301      	movs	r3, #1
 800c238:	77bb      	strb	r3, [r7, #30]
 800c23a:	e04b      	b.n	800c2d4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800c23c:	7ffb      	ldrb	r3, [r7, #31]
 800c23e:	2b08      	cmp	r3, #8
 800c240:	d827      	bhi.n	800c292 <UART_SetConfig+0x45e>
 800c242:	a201      	add	r2, pc, #4	; (adr r2, 800c248 <UART_SetConfig+0x414>)
 800c244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c248:	0800c26d 	.word	0x0800c26d
 800c24c:	0800c275 	.word	0x0800c275
 800c250:	0800c27d 	.word	0x0800c27d
 800c254:	0800c293 	.word	0x0800c293
 800c258:	0800c283 	.word	0x0800c283
 800c25c:	0800c293 	.word	0x0800c293
 800c260:	0800c293 	.word	0x0800c293
 800c264:	0800c293 	.word	0x0800c293
 800c268:	0800c28b 	.word	0x0800c28b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c26c:	f7fc fc56 	bl	8008b1c <HAL_RCC_GetPCLK1Freq>
 800c270:	61b8      	str	r0, [r7, #24]
        break;
 800c272:	e013      	b.n	800c29c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c274:	f7fc fc66 	bl	8008b44 <HAL_RCC_GetPCLK2Freq>
 800c278:	61b8      	str	r0, [r7, #24]
        break;
 800c27a:	e00f      	b.n	800c29c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800c27c:	4b1d      	ldr	r3, [pc, #116]	; (800c2f4 <UART_SetConfig+0x4c0>)
 800c27e:	61bb      	str	r3, [r7, #24]
        break;
 800c280:	e00c      	b.n	800c29c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c282:	f7fc fb89 	bl	8008998 <HAL_RCC_GetSysClockFreq>
 800c286:	61b8      	str	r0, [r7, #24]
        break;
 800c288:	e008      	b.n	800c29c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c28a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c28e:	61bb      	str	r3, [r7, #24]
        break;
 800c290:	e004      	b.n	800c29c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800c292:	2300      	movs	r3, #0
 800c294:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800c296:	2301      	movs	r3, #1
 800c298:	77bb      	strb	r3, [r7, #30]
        break;
 800c29a:	bf00      	nop
    }

    if (pclk != 0U)
 800c29c:	69bb      	ldr	r3, [r7, #24]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d018      	beq.n	800c2d4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	085a      	lsrs	r2, r3, #1
 800c2a8:	69bb      	ldr	r3, [r7, #24]
 800c2aa:	441a      	add	r2, r3
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	685b      	ldr	r3, [r3, #4]
 800c2b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c2b8:	693b      	ldr	r3, [r7, #16]
 800c2ba:	2b0f      	cmp	r3, #15
 800c2bc:	d908      	bls.n	800c2d0 <UART_SetConfig+0x49c>
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2c4:	d204      	bcs.n	800c2d0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	681b      	ldr	r3, [r3, #0]
 800c2ca:	693a      	ldr	r2, [r7, #16]
 800c2cc:	60da      	str	r2, [r3, #12]
 800c2ce:	e001      	b.n	800c2d4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800c2d0:	2301      	movs	r3, #1
 800c2d2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2200      	movs	r2, #0
 800c2d8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2200      	movs	r2, #0
 800c2de:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800c2e0:	7fbb      	ldrb	r3, [r7, #30]
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	3720      	adds	r7, #32
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	40007c00 	.word	0x40007c00
 800c2f0:	40023800 	.word	0x40023800
 800c2f4:	00f42400 	.word	0x00f42400

0800c2f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c2f8:	b480      	push	{r7}
 800c2fa:	b083      	sub	sp, #12
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c304:	f003 0301 	and.w	r3, r3, #1
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d00a      	beq.n	800c322 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	430a      	orrs	r2, r1
 800c320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c326:	f003 0302 	and.w	r3, r3, #2
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d00a      	beq.n	800c344 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	685b      	ldr	r3, [r3, #4]
 800c334:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	430a      	orrs	r2, r1
 800c342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c348:	f003 0304 	and.w	r3, r3, #4
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d00a      	beq.n	800c366 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	685b      	ldr	r3, [r3, #4]
 800c356:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	681b      	ldr	r3, [r3, #0]
 800c362:	430a      	orrs	r2, r1
 800c364:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c36a:	f003 0308 	and.w	r3, r3, #8
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d00a      	beq.n	800c388 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	430a      	orrs	r2, r1
 800c386:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c38c:	f003 0310 	and.w	r3, r3, #16
 800c390:	2b00      	cmp	r3, #0
 800c392:	d00a      	beq.n	800c3aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	689b      	ldr	r3, [r3, #8]
 800c39a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	430a      	orrs	r2, r1
 800c3a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3ae:	f003 0320 	and.w	r3, r3, #32
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d00a      	beq.n	800c3cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	689b      	ldr	r3, [r3, #8]
 800c3bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	430a      	orrs	r2, r1
 800c3ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c3d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d01a      	beq.n	800c40e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	685b      	ldr	r3, [r3, #4]
 800c3de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c3e2:	687b      	ldr	r3, [r7, #4]
 800c3e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	430a      	orrs	r2, r1
 800c3ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c3f6:	d10a      	bne.n	800c40e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	681b      	ldr	r3, [r3, #0]
 800c40a:	430a      	orrs	r2, r1
 800c40c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c416:	2b00      	cmp	r3, #0
 800c418:	d00a      	beq.n	800c430 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	430a      	orrs	r2, r1
 800c42e:	605a      	str	r2, [r3, #4]
  }
}
 800c430:	bf00      	nop
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr

0800c43c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b086      	sub	sp, #24
 800c440:	af02      	add	r7, sp, #8
 800c442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c44c:	f7f9 fb84 	bl	8005b58 <HAL_GetTick>
 800c450:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	681b      	ldr	r3, [r3, #0]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	f003 0308 	and.w	r3, r3, #8
 800c45c:	2b08      	cmp	r3, #8
 800c45e:	d10e      	bne.n	800c47e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c464:	9300      	str	r3, [sp, #0]
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2200      	movs	r2, #0
 800c46a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 f817 	bl	800c4a2 <UART_WaitOnFlagUntilTimeout>
 800c474:	4603      	mov	r3, r0
 800c476:	2b00      	cmp	r3, #0
 800c478:	d001      	beq.n	800c47e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c47a:	2303      	movs	r3, #3
 800c47c:	e00d      	b.n	800c49a <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2220      	movs	r2, #32
 800c482:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2220      	movs	r2, #32
 800c488:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	2200      	movs	r2, #0
 800c48e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	2200      	movs	r2, #0
 800c494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800c498:	2300      	movs	r3, #0
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}

0800c4a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c4a2:	b580      	push	{r7, lr}
 800c4a4:	b084      	sub	sp, #16
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	60f8      	str	r0, [r7, #12]
 800c4aa:	60b9      	str	r1, [r7, #8]
 800c4ac:	603b      	str	r3, [r7, #0]
 800c4ae:	4613      	mov	r3, r2
 800c4b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c4b2:	e05e      	b.n	800c572 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c4b4:	69bb      	ldr	r3, [r7, #24]
 800c4b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c4ba:	d05a      	beq.n	800c572 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c4bc:	f7f9 fb4c 	bl	8005b58 <HAL_GetTick>
 800c4c0:	4602      	mov	r2, r0
 800c4c2:	683b      	ldr	r3, [r7, #0]
 800c4c4:	1ad3      	subs	r3, r2, r3
 800c4c6:	69ba      	ldr	r2, [r7, #24]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	d302      	bcc.n	800c4d2 <UART_WaitOnFlagUntilTimeout+0x30>
 800c4cc:	69bb      	ldr	r3, [r7, #24]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d11b      	bne.n	800c50a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	681a      	ldr	r2, [r3, #0]
 800c4d8:	68fb      	ldr	r3, [r7, #12]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c4e0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	689a      	ldr	r2, [r3, #8]
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	f022 0201 	bic.w	r2, r2, #1
 800c4f0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	2220      	movs	r2, #32
 800c4f6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	2220      	movs	r2, #32
 800c4fc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	2200      	movs	r2, #0
 800c502:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800c506:	2303      	movs	r3, #3
 800c508:	e043      	b.n	800c592 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c50a:	68fb      	ldr	r3, [r7, #12]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	681b      	ldr	r3, [r3, #0]
 800c510:	f003 0304 	and.w	r3, r3, #4
 800c514:	2b00      	cmp	r3, #0
 800c516:	d02c      	beq.n	800c572 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c518:	68fb      	ldr	r3, [r7, #12]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	69db      	ldr	r3, [r3, #28]
 800c51e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c522:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c526:	d124      	bne.n	800c572 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c530:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	681a      	ldr	r2, [r3, #0]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c540:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c542:	68fb      	ldr	r3, [r7, #12]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	689a      	ldr	r2, [r3, #8]
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f022 0201 	bic.w	r2, r2, #1
 800c550:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	2220      	movs	r2, #32
 800c556:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	2220      	movs	r2, #32
 800c55c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2220      	movs	r2, #32
 800c562:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	2200      	movs	r2, #0
 800c56a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800c56e:	2303      	movs	r3, #3
 800c570:	e00f      	b.n	800c592 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	69da      	ldr	r2, [r3, #28]
 800c578:	68bb      	ldr	r3, [r7, #8]
 800c57a:	4013      	ands	r3, r2
 800c57c:	68ba      	ldr	r2, [r7, #8]
 800c57e:	429a      	cmp	r2, r3
 800c580:	bf0c      	ite	eq
 800c582:	2301      	moveq	r3, #1
 800c584:	2300      	movne	r3, #0
 800c586:	b2db      	uxtb	r3, r3
 800c588:	461a      	mov	r2, r3
 800c58a:	79fb      	ldrb	r3, [r7, #7]
 800c58c:	429a      	cmp	r2, r3
 800c58e:	d091      	beq.n	800c4b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c590:	2300      	movs	r3, #0
}
 800c592:	4618      	mov	r0, r3
 800c594:	3710      	adds	r7, #16
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}
	...

0800c59c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	6078      	str	r0, [r7, #4]
 800c5a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c5ae:	683b      	ldr	r3, [r7, #0]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d027      	beq.n	800c606 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c5bc:	68fa      	ldr	r2, [r7, #12]
 800c5be:	4b2f      	ldr	r3, [pc, #188]	; (800c67c <FMC_SDRAM_Init+0xe0>)
 800c5c0:	4013      	ands	r3, r2
 800c5c2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c5c4:	683b      	ldr	r3, [r7, #0]
 800c5c6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c5cc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c5d2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c5d8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c5de:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c5e4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c5e6:	683b      	ldr	r3, [r7, #0]
 800c5e8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c5ea:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c5f0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c5f6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c5f8:	68fa      	ldr	r2, [r7, #12]
 800c5fa:	4313      	orrs	r3, r2
 800c5fc:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	68fa      	ldr	r2, [r7, #12]
 800c602:	601a      	str	r2, [r3, #0]
 800c604:	e032      	b.n	800c66c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c60c:	68fb      	ldr	r3, [r7, #12]
 800c60e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c612:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c614:	683b      	ldr	r3, [r7, #0]
 800c616:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c618:	683b      	ldr	r3, [r7, #0]
 800c61a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c61c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c622:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c624:	68fa      	ldr	r2, [r7, #12]
 800c626:	4313      	orrs	r3, r2
 800c628:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c62a:	687b      	ldr	r3, [r7, #4]
 800c62c:	685b      	ldr	r3, [r3, #4]
 800c62e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c630:	68ba      	ldr	r2, [r7, #8]
 800c632:	4b12      	ldr	r3, [pc, #72]	; (800c67c <FMC_SDRAM_Init+0xe0>)
 800c634:	4013      	ands	r3, r2
 800c636:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c638:	683b      	ldr	r3, [r7, #0]
 800c63a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c63c:	683b      	ldr	r3, [r7, #0]
 800c63e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c640:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c642:	683b      	ldr	r3, [r7, #0]
 800c644:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c646:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c648:	683b      	ldr	r3, [r7, #0]
 800c64a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c64c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c652:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c654:	683b      	ldr	r3, [r7, #0]
 800c656:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c658:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c65a:	68ba      	ldr	r2, [r7, #8]
 800c65c:	4313      	orrs	r3, r2
 800c65e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	68ba      	ldr	r2, [r7, #8]
 800c66a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c66c:	2300      	movs	r3, #0
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3714      	adds	r7, #20
 800c672:	46bd      	mov	sp, r7
 800c674:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c678:	4770      	bx	lr
 800c67a:	bf00      	nop
 800c67c:	ffff8000 	.word	0xffff8000

0800c680 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c680:	b480      	push	{r7}
 800c682:	b087      	sub	sp, #28
 800c684:	af00      	add	r7, sp, #0
 800c686:	60f8      	str	r0, [r7, #12]
 800c688:	60b9      	str	r1, [r7, #8]
 800c68a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c68c:	2300      	movs	r3, #0
 800c68e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c690:	2300      	movs	r3, #0
 800c692:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2b01      	cmp	r3, #1
 800c698:	d02e      	beq.n	800c6f8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	689b      	ldr	r3, [r3, #8]
 800c69e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c6a0:	697b      	ldr	r3, [r7, #20]
 800c6a2:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c6a6:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c6a8:	68bb      	ldr	r3, [r7, #8]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	3b01      	subs	r3, #1
 800c6b4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c6b6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	689b      	ldr	r3, [r3, #8]
 800c6bc:	3b01      	subs	r3, #1
 800c6be:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c6c0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	68db      	ldr	r3, [r3, #12]
 800c6c6:	3b01      	subs	r3, #1
 800c6c8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c6ca:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c6cc:	68bb      	ldr	r3, [r7, #8]
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	3b01      	subs	r3, #1
 800c6d2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c6d4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c6d6:	68bb      	ldr	r3, [r7, #8]
 800c6d8:	695b      	ldr	r3, [r3, #20]
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c6de:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	699b      	ldr	r3, [r3, #24]
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c6e8:	4313      	orrs	r3, r2
 800c6ea:	697a      	ldr	r2, [r7, #20]
 800c6ec:	4313      	orrs	r3, r2
 800c6ee:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	697a      	ldr	r2, [r7, #20]
 800c6f4:	609a      	str	r2, [r3, #8]
 800c6f6:	e039      	b.n	800c76c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	689b      	ldr	r3, [r3, #8]
 800c6fc:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c6fe:	697a      	ldr	r2, [r7, #20]
 800c700:	4b1e      	ldr	r3, [pc, #120]	; (800c77c <FMC_SDRAM_Timing_Init+0xfc>)
 800c702:	4013      	ands	r3, r2
 800c704:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c706:	68bb      	ldr	r3, [r7, #8]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	3b01      	subs	r3, #1
 800c70c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c70e:	68bb      	ldr	r3, [r7, #8]
 800c710:	695b      	ldr	r3, [r3, #20]
 800c712:	3b01      	subs	r3, #1
 800c714:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c716:	4313      	orrs	r3, r2
 800c718:	697a      	ldr	r2, [r7, #20]
 800c71a:	4313      	orrs	r3, r2
 800c71c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	68db      	ldr	r3, [r3, #12]
 800c722:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c72a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	681b      	ldr	r3, [r3, #0]
 800c730:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c732:	68bb      	ldr	r3, [r7, #8]
 800c734:	685b      	ldr	r3, [r3, #4]
 800c736:	3b01      	subs	r3, #1
 800c738:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c73a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	689b      	ldr	r3, [r3, #8]
 800c740:	3b01      	subs	r3, #1
 800c742:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c744:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c746:	68bb      	ldr	r3, [r7, #8]
 800c748:	691b      	ldr	r3, [r3, #16]
 800c74a:	3b01      	subs	r3, #1
 800c74c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c74e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	699b      	ldr	r3, [r3, #24]
 800c754:	3b01      	subs	r3, #1
 800c756:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c758:	4313      	orrs	r3, r2
 800c75a:	693a      	ldr	r2, [r7, #16]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c760:	68fb      	ldr	r3, [r7, #12]
 800c762:	697a      	ldr	r2, [r7, #20]
 800c764:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	693a      	ldr	r2, [r7, #16]
 800c76a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	371c      	adds	r7, #28
 800c772:	46bd      	mov	sp, r7
 800c774:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c778:	4770      	bx	lr
 800c77a:	bf00      	nop
 800c77c:	ff0f0fff 	.word	0xff0f0fff

0800c780 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{ 
 800c780:	b480      	push	{r7}
 800c782:	b085      	sub	sp, #20
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | 
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	691a      	ldr	r2, [r3, #16]
 800c790:	4b0c      	ldr	r3, [pc, #48]	; (800c7c4 <FMC_SDRAM_SendCommand+0x44>)
 800c792:	4013      	ands	r3, r2
 800c794:	68ba      	ldr	r2, [r7, #8]
 800c796:	6811      	ldr	r1, [r2, #0]
 800c798:	68ba      	ldr	r2, [r7, #8]
 800c79a:	6852      	ldr	r2, [r2, #4]
 800c79c:	4311      	orrs	r1, r2
 800c79e:	68ba      	ldr	r2, [r7, #8]
 800c7a0:	6892      	ldr	r2, [r2, #8]
 800c7a2:	3a01      	subs	r2, #1
 800c7a4:	0152      	lsls	r2, r2, #5
 800c7a6:	4311      	orrs	r1, r2
 800c7a8:	68ba      	ldr	r2, [r7, #8]
 800c7aa:	68d2      	ldr	r2, [r2, #12]
 800c7ac:	0252      	lsls	r2, r2, #9
 800c7ae:	430a      	orrs	r2, r1
 800c7b0:	431a      	orrs	r2, r3
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	611a      	str	r2, [r3, #16]
             FMC_SDCMR_NRFS | FMC_SDCMR_MRD), ((Command->CommandMode) | 
             (Command->CommandTarget) | (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
             ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  
  return HAL_OK;  
 800c7b6:	2300      	movs	r3, #0
}
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	3714      	adds	r7, #20
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr
 800c7c4:	ffc00000 	.word	0xffc00000

0800c7c8 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c7c8:	b480      	push	{r7}
 800c7ca:	b083      	sub	sp, #12
 800c7cc:	af00      	add	r7, sp, #0
 800c7ce:	6078      	str	r0, [r7, #4]
 800c7d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	695a      	ldr	r2, [r3, #20]
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	005b      	lsls	r3, r3, #1
 800c7da:	431a      	orrs	r2, r3
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c7e0:	2300      	movs	r3, #0
}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	370c      	adds	r7, #12
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ec:	4770      	bx	lr
	...

0800c7f0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800c7f0:	b084      	sub	sp, #16
 800c7f2:	b480      	push	{r7}
 800c7f4:	b085      	sub	sp, #20
 800c7f6:	af00      	add	r7, sp, #0
 800c7f8:	6078      	str	r0, [r7, #4]
 800c7fa:	f107 001c 	add.w	r0, r7, #28
 800c7fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800c802:	2300      	movs	r3, #0
 800c804:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800c806:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800c808:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800c80a:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800c80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800c80e:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800c812:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800c814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800c816:	431a      	orrs	r2, r3
             Init.ClockDiv
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800c81a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800c81c:	68fa      	ldr	r2, [r7, #12]
 800c81e:	4313      	orrs	r3, r2
 800c820:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	685a      	ldr	r2, [r3, #4]
 800c826:	4b07      	ldr	r3, [pc, #28]	; (800c844 <SDMMC_Init+0x54>)
 800c828:	4013      	ands	r3, r2
 800c82a:	68fa      	ldr	r2, [r7, #12]
 800c82c:	431a      	orrs	r2, r3
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800c832:	2300      	movs	r3, #0
}
 800c834:	4618      	mov	r0, r3
 800c836:	3714      	adds	r7, #20
 800c838:	46bd      	mov	sp, r7
 800c83a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83e:	b004      	add	sp, #16
 800c840:	4770      	bx	lr
 800c842:	bf00      	nop
 800c844:	ffff8100 	.word	0xffff8100

0800c848 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800c848:	b480      	push	{r7}
 800c84a:	b083      	sub	sp, #12
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800c856:	4618      	mov	r0, r3
 800c858:	370c      	adds	r7, #12
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr

0800c862 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800c862:	b480      	push	{r7}
 800c864:	b083      	sub	sp, #12
 800c866:	af00      	add	r7, sp, #0
 800c868:	6078      	str	r0, [r7, #4]
 800c86a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	681a      	ldr	r2, [r3, #0]
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c876:	2300      	movs	r3, #0
}
 800c878:	4618      	mov	r0, r3
 800c87a:	370c      	adds	r7, #12
 800c87c:	46bd      	mov	sp, r7
 800c87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c882:	4770      	bx	lr

0800c884 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800c884:	b580      	push	{r7, lr}
 800c886:	b082      	sub	sp, #8
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2203      	movs	r2, #3
 800c890:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 800c892:	2002      	movs	r0, #2
 800c894:	f7f9 f96c 	bl	8005b70 <HAL_Delay>
  
  return HAL_OK;
 800c898:	2300      	movs	r3, #0
}
 800c89a:	4618      	mov	r0, r3
 800c89c:	3708      	adds	r7, #8
 800c89e:	46bd      	mov	sp, r7
 800c8a0:	bd80      	pop	{r7, pc}

0800c8a2 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800c8a2:	b480      	push	{r7}
 800c8a4:	b083      	sub	sp, #12
 800c8a6:	af00      	add	r7, sp, #0
 800c8a8:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	f003 0303 	and.w	r3, r3, #3
}
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	370c      	adds	r7, #12
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
	...

0800c8c0 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800c8c0:	b480      	push	{r7}
 800c8c2:	b085      	sub	sp, #20
 800c8c4:	af00      	add	r7, sp, #0
 800c8c6:	6078      	str	r0, [r7, #4]
 800c8c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800c8ce:	683b      	ldr	r3, [r7, #0]
 800c8d0:	681a      	ldr	r2, [r3, #0]
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c8d6:	683b      	ldr	r3, [r7, #0]
 800c8d8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c8de:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800c8e0:	683b      	ldr	r3, [r7, #0]
 800c8e2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800c8e4:	431a      	orrs	r2, r3
                       Command->CPSM);
 800c8e6:	683b      	ldr	r3, [r7, #0]
 800c8e8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800c8ea:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800c8ec:	68fa      	ldr	r2, [r7, #12]
 800c8ee:	4313      	orrs	r3, r2
 800c8f0:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	68da      	ldr	r2, [r3, #12]
 800c8f6:	4b06      	ldr	r3, [pc, #24]	; (800c910 <SDMMC_SendCommand+0x50>)
 800c8f8:	4013      	ands	r3, r2
 800c8fa:	68fa      	ldr	r2, [r7, #12]
 800c8fc:	431a      	orrs	r2, r3
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800c902:	2300      	movs	r3, #0
}
 800c904:	4618      	mov	r0, r3
 800c906:	3714      	adds	r7, #20
 800c908:	46bd      	mov	sp, r7
 800c90a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c90e:	4770      	bx	lr
 800c910:	fffff000 	.word	0xfffff000

0800c914 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800c914:	b480      	push	{r7}
 800c916:	b083      	sub	sp, #12
 800c918:	af00      	add	r7, sp, #0
 800c91a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	691b      	ldr	r3, [r3, #16]
 800c920:	b2db      	uxtb	r3, r3
}
 800c922:	4618      	mov	r0, r3
 800c924:	370c      	adds	r7, #12
 800c926:	46bd      	mov	sp, r7
 800c928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c92c:	4770      	bx	lr

0800c92e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800c92e:	b480      	push	{r7}
 800c930:	b085      	sub	sp, #20
 800c932:	af00      	add	r7, sp, #0
 800c934:	6078      	str	r0, [r7, #4]
 800c936:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	3314      	adds	r3, #20
 800c93c:	461a      	mov	r2, r3
 800c93e:	683b      	ldr	r3, [r7, #0]
 800c940:	4413      	add	r3, r2
 800c942:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	681b      	ldr	r3, [r3, #0]
}  
 800c948:	4618      	mov	r0, r3
 800c94a:	3714      	adds	r7, #20
 800c94c:	46bd      	mov	sp, r7
 800c94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c952:	4770      	bx	lr

0800c954 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800c954:	b480      	push	{r7}
 800c956:	b085      	sub	sp, #20
 800c958:	af00      	add	r7, sp, #0
 800c95a:	6078      	str	r0, [r7, #4]
 800c95c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800c95e:	2300      	movs	r3, #0
 800c960:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	681a      	ldr	r2, [r3, #0]
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	685a      	ldr	r2, [r3, #4]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c97a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800c980:	431a      	orrs	r2, r3
                       Data->DPSM);
 800c982:	683b      	ldr	r3, [r7, #0]
 800c984:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800c986:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800c988:	68fa      	ldr	r2, [r7, #12]
 800c98a:	4313      	orrs	r3, r2
 800c98c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c992:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	431a      	orrs	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800c99e:	2300      	movs	r3, #0

}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	3714      	adds	r7, #20
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b088      	sub	sp, #32
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
 800c9b4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800c9ba:	2310      	movs	r3, #16
 800c9bc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800c9be:	2340      	movs	r3, #64	; 0x40
 800c9c0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800c9c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9ca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800c9cc:	f107 0308 	add.w	r3, r7, #8
 800c9d0:	4619      	mov	r1, r3
 800c9d2:	6878      	ldr	r0, [r7, #4]
 800c9d4:	f7ff ff74 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800c9d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800c9dc:	2110      	movs	r1, #16
 800c9de:	6878      	ldr	r0, [r7, #4]
 800c9e0:	f000 fa46 	bl	800ce70 <SDMMC_GetCmdResp1>
 800c9e4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800c9e6:	69fb      	ldr	r3, [r7, #28]
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3720      	adds	r7, #32
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	bd80      	pop	{r7, pc}

0800c9f0 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800c9f0:	b580      	push	{r7, lr}
 800c9f2:	b088      	sub	sp, #32
 800c9f4:	af00      	add	r7, sp, #0
 800c9f6:	6078      	str	r0, [r7, #4]
 800c9f8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800c9fa:	683b      	ldr	r3, [r7, #0]
 800c9fc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800c9fe:	2311      	movs	r3, #17
 800ca00:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca02:	2340      	movs	r3, #64	; 0x40
 800ca04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca06:	2300      	movs	r3, #0
 800ca08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca0e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca10:	f107 0308 	add.w	r3, r7, #8
 800ca14:	4619      	mov	r1, r3
 800ca16:	6878      	ldr	r0, [r7, #4]
 800ca18:	f7ff ff52 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ca1c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca20:	2111      	movs	r1, #17
 800ca22:	6878      	ldr	r0, [r7, #4]
 800ca24:	f000 fa24 	bl	800ce70 <SDMMC_GetCmdResp1>
 800ca28:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca2a:	69fb      	ldr	r3, [r7, #28]
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	3720      	adds	r7, #32
 800ca30:	46bd      	mov	sp, r7
 800ca32:	bd80      	pop	{r7, pc}

0800ca34 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b088      	sub	sp, #32
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]
 800ca3c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ca3e:	683b      	ldr	r3, [r7, #0]
 800ca40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800ca42:	2312      	movs	r3, #18
 800ca44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca46:	2340      	movs	r3, #64	; 0x40
 800ca48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca4a:	2300      	movs	r3, #0
 800ca4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca54:	f107 0308 	add.w	r3, r7, #8
 800ca58:	4619      	mov	r1, r3
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7ff ff30 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ca60:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca64:	2112      	movs	r1, #18
 800ca66:	6878      	ldr	r0, [r7, #4]
 800ca68:	f000 fa02 	bl	800ce70 <SDMMC_GetCmdResp1>
 800ca6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ca6e:	69fb      	ldr	r3, [r7, #28]
}
 800ca70:	4618      	mov	r0, r3
 800ca72:	3720      	adds	r7, #32
 800ca74:	46bd      	mov	sp, r7
 800ca76:	bd80      	pop	{r7, pc}

0800ca78 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ca78:	b580      	push	{r7, lr}
 800ca7a:	b088      	sub	sp, #32
 800ca7c:	af00      	add	r7, sp, #0
 800ca7e:	6078      	str	r0, [r7, #4]
 800ca80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ca82:	683b      	ldr	r3, [r7, #0]
 800ca84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ca86:	2318      	movs	r3, #24
 800ca88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ca8a:	2340      	movs	r3, #64	; 0x40
 800ca8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ca8e:	2300      	movs	r3, #0
 800ca90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ca92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ca98:	f107 0308 	add.w	r3, r7, #8
 800ca9c:	4619      	mov	r1, r3
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7ff ff0e 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800caa4:	f241 3288 	movw	r2, #5000	; 0x1388
 800caa8:	2118      	movs	r1, #24
 800caaa:	6878      	ldr	r0, [r7, #4]
 800caac:	f000 f9e0 	bl	800ce70 <SDMMC_GetCmdResp1>
 800cab0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cab2:	69fb      	ldr	r3, [r7, #28]
}
 800cab4:	4618      	mov	r0, r3
 800cab6:	3720      	adds	r7, #32
 800cab8:	46bd      	mov	sp, r7
 800caba:	bd80      	pop	{r7, pc}

0800cabc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b088      	sub	sp, #32
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800caca:	2319      	movs	r3, #25
 800cacc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cace:	2340      	movs	r3, #64	; 0x40
 800cad0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cad2:	2300      	movs	r3, #0
 800cad4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cad6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cada:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cadc:	f107 0308 	add.w	r3, r7, #8
 800cae0:	4619      	mov	r1, r3
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f7ff feec 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800cae8:	f241 3288 	movw	r2, #5000	; 0x1388
 800caec:	2119      	movs	r1, #25
 800caee:	6878      	ldr	r0, [r7, #4]
 800caf0:	f000 f9be 	bl	800ce70 <SDMMC_GetCmdResp1>
 800caf4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800caf6:	69fb      	ldr	r3, [r7, #28]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3720      	adds	r7, #32
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}

0800cb00 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800cb00:	b580      	push	{r7, lr}
 800cb02:	b088      	sub	sp, #32
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800cb08:	2300      	movs	r3, #0
 800cb0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800cb0c:	230c      	movs	r3, #12
 800cb0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb10:	2340      	movs	r3, #64	; 0x40
 800cb12:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb14:	2300      	movs	r3, #0
 800cb16:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb1c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb1e:	f107 0308 	add.w	r3, r7, #8
 800cb22:	4619      	mov	r1, r3
 800cb24:	6878      	ldr	r0, [r7, #4]
 800cb26:	f7ff fecb 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800cb2a:	4a05      	ldr	r2, [pc, #20]	; (800cb40 <SDMMC_CmdStopTransfer+0x40>)
 800cb2c:	210c      	movs	r1, #12
 800cb2e:	6878      	ldr	r0, [r7, #4]
 800cb30:	f000 f99e 	bl	800ce70 <SDMMC_GetCmdResp1>
 800cb34:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cb36:	69fb      	ldr	r3, [r7, #28]
}
 800cb38:	4618      	mov	r0, r3
 800cb3a:	3720      	adds	r7, #32
 800cb3c:	46bd      	mov	sp, r7
 800cb3e:	bd80      	pop	{r7, pc}
 800cb40:	05f5e100 	.word	0x05f5e100

0800cb44 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b08a      	sub	sp, #40	; 0x28
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	60f8      	str	r0, [r7, #12]
 800cb4c:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800cb50:	683b      	ldr	r3, [r7, #0]
 800cb52:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800cb54:	2307      	movs	r3, #7
 800cb56:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cb58:	2340      	movs	r3, #64	; 0x40
 800cb5a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cb60:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb64:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cb66:	f107 0310 	add.w	r3, r7, #16
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	68f8      	ldr	r0, [r7, #12]
 800cb6e:	f7ff fea7 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800cb72:	f241 3288 	movw	r2, #5000	; 0x1388
 800cb76:	2107      	movs	r1, #7
 800cb78:	68f8      	ldr	r0, [r7, #12]
 800cb7a:	f000 f979 	bl	800ce70 <SDMMC_GetCmdResp1>
 800cb7e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800cb80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb82:	4618      	mov	r0, r3
 800cb84:	3728      	adds	r7, #40	; 0x28
 800cb86:	46bd      	mov	sp, r7
 800cb88:	bd80      	pop	{r7, pc}

0800cb8a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b088      	sub	sp, #32
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800cb92:	2300      	movs	r3, #0
 800cb94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800cb96:	2300      	movs	r3, #0
 800cb98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cb9e:	2300      	movs	r3, #0
 800cba0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cba6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cba8:	f107 0308 	add.w	r3, r7, #8
 800cbac:	4619      	mov	r1, r3
 800cbae:	6878      	ldr	r0, [r7, #4]
 800cbb0:	f7ff fe86 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800cbb4:	6878      	ldr	r0, [r7, #4]
 800cbb6:	f000 f92f 	bl	800ce18 <SDMMC_GetCmdError>
 800cbba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbbc:	69fb      	ldr	r3, [r7, #28]
}
 800cbbe:	4618      	mov	r0, r3
 800cbc0:	3720      	adds	r7, #32
 800cbc2:	46bd      	mov	sp, r7
 800cbc4:	bd80      	pop	{r7, pc}

0800cbc6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800cbc6:	b580      	push	{r7, lr}
 800cbc8:	b088      	sub	sp, #32
 800cbca:	af00      	add	r7, sp, #0
 800cbcc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800cbce:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800cbd2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800cbd4:	2308      	movs	r3, #8
 800cbd6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cbd8:	2340      	movs	r3, #64	; 0x40
 800cbda:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cbe0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cbe4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cbe6:	f107 0308 	add.w	r3, r7, #8
 800cbea:	4619      	mov	r1, r3
 800cbec:	6878      	ldr	r0, [r7, #4]
 800cbee:	f7ff fe67 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f000 fb26 	bl	800d244 <SDMMC_GetCmdResp7>
 800cbf8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cbfa:	69fb      	ldr	r3, [r7, #28]
}
 800cbfc:	4618      	mov	r0, r3
 800cbfe:	3720      	adds	r7, #32
 800cc00:	46bd      	mov	sp, r7
 800cc02:	bd80      	pop	{r7, pc}

0800cc04 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cc04:	b580      	push	{r7, lr}
 800cc06:	b088      	sub	sp, #32
 800cc08:	af00      	add	r7, sp, #0
 800cc0a:	6078      	str	r0, [r7, #4]
 800cc0c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800cc12:	2337      	movs	r3, #55	; 0x37
 800cc14:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc16:	2340      	movs	r3, #64	; 0x40
 800cc18:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc22:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc24:	f107 0308 	add.w	r3, r7, #8
 800cc28:	4619      	mov	r1, r3
 800cc2a:	6878      	ldr	r0, [r7, #4]
 800cc2c:	f7ff fe48 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800cc30:	f241 3288 	movw	r2, #5000	; 0x1388
 800cc34:	2137      	movs	r1, #55	; 0x37
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	f000 f91a 	bl	800ce70 <SDMMC_GetCmdResp1>
 800cc3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc3e:	69fb      	ldr	r3, [r7, #28]
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3720      	adds	r7, #32
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}

0800cc48 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cc48:	b580      	push	{r7, lr}
 800cc4a:	b088      	sub	sp, #32
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
 800cc50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800cc52:	683a      	ldr	r2, [r7, #0]
 800cc54:	4b0d      	ldr	r3, [pc, #52]	; (800cc8c <SDMMC_CmdAppOperCommand+0x44>)
 800cc56:	4313      	orrs	r3, r2
 800cc58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800cc5a:	2329      	movs	r3, #41	; 0x29
 800cc5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cc5e:	2340      	movs	r3, #64	; 0x40
 800cc60:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cc62:	2300      	movs	r3, #0
 800cc64:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cc66:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cc6a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cc6c:	f107 0308 	add.w	r3, r7, #8
 800cc70:	4619      	mov	r1, r3
 800cc72:	6878      	ldr	r0, [r7, #4]
 800cc74:	f7ff fe24 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 fa2f 	bl	800d0dc <SDMMC_GetCmdResp3>
 800cc7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cc80:	69fb      	ldr	r3, [r7, #28]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3720      	adds	r7, #32
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	80100000 	.word	0x80100000

0800cc90 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b088      	sub	sp, #32
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
 800cc98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800cc9a:	683b      	ldr	r3, [r7, #0]
 800cc9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800cc9e:	2306      	movs	r3, #6
 800cca0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cca2:	2340      	movs	r3, #64	; 0x40
 800cca4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cca6:	2300      	movs	r3, #0
 800cca8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccb0:	f107 0308 	add.w	r3, r7, #8
 800ccb4:	4619      	mov	r1, r3
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7ff fe02 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ccbc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ccc0:	2106      	movs	r1, #6
 800ccc2:	6878      	ldr	r0, [r7, #4]
 800ccc4:	f000 f8d4 	bl	800ce70 <SDMMC_GetCmdResp1>
 800ccc8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ccca:	69fb      	ldr	r3, [r7, #28]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3720      	adds	r7, #32
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}

0800ccd4 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b088      	sub	sp, #32
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800cce0:	2333      	movs	r3, #51	; 0x33
 800cce2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cce4:	2340      	movs	r3, #64	; 0x40
 800cce6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cce8:	2300      	movs	r3, #0
 800ccea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ccec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ccf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ccf2:	f107 0308 	add.w	r3, r7, #8
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	6878      	ldr	r0, [r7, #4]
 800ccfa:	f7ff fde1 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ccfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd02:	2133      	movs	r1, #51	; 0x33
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f000 f8b3 	bl	800ce70 <SDMMC_GetCmdResp1>
 800cd0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd0c:	69fb      	ldr	r3, [r7, #28]
}
 800cd0e:	4618      	mov	r0, r3
 800cd10:	3720      	adds	r7, #32
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}

0800cd16 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b088      	sub	sp, #32
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800cd22:	2302      	movs	r3, #2
 800cd24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cd26:	23c0      	movs	r3, #192	; 0xc0
 800cd28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd34:	f107 0308 	add.w	r3, r7, #8
 800cd38:	4619      	mov	r1, r3
 800cd3a:	6878      	ldr	r0, [r7, #4]
 800cd3c:	f7ff fdc0 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 f983 	bl	800d04c <SDMMC_GetCmdResp2>
 800cd46:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd48:	69fb      	ldr	r3, [r7, #28]
}
 800cd4a:	4618      	mov	r0, r3
 800cd4c:	3720      	adds	r7, #32
 800cd4e:	46bd      	mov	sp, r7
 800cd50:	bd80      	pop	{r7, pc}

0800cd52 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cd52:	b580      	push	{r7, lr}
 800cd54:	b088      	sub	sp, #32
 800cd56:	af00      	add	r7, sp, #0
 800cd58:	6078      	str	r0, [r7, #4]
 800cd5a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800cd60:	2309      	movs	r3, #9
 800cd62:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800cd64:	23c0      	movs	r3, #192	; 0xc0
 800cd66:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cd68:	2300      	movs	r3, #0
 800cd6a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cd6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cd70:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cd72:	f107 0308 	add.w	r3, r7, #8
 800cd76:	4619      	mov	r1, r3
 800cd78:	6878      	ldr	r0, [r7, #4]
 800cd7a:	f7ff fda1 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 f964 	bl	800d04c <SDMMC_GetCmdResp2>
 800cd84:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cd86:	69fb      	ldr	r3, [r7, #28]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3720      	adds	r7, #32
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}

0800cd90 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800cd90:	b580      	push	{r7, lr}
 800cd92:	b088      	sub	sp, #32
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800cd9a:	2300      	movs	r3, #0
 800cd9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800cd9e:	2303      	movs	r3, #3
 800cda0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cda2:	2340      	movs	r3, #64	; 0x40
 800cda4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cda6:	2300      	movs	r3, #0
 800cda8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdaa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdb0:	f107 0308 	add.w	r3, r7, #8
 800cdb4:	4619      	mov	r1, r3
 800cdb6:	6878      	ldr	r0, [r7, #4]
 800cdb8:	f7ff fd82 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800cdbc:	683a      	ldr	r2, [r7, #0]
 800cdbe:	2103      	movs	r1, #3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f000 f9c9 	bl	800d158 <SDMMC_GetCmdResp6>
 800cdc6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800cdc8:	69fb      	ldr	r3, [r7, #28]
}
 800cdca:	4618      	mov	r0, r3
 800cdcc:	3720      	adds	r7, #32
 800cdce:	46bd      	mov	sp, r7
 800cdd0:	bd80      	pop	{r7, pc}

0800cdd2 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800cdd2:	b580      	push	{r7, lr}
 800cdd4:	b088      	sub	sp, #32
 800cdd6:	af00      	add	r7, sp, #0
 800cdd8:	6078      	str	r0, [r7, #4]
 800cdda:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800cddc:	683b      	ldr	r3, [r7, #0]
 800cdde:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800cde0:	230d      	movs	r3, #13
 800cde2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800cde4:	2340      	movs	r3, #64	; 0x40
 800cde6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800cde8:	2300      	movs	r3, #0
 800cdea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800cdec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cdf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800cdf2:	f107 0308 	add.w	r3, r7, #8
 800cdf6:	4619      	mov	r1, r3
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f7ff fd61 	bl	800c8c0 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800cdfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce02:	210d      	movs	r1, #13
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f000 f833 	bl	800ce70 <SDMMC_GetCmdResp1>
 800ce0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ce0c:	69fb      	ldr	r3, [r7, #28]
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3720      	adds	r7, #32
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
	...

0800ce18 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800ce18:	b480      	push	{r7}
 800ce1a:	b085      	sub	sp, #20
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800ce20:	4b11      	ldr	r3, [pc, #68]	; (800ce68 <SDMMC_GetCmdError+0x50>)
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4a11      	ldr	r2, [pc, #68]	; (800ce6c <SDMMC_GetCmdError+0x54>)
 800ce26:	fba2 2303 	umull	r2, r3, r2, r3
 800ce2a:	0a5b      	lsrs	r3, r3, #9
 800ce2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ce30:	fb02 f303 	mul.w	r3, r2, r3
 800ce34:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	1e5a      	subs	r2, r3, #1
 800ce3a:	60fa      	str	r2, [r7, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	d102      	bne.n	800ce46 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ce44:	e009      	b.n	800ce5a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d0f1      	beq.n	800ce36 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ce52:	687b      	ldr	r3, [r7, #4]
 800ce54:	22c5      	movs	r2, #197	; 0xc5
 800ce56:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800ce58:	2300      	movs	r3, #0
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3714      	adds	r7, #20
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce64:	4770      	bx	lr
 800ce66:	bf00      	nop
 800ce68:	20000040 	.word	0x20000040
 800ce6c:	10624dd3 	.word	0x10624dd3

0800ce70 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b088      	sub	sp, #32
 800ce74:	af00      	add	r7, sp, #0
 800ce76:	60f8      	str	r0, [r7, #12]
 800ce78:	460b      	mov	r3, r1
 800ce7a:	607a      	str	r2, [r7, #4]
 800ce7c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ce7e:	4b70      	ldr	r3, [pc, #448]	; (800d040 <SDMMC_GetCmdResp1+0x1d0>)
 800ce80:	681b      	ldr	r3, [r3, #0]
 800ce82:	4a70      	ldr	r2, [pc, #448]	; (800d044 <SDMMC_GetCmdResp1+0x1d4>)
 800ce84:	fba2 2303 	umull	r2, r3, r2, r3
 800ce88:	0a5a      	lsrs	r2, r3, #9
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	fb02 f303 	mul.w	r3, r2, r3
 800ce90:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800ce92:	69fb      	ldr	r3, [r7, #28]
 800ce94:	1e5a      	subs	r2, r3, #1
 800ce96:	61fa      	str	r2, [r7, #28]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d102      	bne.n	800cea2 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ce9c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800cea0:	e0c9      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cea6:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800cea8:	69bb      	ldr	r3, [r7, #24]
 800ceaa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d0ef      	beq.n	800ce92 <SDMMC_GetCmdResp1+0x22>
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d1ea      	bne.n	800ce92 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800cebc:	68fb      	ldr	r3, [r7, #12]
 800cebe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cec0:	f003 0304 	and.w	r3, r3, #4
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d004      	beq.n	800ced2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2204      	movs	r2, #4
 800cecc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800cece:	2304      	movs	r3, #4
 800ced0:	e0b1      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ced6:	f003 0301 	and.w	r3, r3, #1
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d004      	beq.n	800cee8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2201      	movs	r2, #1
 800cee2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cee4:	2301      	movs	r3, #1
 800cee6:	e0a6      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	22c5      	movs	r2, #197	; 0xc5
 800ceec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ceee:	68f8      	ldr	r0, [r7, #12]
 800cef0:	f7ff fd10 	bl	800c914 <SDMMC_GetCommandResponse>
 800cef4:	4603      	mov	r3, r0
 800cef6:	461a      	mov	r2, r3
 800cef8:	7afb      	ldrb	r3, [r7, #11]
 800cefa:	4293      	cmp	r3, r2
 800cefc:	d001      	beq.n	800cf02 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800cefe:	2301      	movs	r3, #1
 800cf00:	e099      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800cf02:	2100      	movs	r1, #0
 800cf04:	68f8      	ldr	r0, [r7, #12]
 800cf06:	f7ff fd12 	bl	800c92e <SDMMC_GetResponse>
 800cf0a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800cf0c:	697a      	ldr	r2, [r7, #20]
 800cf0e:	4b4e      	ldr	r3, [pc, #312]	; (800d048 <SDMMC_GetCmdResp1+0x1d8>)
 800cf10:	4013      	ands	r3, r2
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d101      	bne.n	800cf1a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800cf16:	2300      	movs	r3, #0
 800cf18:	e08d      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	da02      	bge.n	800cf26 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800cf20:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800cf24:	e087      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800cf26:	697b      	ldr	r3, [r7, #20]
 800cf28:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d001      	beq.n	800cf34 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800cf30:	2340      	movs	r3, #64	; 0x40
 800cf32:	e080      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d001      	beq.n	800cf42 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800cf3e:	2380      	movs	r3, #128	; 0x80
 800cf40:	e079      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800cf42:	697b      	ldr	r3, [r7, #20]
 800cf44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d002      	beq.n	800cf52 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800cf4c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800cf50:	e071      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800cf52:	697b      	ldr	r3, [r7, #20]
 800cf54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d002      	beq.n	800cf62 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800cf5c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf60:	e069      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800cf62:	697b      	ldr	r3, [r7, #20]
 800cf64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d002      	beq.n	800cf72 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800cf6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf70:	e061      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800cf72:	697b      	ldr	r3, [r7, #20]
 800cf74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cf78:	2b00      	cmp	r3, #0
 800cf7a:	d002      	beq.n	800cf82 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800cf7c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800cf80:	e059      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800cf82:	697b      	ldr	r3, [r7, #20]
 800cf84:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d002      	beq.n	800cf92 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800cf8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800cf90:	e051      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cf98:	2b00      	cmp	r3, #0
 800cf9a:	d002      	beq.n	800cfa2 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800cf9c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800cfa0:	e049      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800cfa2:	697b      	ldr	r3, [r7, #20]
 800cfa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d002      	beq.n	800cfb2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800cfac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800cfb0:	e041      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800cfb2:	697b      	ldr	r3, [r7, #20]
 800cfb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d002      	beq.n	800cfc2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800cfbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cfc0:	e039      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800cfc2:	697b      	ldr	r3, [r7, #20]
 800cfc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d002      	beq.n	800cfd2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800cfcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800cfd0:	e031      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800cfd2:	697b      	ldr	r3, [r7, #20]
 800cfd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d002      	beq.n	800cfe2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800cfdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800cfe0:	e029      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800cfe2:	697b      	ldr	r3, [r7, #20]
 800cfe4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d002      	beq.n	800cff2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800cfec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800cff0:	e021      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800cff2:	697b      	ldr	r3, [r7, #20]
 800cff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d002      	beq.n	800d002 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800cffc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800d000:	e019      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800d002:	697b      	ldr	r3, [r7, #20]
 800d004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d002      	beq.n	800d012 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800d00c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800d010:	e011      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800d012:	697b      	ldr	r3, [r7, #20]
 800d014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d002      	beq.n	800d022 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800d01c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d020:	e009      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	f003 0308 	and.w	r3, r3, #8
 800d028:	2b00      	cmp	r3, #0
 800d02a:	d002      	beq.n	800d032 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800d02c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d030:	e001      	b.n	800d036 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d032:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d036:	4618      	mov	r0, r3
 800d038:	3720      	adds	r7, #32
 800d03a:	46bd      	mov	sp, r7
 800d03c:	bd80      	pop	{r7, pc}
 800d03e:	bf00      	nop
 800d040:	20000040 	.word	0x20000040
 800d044:	10624dd3 	.word	0x10624dd3
 800d048:	fdffe008 	.word	0xfdffe008

0800d04c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b085      	sub	sp, #20
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d054:	4b1f      	ldr	r3, [pc, #124]	; (800d0d4 <SDMMC_GetCmdResp2+0x88>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	4a1f      	ldr	r2, [pc, #124]	; (800d0d8 <SDMMC_GetCmdResp2+0x8c>)
 800d05a:	fba2 2303 	umull	r2, r3, r2, r3
 800d05e:	0a5b      	lsrs	r3, r3, #9
 800d060:	f241 3288 	movw	r2, #5000	; 0x1388
 800d064:	fb02 f303 	mul.w	r3, r2, r3
 800d068:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	1e5a      	subs	r2, r3, #1
 800d06e:	60fa      	str	r2, [r7, #12]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d102      	bne.n	800d07a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d074:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d078:	e026      	b.n	800d0c8 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d07e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d080:	68bb      	ldr	r3, [r7, #8]
 800d082:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d086:	2b00      	cmp	r3, #0
 800d088:	d0ef      	beq.n	800d06a <SDMMC_GetCmdResp2+0x1e>
 800d08a:	68bb      	ldr	r3, [r7, #8]
 800d08c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d090:	2b00      	cmp	r3, #0
 800d092:	d1ea      	bne.n	800d06a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d098:	f003 0304 	and.w	r3, r3, #4
 800d09c:	2b00      	cmp	r3, #0
 800d09e:	d004      	beq.n	800d0aa <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	2204      	movs	r2, #4
 800d0a4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d0a6:	2304      	movs	r3, #4
 800d0a8:	e00e      	b.n	800d0c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0ae:	f003 0301 	and.w	r3, r3, #1
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d004      	beq.n	800d0c0 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2201      	movs	r2, #1
 800d0ba:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e003      	b.n	800d0c8 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	22c5      	movs	r2, #197	; 0xc5
 800d0c4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800d0c6:	2300      	movs	r3, #0
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	3714      	adds	r7, #20
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr
 800d0d4:	20000040 	.word	0x20000040
 800d0d8:	10624dd3 	.word	0x10624dd3

0800d0dc <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800d0dc:	b480      	push	{r7}
 800d0de:	b085      	sub	sp, #20
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d0e4:	4b1a      	ldr	r3, [pc, #104]	; (800d150 <SDMMC_GetCmdResp3+0x74>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a1a      	ldr	r2, [pc, #104]	; (800d154 <SDMMC_GetCmdResp3+0x78>)
 800d0ea:	fba2 2303 	umull	r2, r3, r2, r3
 800d0ee:	0a5b      	lsrs	r3, r3, #9
 800d0f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0f4:	fb02 f303 	mul.w	r3, r2, r3
 800d0f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	1e5a      	subs	r2, r3, #1
 800d0fe:	60fa      	str	r2, [r7, #12]
 800d100:	2b00      	cmp	r3, #0
 800d102:	d102      	bne.n	800d10a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d104:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d108:	e01b      	b.n	800d142 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d10e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d110:	68bb      	ldr	r3, [r7, #8]
 800d112:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d116:	2b00      	cmp	r3, #0
 800d118:	d0ef      	beq.n	800d0fa <SDMMC_GetCmdResp3+0x1e>
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d120:	2b00      	cmp	r3, #0
 800d122:	d1ea      	bne.n	800d0fa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d128:	f003 0304 	and.w	r3, r3, #4
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d004      	beq.n	800d13a <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	2204      	movs	r2, #4
 800d134:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d136:	2304      	movs	r3, #4
 800d138:	e003      	b.n	800d142 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	22c5      	movs	r2, #197	; 0xc5
 800d13e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d140:	2300      	movs	r3, #0
}
 800d142:	4618      	mov	r0, r3
 800d144:	3714      	adds	r7, #20
 800d146:	46bd      	mov	sp, r7
 800d148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14c:	4770      	bx	lr
 800d14e:	bf00      	nop
 800d150:	20000040 	.word	0x20000040
 800d154:	10624dd3 	.word	0x10624dd3

0800d158 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800d158:	b580      	push	{r7, lr}
 800d15a:	b088      	sub	sp, #32
 800d15c:	af00      	add	r7, sp, #0
 800d15e:	60f8      	str	r0, [r7, #12]
 800d160:	460b      	mov	r3, r1
 800d162:	607a      	str	r2, [r7, #4]
 800d164:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d166:	4b35      	ldr	r3, [pc, #212]	; (800d23c <SDMMC_GetCmdResp6+0xe4>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a35      	ldr	r2, [pc, #212]	; (800d240 <SDMMC_GetCmdResp6+0xe8>)
 800d16c:	fba2 2303 	umull	r2, r3, r2, r3
 800d170:	0a5b      	lsrs	r3, r3, #9
 800d172:	f241 3288 	movw	r2, #5000	; 0x1388
 800d176:	fb02 f303 	mul.w	r3, r2, r3
 800d17a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800d17c:	69fb      	ldr	r3, [r7, #28]
 800d17e:	1e5a      	subs	r2, r3, #1
 800d180:	61fa      	str	r2, [r7, #28]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d102      	bne.n	800d18c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d186:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d18a:	e052      	b.n	800d232 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d190:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d192:	69bb      	ldr	r3, [r7, #24]
 800d194:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d0ef      	beq.n	800d17c <SDMMC_GetCmdResp6+0x24>
 800d19c:	69bb      	ldr	r3, [r7, #24]
 800d19e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	d1ea      	bne.n	800d17c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d1a6:	68fb      	ldr	r3, [r7, #12]
 800d1a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1aa:	f003 0304 	and.w	r3, r3, #4
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d004      	beq.n	800d1bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2204      	movs	r2, #4
 800d1b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d1b8:	2304      	movs	r3, #4
 800d1ba:	e03a      	b.n	800d232 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d1bc:	68fb      	ldr	r3, [r7, #12]
 800d1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c0:	f003 0301 	and.w	r3, r3, #1
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d004      	beq.n	800d1d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	2201      	movs	r2, #1
 800d1cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e02f      	b.n	800d232 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f7ff fb9e 	bl	800c914 <SDMMC_GetCommandResponse>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	461a      	mov	r2, r3
 800d1dc:	7afb      	ldrb	r3, [r7, #11]
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d001      	beq.n	800d1e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	e025      	b.n	800d232 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	22c5      	movs	r2, #197	; 0xc5
 800d1ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800d1ec:	2100      	movs	r1, #0
 800d1ee:	68f8      	ldr	r0, [r7, #12]
 800d1f0:	f7ff fb9d 	bl	800c92e <SDMMC_GetResponse>
 800d1f4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800d1f6:	697b      	ldr	r3, [r7, #20]
 800d1f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d106      	bne.n	800d20e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	0c1b      	lsrs	r3, r3, #16
 800d204:	b29a      	uxth	r2, r3
 800d206:	687b      	ldr	r3, [r7, #4]
 800d208:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800d20a:	2300      	movs	r3, #0
 800d20c:	e011      	b.n	800d232 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d214:	2b00      	cmp	r3, #0
 800d216:	d002      	beq.n	800d21e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800d218:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d21c:	e009      	b.n	800d232 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800d21e:	697b      	ldr	r3, [r7, #20]
 800d220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d224:	2b00      	cmp	r3, #0
 800d226:	d002      	beq.n	800d22e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800d228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d22c:	e001      	b.n	800d232 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800d22e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800d232:	4618      	mov	r0, r3
 800d234:	3720      	adds	r7, #32
 800d236:	46bd      	mov	sp, r7
 800d238:	bd80      	pop	{r7, pc}
 800d23a:	bf00      	nop
 800d23c:	20000040 	.word	0x20000040
 800d240:	10624dd3 	.word	0x10624dd3

0800d244 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800d244:	b480      	push	{r7}
 800d246:	b085      	sub	sp, #20
 800d248:	af00      	add	r7, sp, #0
 800d24a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800d24c:	4b22      	ldr	r3, [pc, #136]	; (800d2d8 <SDMMC_GetCmdResp7+0x94>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	4a22      	ldr	r2, [pc, #136]	; (800d2dc <SDMMC_GetCmdResp7+0x98>)
 800d252:	fba2 2303 	umull	r2, r3, r2, r3
 800d256:	0a5b      	lsrs	r3, r3, #9
 800d258:	f241 3288 	movw	r2, #5000	; 0x1388
 800d25c:	fb02 f303 	mul.w	r3, r2, r3
 800d260:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	1e5a      	subs	r2, r3, #1
 800d266:	60fa      	str	r2, [r7, #12]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	d102      	bne.n	800d272 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800d26c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800d270:	e02c      	b.n	800d2cc <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d276:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d278:	68bb      	ldr	r3, [r7, #8]
 800d27a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d0ef      	beq.n	800d262 <SDMMC_GetCmdResp7+0x1e>
 800d282:	68bb      	ldr	r3, [r7, #8]
 800d284:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d1ea      	bne.n	800d262 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d290:	f003 0304 	and.w	r3, r3, #4
 800d294:	2b00      	cmp	r3, #0
 800d296:	d004      	beq.n	800d2a2 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2204      	movs	r2, #4
 800d29c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800d29e:	2304      	movs	r3, #4
 800d2a0:	e014      	b.n	800d2cc <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2a6:	f003 0301 	and.w	r3, r3, #1
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d004      	beq.n	800d2b8 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	2201      	movs	r2, #1
 800d2b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800d2b4:	2301      	movs	r3, #1
 800d2b6:	e009      	b.n	800d2cc <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d002      	beq.n	800d2ca <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2240      	movs	r2, #64	; 0x40
 800d2c8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800d2ca:	2300      	movs	r3, #0
  
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3714      	adds	r7, #20
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d6:	4770      	bx	lr
 800d2d8:	20000040 	.word	0x20000040
 800d2dc:	10624dd3 	.word	0x10624dd3

0800d2e0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d2e4:	4904      	ldr	r1, [pc, #16]	; (800d2f8 <MX_FATFS_Init+0x18>)
 800d2e6:	4805      	ldr	r0, [pc, #20]	; (800d2fc <MX_FATFS_Init+0x1c>)
 800d2e8:	f003 f900 	bl	80104ec <FATFS_LinkDriver>
 800d2ec:	4603      	mov	r3, r0
 800d2ee:	461a      	mov	r2, r3
 800d2f0:	4b03      	ldr	r3, [pc, #12]	; (800d300 <MX_FATFS_Init+0x20>)
 800d2f2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d2f4:	bf00      	nop
 800d2f6:	bd80      	pop	{r7, pc}
 800d2f8:	200092d4 	.word	0x200092d4
 800d2fc:	08015da0 	.word	0x08015da0
 800d300:	200092d0 	.word	0x200092d0

0800d304 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d304:	b480      	push	{r7}
 800d306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d308:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d30a:	4618      	mov	r0, r3
 800d30c:	46bd      	mov	sp, r7
 800d30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d312:	4770      	bx	lr

0800d314 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b082      	sub	sp, #8
 800d318:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d31a:	2300      	movs	r3, #0
 800d31c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d31e:	f000 f896 	bl	800d44e <BSP_SD_IsDetected>
 800d322:	4603      	mov	r3, r0
 800d324:	2b01      	cmp	r3, #1
 800d326:	d001      	beq.n	800d32c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d328:	2302      	movs	r3, #2
 800d32a:	e012      	b.n	800d352 <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d32c:	480b      	ldr	r0, [pc, #44]	; (800d35c <BSP_SD_Init+0x48>)
 800d32e:	f7fc feac 	bl	800a08a <HAL_SD_Init>
 800d332:	4603      	mov	r3, r0
 800d334:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d336:	79fb      	ldrb	r3, [r7, #7]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d109      	bne.n	800d350 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d33c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800d340:	4806      	ldr	r0, [pc, #24]	; (800d35c <BSP_SD_Init+0x48>)
 800d342:	f7fd fc71 	bl	800ac28 <HAL_SD_ConfigWideBusOperation>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d001      	beq.n	800d350 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d34c:	2301      	movs	r3, #1
 800d34e:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d350:	79fb      	ldrb	r3, [r7, #7]
}
 800d352:	4618      	mov	r0, r3
 800d354:	3708      	adds	r7, #8
 800d356:	46bd      	mov	sp, r7
 800d358:	bd80      	pop	{r7, pc}
 800d35a:	bf00      	nop
 800d35c:	20008a04 	.word	0x20008a04

0800d360 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d360:	b580      	push	{r7, lr}
 800d362:	b086      	sub	sp, #24
 800d364:	af00      	add	r7, sp, #0
 800d366:	60f8      	str	r0, [r7, #12]
 800d368:	60b9      	str	r1, [r7, #8]
 800d36a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d36c:	2300      	movs	r3, #0
 800d36e:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	68ba      	ldr	r2, [r7, #8]
 800d374:	68f9      	ldr	r1, [r7, #12]
 800d376:	4806      	ldr	r0, [pc, #24]	; (800d390 <BSP_SD_ReadBlocks_DMA+0x30>)
 800d378:	f7fc ff3e 	bl	800a1f8 <HAL_SD_ReadBlocks_DMA>
 800d37c:	4603      	mov	r3, r0
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d001      	beq.n	800d386 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d382:	2301      	movs	r3, #1
 800d384:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d386:	7dfb      	ldrb	r3, [r7, #23]
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3718      	adds	r7, #24
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}
 800d390:	20008a04 	.word	0x20008a04

0800d394 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	68ba      	ldr	r2, [r7, #8]
 800d3a8:	68f9      	ldr	r1, [r7, #12]
 800d3aa:	4806      	ldr	r0, [pc, #24]	; (800d3c4 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d3ac:	f7fd f806 	bl	800a3bc <HAL_SD_WriteBlocks_DMA>
 800d3b0:	4603      	mov	r3, r0
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d001      	beq.n	800d3ba <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d3b6:	2301      	movs	r3, #1
 800d3b8:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d3ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800d3bc:	4618      	mov	r0, r3
 800d3be:	3718      	adds	r7, #24
 800d3c0:	46bd      	mov	sp, r7
 800d3c2:	bd80      	pop	{r7, pc}
 800d3c4:	20008a04 	.word	0x20008a04

0800d3c8 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d3c8:	b580      	push	{r7, lr}
 800d3ca:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d3cc:	4805      	ldr	r0, [pc, #20]	; (800d3e4 <BSP_SD_GetCardState+0x1c>)
 800d3ce:	f7fd fcc5 	bl	800ad5c <HAL_SD_GetCardState>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b04      	cmp	r3, #4
 800d3d6:	bf14      	ite	ne
 800d3d8:	2301      	movne	r3, #1
 800d3da:	2300      	moveq	r3, #0
 800d3dc:	b2db      	uxtb	r3, r3
}
 800d3de:	4618      	mov	r0, r3
 800d3e0:	bd80      	pop	{r7, pc}
 800d3e2:	bf00      	nop
 800d3e4:	20008a04 	.word	0x20008a04

0800d3e8 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b082      	sub	sp, #8
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d3f0:	6879      	ldr	r1, [r7, #4]
 800d3f2:	4803      	ldr	r0, [pc, #12]	; (800d400 <BSP_SD_GetCardInfo+0x18>)
 800d3f4:	f7fd fbec 	bl	800abd0 <HAL_SD_GetCardInfo>
}
 800d3f8:	bf00      	nop
 800d3fa:	3708      	adds	r7, #8
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	20008a04 	.word	0x20008a04

0800d404 <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b082      	sub	sp, #8
 800d408:	af00      	add	r7, sp, #0
 800d40a:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 800d40c:	f000 f818 	bl	800d440 <BSP_SD_AbortCallback>
}
 800d410:	bf00      	nop
 800d412:	3708      	adds	r7, #8
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b082      	sub	sp, #8
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d420:	f000 f9c4 	bl	800d7ac <BSP_SD_WriteCpltCallback>
}
 800d424:	bf00      	nop
 800d426:	3708      	adds	r7, #8
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b082      	sub	sp, #8
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d434:	f000 f9c8 	bl	800d7c8 <BSP_SD_ReadCpltCallback>
}
 800d438:	bf00      	nop
 800d43a:	3708      	adds	r7, #8
 800d43c:	46bd      	mov	sp, r7
 800d43e:	bd80      	pop	{r7, pc}

0800d440 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 800d440:	b480      	push	{r7}
 800d442:	af00      	add	r7, sp, #0

}
 800d444:	bf00      	nop
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr

0800d44e <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d44e:	b580      	push	{r7, lr}
 800d450:	b082      	sub	sp, #8
 800d452:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d454:	2301      	movs	r3, #1
 800d456:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800d458:	f000 f80c 	bl	800d474 <BSP_PlatformIsDetected>
 800d45c:	4603      	mov	r3, r0
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d101      	bne.n	800d466 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800d462:	2300      	movs	r3, #0
 800d464:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800d466:	79fb      	ldrb	r3, [r7, #7]
 800d468:	b2db      	uxtb	r3, r3
}
 800d46a:	4618      	mov	r0, r3
 800d46c:	3708      	adds	r7, #8
 800d46e:	46bd      	mov	sp, r7
 800d470:	bd80      	pop	{r7, pc}
	...

0800d474 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800d474:	b580      	push	{r7, lr}
 800d476:	b082      	sub	sp, #8
 800d478:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800d47a:	2301      	movs	r3, #1
 800d47c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800d47e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800d482:	4806      	ldr	r0, [pc, #24]	; (800d49c <BSP_PlatformIsDetected+0x28>)
 800d484:	f7f9 fdc2 	bl	800700c <HAL_GPIO_ReadPin>
 800d488:	4603      	mov	r3, r0
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d001      	beq.n	800d492 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800d48e:	2300      	movs	r3, #0
 800d490:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800d492:	79fb      	ldrb	r3, [r7, #7]
}
 800d494:	4618      	mov	r0, r3
 800d496:	3708      	adds	r7, #8
 800d498:	46bd      	mov	sp, r7
 800d49a:	bd80      	pop	{r7, pc}
 800d49c:	40020800 	.word	0x40020800

0800d4a0 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d4a0:	b580      	push	{r7, lr}
 800d4a2:	b084      	sub	sp, #16
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  uint32_t timer;
  /* block until SDIO peripheral is ready again or a timeout occur */
#if (osCMSIS <= 0x20000U)
  timer = osKernelSysTick();
 800d4a8:	f003 f8b8 	bl	801061c <osKernelSysTick>
 800d4ac:	60f8      	str	r0, [r7, #12]
  while( osKernelSysTick() - timer < timeout)
 800d4ae:	e006      	b.n	800d4be <SD_CheckStatusWithTimeout+0x1e>
#else
  timer = osKernelGetTickCount();
  while( osKernelGetTickCount() - timer < timeout)
#endif
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d4b0:	f7ff ff8a 	bl	800d3c8 <BSP_SD_GetCardState>
 800d4b4:	4603      	mov	r3, r0
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d101      	bne.n	800d4be <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	e009      	b.n	800d4d2 <SD_CheckStatusWithTimeout+0x32>
  while( osKernelSysTick() - timer < timeout)
 800d4be:	f003 f8ad 	bl	801061c <osKernelSysTick>
 800d4c2:	4602      	mov	r2, r0
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	1ad3      	subs	r3, r2, r3
 800d4c8:	687a      	ldr	r2, [r7, #4]
 800d4ca:	429a      	cmp	r2, r3
 800d4cc:	d8f0      	bhi.n	800d4b0 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d4ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d4d2:	4618      	mov	r0, r3
 800d4d4:	3710      	adds	r7, #16
 800d4d6:	46bd      	mov	sp, r7
 800d4d8:	bd80      	pop	{r7, pc}
	...

0800d4dc <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d4dc:	b580      	push	{r7, lr}
 800d4de:	b082      	sub	sp, #8
 800d4e0:	af00      	add	r7, sp, #0
 800d4e2:	4603      	mov	r3, r0
 800d4e4:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d4e6:	4b0b      	ldr	r3, [pc, #44]	; (800d514 <SD_CheckStatus+0x38>)
 800d4e8:	2201      	movs	r2, #1
 800d4ea:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d4ec:	f7ff ff6c 	bl	800d3c8 <BSP_SD_GetCardState>
 800d4f0:	4603      	mov	r3, r0
 800d4f2:	2b00      	cmp	r3, #0
 800d4f4:	d107      	bne.n	800d506 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d4f6:	4b07      	ldr	r3, [pc, #28]	; (800d514 <SD_CheckStatus+0x38>)
 800d4f8:	781b      	ldrb	r3, [r3, #0]
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	f023 0301 	bic.w	r3, r3, #1
 800d500:	b2da      	uxtb	r2, r3
 800d502:	4b04      	ldr	r3, [pc, #16]	; (800d514 <SD_CheckStatus+0x38>)
 800d504:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d506:	4b03      	ldr	r3, [pc, #12]	; (800d514 <SD_CheckStatus+0x38>)
 800d508:	781b      	ldrb	r3, [r3, #0]
 800d50a:	b2db      	uxtb	r3, r3
}
 800d50c:	4618      	mov	r0, r3
 800d50e:	3708      	adds	r7, #8
 800d510:	46bd      	mov	sp, r7
 800d512:	bd80      	pop	{r7, pc}
 800d514:	2000007d 	.word	0x2000007d

0800d518 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d518:	b590      	push	{r4, r7, lr}
 800d51a:	b087      	sub	sp, #28
 800d51c:	af00      	add	r7, sp, #0
 800d51e:	4603      	mov	r3, r0
 800d520:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800d522:	4b20      	ldr	r3, [pc, #128]	; (800d5a4 <SD_initialize+0x8c>)
 800d524:	2201      	movs	r2, #1
 800d526:	701a      	strb	r2, [r3, #0]
  /*
   * check that the kernel has been started before continuing
   * as the osMessage API will fail otherwise
   */
#if (osCMSIS <= 0x20000U)
  if(osKernelRunning())
 800d528:	f003 f86c 	bl	8010604 <osKernelRunning>
 800d52c:	4603      	mov	r3, r0
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d030      	beq.n	800d594 <SD_initialize+0x7c>
  if(osKernelGetState() == osKernelRunning)
#endif
  {
#if !defined(DISABLE_SD_INIT)

    if(BSP_SD_Init() == MSD_OK)
 800d532:	f7ff feef 	bl	800d314 <BSP_SD_Init>
 800d536:	4603      	mov	r3, r0
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d107      	bne.n	800d54c <SD_initialize+0x34>
    {
      Stat = SD_CheckStatus(lun);
 800d53c:	79fb      	ldrb	r3, [r7, #7]
 800d53e:	4618      	mov	r0, r3
 800d540:	f7ff ffcc 	bl	800d4dc <SD_CheckStatus>
 800d544:	4603      	mov	r3, r0
 800d546:	461a      	mov	r2, r3
 800d548:	4b16      	ldr	r3, [pc, #88]	; (800d5a4 <SD_initialize+0x8c>)
 800d54a:	701a      	strb	r2, [r3, #0]
    /*
    * if the SD is correctly initialized, create the operation queue
    * if not already created
    */

    if (Stat != STA_NOINIT)
 800d54c:	4b15      	ldr	r3, [pc, #84]	; (800d5a4 <SD_initialize+0x8c>)
 800d54e:	781b      	ldrb	r3, [r3, #0]
 800d550:	b2db      	uxtb	r3, r3
 800d552:	2b01      	cmp	r3, #1
 800d554:	d01e      	beq.n	800d594 <SD_initialize+0x7c>
    {
      if (SDQueueID == NULL)
 800d556:	4b14      	ldr	r3, [pc, #80]	; (800d5a8 <SD_initialize+0x90>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d10e      	bne.n	800d57c <SD_initialize+0x64>
      {
 #if (osCMSIS <= 0x20000U)
      osMessageQDef(SD_Queue, QUEUE_SIZE, uint16_t);
 800d55e:	4b13      	ldr	r3, [pc, #76]	; (800d5ac <SD_initialize+0x94>)
 800d560:	f107 0408 	add.w	r4, r7, #8
 800d564:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800d566:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
      SDQueueID = osMessageCreate (osMessageQ(SD_Queue), NULL);
 800d56a:	f107 0308 	add.w	r3, r7, #8
 800d56e:	2100      	movs	r1, #0
 800d570:	4618      	mov	r0, r3
 800d572:	f003 f98c 	bl	801088e <osMessageCreate>
 800d576:	4603      	mov	r3, r0
 800d578:	4a0b      	ldr	r2, [pc, #44]	; (800d5a8 <SD_initialize+0x90>)
 800d57a:	6013      	str	r3, [r2, #0]
#else
      SDQueueID = osMessageQueueNew(QUEUE_SIZE, 2, NULL);
#endif
      }

      if (SDQueueID == NULL)
 800d57c:	4b0a      	ldr	r3, [pc, #40]	; (800d5a8 <SD_initialize+0x90>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d107      	bne.n	800d594 <SD_initialize+0x7c>
      {
        Stat |= STA_NOINIT;
 800d584:	4b07      	ldr	r3, [pc, #28]	; (800d5a4 <SD_initialize+0x8c>)
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	b2db      	uxtb	r3, r3
 800d58a:	f043 0301 	orr.w	r3, r3, #1
 800d58e:	b2da      	uxtb	r2, r3
 800d590:	4b04      	ldr	r3, [pc, #16]	; (800d5a4 <SD_initialize+0x8c>)
 800d592:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return Stat;
 800d594:	4b03      	ldr	r3, [pc, #12]	; (800d5a4 <SD_initialize+0x8c>)
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	b2db      	uxtb	r3, r3
}
 800d59a:	4618      	mov	r0, r3
 800d59c:	371c      	adds	r7, #28
 800d59e:	46bd      	mov	sp, r7
 800d5a0:	bd90      	pop	{r4, r7, pc}
 800d5a2:	bf00      	nop
 800d5a4:	2000007d 	.word	0x2000007d
 800d5a8:	20000700 	.word	0x20000700
 800d5ac:	08013df8 	.word	0x08013df8

0800d5b0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d5b0:	b580      	push	{r7, lr}
 800d5b2:	b082      	sub	sp, #8
 800d5b4:	af00      	add	r7, sp, #0
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d5ba:	79fb      	ldrb	r3, [r7, #7]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	f7ff ff8d 	bl	800d4dc <SD_CheckStatus>
 800d5c2:	4603      	mov	r3, r0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	3708      	adds	r7, #8
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b08a      	sub	sp, #40	; 0x28
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	60b9      	str	r1, [r7, #8]
 800d5d4:	607a      	str	r2, [r7, #4]
 800d5d6:	603b      	str	r3, [r7, #0]
 800d5d8:	4603      	mov	r3, r0
 800d5da:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#endif
  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d5e2:	f247 5030 	movw	r0, #30000	; 0x7530
 800d5e6:	f7ff ff5b 	bl	800d4a0 <SD_CheckStatusWithTimeout>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	2b00      	cmp	r3, #0
 800d5ee:	da02      	bge.n	800d5f6 <SD_read+0x2a>
  {
    return res;
 800d5f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d5f4:	e032      	b.n	800d65c <SD_read+0x90>
#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    /* Fast path cause destination buffer is correctly aligned */
    uint8_t ret = BSP_SD_ReadBlocks_DMA((uint32_t*)buff, (uint32_t)(sector), count);
 800d5f6:	683a      	ldr	r2, [r7, #0]
 800d5f8:	6879      	ldr	r1, [r7, #4]
 800d5fa:	68b8      	ldr	r0, [r7, #8]
 800d5fc:	f7ff feb0 	bl	800d360 <BSP_SD_ReadBlocks_DMA>
 800d600:	4603      	mov	r3, r0
 800d602:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (ret == MSD_OK) {
 800d606:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d124      	bne.n	800d658 <SD_read+0x8c>
#if (osCMSIS < 0x20000U)
    /* wait for a message from the queue or a timeout */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d60e:	4b15      	ldr	r3, [pc, #84]	; (800d664 <SD_read+0x98>)
 800d610:	6819      	ldr	r1, [r3, #0]
 800d612:	f107 0314 	add.w	r3, r7, #20
 800d616:	f247 5230 	movw	r2, #30000	; 0x7530
 800d61a:	4618      	mov	r0, r3
 800d61c:	f003 f9a0 	bl	8010960 <osMessageGet>

    if (event.status == osEventMessage)
 800d620:	697b      	ldr	r3, [r7, #20]
 800d622:	2b10      	cmp	r3, #16
 800d624:	d118      	bne.n	800d658 <SD_read+0x8c>
    {
      if (event.value.v == READ_CPLT_MSG)
 800d626:	69bb      	ldr	r3, [r7, #24]
 800d628:	2b01      	cmp	r3, #1
 800d62a:	d115      	bne.n	800d658 <SD_read+0x8c>
      {
        timer = osKernelSysTick();
 800d62c:	f002 fff6 	bl	801061c <osKernelSysTick>
 800d630:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d632:	e008      	b.n	800d646 <SD_read+0x7a>
            timer = osKernelGetTickCount();
            /* block until SDIO IP is ready or a timeout occur */
            while(osKernelGetTickCount() - timer <SD_TIMEOUT)
#endif
            {
              if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d634:	f7ff fec8 	bl	800d3c8 <BSP_SD_GetCardState>
 800d638:	4603      	mov	r3, r0
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	d103      	bne.n	800d646 <SD_read+0x7a>
              {
                res = RES_OK;
 800d63e:	2300      	movs	r3, #0
 800d640:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                adjust the address and the D-Cache size to invalidate accordingly.
                */
                alignedAddr = (uint32_t)buff & ~0x1F;
                SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
                break;
 800d644:	e008      	b.n	800d658 <SD_read+0x8c>
        while(osKernelSysTick() - timer <SD_TIMEOUT)
 800d646:	f002 ffe9 	bl	801061c <osKernelSysTick>
 800d64a:	4602      	mov	r2, r0
 800d64c:	6a3b      	ldr	r3, [r7, #32]
 800d64e:	1ad3      	subs	r3, r2, r3
 800d650:	f247 522f 	movw	r2, #29999	; 0x752f
 800d654:	4293      	cmp	r3, r2
 800d656:	d9ed      	bls.n	800d634 <SD_read+0x68>

      if ((i == count) && (ret == MSD_OK ))
        res = RES_OK;
    }
#endif
  return res;
 800d658:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d65c:	4618      	mov	r0, r3
 800d65e:	3728      	adds	r7, #40	; 0x28
 800d660:	46bd      	mov	sp, r7
 800d662:	bd80      	pop	{r7, pc}
 800d664:	20000700 	.word	0x20000700

0800d668 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b08a      	sub	sp, #40	; 0x28
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	60b9      	str	r1, [r7, #8]
 800d670:	607a      	str	r2, [r7, #4]
 800d672:	603b      	str	r3, [r7, #0]
 800d674:	4603      	mov	r3, r0
 800d676:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d678:	2301      	movs	r3, #1
 800d67a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d67e:	f247 5030 	movw	r0, #30000	; 0x7530
 800d682:	f7ff ff0d 	bl	800d4a0 <SD_CheckStatusWithTimeout>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	da02      	bge.n	800d692 <SD_write+0x2a>
  {
    return res;
 800d68c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d690:	e02e      	b.n	800d6f0 <SD_write+0x88>
  */
  alignedAddr = (uint32_t)buff & ~0x1F;
  SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

  if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d692:	683a      	ldr	r2, [r7, #0]
 800d694:	6879      	ldr	r1, [r7, #4]
 800d696:	68b8      	ldr	r0, [r7, #8]
 800d698:	f7ff fe7c 	bl	800d394 <BSP_SD_WriteBlocks_DMA>
 800d69c:	4603      	mov	r3, r0
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d124      	bne.n	800d6ec <SD_write+0x84>
                           (uint32_t) (sector),
                           count) == MSD_OK)
  {
#if (osCMSIS < 0x20000U)
    /* Get the message from the queue */
    event = osMessageGet(SDQueueID, SD_TIMEOUT);
 800d6a2:	4b15      	ldr	r3, [pc, #84]	; (800d6f8 <SD_write+0x90>)
 800d6a4:	6819      	ldr	r1, [r3, #0]
 800d6a6:	f107 0314 	add.w	r3, r7, #20
 800d6aa:	f247 5230 	movw	r2, #30000	; 0x7530
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f003 f956 	bl	8010960 <osMessageGet>

    if (event.status == osEventMessage)
 800d6b4:	697b      	ldr	r3, [r7, #20]
 800d6b6:	2b10      	cmp	r3, #16
 800d6b8:	d118      	bne.n	800d6ec <SD_write+0x84>
    {
      if (event.value.v == WRITE_CPLT_MSG)
 800d6ba:	69bb      	ldr	r3, [r7, #24]
 800d6bc:	2b02      	cmp	r3, #2
 800d6be:	d115      	bne.n	800d6ec <SD_write+0x84>
    status = osMessageQueueGet(SDQueueID, (void *)&event, NULL, SD_TIMEOUT);
    if ((status == osOK) && (event == WRITE_CPLT_MSG))
    {
#endif
 #if (osCMSIS < 0x20000U)
        timer = osKernelSysTick();
 800d6c0:	f002 ffac 	bl	801061c <osKernelSysTick>
 800d6c4:	6238      	str	r0, [r7, #32]
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d6c6:	e008      	b.n	800d6da <SD_write+0x72>
        timer = osKernelGetTickCount();
        /* block until SDIO IP is ready or a timeout occur */
        while(osKernelGetTickCount() - timer  < SD_TIMEOUT)
#endif
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d6c8:	f7ff fe7e 	bl	800d3c8 <BSP_SD_GetCardState>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d103      	bne.n	800d6da <SD_write+0x72>
          {
            res = RES_OK;
 800d6d2:	2300      	movs	r3, #0
 800d6d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            break;
 800d6d8:	e008      	b.n	800d6ec <SD_write+0x84>
        while(osKernelSysTick() - timer  < SD_TIMEOUT)
 800d6da:	f002 ff9f 	bl	801061c <osKernelSysTick>
 800d6de:	4602      	mov	r2, r0
 800d6e0:	6a3b      	ldr	r3, [r7, #32]
 800d6e2:	1ad3      	subs	r3, r2, r3
 800d6e4:	f247 522f 	movw	r2, #29999	; 0x752f
 800d6e8:	4293      	cmp	r3, r2
 800d6ea:	d9ed      	bls.n	800d6c8 <SD_write+0x60>
    }

  }
#endif

  return res;
 800d6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3728      	adds	r7, #40	; 0x28
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	bd80      	pop	{r7, pc}
 800d6f8:	20000700 	.word	0x20000700

0800d6fc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d6fc:	b580      	push	{r7, lr}
 800d6fe:	b08c      	sub	sp, #48	; 0x30
 800d700:	af00      	add	r7, sp, #0
 800d702:	4603      	mov	r3, r0
 800d704:	603a      	str	r2, [r7, #0]
 800d706:	71fb      	strb	r3, [r7, #7]
 800d708:	460b      	mov	r3, r1
 800d70a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d70c:	2301      	movs	r3, #1
 800d70e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d712:	4b25      	ldr	r3, [pc, #148]	; (800d7a8 <SD_ioctl+0xac>)
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	b2db      	uxtb	r3, r3
 800d718:	f003 0301 	and.w	r3, r3, #1
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d001      	beq.n	800d724 <SD_ioctl+0x28>
 800d720:	2303      	movs	r3, #3
 800d722:	e03c      	b.n	800d79e <SD_ioctl+0xa2>

  switch (cmd)
 800d724:	79bb      	ldrb	r3, [r7, #6]
 800d726:	2b03      	cmp	r3, #3
 800d728:	d834      	bhi.n	800d794 <SD_ioctl+0x98>
 800d72a:	a201      	add	r2, pc, #4	; (adr r2, 800d730 <SD_ioctl+0x34>)
 800d72c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d730:	0800d741 	.word	0x0800d741
 800d734:	0800d749 	.word	0x0800d749
 800d738:	0800d761 	.word	0x0800d761
 800d73c:	0800d77b 	.word	0x0800d77b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d740:	2300      	movs	r3, #0
 800d742:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d746:	e028      	b.n	800d79a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d748:	f107 030c 	add.w	r3, r7, #12
 800d74c:	4618      	mov	r0, r3
 800d74e:	f7ff fe4b 	bl	800d3e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d758:	2300      	movs	r3, #0
 800d75a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d75e:	e01c      	b.n	800d79a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d760:	f107 030c 	add.w	r3, r7, #12
 800d764:	4618      	mov	r0, r3
 800d766:	f7ff fe3f 	bl	800d3e8 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d76a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d76c:	b29a      	uxth	r2, r3
 800d76e:	683b      	ldr	r3, [r7, #0]
 800d770:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d772:	2300      	movs	r3, #0
 800d774:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d778:	e00f      	b.n	800d79a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d77a:	f107 030c 	add.w	r3, r7, #12
 800d77e:	4618      	mov	r0, r3
 800d780:	f7ff fe32 	bl	800d3e8 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d786:	0a5a      	lsrs	r2, r3, #9
 800d788:	683b      	ldr	r3, [r7, #0]
 800d78a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d78c:	2300      	movs	r3, #0
 800d78e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d792:	e002      	b.n	800d79a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d794:	2304      	movs	r3, #4
 800d796:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d79a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3730      	adds	r7, #48	; 0x30
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	2000007d 	.word	0x2000007d

0800d7ac <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, WRITE_CPLT_MSG, 0);
 800d7b0:	4b04      	ldr	r3, [pc, #16]	; (800d7c4 <BSP_SD_WriteCpltCallback+0x18>)
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	2200      	movs	r2, #0
 800d7b6:	2102      	movs	r1, #2
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	f003 f891 	bl	80108e0 <osMessagePut>
#else
   const uint16_t msg = WRITE_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d7be:	bf00      	nop
 800d7c0:	bd80      	pop	{r7, pc}
 800d7c2:	bf00      	nop
 800d7c4:	20000700 	.word	0x20000700

0800d7c8 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	af00      	add	r7, sp, #0
  /*
   * No need to add an "osKernelRunning()" check here, as the SD_initialize()
   * is always called before any SD_Read()/SD_Write() call
   */
#if (osCMSIS < 0x20000U)
   osMessagePut(SDQueueID, READ_CPLT_MSG, 0);
 800d7cc:	4b04      	ldr	r3, [pc, #16]	; (800d7e0 <BSP_SD_ReadCpltCallback+0x18>)
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	2101      	movs	r1, #1
 800d7d4:	4618      	mov	r0, r3
 800d7d6:	f003 f883 	bl	80108e0 <osMessagePut>
#else
   const uint16_t msg = READ_CPLT_MSG;
   osMessageQueuePut(SDQueueID, (const void *)&msg, NULL, 0);
#endif
}
 800d7da:	bf00      	nop
 800d7dc:	bd80      	pop	{r7, pc}
 800d7de:	bf00      	nop
 800d7e0:	20000700 	.word	0x20000700

0800d7e4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800d7e4:	b580      	push	{r7, lr}
 800d7e6:	b084      	sub	sp, #16
 800d7e8:	af00      	add	r7, sp, #0
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800d7ee:	79fb      	ldrb	r3, [r7, #7]
 800d7f0:	4a08      	ldr	r2, [pc, #32]	; (800d814 <disk_status+0x30>)
 800d7f2:	009b      	lsls	r3, r3, #2
 800d7f4:	4413      	add	r3, r2
 800d7f6:	685b      	ldr	r3, [r3, #4]
 800d7f8:	685b      	ldr	r3, [r3, #4]
 800d7fa:	79fa      	ldrb	r2, [r7, #7]
 800d7fc:	4905      	ldr	r1, [pc, #20]	; (800d814 <disk_status+0x30>)
 800d7fe:	440a      	add	r2, r1
 800d800:	7a12      	ldrb	r2, [r2, #8]
 800d802:	4610      	mov	r0, r2
 800d804:	4798      	blx	r3
 800d806:	4603      	mov	r3, r0
 800d808:	73fb      	strb	r3, [r7, #15]
  return stat;
 800d80a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d80c:	4618      	mov	r0, r3
 800d80e:	3710      	adds	r7, #16
 800d810:	46bd      	mov	sp, r7
 800d812:	bd80      	pop	{r7, pc}
 800d814:	2000072c 	.word	0x2000072c

0800d818 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	4603      	mov	r3, r0
 800d820:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800d822:	2300      	movs	r3, #0
 800d824:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800d826:	79fb      	ldrb	r3, [r7, #7]
 800d828:	4a0d      	ldr	r2, [pc, #52]	; (800d860 <disk_initialize+0x48>)
 800d82a:	5cd3      	ldrb	r3, [r2, r3]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d111      	bne.n	800d854 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800d830:	79fb      	ldrb	r3, [r7, #7]
 800d832:	4a0b      	ldr	r2, [pc, #44]	; (800d860 <disk_initialize+0x48>)
 800d834:	2101      	movs	r1, #1
 800d836:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800d838:	79fb      	ldrb	r3, [r7, #7]
 800d83a:	4a09      	ldr	r2, [pc, #36]	; (800d860 <disk_initialize+0x48>)
 800d83c:	009b      	lsls	r3, r3, #2
 800d83e:	4413      	add	r3, r2
 800d840:	685b      	ldr	r3, [r3, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	79fa      	ldrb	r2, [r7, #7]
 800d846:	4906      	ldr	r1, [pc, #24]	; (800d860 <disk_initialize+0x48>)
 800d848:	440a      	add	r2, r1
 800d84a:	7a12      	ldrb	r2, [r2, #8]
 800d84c:	4610      	mov	r0, r2
 800d84e:	4798      	blx	r3
 800d850:	4603      	mov	r3, r0
 800d852:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800d854:	7bfb      	ldrb	r3, [r7, #15]
}
 800d856:	4618      	mov	r0, r3
 800d858:	3710      	adds	r7, #16
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	2000072c 	.word	0x2000072c

0800d864 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800d864:	b590      	push	{r4, r7, lr}
 800d866:	b087      	sub	sp, #28
 800d868:	af00      	add	r7, sp, #0
 800d86a:	60b9      	str	r1, [r7, #8]
 800d86c:	607a      	str	r2, [r7, #4]
 800d86e:	603b      	str	r3, [r7, #0]
 800d870:	4603      	mov	r3, r0
 800d872:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800d874:	7bfb      	ldrb	r3, [r7, #15]
 800d876:	4a0a      	ldr	r2, [pc, #40]	; (800d8a0 <disk_read+0x3c>)
 800d878:	009b      	lsls	r3, r3, #2
 800d87a:	4413      	add	r3, r2
 800d87c:	685b      	ldr	r3, [r3, #4]
 800d87e:	689c      	ldr	r4, [r3, #8]
 800d880:	7bfb      	ldrb	r3, [r7, #15]
 800d882:	4a07      	ldr	r2, [pc, #28]	; (800d8a0 <disk_read+0x3c>)
 800d884:	4413      	add	r3, r2
 800d886:	7a18      	ldrb	r0, [r3, #8]
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	687a      	ldr	r2, [r7, #4]
 800d88c:	68b9      	ldr	r1, [r7, #8]
 800d88e:	47a0      	blx	r4
 800d890:	4603      	mov	r3, r0
 800d892:	75fb      	strb	r3, [r7, #23]
  return res;
 800d894:	7dfb      	ldrb	r3, [r7, #23]
}
 800d896:	4618      	mov	r0, r3
 800d898:	371c      	adds	r7, #28
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd90      	pop	{r4, r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	2000072c 	.word	0x2000072c

0800d8a4 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800d8a4:	b590      	push	{r4, r7, lr}
 800d8a6:	b087      	sub	sp, #28
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	60b9      	str	r1, [r7, #8]
 800d8ac:	607a      	str	r2, [r7, #4]
 800d8ae:	603b      	str	r3, [r7, #0]
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800d8b4:	7bfb      	ldrb	r3, [r7, #15]
 800d8b6:	4a0a      	ldr	r2, [pc, #40]	; (800d8e0 <disk_write+0x3c>)
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4413      	add	r3, r2
 800d8bc:	685b      	ldr	r3, [r3, #4]
 800d8be:	68dc      	ldr	r4, [r3, #12]
 800d8c0:	7bfb      	ldrb	r3, [r7, #15]
 800d8c2:	4a07      	ldr	r2, [pc, #28]	; (800d8e0 <disk_write+0x3c>)
 800d8c4:	4413      	add	r3, r2
 800d8c6:	7a18      	ldrb	r0, [r3, #8]
 800d8c8:	683b      	ldr	r3, [r7, #0]
 800d8ca:	687a      	ldr	r2, [r7, #4]
 800d8cc:	68b9      	ldr	r1, [r7, #8]
 800d8ce:	47a0      	blx	r4
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	75fb      	strb	r3, [r7, #23]
  return res;
 800d8d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	371c      	adds	r7, #28
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd90      	pop	{r4, r7, pc}
 800d8de:	bf00      	nop
 800d8e0:	2000072c 	.word	0x2000072c

0800d8e4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800d8e4:	b580      	push	{r7, lr}
 800d8e6:	b084      	sub	sp, #16
 800d8e8:	af00      	add	r7, sp, #0
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	603a      	str	r2, [r7, #0]
 800d8ee:	71fb      	strb	r3, [r7, #7]
 800d8f0:	460b      	mov	r3, r1
 800d8f2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800d8f4:	79fb      	ldrb	r3, [r7, #7]
 800d8f6:	4a09      	ldr	r2, [pc, #36]	; (800d91c <disk_ioctl+0x38>)
 800d8f8:	009b      	lsls	r3, r3, #2
 800d8fa:	4413      	add	r3, r2
 800d8fc:	685b      	ldr	r3, [r3, #4]
 800d8fe:	691b      	ldr	r3, [r3, #16]
 800d900:	79fa      	ldrb	r2, [r7, #7]
 800d902:	4906      	ldr	r1, [pc, #24]	; (800d91c <disk_ioctl+0x38>)
 800d904:	440a      	add	r2, r1
 800d906:	7a10      	ldrb	r0, [r2, #8]
 800d908:	79b9      	ldrb	r1, [r7, #6]
 800d90a:	683a      	ldr	r2, [r7, #0]
 800d90c:	4798      	blx	r3
 800d90e:	4603      	mov	r3, r0
 800d910:	73fb      	strb	r3, [r7, #15]
  return res;
 800d912:	7bfb      	ldrb	r3, [r7, #15]
}
 800d914:	4618      	mov	r0, r3
 800d916:	3710      	adds	r7, #16
 800d918:	46bd      	mov	sp, r7
 800d91a:	bd80      	pop	{r7, pc}
 800d91c:	2000072c 	.word	0x2000072c

0800d920 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800d920:	b480      	push	{r7}
 800d922:	b085      	sub	sp, #20
 800d924:	af00      	add	r7, sp, #0
 800d926:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	3301      	adds	r3, #1
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800d930:	89fb      	ldrh	r3, [r7, #14]
 800d932:	021b      	lsls	r3, r3, #8
 800d934:	b21a      	sxth	r2, r3
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	781b      	ldrb	r3, [r3, #0]
 800d93a:	b21b      	sxth	r3, r3
 800d93c:	4313      	orrs	r3, r2
 800d93e:	b21b      	sxth	r3, r3
 800d940:	81fb      	strh	r3, [r7, #14]
	return rv;
 800d942:	89fb      	ldrh	r3, [r7, #14]
}
 800d944:	4618      	mov	r0, r3
 800d946:	3714      	adds	r7, #20
 800d948:	46bd      	mov	sp, r7
 800d94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d94e:	4770      	bx	lr

0800d950 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800d950:	b480      	push	{r7}
 800d952:	b085      	sub	sp, #20
 800d954:	af00      	add	r7, sp, #0
 800d956:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	3303      	adds	r3, #3
 800d95c:	781b      	ldrb	r3, [r3, #0]
 800d95e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	021b      	lsls	r3, r3, #8
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	3202      	adds	r2, #2
 800d968:	7812      	ldrb	r2, [r2, #0]
 800d96a:	4313      	orrs	r3, r2
 800d96c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	021b      	lsls	r3, r3, #8
 800d972:	687a      	ldr	r2, [r7, #4]
 800d974:	3201      	adds	r2, #1
 800d976:	7812      	ldrb	r2, [r2, #0]
 800d978:	4313      	orrs	r3, r2
 800d97a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	021b      	lsls	r3, r3, #8
 800d980:	687a      	ldr	r2, [r7, #4]
 800d982:	7812      	ldrb	r2, [r2, #0]
 800d984:	4313      	orrs	r3, r2
 800d986:	60fb      	str	r3, [r7, #12]
	return rv;
 800d988:	68fb      	ldr	r3, [r7, #12]
}
 800d98a:	4618      	mov	r0, r3
 800d98c:	3714      	adds	r7, #20
 800d98e:	46bd      	mov	sp, r7
 800d990:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d994:	4770      	bx	lr

0800d996 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800d996:	b480      	push	{r7}
 800d998:	b083      	sub	sp, #12
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
 800d99e:	460b      	mov	r3, r1
 800d9a0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	1c5a      	adds	r2, r3, #1
 800d9a6:	607a      	str	r2, [r7, #4]
 800d9a8:	887a      	ldrh	r2, [r7, #2]
 800d9aa:	b2d2      	uxtb	r2, r2
 800d9ac:	701a      	strb	r2, [r3, #0]
 800d9ae:	887b      	ldrh	r3, [r7, #2]
 800d9b0:	0a1b      	lsrs	r3, r3, #8
 800d9b2:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	1c5a      	adds	r2, r3, #1
 800d9b8:	607a      	str	r2, [r7, #4]
 800d9ba:	887a      	ldrh	r2, [r7, #2]
 800d9bc:	b2d2      	uxtb	r2, r2
 800d9be:	701a      	strb	r2, [r3, #0]
}
 800d9c0:	bf00      	nop
 800d9c2:	370c      	adds	r7, #12
 800d9c4:	46bd      	mov	sp, r7
 800d9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ca:	4770      	bx	lr

0800d9cc <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800d9cc:	b480      	push	{r7}
 800d9ce:	b083      	sub	sp, #12
 800d9d0:	af00      	add	r7, sp, #0
 800d9d2:	6078      	str	r0, [r7, #4]
 800d9d4:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	1c5a      	adds	r2, r3, #1
 800d9da:	607a      	str	r2, [r7, #4]
 800d9dc:	683a      	ldr	r2, [r7, #0]
 800d9de:	b2d2      	uxtb	r2, r2
 800d9e0:	701a      	strb	r2, [r3, #0]
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	0a1b      	lsrs	r3, r3, #8
 800d9e6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	1c5a      	adds	r2, r3, #1
 800d9ec:	607a      	str	r2, [r7, #4]
 800d9ee:	683a      	ldr	r2, [r7, #0]
 800d9f0:	b2d2      	uxtb	r2, r2
 800d9f2:	701a      	strb	r2, [r3, #0]
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	0a1b      	lsrs	r3, r3, #8
 800d9f8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	1c5a      	adds	r2, r3, #1
 800d9fe:	607a      	str	r2, [r7, #4]
 800da00:	683a      	ldr	r2, [r7, #0]
 800da02:	b2d2      	uxtb	r2, r2
 800da04:	701a      	strb	r2, [r3, #0]
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	0a1b      	lsrs	r3, r3, #8
 800da0a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	1c5a      	adds	r2, r3, #1
 800da10:	607a      	str	r2, [r7, #4]
 800da12:	683a      	ldr	r2, [r7, #0]
 800da14:	b2d2      	uxtb	r2, r2
 800da16:	701a      	strb	r2, [r3, #0]
}
 800da18:	bf00      	nop
 800da1a:	370c      	adds	r7, #12
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800da24:	b480      	push	{r7}
 800da26:	b087      	sub	sp, #28
 800da28:	af00      	add	r7, sp, #0
 800da2a:	60f8      	str	r0, [r7, #12]
 800da2c:	60b9      	str	r1, [r7, #8]
 800da2e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d00d      	beq.n	800da5a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800da3e:	693a      	ldr	r2, [r7, #16]
 800da40:	1c53      	adds	r3, r2, #1
 800da42:	613b      	str	r3, [r7, #16]
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	1c59      	adds	r1, r3, #1
 800da48:	6179      	str	r1, [r7, #20]
 800da4a:	7812      	ldrb	r2, [r2, #0]
 800da4c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	3b01      	subs	r3, #1
 800da52:	607b      	str	r3, [r7, #4]
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d1f1      	bne.n	800da3e <mem_cpy+0x1a>
	}
}
 800da5a:	bf00      	nop
 800da5c:	371c      	adds	r7, #28
 800da5e:	46bd      	mov	sp, r7
 800da60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da64:	4770      	bx	lr

0800da66 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800da66:	b480      	push	{r7}
 800da68:	b087      	sub	sp, #28
 800da6a:	af00      	add	r7, sp, #0
 800da6c:	60f8      	str	r0, [r7, #12]
 800da6e:	60b9      	str	r1, [r7, #8]
 800da70:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800da76:	697b      	ldr	r3, [r7, #20]
 800da78:	1c5a      	adds	r2, r3, #1
 800da7a:	617a      	str	r2, [r7, #20]
 800da7c:	68ba      	ldr	r2, [r7, #8]
 800da7e:	b2d2      	uxtb	r2, r2
 800da80:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	3b01      	subs	r3, #1
 800da86:	607b      	str	r3, [r7, #4]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d1f3      	bne.n	800da76 <mem_set+0x10>
}
 800da8e:	bf00      	nop
 800da90:	bf00      	nop
 800da92:	371c      	adds	r7, #28
 800da94:	46bd      	mov	sp, r7
 800da96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9a:	4770      	bx	lr

0800da9c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800da9c:	b480      	push	{r7}
 800da9e:	b089      	sub	sp, #36	; 0x24
 800daa0:	af00      	add	r7, sp, #0
 800daa2:	60f8      	str	r0, [r7, #12]
 800daa4:	60b9      	str	r1, [r7, #8]
 800daa6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	61fb      	str	r3, [r7, #28]
 800daac:	68bb      	ldr	r3, [r7, #8]
 800daae:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800dab0:	2300      	movs	r3, #0
 800dab2:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800dab4:	69fb      	ldr	r3, [r7, #28]
 800dab6:	1c5a      	adds	r2, r3, #1
 800dab8:	61fa      	str	r2, [r7, #28]
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	4619      	mov	r1, r3
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	1c5a      	adds	r2, r3, #1
 800dac2:	61ba      	str	r2, [r7, #24]
 800dac4:	781b      	ldrb	r3, [r3, #0]
 800dac6:	1acb      	subs	r3, r1, r3
 800dac8:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	3b01      	subs	r3, #1
 800dace:	607b      	str	r3, [r7, #4]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d002      	beq.n	800dadc <mem_cmp+0x40>
 800dad6:	697b      	ldr	r3, [r7, #20]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d0eb      	beq.n	800dab4 <mem_cmp+0x18>

	return r;
 800dadc:	697b      	ldr	r3, [r7, #20]
}
 800dade:	4618      	mov	r0, r3
 800dae0:	3724      	adds	r7, #36	; 0x24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr

0800daea <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800daea:	b480      	push	{r7}
 800daec:	b083      	sub	sp, #12
 800daee:	af00      	add	r7, sp, #0
 800daf0:	6078      	str	r0, [r7, #4]
 800daf2:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800daf4:	e002      	b.n	800dafc <chk_chr+0x12>
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	3301      	adds	r3, #1
 800dafa:	607b      	str	r3, [r7, #4]
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	781b      	ldrb	r3, [r3, #0]
 800db00:	2b00      	cmp	r3, #0
 800db02:	d005      	beq.n	800db10 <chk_chr+0x26>
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	781b      	ldrb	r3, [r3, #0]
 800db08:	461a      	mov	r2, r3
 800db0a:	683b      	ldr	r3, [r7, #0]
 800db0c:	4293      	cmp	r3, r2
 800db0e:	d1f2      	bne.n	800daf6 <chk_chr+0xc>
	return *str;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	781b      	ldrb	r3, [r3, #0]
}
 800db14:	4618      	mov	r0, r3
 800db16:	370c      	adds	r7, #12
 800db18:	46bd      	mov	sp, r7
 800db1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db1e:	4770      	bx	lr

0800db20 <lock_fs>:
/*-----------------------------------------------------------------------*/
static
int lock_fs (
	FATFS* fs		/* File system object */
)
{
 800db20:	b580      	push	{r7, lr}
 800db22:	b082      	sub	sp, #8
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
	return (fs && ff_req_grant(fs->sobj)) ? 1 : 0;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d009      	beq.n	800db42 <lock_fs+0x22>
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	68db      	ldr	r3, [r3, #12]
 800db32:	4618      	mov	r0, r3
 800db34:	f002 fd15 	bl	8010562 <ff_req_grant>
 800db38:	4603      	mov	r3, r0
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d001      	beq.n	800db42 <lock_fs+0x22>
 800db3e:	2301      	movs	r3, #1
 800db40:	e000      	b.n	800db44 <lock_fs+0x24>
 800db42:	2300      	movs	r3, #0
}
 800db44:	4618      	mov	r0, r3
 800db46:	3708      	adds	r7, #8
 800db48:	46bd      	mov	sp, r7
 800db4a:	bd80      	pop	{r7, pc}

0800db4c <unlock_fs>:
static
void unlock_fs (
	FATFS* fs,		/* File system object */
	FRESULT res		/* Result code to be returned */
)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b082      	sub	sp, #8
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
 800db54:	460b      	mov	r3, r1
 800db56:	70fb      	strb	r3, [r7, #3]
	if (fs && res != FR_NOT_ENABLED && res != FR_INVALID_DRIVE && res != FR_TIMEOUT) {
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	2b00      	cmp	r3, #0
 800db5c:	d00d      	beq.n	800db7a <unlock_fs+0x2e>
 800db5e:	78fb      	ldrb	r3, [r7, #3]
 800db60:	2b0c      	cmp	r3, #12
 800db62:	d00a      	beq.n	800db7a <unlock_fs+0x2e>
 800db64:	78fb      	ldrb	r3, [r7, #3]
 800db66:	2b0b      	cmp	r3, #11
 800db68:	d007      	beq.n	800db7a <unlock_fs+0x2e>
 800db6a:	78fb      	ldrb	r3, [r7, #3]
 800db6c:	2b0f      	cmp	r3, #15
 800db6e:	d004      	beq.n	800db7a <unlock_fs+0x2e>
		ff_rel_grant(fs->sobj);
 800db70:	687b      	ldr	r3, [r7, #4]
 800db72:	68db      	ldr	r3, [r3, #12]
 800db74:	4618      	mov	r0, r3
 800db76:	f002 fd09 	bl	801058c <ff_rel_grant>
	}
}
 800db7a:	bf00      	nop
 800db7c:	3708      	adds	r7, #8
 800db7e:	46bd      	mov	sp, r7
 800db80:	bd80      	pop	{r7, pc}
	...

0800db84 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800db84:	b480      	push	{r7}
 800db86:	b085      	sub	sp, #20
 800db88:	af00      	add	r7, sp, #0
 800db8a:	6078      	str	r0, [r7, #4]
 800db8c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800db8e:	2300      	movs	r3, #0
 800db90:	60bb      	str	r3, [r7, #8]
 800db92:	68bb      	ldr	r3, [r7, #8]
 800db94:	60fb      	str	r3, [r7, #12]
 800db96:	e029      	b.n	800dbec <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800db98:	4a27      	ldr	r2, [pc, #156]	; (800dc38 <chk_lock+0xb4>)
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	011b      	lsls	r3, r3, #4
 800db9e:	4413      	add	r3, r2
 800dba0:	681b      	ldr	r3, [r3, #0]
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	d01d      	beq.n	800dbe2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dba6:	4a24      	ldr	r2, [pc, #144]	; (800dc38 <chk_lock+0xb4>)
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	011b      	lsls	r3, r3, #4
 800dbac:	4413      	add	r3, r2
 800dbae:	681a      	ldr	r2, [r3, #0]
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	681b      	ldr	r3, [r3, #0]
 800dbb4:	429a      	cmp	r2, r3
 800dbb6:	d116      	bne.n	800dbe6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800dbb8:	4a1f      	ldr	r2, [pc, #124]	; (800dc38 <chk_lock+0xb4>)
 800dbba:	68fb      	ldr	r3, [r7, #12]
 800dbbc:	011b      	lsls	r3, r3, #4
 800dbbe:	4413      	add	r3, r2
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	681a      	ldr	r2, [r3, #0]
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800dbc8:	429a      	cmp	r2, r3
 800dbca:	d10c      	bne.n	800dbe6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dbcc:	4a1a      	ldr	r2, [pc, #104]	; (800dc38 <chk_lock+0xb4>)
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	011b      	lsls	r3, r3, #4
 800dbd2:	4413      	add	r3, r2
 800dbd4:	3308      	adds	r3, #8
 800dbd6:	681a      	ldr	r2, [r3, #0]
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800dbdc:	429a      	cmp	r2, r3
 800dbde:	d102      	bne.n	800dbe6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800dbe0:	e007      	b.n	800dbf2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800dbe2:	2301      	movs	r3, #1
 800dbe4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	3301      	adds	r3, #1
 800dbea:	60fb      	str	r3, [r7, #12]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2b01      	cmp	r3, #1
 800dbf0:	d9d2      	bls.n	800db98 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	2b02      	cmp	r3, #2
 800dbf6:	d109      	bne.n	800dc0c <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d102      	bne.n	800dc04 <chk_lock+0x80>
 800dbfe:	683b      	ldr	r3, [r7, #0]
 800dc00:	2b02      	cmp	r3, #2
 800dc02:	d101      	bne.n	800dc08 <chk_lock+0x84>
 800dc04:	2300      	movs	r3, #0
 800dc06:	e010      	b.n	800dc2a <chk_lock+0xa6>
 800dc08:	2312      	movs	r3, #18
 800dc0a:	e00e      	b.n	800dc2a <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800dc0c:	683b      	ldr	r3, [r7, #0]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d108      	bne.n	800dc24 <chk_lock+0xa0>
 800dc12:	4a09      	ldr	r2, [pc, #36]	; (800dc38 <chk_lock+0xb4>)
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	011b      	lsls	r3, r3, #4
 800dc18:	4413      	add	r3, r2
 800dc1a:	330c      	adds	r3, #12
 800dc1c:	881b      	ldrh	r3, [r3, #0]
 800dc1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc22:	d101      	bne.n	800dc28 <chk_lock+0xa4>
 800dc24:	2310      	movs	r3, #16
 800dc26:	e000      	b.n	800dc2a <chk_lock+0xa6>
 800dc28:	2300      	movs	r3, #0
}
 800dc2a:	4618      	mov	r0, r3
 800dc2c:	3714      	adds	r7, #20
 800dc2e:	46bd      	mov	sp, r7
 800dc30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc34:	4770      	bx	lr
 800dc36:	bf00      	nop
 800dc38:	2000070c 	.word	0x2000070c

0800dc3c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b083      	sub	sp, #12
 800dc40:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dc42:	2300      	movs	r3, #0
 800dc44:	607b      	str	r3, [r7, #4]
 800dc46:	e002      	b.n	800dc4e <enq_lock+0x12>
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	3301      	adds	r3, #1
 800dc4c:	607b      	str	r3, [r7, #4]
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	2b01      	cmp	r3, #1
 800dc52:	d806      	bhi.n	800dc62 <enq_lock+0x26>
 800dc54:	4a09      	ldr	r2, [pc, #36]	; (800dc7c <enq_lock+0x40>)
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	011b      	lsls	r3, r3, #4
 800dc5a:	4413      	add	r3, r2
 800dc5c:	681b      	ldr	r3, [r3, #0]
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d1f2      	bne.n	800dc48 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	2b02      	cmp	r3, #2
 800dc66:	bf14      	ite	ne
 800dc68:	2301      	movne	r3, #1
 800dc6a:	2300      	moveq	r3, #0
 800dc6c:	b2db      	uxtb	r3, r3
}
 800dc6e:	4618      	mov	r0, r3
 800dc70:	370c      	adds	r7, #12
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	2000070c 	.word	0x2000070c

0800dc80 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b085      	sub	sp, #20
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	60fb      	str	r3, [r7, #12]
 800dc8e:	e01f      	b.n	800dcd0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800dc90:	4a41      	ldr	r2, [pc, #260]	; (800dd98 <inc_lock+0x118>)
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	011b      	lsls	r3, r3, #4
 800dc96:	4413      	add	r3, r2
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	429a      	cmp	r2, r3
 800dca0:	d113      	bne.n	800dcca <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800dca2:	4a3d      	ldr	r2, [pc, #244]	; (800dd98 <inc_lock+0x118>)
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	011b      	lsls	r3, r3, #4
 800dca8:	4413      	add	r3, r2
 800dcaa:	3304      	adds	r3, #4
 800dcac:	681a      	ldr	r2, [r3, #0]
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800dcb2:	429a      	cmp	r2, r3
 800dcb4:	d109      	bne.n	800dcca <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800dcb6:	4a38      	ldr	r2, [pc, #224]	; (800dd98 <inc_lock+0x118>)
 800dcb8:	68fb      	ldr	r3, [r7, #12]
 800dcba:	011b      	lsls	r3, r3, #4
 800dcbc:	4413      	add	r3, r2
 800dcbe:	3308      	adds	r3, #8
 800dcc0:	681a      	ldr	r2, [r3, #0]
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d006      	beq.n	800dcd8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800dcca:	68fb      	ldr	r3, [r7, #12]
 800dccc:	3301      	adds	r3, #1
 800dcce:	60fb      	str	r3, [r7, #12]
 800dcd0:	68fb      	ldr	r3, [r7, #12]
 800dcd2:	2b01      	cmp	r3, #1
 800dcd4:	d9dc      	bls.n	800dc90 <inc_lock+0x10>
 800dcd6:	e000      	b.n	800dcda <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800dcd8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	2b02      	cmp	r3, #2
 800dcde:	d132      	bne.n	800dd46 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800dce0:	2300      	movs	r3, #0
 800dce2:	60fb      	str	r3, [r7, #12]
 800dce4:	e002      	b.n	800dcec <inc_lock+0x6c>
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	3301      	adds	r3, #1
 800dcea:	60fb      	str	r3, [r7, #12]
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	2b01      	cmp	r3, #1
 800dcf0:	d806      	bhi.n	800dd00 <inc_lock+0x80>
 800dcf2:	4a29      	ldr	r2, [pc, #164]	; (800dd98 <inc_lock+0x118>)
 800dcf4:	68fb      	ldr	r3, [r7, #12]
 800dcf6:	011b      	lsls	r3, r3, #4
 800dcf8:	4413      	add	r3, r2
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d1f2      	bne.n	800dce6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	2b02      	cmp	r3, #2
 800dd04:	d101      	bne.n	800dd0a <inc_lock+0x8a>
 800dd06:	2300      	movs	r3, #0
 800dd08:	e040      	b.n	800dd8c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	4922      	ldr	r1, [pc, #136]	; (800dd98 <inc_lock+0x118>)
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	011b      	lsls	r3, r3, #4
 800dd14:	440b      	add	r3, r1
 800dd16:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	689a      	ldr	r2, [r3, #8]
 800dd1c:	491e      	ldr	r1, [pc, #120]	; (800dd98 <inc_lock+0x118>)
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	011b      	lsls	r3, r3, #4
 800dd22:	440b      	add	r3, r1
 800dd24:	3304      	adds	r3, #4
 800dd26:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800dd28:	687b      	ldr	r3, [r7, #4]
 800dd2a:	695a      	ldr	r2, [r3, #20]
 800dd2c:	491a      	ldr	r1, [pc, #104]	; (800dd98 <inc_lock+0x118>)
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	011b      	lsls	r3, r3, #4
 800dd32:	440b      	add	r3, r1
 800dd34:	3308      	adds	r3, #8
 800dd36:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800dd38:	4a17      	ldr	r2, [pc, #92]	; (800dd98 <inc_lock+0x118>)
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	011b      	lsls	r3, r3, #4
 800dd3e:	4413      	add	r3, r2
 800dd40:	330c      	adds	r3, #12
 800dd42:	2200      	movs	r2, #0
 800dd44:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d009      	beq.n	800dd60 <inc_lock+0xe0>
 800dd4c:	4a12      	ldr	r2, [pc, #72]	; (800dd98 <inc_lock+0x118>)
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	011b      	lsls	r3, r3, #4
 800dd52:	4413      	add	r3, r2
 800dd54:	330c      	adds	r3, #12
 800dd56:	881b      	ldrh	r3, [r3, #0]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d001      	beq.n	800dd60 <inc_lock+0xe0>
 800dd5c:	2300      	movs	r3, #0
 800dd5e:	e015      	b.n	800dd8c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800dd60:	683b      	ldr	r3, [r7, #0]
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d108      	bne.n	800dd78 <inc_lock+0xf8>
 800dd66:	4a0c      	ldr	r2, [pc, #48]	; (800dd98 <inc_lock+0x118>)
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	011b      	lsls	r3, r3, #4
 800dd6c:	4413      	add	r3, r2
 800dd6e:	330c      	adds	r3, #12
 800dd70:	881b      	ldrh	r3, [r3, #0]
 800dd72:	3301      	adds	r3, #1
 800dd74:	b29a      	uxth	r2, r3
 800dd76:	e001      	b.n	800dd7c <inc_lock+0xfc>
 800dd78:	f44f 7280 	mov.w	r2, #256	; 0x100
 800dd7c:	4906      	ldr	r1, [pc, #24]	; (800dd98 <inc_lock+0x118>)
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	011b      	lsls	r3, r3, #4
 800dd82:	440b      	add	r3, r1
 800dd84:	330c      	adds	r3, #12
 800dd86:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	3301      	adds	r3, #1
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3714      	adds	r7, #20
 800dd90:	46bd      	mov	sp, r7
 800dd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd96:	4770      	bx	lr
 800dd98:	2000070c 	.word	0x2000070c

0800dd9c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800dd9c:	b480      	push	{r7}
 800dd9e:	b085      	sub	sp, #20
 800dda0:	af00      	add	r7, sp, #0
 800dda2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	3b01      	subs	r3, #1
 800dda8:	607b      	str	r3, [r7, #4]
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2b01      	cmp	r3, #1
 800ddae:	d825      	bhi.n	800ddfc <dec_lock+0x60>
		n = Files[i].ctr;
 800ddb0:	4a17      	ldr	r2, [pc, #92]	; (800de10 <dec_lock+0x74>)
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	011b      	lsls	r3, r3, #4
 800ddb6:	4413      	add	r3, r2
 800ddb8:	330c      	adds	r3, #12
 800ddba:	881b      	ldrh	r3, [r3, #0]
 800ddbc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ddbe:	89fb      	ldrh	r3, [r7, #14]
 800ddc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ddc4:	d101      	bne.n	800ddca <dec_lock+0x2e>
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ddca:	89fb      	ldrh	r3, [r7, #14]
 800ddcc:	2b00      	cmp	r3, #0
 800ddce:	d002      	beq.n	800ddd6 <dec_lock+0x3a>
 800ddd0:	89fb      	ldrh	r3, [r7, #14]
 800ddd2:	3b01      	subs	r3, #1
 800ddd4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ddd6:	4a0e      	ldr	r2, [pc, #56]	; (800de10 <dec_lock+0x74>)
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	011b      	lsls	r3, r3, #4
 800dddc:	4413      	add	r3, r2
 800ddde:	330c      	adds	r3, #12
 800dde0:	89fa      	ldrh	r2, [r7, #14]
 800dde2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800dde4:	89fb      	ldrh	r3, [r7, #14]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d105      	bne.n	800ddf6 <dec_lock+0x5a>
 800ddea:	4a09      	ldr	r2, [pc, #36]	; (800de10 <dec_lock+0x74>)
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	011b      	lsls	r3, r3, #4
 800ddf0:	4413      	add	r3, r2
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	737b      	strb	r3, [r7, #13]
 800ddfa:	e001      	b.n	800de00 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ddfc:	2302      	movs	r3, #2
 800ddfe:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800de00:	7b7b      	ldrb	r3, [r7, #13]
}
 800de02:	4618      	mov	r0, r3
 800de04:	3714      	adds	r7, #20
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	2000070c 	.word	0x2000070c

0800de14 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800de14:	b480      	push	{r7}
 800de16:	b085      	sub	sp, #20
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800de1c:	2300      	movs	r3, #0
 800de1e:	60fb      	str	r3, [r7, #12]
 800de20:	e010      	b.n	800de44 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800de22:	4a0d      	ldr	r2, [pc, #52]	; (800de58 <clear_lock+0x44>)
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	011b      	lsls	r3, r3, #4
 800de28:	4413      	add	r3, r2
 800de2a:	681b      	ldr	r3, [r3, #0]
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	429a      	cmp	r2, r3
 800de30:	d105      	bne.n	800de3e <clear_lock+0x2a>
 800de32:	4a09      	ldr	r2, [pc, #36]	; (800de58 <clear_lock+0x44>)
 800de34:	68fb      	ldr	r3, [r7, #12]
 800de36:	011b      	lsls	r3, r3, #4
 800de38:	4413      	add	r3, r2
 800de3a:	2200      	movs	r2, #0
 800de3c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	3301      	adds	r3, #1
 800de42:	60fb      	str	r3, [r7, #12]
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2b01      	cmp	r3, #1
 800de48:	d9eb      	bls.n	800de22 <clear_lock+0xe>
	}
}
 800de4a:	bf00      	nop
 800de4c:	bf00      	nop
 800de4e:	3714      	adds	r7, #20
 800de50:	46bd      	mov	sp, r7
 800de52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de56:	4770      	bx	lr
 800de58:	2000070c 	.word	0x2000070c

0800de5c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b086      	sub	sp, #24
 800de60:	af00      	add	r7, sp, #0
 800de62:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800de64:	2300      	movs	r3, #0
 800de66:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	78db      	ldrb	r3, [r3, #3]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d034      	beq.n	800deda <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800de70:	687b      	ldr	r3, [r7, #4]
 800de72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800de74:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	7858      	ldrb	r0, [r3, #1]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800de80:	2301      	movs	r3, #1
 800de82:	697a      	ldr	r2, [r7, #20]
 800de84:	f7ff fd0e 	bl	800d8a4 <disk_write>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d002      	beq.n	800de94 <sync_window+0x38>
			res = FR_DISK_ERR;
 800de8e:	2301      	movs	r3, #1
 800de90:	73fb      	strb	r3, [r7, #15]
 800de92:	e022      	b.n	800deda <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800de94:	687b      	ldr	r3, [r7, #4]
 800de96:	2200      	movs	r2, #0
 800de98:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800de9e:	697a      	ldr	r2, [r7, #20]
 800dea0:	1ad2      	subs	r2, r2, r3
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	69db      	ldr	r3, [r3, #28]
 800dea6:	429a      	cmp	r2, r3
 800dea8:	d217      	bcs.n	800deda <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	789b      	ldrb	r3, [r3, #2]
 800deae:	613b      	str	r3, [r7, #16]
 800deb0:	e010      	b.n	800ded4 <sync_window+0x78>
					wsect += fs->fsize;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	69db      	ldr	r3, [r3, #28]
 800deb6:	697a      	ldr	r2, [r7, #20]
 800deb8:	4413      	add	r3, r2
 800deba:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	7858      	ldrb	r0, [r3, #1]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dec6:	2301      	movs	r3, #1
 800dec8:	697a      	ldr	r2, [r7, #20]
 800deca:	f7ff fceb 	bl	800d8a4 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800dece:	693b      	ldr	r3, [r7, #16]
 800ded0:	3b01      	subs	r3, #1
 800ded2:	613b      	str	r3, [r7, #16]
 800ded4:	693b      	ldr	r3, [r7, #16]
 800ded6:	2b01      	cmp	r3, #1
 800ded8:	d8eb      	bhi.n	800deb2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800deda:	7bfb      	ldrb	r3, [r7, #15]
}
 800dedc:	4618      	mov	r0, r3
 800dede:	3718      	adds	r7, #24
 800dee0:	46bd      	mov	sp, r7
 800dee2:	bd80      	pop	{r7, pc}

0800dee4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b084      	sub	sp, #16
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
 800deec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800deee:	2300      	movs	r3, #0
 800def0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800def6:	683a      	ldr	r2, [r7, #0]
 800def8:	429a      	cmp	r2, r3
 800defa:	d01b      	beq.n	800df34 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800defc:	6878      	ldr	r0, [r7, #4]
 800defe:	f7ff ffad 	bl	800de5c <sync_window>
 800df02:	4603      	mov	r3, r0
 800df04:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800df06:	7bfb      	ldrb	r3, [r7, #15]
 800df08:	2b00      	cmp	r3, #0
 800df0a:	d113      	bne.n	800df34 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	7858      	ldrb	r0, [r3, #1]
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800df16:	2301      	movs	r3, #1
 800df18:	683a      	ldr	r2, [r7, #0]
 800df1a:	f7ff fca3 	bl	800d864 <disk_read>
 800df1e:	4603      	mov	r3, r0
 800df20:	2b00      	cmp	r3, #0
 800df22:	d004      	beq.n	800df2e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800df24:	f04f 33ff 	mov.w	r3, #4294967295
 800df28:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800df2a:	2301      	movs	r3, #1
 800df2c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	683a      	ldr	r2, [r7, #0]
 800df32:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800df34:	7bfb      	ldrb	r3, [r7, #15]
}
 800df36:	4618      	mov	r0, r3
 800df38:	3710      	adds	r7, #16
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
	...

0800df40 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f7ff ff87 	bl	800de5c <sync_window>
 800df4e:	4603      	mov	r3, r0
 800df50:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800df52:	7bfb      	ldrb	r3, [r7, #15]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d158      	bne.n	800e00a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	781b      	ldrb	r3, [r3, #0]
 800df5c:	2b03      	cmp	r3, #3
 800df5e:	d148      	bne.n	800dff2 <sync_fs+0xb2>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	791b      	ldrb	r3, [r3, #4]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d144      	bne.n	800dff2 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	3334      	adds	r3, #52	; 0x34
 800df6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df70:	2100      	movs	r1, #0
 800df72:	4618      	mov	r0, r3
 800df74:	f7ff fd77 	bl	800da66 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	3334      	adds	r3, #52	; 0x34
 800df7c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800df80:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800df84:	4618      	mov	r0, r3
 800df86:	f7ff fd06 	bl	800d996 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	3334      	adds	r3, #52	; 0x34
 800df8e:	4921      	ldr	r1, [pc, #132]	; (800e014 <sync_fs+0xd4>)
 800df90:	4618      	mov	r0, r3
 800df92:	f7ff fd1b 	bl	800d9cc <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	3334      	adds	r3, #52	; 0x34
 800df9a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800df9e:	491e      	ldr	r1, [pc, #120]	; (800e018 <sync_fs+0xd8>)
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7ff fd13 	bl	800d9cc <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	3334      	adds	r3, #52	; 0x34
 800dfaa:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	695b      	ldr	r3, [r3, #20]
 800dfb2:	4619      	mov	r1, r3
 800dfb4:	4610      	mov	r0, r2
 800dfb6:	f7ff fd09 	bl	800d9cc <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	3334      	adds	r3, #52	; 0x34
 800dfbe:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	691b      	ldr	r3, [r3, #16]
 800dfc6:	4619      	mov	r1, r3
 800dfc8:	4610      	mov	r0, r2
 800dfca:	f7ff fcff 	bl	800d9cc <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	6a1b      	ldr	r3, [r3, #32]
 800dfd2:	1c5a      	adds	r2, r3, #1
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	7858      	ldrb	r0, [r3, #1]
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dfe6:	2301      	movs	r3, #1
 800dfe8:	f7ff fc5c 	bl	800d8a4 <disk_write>
			fs->fsi_flag = 0;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	2200      	movs	r2, #0
 800dff0:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	785b      	ldrb	r3, [r3, #1]
 800dff6:	2200      	movs	r2, #0
 800dff8:	2100      	movs	r1, #0
 800dffa:	4618      	mov	r0, r3
 800dffc:	f7ff fc72 	bl	800d8e4 <disk_ioctl>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	d001      	beq.n	800e00a <sync_fs+0xca>
 800e006:	2301      	movs	r3, #1
 800e008:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e00a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e00c:	4618      	mov	r0, r3
 800e00e:	3710      	adds	r7, #16
 800e010:	46bd      	mov	sp, r7
 800e012:	bd80      	pop	{r7, pc}
 800e014:	41615252 	.word	0x41615252
 800e018:	61417272 	.word	0x61417272

0800e01c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e01c:	b480      	push	{r7}
 800e01e:	b083      	sub	sp, #12
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	3b02      	subs	r3, #2
 800e02a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	699b      	ldr	r3, [r3, #24]
 800e030:	3b02      	subs	r3, #2
 800e032:	683a      	ldr	r2, [r7, #0]
 800e034:	429a      	cmp	r2, r3
 800e036:	d301      	bcc.n	800e03c <clust2sect+0x20>
 800e038:	2300      	movs	r3, #0
 800e03a:	e008      	b.n	800e04e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	895b      	ldrh	r3, [r3, #10]
 800e040:	461a      	mov	r2, r3
 800e042:	683b      	ldr	r3, [r7, #0]
 800e044:	fb03 f202 	mul.w	r2, r3, r2
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e04c:	4413      	add	r3, r2
}
 800e04e:	4618      	mov	r0, r3
 800e050:	370c      	adds	r7, #12
 800e052:	46bd      	mov	sp, r7
 800e054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e058:	4770      	bx	lr

0800e05a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e05a:	b580      	push	{r7, lr}
 800e05c:	b086      	sub	sp, #24
 800e05e:	af00      	add	r7, sp, #0
 800e060:	6078      	str	r0, [r7, #4]
 800e062:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e06a:	683b      	ldr	r3, [r7, #0]
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d904      	bls.n	800e07a <get_fat+0x20>
 800e070:	693b      	ldr	r3, [r7, #16]
 800e072:	699b      	ldr	r3, [r3, #24]
 800e074:	683a      	ldr	r2, [r7, #0]
 800e076:	429a      	cmp	r2, r3
 800e078:	d302      	bcc.n	800e080 <get_fat+0x26>
		val = 1;	/* Internal error */
 800e07a:	2301      	movs	r3, #1
 800e07c:	617b      	str	r3, [r7, #20]
 800e07e:	e08f      	b.n	800e1a0 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e080:	f04f 33ff 	mov.w	r3, #4294967295
 800e084:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e086:	693b      	ldr	r3, [r7, #16]
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	2b03      	cmp	r3, #3
 800e08c:	d062      	beq.n	800e154 <get_fat+0xfa>
 800e08e:	2b03      	cmp	r3, #3
 800e090:	dc7c      	bgt.n	800e18c <get_fat+0x132>
 800e092:	2b01      	cmp	r3, #1
 800e094:	d002      	beq.n	800e09c <get_fat+0x42>
 800e096:	2b02      	cmp	r3, #2
 800e098:	d042      	beq.n	800e120 <get_fat+0xc6>
 800e09a:	e077      	b.n	800e18c <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e09c:	683b      	ldr	r3, [r7, #0]
 800e09e:	60fb      	str	r3, [r7, #12]
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	085b      	lsrs	r3, r3, #1
 800e0a4:	68fa      	ldr	r2, [r7, #12]
 800e0a6:	4413      	add	r3, r2
 800e0a8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	0a5b      	lsrs	r3, r3, #9
 800e0b2:	4413      	add	r3, r2
 800e0b4:	4619      	mov	r1, r3
 800e0b6:	6938      	ldr	r0, [r7, #16]
 800e0b8:	f7ff ff14 	bl	800dee4 <move_window>
 800e0bc:	4603      	mov	r3, r0
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d167      	bne.n	800e192 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	1c5a      	adds	r2, r3, #1
 800e0c6:	60fa      	str	r2, [r7, #12]
 800e0c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0cc:	693a      	ldr	r2, [r7, #16]
 800e0ce:	4413      	add	r3, r2
 800e0d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e0d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e0da:	68fb      	ldr	r3, [r7, #12]
 800e0dc:	0a5b      	lsrs	r3, r3, #9
 800e0de:	4413      	add	r3, r2
 800e0e0:	4619      	mov	r1, r3
 800e0e2:	6938      	ldr	r0, [r7, #16]
 800e0e4:	f7ff fefe 	bl	800dee4 <move_window>
 800e0e8:	4603      	mov	r3, r0
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d153      	bne.n	800e196 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e0ee:	68fb      	ldr	r3, [r7, #12]
 800e0f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e0f4:	693a      	ldr	r2, [r7, #16]
 800e0f6:	4413      	add	r3, r2
 800e0f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e0fc:	021b      	lsls	r3, r3, #8
 800e0fe:	461a      	mov	r2, r3
 800e100:	68bb      	ldr	r3, [r7, #8]
 800e102:	4313      	orrs	r3, r2
 800e104:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e106:	683b      	ldr	r3, [r7, #0]
 800e108:	f003 0301 	and.w	r3, r3, #1
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d002      	beq.n	800e116 <get_fat+0xbc>
 800e110:	68bb      	ldr	r3, [r7, #8]
 800e112:	091b      	lsrs	r3, r3, #4
 800e114:	e002      	b.n	800e11c <get_fat+0xc2>
 800e116:	68bb      	ldr	r3, [r7, #8]
 800e118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e11c:	617b      	str	r3, [r7, #20]
			break;
 800e11e:	e03f      	b.n	800e1a0 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e124:	683b      	ldr	r3, [r7, #0]
 800e126:	0a1b      	lsrs	r3, r3, #8
 800e128:	4413      	add	r3, r2
 800e12a:	4619      	mov	r1, r3
 800e12c:	6938      	ldr	r0, [r7, #16]
 800e12e:	f7ff fed9 	bl	800dee4 <move_window>
 800e132:	4603      	mov	r3, r0
 800e134:	2b00      	cmp	r3, #0
 800e136:	d130      	bne.n	800e19a <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e13e:	683b      	ldr	r3, [r7, #0]
 800e140:	005b      	lsls	r3, r3, #1
 800e142:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e146:	4413      	add	r3, r2
 800e148:	4618      	mov	r0, r3
 800e14a:	f7ff fbe9 	bl	800d920 <ld_word>
 800e14e:	4603      	mov	r3, r0
 800e150:	617b      	str	r3, [r7, #20]
			break;
 800e152:	e025      	b.n	800e1a0 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e158:	683b      	ldr	r3, [r7, #0]
 800e15a:	09db      	lsrs	r3, r3, #7
 800e15c:	4413      	add	r3, r2
 800e15e:	4619      	mov	r1, r3
 800e160:	6938      	ldr	r0, [r7, #16]
 800e162:	f7ff febf 	bl	800dee4 <move_window>
 800e166:	4603      	mov	r3, r0
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d118      	bne.n	800e19e <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e16c:	693b      	ldr	r3, [r7, #16]
 800e16e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e172:	683b      	ldr	r3, [r7, #0]
 800e174:	009b      	lsls	r3, r3, #2
 800e176:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e17a:	4413      	add	r3, r2
 800e17c:	4618      	mov	r0, r3
 800e17e:	f7ff fbe7 	bl	800d950 <ld_dword>
 800e182:	4603      	mov	r3, r0
 800e184:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e188:	617b      	str	r3, [r7, #20]
			break;
 800e18a:	e009      	b.n	800e1a0 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e18c:	2301      	movs	r3, #1
 800e18e:	617b      	str	r3, [r7, #20]
 800e190:	e006      	b.n	800e1a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e192:	bf00      	nop
 800e194:	e004      	b.n	800e1a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e196:	bf00      	nop
 800e198:	e002      	b.n	800e1a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e19a:	bf00      	nop
 800e19c:	e000      	b.n	800e1a0 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e19e:	bf00      	nop
		}
	}

	return val;
 800e1a0:	697b      	ldr	r3, [r7, #20]
}
 800e1a2:	4618      	mov	r0, r3
 800e1a4:	3718      	adds	r7, #24
 800e1a6:	46bd      	mov	sp, r7
 800e1a8:	bd80      	pop	{r7, pc}

0800e1aa <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e1aa:	b590      	push	{r4, r7, lr}
 800e1ac:	b089      	sub	sp, #36	; 0x24
 800e1ae:	af00      	add	r7, sp, #0
 800e1b0:	60f8      	str	r0, [r7, #12]
 800e1b2:	60b9      	str	r1, [r7, #8]
 800e1b4:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e1b6:	2302      	movs	r3, #2
 800e1b8:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e1ba:	68bb      	ldr	r3, [r7, #8]
 800e1bc:	2b01      	cmp	r3, #1
 800e1be:	f240 80d2 	bls.w	800e366 <put_fat+0x1bc>
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	699b      	ldr	r3, [r3, #24]
 800e1c6:	68ba      	ldr	r2, [r7, #8]
 800e1c8:	429a      	cmp	r2, r3
 800e1ca:	f080 80cc 	bcs.w	800e366 <put_fat+0x1bc>
		switch (fs->fs_type) {
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	781b      	ldrb	r3, [r3, #0]
 800e1d2:	2b03      	cmp	r3, #3
 800e1d4:	f000 8096 	beq.w	800e304 <put_fat+0x15a>
 800e1d8:	2b03      	cmp	r3, #3
 800e1da:	f300 80cd 	bgt.w	800e378 <put_fat+0x1ce>
 800e1de:	2b01      	cmp	r3, #1
 800e1e0:	d002      	beq.n	800e1e8 <put_fat+0x3e>
 800e1e2:	2b02      	cmp	r3, #2
 800e1e4:	d06e      	beq.n	800e2c4 <put_fat+0x11a>
 800e1e6:	e0c7      	b.n	800e378 <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e1e8:	68bb      	ldr	r3, [r7, #8]
 800e1ea:	61bb      	str	r3, [r7, #24]
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	085b      	lsrs	r3, r3, #1
 800e1f0:	69ba      	ldr	r2, [r7, #24]
 800e1f2:	4413      	add	r3, r2
 800e1f4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e1f6:	68fb      	ldr	r3, [r7, #12]
 800e1f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e1fa:	69bb      	ldr	r3, [r7, #24]
 800e1fc:	0a5b      	lsrs	r3, r3, #9
 800e1fe:	4413      	add	r3, r2
 800e200:	4619      	mov	r1, r3
 800e202:	68f8      	ldr	r0, [r7, #12]
 800e204:	f7ff fe6e 	bl	800dee4 <move_window>
 800e208:	4603      	mov	r3, r0
 800e20a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e20c:	7ffb      	ldrb	r3, [r7, #31]
 800e20e:	2b00      	cmp	r3, #0
 800e210:	f040 80ab 	bne.w	800e36a <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	1c59      	adds	r1, r3, #1
 800e21e:	61b9      	str	r1, [r7, #24]
 800e220:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e224:	4413      	add	r3, r2
 800e226:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e228:	68bb      	ldr	r3, [r7, #8]
 800e22a:	f003 0301 	and.w	r3, r3, #1
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d00d      	beq.n	800e24e <put_fat+0xa4>
 800e232:	697b      	ldr	r3, [r7, #20]
 800e234:	781b      	ldrb	r3, [r3, #0]
 800e236:	b25b      	sxtb	r3, r3
 800e238:	f003 030f 	and.w	r3, r3, #15
 800e23c:	b25a      	sxtb	r2, r3
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	b2db      	uxtb	r3, r3
 800e242:	011b      	lsls	r3, r3, #4
 800e244:	b25b      	sxtb	r3, r3
 800e246:	4313      	orrs	r3, r2
 800e248:	b25b      	sxtb	r3, r3
 800e24a:	b2db      	uxtb	r3, r3
 800e24c:	e001      	b.n	800e252 <put_fat+0xa8>
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	b2db      	uxtb	r3, r3
 800e252:	697a      	ldr	r2, [r7, #20]
 800e254:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2201      	movs	r2, #1
 800e25a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e260:	69bb      	ldr	r3, [r7, #24]
 800e262:	0a5b      	lsrs	r3, r3, #9
 800e264:	4413      	add	r3, r2
 800e266:	4619      	mov	r1, r3
 800e268:	68f8      	ldr	r0, [r7, #12]
 800e26a:	f7ff fe3b 	bl	800dee4 <move_window>
 800e26e:	4603      	mov	r3, r0
 800e270:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e272:	7ffb      	ldrb	r3, [r7, #31]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d17a      	bne.n	800e36e <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e27e:	69bb      	ldr	r3, [r7, #24]
 800e280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e284:	4413      	add	r3, r2
 800e286:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e288:	68bb      	ldr	r3, [r7, #8]
 800e28a:	f003 0301 	and.w	r3, r3, #1
 800e28e:	2b00      	cmp	r3, #0
 800e290:	d003      	beq.n	800e29a <put_fat+0xf0>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	091b      	lsrs	r3, r3, #4
 800e296:	b2db      	uxtb	r3, r3
 800e298:	e00e      	b.n	800e2b8 <put_fat+0x10e>
 800e29a:	697b      	ldr	r3, [r7, #20]
 800e29c:	781b      	ldrb	r3, [r3, #0]
 800e29e:	b25b      	sxtb	r3, r3
 800e2a0:	f023 030f 	bic.w	r3, r3, #15
 800e2a4:	b25a      	sxtb	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	0a1b      	lsrs	r3, r3, #8
 800e2aa:	b25b      	sxtb	r3, r3
 800e2ac:	f003 030f 	and.w	r3, r3, #15
 800e2b0:	b25b      	sxtb	r3, r3
 800e2b2:	4313      	orrs	r3, r2
 800e2b4:	b25b      	sxtb	r3, r3
 800e2b6:	b2db      	uxtb	r3, r3
 800e2b8:	697a      	ldr	r2, [r7, #20]
 800e2ba:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	2201      	movs	r2, #1
 800e2c0:	70da      	strb	r2, [r3, #3]
			break;
 800e2c2:	e059      	b.n	800e378 <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e2c4:	68fb      	ldr	r3, [r7, #12]
 800e2c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	0a1b      	lsrs	r3, r3, #8
 800e2cc:	4413      	add	r3, r2
 800e2ce:	4619      	mov	r1, r3
 800e2d0:	68f8      	ldr	r0, [r7, #12]
 800e2d2:	f7ff fe07 	bl	800dee4 <move_window>
 800e2d6:	4603      	mov	r3, r0
 800e2d8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e2da:	7ffb      	ldrb	r3, [r7, #31]
 800e2dc:	2b00      	cmp	r3, #0
 800e2de:	d148      	bne.n	800e372 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e2e6:	68bb      	ldr	r3, [r7, #8]
 800e2e8:	005b      	lsls	r3, r3, #1
 800e2ea:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e2ee:	4413      	add	r3, r2
 800e2f0:	687a      	ldr	r2, [r7, #4]
 800e2f2:	b292      	uxth	r2, r2
 800e2f4:	4611      	mov	r1, r2
 800e2f6:	4618      	mov	r0, r3
 800e2f8:	f7ff fb4d 	bl	800d996 <st_word>
			fs->wflag = 1;
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	2201      	movs	r2, #1
 800e300:	70da      	strb	r2, [r3, #3]
			break;
 800e302:	e039      	b.n	800e378 <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e304:	68fb      	ldr	r3, [r7, #12]
 800e306:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e308:	68bb      	ldr	r3, [r7, #8]
 800e30a:	09db      	lsrs	r3, r3, #7
 800e30c:	4413      	add	r3, r2
 800e30e:	4619      	mov	r1, r3
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	f7ff fde7 	bl	800dee4 <move_window>
 800e316:	4603      	mov	r3, r0
 800e318:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e31a:	7ffb      	ldrb	r3, [r7, #31]
 800e31c:	2b00      	cmp	r3, #0
 800e31e:	d12a      	bne.n	800e376 <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e32c:	68bb      	ldr	r3, [r7, #8]
 800e32e:	009b      	lsls	r3, r3, #2
 800e330:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e334:	4413      	add	r3, r2
 800e336:	4618      	mov	r0, r3
 800e338:	f7ff fb0a 	bl	800d950 <ld_dword>
 800e33c:	4603      	mov	r3, r0
 800e33e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800e342:	4323      	orrs	r3, r4
 800e344:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800e346:	68fb      	ldr	r3, [r7, #12]
 800e348:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	009b      	lsls	r3, r3, #2
 800e350:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e354:	4413      	add	r3, r2
 800e356:	6879      	ldr	r1, [r7, #4]
 800e358:	4618      	mov	r0, r3
 800e35a:	f7ff fb37 	bl	800d9cc <st_dword>
			fs->wflag = 1;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	2201      	movs	r2, #1
 800e362:	70da      	strb	r2, [r3, #3]
			break;
 800e364:	e008      	b.n	800e378 <put_fat+0x1ce>
		}
	}
 800e366:	bf00      	nop
 800e368:	e006      	b.n	800e378 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e36a:	bf00      	nop
 800e36c:	e004      	b.n	800e378 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e36e:	bf00      	nop
 800e370:	e002      	b.n	800e378 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e372:	bf00      	nop
 800e374:	e000      	b.n	800e378 <put_fat+0x1ce>
			if (res != FR_OK) break;
 800e376:	bf00      	nop
	return res;
 800e378:	7ffb      	ldrb	r3, [r7, #31]
}
 800e37a:	4618      	mov	r0, r3
 800e37c:	3724      	adds	r7, #36	; 0x24
 800e37e:	46bd      	mov	sp, r7
 800e380:	bd90      	pop	{r4, r7, pc}

0800e382 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800e382:	b580      	push	{r7, lr}
 800e384:	b088      	sub	sp, #32
 800e386:	af00      	add	r7, sp, #0
 800e388:	60f8      	str	r0, [r7, #12]
 800e38a:	60b9      	str	r1, [r7, #8]
 800e38c:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800e38e:	2300      	movs	r3, #0
 800e390:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800e398:	68bb      	ldr	r3, [r7, #8]
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d904      	bls.n	800e3a8 <remove_chain+0x26>
 800e39e:	69bb      	ldr	r3, [r7, #24]
 800e3a0:	699b      	ldr	r3, [r3, #24]
 800e3a2:	68ba      	ldr	r2, [r7, #8]
 800e3a4:	429a      	cmp	r2, r3
 800e3a6:	d301      	bcc.n	800e3ac <remove_chain+0x2a>
 800e3a8:	2302      	movs	r3, #2
 800e3aa:	e04b      	b.n	800e444 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00c      	beq.n	800e3cc <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800e3b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e3b6:	6879      	ldr	r1, [r7, #4]
 800e3b8:	69b8      	ldr	r0, [r7, #24]
 800e3ba:	f7ff fef6 	bl	800e1aa <put_fat>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800e3c2:	7ffb      	ldrb	r3, [r7, #31]
 800e3c4:	2b00      	cmp	r3, #0
 800e3c6:	d001      	beq.n	800e3cc <remove_chain+0x4a>
 800e3c8:	7ffb      	ldrb	r3, [r7, #31]
 800e3ca:	e03b      	b.n	800e444 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800e3cc:	68b9      	ldr	r1, [r7, #8]
 800e3ce:	68f8      	ldr	r0, [r7, #12]
 800e3d0:	f7ff fe43 	bl	800e05a <get_fat>
 800e3d4:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800e3d6:	697b      	ldr	r3, [r7, #20]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d031      	beq.n	800e440 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	2b01      	cmp	r3, #1
 800e3e0:	d101      	bne.n	800e3e6 <remove_chain+0x64>
 800e3e2:	2302      	movs	r3, #2
 800e3e4:	e02e      	b.n	800e444 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800e3e6:	697b      	ldr	r3, [r7, #20]
 800e3e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e3ec:	d101      	bne.n	800e3f2 <remove_chain+0x70>
 800e3ee:	2301      	movs	r3, #1
 800e3f0:	e028      	b.n	800e444 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	68b9      	ldr	r1, [r7, #8]
 800e3f6:	69b8      	ldr	r0, [r7, #24]
 800e3f8:	f7ff fed7 	bl	800e1aa <put_fat>
 800e3fc:	4603      	mov	r3, r0
 800e3fe:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800e400:	7ffb      	ldrb	r3, [r7, #31]
 800e402:	2b00      	cmp	r3, #0
 800e404:	d001      	beq.n	800e40a <remove_chain+0x88>
 800e406:	7ffb      	ldrb	r3, [r7, #31]
 800e408:	e01c      	b.n	800e444 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800e40a:	69bb      	ldr	r3, [r7, #24]
 800e40c:	695a      	ldr	r2, [r3, #20]
 800e40e:	69bb      	ldr	r3, [r7, #24]
 800e410:	699b      	ldr	r3, [r3, #24]
 800e412:	3b02      	subs	r3, #2
 800e414:	429a      	cmp	r2, r3
 800e416:	d20b      	bcs.n	800e430 <remove_chain+0xae>
			fs->free_clst++;
 800e418:	69bb      	ldr	r3, [r7, #24]
 800e41a:	695b      	ldr	r3, [r3, #20]
 800e41c:	1c5a      	adds	r2, r3, #1
 800e41e:	69bb      	ldr	r3, [r7, #24]
 800e420:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800e422:	69bb      	ldr	r3, [r7, #24]
 800e424:	791b      	ldrb	r3, [r3, #4]
 800e426:	f043 0301 	orr.w	r3, r3, #1
 800e42a:	b2da      	uxtb	r2, r3
 800e42c:	69bb      	ldr	r3, [r7, #24]
 800e42e:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800e430:	697b      	ldr	r3, [r7, #20]
 800e432:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800e434:	69bb      	ldr	r3, [r7, #24]
 800e436:	699b      	ldr	r3, [r3, #24]
 800e438:	68ba      	ldr	r2, [r7, #8]
 800e43a:	429a      	cmp	r2, r3
 800e43c:	d3c6      	bcc.n	800e3cc <remove_chain+0x4a>
 800e43e:	e000      	b.n	800e442 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800e440:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3720      	adds	r7, #32
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}

0800e44c <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b088      	sub	sp, #32
 800e450:	af00      	add	r7, sp, #0
 800e452:	6078      	str	r0, [r7, #4]
 800e454:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d10d      	bne.n	800e47e <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800e462:	693b      	ldr	r3, [r7, #16]
 800e464:	691b      	ldr	r3, [r3, #16]
 800e466:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800e468:	69bb      	ldr	r3, [r7, #24]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d004      	beq.n	800e478 <create_chain+0x2c>
 800e46e:	693b      	ldr	r3, [r7, #16]
 800e470:	699b      	ldr	r3, [r3, #24]
 800e472:	69ba      	ldr	r2, [r7, #24]
 800e474:	429a      	cmp	r2, r3
 800e476:	d31b      	bcc.n	800e4b0 <create_chain+0x64>
 800e478:	2301      	movs	r3, #1
 800e47a:	61bb      	str	r3, [r7, #24]
 800e47c:	e018      	b.n	800e4b0 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800e47e:	6839      	ldr	r1, [r7, #0]
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f7ff fdea 	bl	800e05a <get_fat>
 800e486:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2b01      	cmp	r3, #1
 800e48c:	d801      	bhi.n	800e492 <create_chain+0x46>
 800e48e:	2301      	movs	r3, #1
 800e490:	e070      	b.n	800e574 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e498:	d101      	bne.n	800e49e <create_chain+0x52>
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	e06a      	b.n	800e574 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800e49e:	693b      	ldr	r3, [r7, #16]
 800e4a0:	699b      	ldr	r3, [r3, #24]
 800e4a2:	68fa      	ldr	r2, [r7, #12]
 800e4a4:	429a      	cmp	r2, r3
 800e4a6:	d201      	bcs.n	800e4ac <create_chain+0x60>
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	e063      	b.n	800e574 <create_chain+0x128>
		scl = clst;
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800e4b4:	69fb      	ldr	r3, [r7, #28]
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800e4ba:	693b      	ldr	r3, [r7, #16]
 800e4bc:	699b      	ldr	r3, [r3, #24]
 800e4be:	69fa      	ldr	r2, [r7, #28]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d307      	bcc.n	800e4d4 <create_chain+0x88>
				ncl = 2;
 800e4c4:	2302      	movs	r3, #2
 800e4c6:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800e4c8:	69fa      	ldr	r2, [r7, #28]
 800e4ca:	69bb      	ldr	r3, [r7, #24]
 800e4cc:	429a      	cmp	r2, r3
 800e4ce:	d901      	bls.n	800e4d4 <create_chain+0x88>
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	e04f      	b.n	800e574 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800e4d4:	69f9      	ldr	r1, [r7, #28]
 800e4d6:	6878      	ldr	r0, [r7, #4]
 800e4d8:	f7ff fdbf 	bl	800e05a <get_fat>
 800e4dc:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	2b00      	cmp	r3, #0
 800e4e2:	d00e      	beq.n	800e502 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800e4e4:	68fb      	ldr	r3, [r7, #12]
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d003      	beq.n	800e4f2 <create_chain+0xa6>
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e4f0:	d101      	bne.n	800e4f6 <create_chain+0xaa>
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	e03e      	b.n	800e574 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800e4f6:	69fa      	ldr	r2, [r7, #28]
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	d1da      	bne.n	800e4b4 <create_chain+0x68>
 800e4fe:	2300      	movs	r3, #0
 800e500:	e038      	b.n	800e574 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800e502:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800e504:	f04f 32ff 	mov.w	r2, #4294967295
 800e508:	69f9      	ldr	r1, [r7, #28]
 800e50a:	6938      	ldr	r0, [r7, #16]
 800e50c:	f7ff fe4d 	bl	800e1aa <put_fat>
 800e510:	4603      	mov	r3, r0
 800e512:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800e514:	7dfb      	ldrb	r3, [r7, #23]
 800e516:	2b00      	cmp	r3, #0
 800e518:	d109      	bne.n	800e52e <create_chain+0xe2>
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	d006      	beq.n	800e52e <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800e520:	69fa      	ldr	r2, [r7, #28]
 800e522:	6839      	ldr	r1, [r7, #0]
 800e524:	6938      	ldr	r0, [r7, #16]
 800e526:	f7ff fe40 	bl	800e1aa <put_fat>
 800e52a:	4603      	mov	r3, r0
 800e52c:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800e52e:	7dfb      	ldrb	r3, [r7, #23]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d116      	bne.n	800e562 <create_chain+0x116>
		fs->last_clst = ncl;
 800e534:	693b      	ldr	r3, [r7, #16]
 800e536:	69fa      	ldr	r2, [r7, #28]
 800e538:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	695a      	ldr	r2, [r3, #20]
 800e53e:	693b      	ldr	r3, [r7, #16]
 800e540:	699b      	ldr	r3, [r3, #24]
 800e542:	3b02      	subs	r3, #2
 800e544:	429a      	cmp	r2, r3
 800e546:	d804      	bhi.n	800e552 <create_chain+0x106>
 800e548:	693b      	ldr	r3, [r7, #16]
 800e54a:	695b      	ldr	r3, [r3, #20]
 800e54c:	1e5a      	subs	r2, r3, #1
 800e54e:	693b      	ldr	r3, [r7, #16]
 800e550:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800e552:	693b      	ldr	r3, [r7, #16]
 800e554:	791b      	ldrb	r3, [r3, #4]
 800e556:	f043 0301 	orr.w	r3, r3, #1
 800e55a:	b2da      	uxtb	r2, r3
 800e55c:	693b      	ldr	r3, [r7, #16]
 800e55e:	711a      	strb	r2, [r3, #4]
 800e560:	e007      	b.n	800e572 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800e562:	7dfb      	ldrb	r3, [r7, #23]
 800e564:	2b01      	cmp	r3, #1
 800e566:	d102      	bne.n	800e56e <create_chain+0x122>
 800e568:	f04f 33ff 	mov.w	r3, #4294967295
 800e56c:	e000      	b.n	800e570 <create_chain+0x124>
 800e56e:	2301      	movs	r3, #1
 800e570:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800e572:	69fb      	ldr	r3, [r7, #28]
}
 800e574:	4618      	mov	r0, r3
 800e576:	3720      	adds	r7, #32
 800e578:	46bd      	mov	sp, r7
 800e57a:	bd80      	pop	{r7, pc}

0800e57c <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800e57c:	b480      	push	{r7}
 800e57e:	b087      	sub	sp, #28
 800e580:	af00      	add	r7, sp, #0
 800e582:	6078      	str	r0, [r7, #4]
 800e584:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e590:	3304      	adds	r3, #4
 800e592:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800e594:	683b      	ldr	r3, [r7, #0]
 800e596:	0a5b      	lsrs	r3, r3, #9
 800e598:	68fa      	ldr	r2, [r7, #12]
 800e59a:	8952      	ldrh	r2, [r2, #10]
 800e59c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e5a0:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e5a2:	693b      	ldr	r3, [r7, #16]
 800e5a4:	1d1a      	adds	r2, r3, #4
 800e5a6:	613a      	str	r2, [r7, #16]
 800e5a8:	681b      	ldr	r3, [r3, #0]
 800e5aa:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800e5ac:	68bb      	ldr	r3, [r7, #8]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d101      	bne.n	800e5b6 <clmt_clust+0x3a>
 800e5b2:	2300      	movs	r3, #0
 800e5b4:	e010      	b.n	800e5d8 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800e5b6:	697a      	ldr	r2, [r7, #20]
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	429a      	cmp	r2, r3
 800e5bc:	d307      	bcc.n	800e5ce <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800e5be:	697a      	ldr	r2, [r7, #20]
 800e5c0:	68bb      	ldr	r3, [r7, #8]
 800e5c2:	1ad3      	subs	r3, r2, r3
 800e5c4:	617b      	str	r3, [r7, #20]
 800e5c6:	693b      	ldr	r3, [r7, #16]
 800e5c8:	3304      	adds	r3, #4
 800e5ca:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800e5cc:	e7e9      	b.n	800e5a2 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800e5ce:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	697b      	ldr	r3, [r7, #20]
 800e5d6:	4413      	add	r3, r2
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	371c      	adds	r7, #28
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e2:	4770      	bx	lr

0800e5e4 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	b086      	sub	sp, #24
 800e5e8:	af00      	add	r7, sp, #0
 800e5ea:	6078      	str	r0, [r7, #4]
 800e5ec:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	681b      	ldr	r3, [r3, #0]
 800e5f2:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800e5f4:	683b      	ldr	r3, [r7, #0]
 800e5f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e5fa:	d204      	bcs.n	800e606 <dir_sdi+0x22>
 800e5fc:	683b      	ldr	r3, [r7, #0]
 800e5fe:	f003 031f 	and.w	r3, r3, #31
 800e602:	2b00      	cmp	r3, #0
 800e604:	d001      	beq.n	800e60a <dir_sdi+0x26>
		return FR_INT_ERR;
 800e606:	2302      	movs	r3, #2
 800e608:	e063      	b.n	800e6d2 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	683a      	ldr	r2, [r7, #0]
 800e60e:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	689b      	ldr	r3, [r3, #8]
 800e614:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	2b00      	cmp	r3, #0
 800e61a:	d106      	bne.n	800e62a <dir_sdi+0x46>
 800e61c:	693b      	ldr	r3, [r7, #16]
 800e61e:	781b      	ldrb	r3, [r3, #0]
 800e620:	2b02      	cmp	r3, #2
 800e622:	d902      	bls.n	800e62a <dir_sdi+0x46>
		clst = fs->dirbase;
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e628:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d10c      	bne.n	800e64a <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800e630:	683b      	ldr	r3, [r7, #0]
 800e632:	095b      	lsrs	r3, r3, #5
 800e634:	693a      	ldr	r2, [r7, #16]
 800e636:	8912      	ldrh	r2, [r2, #8]
 800e638:	4293      	cmp	r3, r2
 800e63a:	d301      	bcc.n	800e640 <dir_sdi+0x5c>
 800e63c:	2302      	movs	r3, #2
 800e63e:	e048      	b.n	800e6d2 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800e640:	693b      	ldr	r3, [r7, #16]
 800e642:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	61da      	str	r2, [r3, #28]
 800e648:	e029      	b.n	800e69e <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800e64a:	693b      	ldr	r3, [r7, #16]
 800e64c:	895b      	ldrh	r3, [r3, #10]
 800e64e:	025b      	lsls	r3, r3, #9
 800e650:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e652:	e019      	b.n	800e688 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6979      	ldr	r1, [r7, #20]
 800e658:	4618      	mov	r0, r3
 800e65a:	f7ff fcfe 	bl	800e05a <get_fat>
 800e65e:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e660:	697b      	ldr	r3, [r7, #20]
 800e662:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e666:	d101      	bne.n	800e66c <dir_sdi+0x88>
 800e668:	2301      	movs	r3, #1
 800e66a:	e032      	b.n	800e6d2 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	2b01      	cmp	r3, #1
 800e670:	d904      	bls.n	800e67c <dir_sdi+0x98>
 800e672:	693b      	ldr	r3, [r7, #16]
 800e674:	699b      	ldr	r3, [r3, #24]
 800e676:	697a      	ldr	r2, [r7, #20]
 800e678:	429a      	cmp	r2, r3
 800e67a:	d301      	bcc.n	800e680 <dir_sdi+0x9c>
 800e67c:	2302      	movs	r3, #2
 800e67e:	e028      	b.n	800e6d2 <dir_sdi+0xee>
			ofs -= csz;
 800e680:	683a      	ldr	r2, [r7, #0]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	1ad3      	subs	r3, r2, r3
 800e686:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800e688:	683a      	ldr	r2, [r7, #0]
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	429a      	cmp	r2, r3
 800e68e:	d2e1      	bcs.n	800e654 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800e690:	6979      	ldr	r1, [r7, #20]
 800e692:	6938      	ldr	r0, [r7, #16]
 800e694:	f7ff fcc2 	bl	800e01c <clust2sect>
 800e698:	4602      	mov	r2, r0
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	697a      	ldr	r2, [r7, #20]
 800e6a2:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	69db      	ldr	r3, [r3, #28]
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d101      	bne.n	800e6b0 <dir_sdi+0xcc>
 800e6ac:	2302      	movs	r3, #2
 800e6ae:	e010      	b.n	800e6d2 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	69da      	ldr	r2, [r3, #28]
 800e6b4:	683b      	ldr	r3, [r7, #0]
 800e6b6:	0a5b      	lsrs	r3, r3, #9
 800e6b8:	441a      	add	r2, r3
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e6c4:	683b      	ldr	r3, [r7, #0]
 800e6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e6ca:	441a      	add	r2, r3
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e6d0:	2300      	movs	r3, #0
}
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	3718      	adds	r7, #24
 800e6d6:	46bd      	mov	sp, r7
 800e6d8:	bd80      	pop	{r7, pc}

0800e6da <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800e6da:	b580      	push	{r7, lr}
 800e6dc:	b086      	sub	sp, #24
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]
 800e6e2:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	695b      	ldr	r3, [r3, #20]
 800e6ee:	3320      	adds	r3, #32
 800e6f0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	69db      	ldr	r3, [r3, #28]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d003      	beq.n	800e702 <dir_next+0x28>
 800e6fa:	68bb      	ldr	r3, [r7, #8]
 800e6fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e700:	d301      	bcc.n	800e706 <dir_next+0x2c>
 800e702:	2304      	movs	r3, #4
 800e704:	e0aa      	b.n	800e85c <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800e706:	68bb      	ldr	r3, [r7, #8]
 800e708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	f040 8098 	bne.w	800e842 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	69db      	ldr	r3, [r3, #28]
 800e716:	1c5a      	adds	r2, r3, #1
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800e71c:	687b      	ldr	r3, [r7, #4]
 800e71e:	699b      	ldr	r3, [r3, #24]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d10b      	bne.n	800e73c <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800e724:	68bb      	ldr	r3, [r7, #8]
 800e726:	095b      	lsrs	r3, r3, #5
 800e728:	68fa      	ldr	r2, [r7, #12]
 800e72a:	8912      	ldrh	r2, [r2, #8]
 800e72c:	4293      	cmp	r3, r2
 800e72e:	f0c0 8088 	bcc.w	800e842 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2200      	movs	r2, #0
 800e736:	61da      	str	r2, [r3, #28]
 800e738:	2304      	movs	r3, #4
 800e73a:	e08f      	b.n	800e85c <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800e73c:	68bb      	ldr	r3, [r7, #8]
 800e73e:	0a5b      	lsrs	r3, r3, #9
 800e740:	68fa      	ldr	r2, [r7, #12]
 800e742:	8952      	ldrh	r2, [r2, #10]
 800e744:	3a01      	subs	r2, #1
 800e746:	4013      	ands	r3, r2
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d17a      	bne.n	800e842 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800e74c:	687a      	ldr	r2, [r7, #4]
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	699b      	ldr	r3, [r3, #24]
 800e752:	4619      	mov	r1, r3
 800e754:	4610      	mov	r0, r2
 800e756:	f7ff fc80 	bl	800e05a <get_fat>
 800e75a:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800e75c:	697b      	ldr	r3, [r7, #20]
 800e75e:	2b01      	cmp	r3, #1
 800e760:	d801      	bhi.n	800e766 <dir_next+0x8c>
 800e762:	2302      	movs	r3, #2
 800e764:	e07a      	b.n	800e85c <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800e766:	697b      	ldr	r3, [r7, #20]
 800e768:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e76c:	d101      	bne.n	800e772 <dir_next+0x98>
 800e76e:	2301      	movs	r3, #1
 800e770:	e074      	b.n	800e85c <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	699b      	ldr	r3, [r3, #24]
 800e776:	697a      	ldr	r2, [r7, #20]
 800e778:	429a      	cmp	r2, r3
 800e77a:	d358      	bcc.n	800e82e <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d104      	bne.n	800e78c <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	2200      	movs	r2, #0
 800e786:	61da      	str	r2, [r3, #28]
 800e788:	2304      	movs	r3, #4
 800e78a:	e067      	b.n	800e85c <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	699b      	ldr	r3, [r3, #24]
 800e792:	4619      	mov	r1, r3
 800e794:	4610      	mov	r0, r2
 800e796:	f7ff fe59 	bl	800e44c <create_chain>
 800e79a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800e79c:	697b      	ldr	r3, [r7, #20]
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d101      	bne.n	800e7a6 <dir_next+0xcc>
 800e7a2:	2307      	movs	r3, #7
 800e7a4:	e05a      	b.n	800e85c <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800e7a6:	697b      	ldr	r3, [r7, #20]
 800e7a8:	2b01      	cmp	r3, #1
 800e7aa:	d101      	bne.n	800e7b0 <dir_next+0xd6>
 800e7ac:	2302      	movs	r3, #2
 800e7ae:	e055      	b.n	800e85c <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800e7b0:	697b      	ldr	r3, [r7, #20]
 800e7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e7b6:	d101      	bne.n	800e7bc <dir_next+0xe2>
 800e7b8:	2301      	movs	r3, #1
 800e7ba:	e04f      	b.n	800e85c <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800e7bc:	68f8      	ldr	r0, [r7, #12]
 800e7be:	f7ff fb4d 	bl	800de5c <sync_window>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d001      	beq.n	800e7cc <dir_next+0xf2>
 800e7c8:	2301      	movs	r3, #1
 800e7ca:	e047      	b.n	800e85c <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	3334      	adds	r3, #52	; 0x34
 800e7d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e7d4:	2100      	movs	r1, #0
 800e7d6:	4618      	mov	r0, r3
 800e7d8:	f7ff f945 	bl	800da66 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e7dc:	2300      	movs	r3, #0
 800e7de:	613b      	str	r3, [r7, #16]
 800e7e0:	6979      	ldr	r1, [r7, #20]
 800e7e2:	68f8      	ldr	r0, [r7, #12]
 800e7e4:	f7ff fc1a 	bl	800e01c <clust2sect>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	631a      	str	r2, [r3, #48]	; 0x30
 800e7ee:	e012      	b.n	800e816 <dir_next+0x13c>
						fs->wflag = 1;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	2201      	movs	r2, #1
 800e7f4:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800e7f6:	68f8      	ldr	r0, [r7, #12]
 800e7f8:	f7ff fb30 	bl	800de5c <sync_window>
 800e7fc:	4603      	mov	r3, r0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d001      	beq.n	800e806 <dir_next+0x12c>
 800e802:	2301      	movs	r3, #1
 800e804:	e02a      	b.n	800e85c <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800e806:	693b      	ldr	r3, [r7, #16]
 800e808:	3301      	adds	r3, #1
 800e80a:	613b      	str	r3, [r7, #16]
 800e80c:	68fb      	ldr	r3, [r7, #12]
 800e80e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e810:	1c5a      	adds	r2, r3, #1
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	631a      	str	r2, [r3, #48]	; 0x30
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	895b      	ldrh	r3, [r3, #10]
 800e81a:	461a      	mov	r2, r3
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	4293      	cmp	r3, r2
 800e820:	d3e6      	bcc.n	800e7f0 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800e822:	68fb      	ldr	r3, [r7, #12]
 800e824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e826:	693b      	ldr	r3, [r7, #16]
 800e828:	1ad2      	subs	r2, r2, r3
 800e82a:	68fb      	ldr	r3, [r7, #12]
 800e82c:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	697a      	ldr	r2, [r7, #20]
 800e832:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800e834:	6979      	ldr	r1, [r7, #20]
 800e836:	68f8      	ldr	r0, [r7, #12]
 800e838:	f7ff fbf0 	bl	800e01c <clust2sect>
 800e83c:	4602      	mov	r2, r0
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	68ba      	ldr	r2, [r7, #8]
 800e846:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800e848:	68fb      	ldr	r3, [r7, #12]
 800e84a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e854:	441a      	add	r2, r3
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800e85a:	2300      	movs	r3, #0
}
 800e85c:	4618      	mov	r0, r3
 800e85e:	3718      	adds	r7, #24
 800e860:	46bd      	mov	sp, r7
 800e862:	bd80      	pop	{r7, pc}

0800e864 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
 800e86c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800e874:	2100      	movs	r1, #0
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f7ff feb4 	bl	800e5e4 <dir_sdi>
 800e87c:	4603      	mov	r3, r0
 800e87e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e880:	7dfb      	ldrb	r3, [r7, #23]
 800e882:	2b00      	cmp	r3, #0
 800e884:	d12b      	bne.n	800e8de <dir_alloc+0x7a>
		n = 0;
 800e886:	2300      	movs	r3, #0
 800e888:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	69db      	ldr	r3, [r3, #28]
 800e88e:	4619      	mov	r1, r3
 800e890:	68f8      	ldr	r0, [r7, #12]
 800e892:	f7ff fb27 	bl	800dee4 <move_window>
 800e896:	4603      	mov	r3, r0
 800e898:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800e89a:	7dfb      	ldrb	r3, [r7, #23]
 800e89c:	2b00      	cmp	r3, #0
 800e89e:	d11d      	bne.n	800e8dc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6a1b      	ldr	r3, [r3, #32]
 800e8a4:	781b      	ldrb	r3, [r3, #0]
 800e8a6:	2be5      	cmp	r3, #229	; 0xe5
 800e8a8:	d004      	beq.n	800e8b4 <dir_alloc+0x50>
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	6a1b      	ldr	r3, [r3, #32]
 800e8ae:	781b      	ldrb	r3, [r3, #0]
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d107      	bne.n	800e8c4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800e8b4:	693b      	ldr	r3, [r7, #16]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	613b      	str	r3, [r7, #16]
 800e8ba:	693a      	ldr	r2, [r7, #16]
 800e8bc:	683b      	ldr	r3, [r7, #0]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d102      	bne.n	800e8c8 <dir_alloc+0x64>
 800e8c2:	e00c      	b.n	800e8de <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800e8c8:	2101      	movs	r1, #1
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f7ff ff05 	bl	800e6da <dir_next>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800e8d4:	7dfb      	ldrb	r3, [r7, #23]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d0d7      	beq.n	800e88a <dir_alloc+0x26>
 800e8da:	e000      	b.n	800e8de <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800e8dc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800e8de:	7dfb      	ldrb	r3, [r7, #23]
 800e8e0:	2b04      	cmp	r3, #4
 800e8e2:	d101      	bne.n	800e8e8 <dir_alloc+0x84>
 800e8e4:	2307      	movs	r3, #7
 800e8e6:	75fb      	strb	r3, [r7, #23]
	return res;
 800e8e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	3718      	adds	r7, #24
 800e8ee:	46bd      	mov	sp, r7
 800e8f0:	bd80      	pop	{r7, pc}

0800e8f2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800e8f2:	b580      	push	{r7, lr}
 800e8f4:	b084      	sub	sp, #16
 800e8f6:	af00      	add	r7, sp, #0
 800e8f8:	6078      	str	r0, [r7, #4]
 800e8fa:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800e8fc:	683b      	ldr	r3, [r7, #0]
 800e8fe:	331a      	adds	r3, #26
 800e900:	4618      	mov	r0, r3
 800e902:	f7ff f80d 	bl	800d920 <ld_word>
 800e906:	4603      	mov	r3, r0
 800e908:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	2b03      	cmp	r3, #3
 800e910:	d109      	bne.n	800e926 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800e912:	683b      	ldr	r3, [r7, #0]
 800e914:	3314      	adds	r3, #20
 800e916:	4618      	mov	r0, r3
 800e918:	f7ff f802 	bl	800d920 <ld_word>
 800e91c:	4603      	mov	r3, r0
 800e91e:	041b      	lsls	r3, r3, #16
 800e920:	68fa      	ldr	r2, [r7, #12]
 800e922:	4313      	orrs	r3, r2
 800e924:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800e926:	68fb      	ldr	r3, [r7, #12]
}
 800e928:	4618      	mov	r0, r3
 800e92a:	3710      	adds	r7, #16
 800e92c:	46bd      	mov	sp, r7
 800e92e:	bd80      	pop	{r7, pc}

0800e930 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
 800e936:	60f8      	str	r0, [r7, #12]
 800e938:	60b9      	str	r1, [r7, #8]
 800e93a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800e93c:	68bb      	ldr	r3, [r7, #8]
 800e93e:	331a      	adds	r3, #26
 800e940:	687a      	ldr	r2, [r7, #4]
 800e942:	b292      	uxth	r2, r2
 800e944:	4611      	mov	r1, r2
 800e946:	4618      	mov	r0, r3
 800e948:	f7ff f825 	bl	800d996 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	781b      	ldrb	r3, [r3, #0]
 800e950:	2b03      	cmp	r3, #3
 800e952:	d109      	bne.n	800e968 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800e954:	68bb      	ldr	r3, [r7, #8]
 800e956:	f103 0214 	add.w	r2, r3, #20
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	0c1b      	lsrs	r3, r3, #16
 800e95e:	b29b      	uxth	r3, r3
 800e960:	4619      	mov	r1, r3
 800e962:	4610      	mov	r0, r2
 800e964:	f7ff f817 	bl	800d996 <st_word>
	}
}
 800e968:	bf00      	nop
 800e96a:	3710      	adds	r7, #16
 800e96c:	46bd      	mov	sp, r7
 800e96e:	bd80      	pop	{r7, pc}

0800e970 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	b086      	sub	sp, #24
 800e974:	af00      	add	r7, sp, #0
 800e976:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	681b      	ldr	r3, [r3, #0]
 800e97c:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800e97e:	2100      	movs	r1, #0
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f7ff fe2f 	bl	800e5e4 <dir_sdi>
 800e986:	4603      	mov	r3, r0
 800e988:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800e98a:	7dfb      	ldrb	r3, [r7, #23]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d001      	beq.n	800e994 <dir_find+0x24>
 800e990:	7dfb      	ldrb	r3, [r7, #23]
 800e992:	e03e      	b.n	800ea12 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	69db      	ldr	r3, [r3, #28]
 800e998:	4619      	mov	r1, r3
 800e99a:	6938      	ldr	r0, [r7, #16]
 800e99c:	f7ff faa2 	bl	800dee4 <move_window>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800e9a4:	7dfb      	ldrb	r3, [r7, #23]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d12f      	bne.n	800ea0a <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	6a1b      	ldr	r3, [r3, #32]
 800e9ae:	781b      	ldrb	r3, [r3, #0]
 800e9b0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800e9b2:	7bfb      	ldrb	r3, [r7, #15]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d102      	bne.n	800e9be <dir_find+0x4e>
 800e9b8:	2304      	movs	r3, #4
 800e9ba:	75fb      	strb	r3, [r7, #23]
 800e9bc:	e028      	b.n	800ea10 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	6a1b      	ldr	r3, [r3, #32]
 800e9c2:	330b      	adds	r3, #11
 800e9c4:	781b      	ldrb	r3, [r3, #0]
 800e9c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e9ca:	b2da      	uxtb	r2, r3
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	6a1b      	ldr	r3, [r3, #32]
 800e9d4:	330b      	adds	r3, #11
 800e9d6:	781b      	ldrb	r3, [r3, #0]
 800e9d8:	f003 0308 	and.w	r3, r3, #8
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	d10a      	bne.n	800e9f6 <dir_find+0x86>
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	6a18      	ldr	r0, [r3, #32]
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	3324      	adds	r3, #36	; 0x24
 800e9e8:	220b      	movs	r2, #11
 800e9ea:	4619      	mov	r1, r3
 800e9ec:	f7ff f856 	bl	800da9c <mem_cmp>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d00b      	beq.n	800ea0e <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800e9f6:	2100      	movs	r1, #0
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f7ff fe6e 	bl	800e6da <dir_next>
 800e9fe:	4603      	mov	r3, r0
 800ea00:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800ea02:	7dfb      	ldrb	r3, [r7, #23]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d0c5      	beq.n	800e994 <dir_find+0x24>
 800ea08:	e002      	b.n	800ea10 <dir_find+0xa0>
		if (res != FR_OK) break;
 800ea0a:	bf00      	nop
 800ea0c:	e000      	b.n	800ea10 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800ea0e:	bf00      	nop

	return res;
 800ea10:	7dfb      	ldrb	r3, [r7, #23]
}
 800ea12:	4618      	mov	r0, r3
 800ea14:	3718      	adds	r7, #24
 800ea16:	46bd      	mov	sp, r7
 800ea18:	bd80      	pop	{r7, pc}

0800ea1a <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800ea1a:	b580      	push	{r7, lr}
 800ea1c:	b084      	sub	sp, #16
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	681b      	ldr	r3, [r3, #0]
 800ea26:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800ea28:	2101      	movs	r1, #1
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f7ff ff1a 	bl	800e864 <dir_alloc>
 800ea30:	4603      	mov	r3, r0
 800ea32:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800ea34:	7bfb      	ldrb	r3, [r7, #15]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d11c      	bne.n	800ea74 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	69db      	ldr	r3, [r3, #28]
 800ea3e:	4619      	mov	r1, r3
 800ea40:	68b8      	ldr	r0, [r7, #8]
 800ea42:	f7ff fa4f 	bl	800dee4 <move_window>
 800ea46:	4603      	mov	r3, r0
 800ea48:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ea4a:	7bfb      	ldrb	r3, [r7, #15]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d111      	bne.n	800ea74 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	6a1b      	ldr	r3, [r3, #32]
 800ea54:	2220      	movs	r2, #32
 800ea56:	2100      	movs	r1, #0
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f7ff f804 	bl	800da66 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800ea5e:	687b      	ldr	r3, [r7, #4]
 800ea60:	6a18      	ldr	r0, [r3, #32]
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	3324      	adds	r3, #36	; 0x24
 800ea66:	220b      	movs	r2, #11
 800ea68:	4619      	mov	r1, r3
 800ea6a:	f7fe ffdb 	bl	800da24 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	2201      	movs	r2, #1
 800ea72:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800ea74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	3710      	adds	r7, #16
 800ea7a:	46bd      	mov	sp, r7
 800ea7c:	bd80      	pop	{r7, pc}
	...

0800ea80 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800ea80:	b580      	push	{r7, lr}
 800ea82:	b088      	sub	sp, #32
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	6078      	str	r0, [r7, #4]
 800ea88:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800ea8a:	683b      	ldr	r3, [r7, #0]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	60fb      	str	r3, [r7, #12]
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	3324      	adds	r3, #36	; 0x24
 800ea94:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800ea96:	220b      	movs	r2, #11
 800ea98:	2120      	movs	r1, #32
 800ea9a:	68b8      	ldr	r0, [r7, #8]
 800ea9c:	f7fe ffe3 	bl	800da66 <mem_set>
	si = i = 0; ni = 8;
 800eaa0:	2300      	movs	r3, #0
 800eaa2:	613b      	str	r3, [r7, #16]
 800eaa4:	693b      	ldr	r3, [r7, #16]
 800eaa6:	61fb      	str	r3, [r7, #28]
 800eaa8:	2308      	movs	r3, #8
 800eaaa:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800eaac:	69fb      	ldr	r3, [r7, #28]
 800eaae:	1c5a      	adds	r2, r3, #1
 800eab0:	61fa      	str	r2, [r7, #28]
 800eab2:	68fa      	ldr	r2, [r7, #12]
 800eab4:	4413      	add	r3, r2
 800eab6:	781b      	ldrb	r3, [r3, #0]
 800eab8:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800eaba:	7efb      	ldrb	r3, [r7, #27]
 800eabc:	2b20      	cmp	r3, #32
 800eabe:	d94e      	bls.n	800eb5e <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800eac0:	7efb      	ldrb	r3, [r7, #27]
 800eac2:	2b2f      	cmp	r3, #47	; 0x2f
 800eac4:	d006      	beq.n	800ead4 <create_name+0x54>
 800eac6:	7efb      	ldrb	r3, [r7, #27]
 800eac8:	2b5c      	cmp	r3, #92	; 0x5c
 800eaca:	d110      	bne.n	800eaee <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800eacc:	e002      	b.n	800ead4 <create_name+0x54>
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	3301      	adds	r3, #1
 800ead2:	61fb      	str	r3, [r7, #28]
 800ead4:	68fa      	ldr	r2, [r7, #12]
 800ead6:	69fb      	ldr	r3, [r7, #28]
 800ead8:	4413      	add	r3, r2
 800eada:	781b      	ldrb	r3, [r3, #0]
 800eadc:	2b2f      	cmp	r3, #47	; 0x2f
 800eade:	d0f6      	beq.n	800eace <create_name+0x4e>
 800eae0:	68fa      	ldr	r2, [r7, #12]
 800eae2:	69fb      	ldr	r3, [r7, #28]
 800eae4:	4413      	add	r3, r2
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	2b5c      	cmp	r3, #92	; 0x5c
 800eaea:	d0f0      	beq.n	800eace <create_name+0x4e>
			break;
 800eaec:	e038      	b.n	800eb60 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800eaee:	7efb      	ldrb	r3, [r7, #27]
 800eaf0:	2b2e      	cmp	r3, #46	; 0x2e
 800eaf2:	d003      	beq.n	800eafc <create_name+0x7c>
 800eaf4:	693a      	ldr	r2, [r7, #16]
 800eaf6:	697b      	ldr	r3, [r7, #20]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d30c      	bcc.n	800eb16 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800eafc:	697b      	ldr	r3, [r7, #20]
 800eafe:	2b0b      	cmp	r3, #11
 800eb00:	d002      	beq.n	800eb08 <create_name+0x88>
 800eb02:	7efb      	ldrb	r3, [r7, #27]
 800eb04:	2b2e      	cmp	r3, #46	; 0x2e
 800eb06:	d001      	beq.n	800eb0c <create_name+0x8c>
 800eb08:	2306      	movs	r3, #6
 800eb0a:	e044      	b.n	800eb96 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800eb0c:	2308      	movs	r3, #8
 800eb0e:	613b      	str	r3, [r7, #16]
 800eb10:	230b      	movs	r3, #11
 800eb12:	617b      	str	r3, [r7, #20]
			continue;
 800eb14:	e022      	b.n	800eb5c <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800eb16:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	da04      	bge.n	800eb28 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800eb1e:	7efb      	ldrb	r3, [r7, #27]
 800eb20:	3b80      	subs	r3, #128	; 0x80
 800eb22:	4a1f      	ldr	r2, [pc, #124]	; (800eba0 <create_name+0x120>)
 800eb24:	5cd3      	ldrb	r3, [r2, r3]
 800eb26:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800eb28:	7efb      	ldrb	r3, [r7, #27]
 800eb2a:	4619      	mov	r1, r3
 800eb2c:	481d      	ldr	r0, [pc, #116]	; (800eba4 <create_name+0x124>)
 800eb2e:	f7fe ffdc 	bl	800daea <chk_chr>
 800eb32:	4603      	mov	r3, r0
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d001      	beq.n	800eb3c <create_name+0xbc>
 800eb38:	2306      	movs	r3, #6
 800eb3a:	e02c      	b.n	800eb96 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800eb3c:	7efb      	ldrb	r3, [r7, #27]
 800eb3e:	2b60      	cmp	r3, #96	; 0x60
 800eb40:	d905      	bls.n	800eb4e <create_name+0xce>
 800eb42:	7efb      	ldrb	r3, [r7, #27]
 800eb44:	2b7a      	cmp	r3, #122	; 0x7a
 800eb46:	d802      	bhi.n	800eb4e <create_name+0xce>
 800eb48:	7efb      	ldrb	r3, [r7, #27]
 800eb4a:	3b20      	subs	r3, #32
 800eb4c:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800eb4e:	693b      	ldr	r3, [r7, #16]
 800eb50:	1c5a      	adds	r2, r3, #1
 800eb52:	613a      	str	r2, [r7, #16]
 800eb54:	68ba      	ldr	r2, [r7, #8]
 800eb56:	4413      	add	r3, r2
 800eb58:	7efa      	ldrb	r2, [r7, #27]
 800eb5a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800eb5c:	e7a6      	b.n	800eaac <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800eb5e:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800eb60:	68fa      	ldr	r2, [r7, #12]
 800eb62:	69fb      	ldr	r3, [r7, #28]
 800eb64:	441a      	add	r2, r3
 800eb66:	683b      	ldr	r3, [r7, #0]
 800eb68:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800eb6a:	693b      	ldr	r3, [r7, #16]
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d101      	bne.n	800eb74 <create_name+0xf4>
 800eb70:	2306      	movs	r3, #6
 800eb72:	e010      	b.n	800eb96 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	781b      	ldrb	r3, [r3, #0]
 800eb78:	2be5      	cmp	r3, #229	; 0xe5
 800eb7a:	d102      	bne.n	800eb82 <create_name+0x102>
 800eb7c:	68bb      	ldr	r3, [r7, #8]
 800eb7e:	2205      	movs	r2, #5
 800eb80:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800eb82:	7efb      	ldrb	r3, [r7, #27]
 800eb84:	2b20      	cmp	r3, #32
 800eb86:	d801      	bhi.n	800eb8c <create_name+0x10c>
 800eb88:	2204      	movs	r2, #4
 800eb8a:	e000      	b.n	800eb8e <create_name+0x10e>
 800eb8c:	2200      	movs	r2, #0
 800eb8e:	68bb      	ldr	r3, [r7, #8]
 800eb90:	330b      	adds	r3, #11
 800eb92:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800eb94:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800eb96:	4618      	mov	r0, r3
 800eb98:	3720      	adds	r7, #32
 800eb9a:	46bd      	mov	sp, r7
 800eb9c:	bd80      	pop	{r7, pc}
 800eb9e:	bf00      	nop
 800eba0:	08015db4 	.word	0x08015db4
 800eba4:	08013e08 	.word	0x08013e08

0800eba8 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b086      	sub	sp, #24
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
 800ebb0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800ebb2:	687b      	ldr	r3, [r7, #4]
 800ebb4:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800ebb6:	693b      	ldr	r3, [r7, #16]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800ebbc:	e002      	b.n	800ebc4 <follow_path+0x1c>
 800ebbe:	683b      	ldr	r3, [r7, #0]
 800ebc0:	3301      	adds	r3, #1
 800ebc2:	603b      	str	r3, [r7, #0]
 800ebc4:	683b      	ldr	r3, [r7, #0]
 800ebc6:	781b      	ldrb	r3, [r3, #0]
 800ebc8:	2b2f      	cmp	r3, #47	; 0x2f
 800ebca:	d0f8      	beq.n	800ebbe <follow_path+0x16>
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	781b      	ldrb	r3, [r3, #0]
 800ebd0:	2b5c      	cmp	r3, #92	; 0x5c
 800ebd2:	d0f4      	beq.n	800ebbe <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800ebd4:	693b      	ldr	r3, [r7, #16]
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	781b      	ldrb	r3, [r3, #0]
 800ebde:	2b1f      	cmp	r3, #31
 800ebe0:	d80a      	bhi.n	800ebf8 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	2280      	movs	r2, #128	; 0x80
 800ebe6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800ebea:	2100      	movs	r1, #0
 800ebec:	6878      	ldr	r0, [r7, #4]
 800ebee:	f7ff fcf9 	bl	800e5e4 <dir_sdi>
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	75fb      	strb	r3, [r7, #23]
 800ebf6:	e043      	b.n	800ec80 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ebf8:	463b      	mov	r3, r7
 800ebfa:	4619      	mov	r1, r3
 800ebfc:	6878      	ldr	r0, [r7, #4]
 800ebfe:	f7ff ff3f 	bl	800ea80 <create_name>
 800ec02:	4603      	mov	r3, r0
 800ec04:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ec06:	7dfb      	ldrb	r3, [r7, #23]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d134      	bne.n	800ec76 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f7ff feaf 	bl	800e970 <dir_find>
 800ec12:	4603      	mov	r3, r0
 800ec14:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800ec1c:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800ec1e:	7dfb      	ldrb	r3, [r7, #23]
 800ec20:	2b00      	cmp	r3, #0
 800ec22:	d00a      	beq.n	800ec3a <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800ec24:	7dfb      	ldrb	r3, [r7, #23]
 800ec26:	2b04      	cmp	r3, #4
 800ec28:	d127      	bne.n	800ec7a <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ec2a:	7afb      	ldrb	r3, [r7, #11]
 800ec2c:	f003 0304 	and.w	r3, r3, #4
 800ec30:	2b00      	cmp	r3, #0
 800ec32:	d122      	bne.n	800ec7a <follow_path+0xd2>
 800ec34:	2305      	movs	r3, #5
 800ec36:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ec38:	e01f      	b.n	800ec7a <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ec3a:	7afb      	ldrb	r3, [r7, #11]
 800ec3c:	f003 0304 	and.w	r3, r3, #4
 800ec40:	2b00      	cmp	r3, #0
 800ec42:	d11c      	bne.n	800ec7e <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ec44:	693b      	ldr	r3, [r7, #16]
 800ec46:	799b      	ldrb	r3, [r3, #6]
 800ec48:	f003 0310 	and.w	r3, r3, #16
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d102      	bne.n	800ec56 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ec50:	2305      	movs	r3, #5
 800ec52:	75fb      	strb	r3, [r7, #23]
 800ec54:	e014      	b.n	800ec80 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ec56:	68fb      	ldr	r3, [r7, #12]
 800ec58:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	695b      	ldr	r3, [r3, #20]
 800ec60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ec64:	4413      	add	r3, r2
 800ec66:	4619      	mov	r1, r3
 800ec68:	68f8      	ldr	r0, [r7, #12]
 800ec6a:	f7ff fe42 	bl	800e8f2 <ld_clust>
 800ec6e:	4602      	mov	r2, r0
 800ec70:	693b      	ldr	r3, [r7, #16]
 800ec72:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ec74:	e7c0      	b.n	800ebf8 <follow_path+0x50>
			if (res != FR_OK) break;
 800ec76:	bf00      	nop
 800ec78:	e002      	b.n	800ec80 <follow_path+0xd8>
				break;
 800ec7a:	bf00      	nop
 800ec7c:	e000      	b.n	800ec80 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ec7e:	bf00      	nop
			}
		}
	}

	return res;
 800ec80:	7dfb      	ldrb	r3, [r7, #23]
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3718      	adds	r7, #24
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}

0800ec8a <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800ec8a:	b480      	push	{r7}
 800ec8c:	b087      	sub	sp, #28
 800ec8e:	af00      	add	r7, sp, #0
 800ec90:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800ec92:	f04f 33ff 	mov.w	r3, #4294967295
 800ec96:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	681b      	ldr	r3, [r3, #0]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d031      	beq.n	800ed04 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800eca0:	687b      	ldr	r3, [r7, #4]
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	617b      	str	r3, [r7, #20]
 800eca6:	e002      	b.n	800ecae <get_ldnumber+0x24>
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	3301      	adds	r3, #1
 800ecac:	617b      	str	r3, [r7, #20]
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	781b      	ldrb	r3, [r3, #0]
 800ecb2:	2b20      	cmp	r3, #32
 800ecb4:	d903      	bls.n	800ecbe <get_ldnumber+0x34>
 800ecb6:	697b      	ldr	r3, [r7, #20]
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	2b3a      	cmp	r3, #58	; 0x3a
 800ecbc:	d1f4      	bne.n	800eca8 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ecbe:	697b      	ldr	r3, [r7, #20]
 800ecc0:	781b      	ldrb	r3, [r3, #0]
 800ecc2:	2b3a      	cmp	r3, #58	; 0x3a
 800ecc4:	d11c      	bne.n	800ed00 <get_ldnumber+0x76>
			tp = *path;
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	681b      	ldr	r3, [r3, #0]
 800ecca:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800eccc:	68fb      	ldr	r3, [r7, #12]
 800ecce:	1c5a      	adds	r2, r3, #1
 800ecd0:	60fa      	str	r2, [r7, #12]
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	3b30      	subs	r3, #48	; 0x30
 800ecd6:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ecd8:	68bb      	ldr	r3, [r7, #8]
 800ecda:	2b09      	cmp	r3, #9
 800ecdc:	d80e      	bhi.n	800ecfc <get_ldnumber+0x72>
 800ecde:	68fa      	ldr	r2, [r7, #12]
 800ece0:	697b      	ldr	r3, [r7, #20]
 800ece2:	429a      	cmp	r2, r3
 800ece4:	d10a      	bne.n	800ecfc <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ece6:	68bb      	ldr	r3, [r7, #8]
 800ece8:	2b00      	cmp	r3, #0
 800ecea:	d107      	bne.n	800ecfc <get_ldnumber+0x72>
					vol = (int)i;
 800ecec:	68bb      	ldr	r3, [r7, #8]
 800ecee:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ecf0:	697b      	ldr	r3, [r7, #20]
 800ecf2:	3301      	adds	r3, #1
 800ecf4:	617b      	str	r3, [r7, #20]
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	697a      	ldr	r2, [r7, #20]
 800ecfa:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ecfc:	693b      	ldr	r3, [r7, #16]
 800ecfe:	e002      	b.n	800ed06 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ed00:	2300      	movs	r3, #0
 800ed02:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ed04:	693b      	ldr	r3, [r7, #16]
}
 800ed06:	4618      	mov	r0, r3
 800ed08:	371c      	adds	r7, #28
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed10:	4770      	bx	lr
	...

0800ed14 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ed14:	b580      	push	{r7, lr}
 800ed16:	b082      	sub	sp, #8
 800ed18:	af00      	add	r7, sp, #0
 800ed1a:	6078      	str	r0, [r7, #4]
 800ed1c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	2200      	movs	r2, #0
 800ed22:	70da      	strb	r2, [r3, #3]
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	f04f 32ff 	mov.w	r2, #4294967295
 800ed2a:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ed2c:	6839      	ldr	r1, [r7, #0]
 800ed2e:	6878      	ldr	r0, [r7, #4]
 800ed30:	f7ff f8d8 	bl	800dee4 <move_window>
 800ed34:	4603      	mov	r3, r0
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d001      	beq.n	800ed3e <check_fs+0x2a>
 800ed3a:	2304      	movs	r3, #4
 800ed3c:	e038      	b.n	800edb0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	3334      	adds	r3, #52	; 0x34
 800ed42:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ed46:	4618      	mov	r0, r3
 800ed48:	f7fe fdea 	bl	800d920 <ld_word>
 800ed4c:	4603      	mov	r3, r0
 800ed4e:	461a      	mov	r2, r3
 800ed50:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d001      	beq.n	800ed5c <check_fs+0x48>
 800ed58:	2303      	movs	r3, #3
 800ed5a:	e029      	b.n	800edb0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ed62:	2be9      	cmp	r3, #233	; 0xe9
 800ed64:	d009      	beq.n	800ed7a <check_fs+0x66>
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ed6c:	2beb      	cmp	r3, #235	; 0xeb
 800ed6e:	d11e      	bne.n	800edae <check_fs+0x9a>
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ed76:	2b90      	cmp	r3, #144	; 0x90
 800ed78:	d119      	bne.n	800edae <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	3334      	adds	r3, #52	; 0x34
 800ed7e:	3336      	adds	r3, #54	; 0x36
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7fe fde5 	bl	800d950 <ld_dword>
 800ed86:	4603      	mov	r3, r0
 800ed88:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ed8c:	4a0a      	ldr	r2, [pc, #40]	; (800edb8 <check_fs+0xa4>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d101      	bne.n	800ed96 <check_fs+0x82>
 800ed92:	2300      	movs	r3, #0
 800ed94:	e00c      	b.n	800edb0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	3334      	adds	r3, #52	; 0x34
 800ed9a:	3352      	adds	r3, #82	; 0x52
 800ed9c:	4618      	mov	r0, r3
 800ed9e:	f7fe fdd7 	bl	800d950 <ld_dword>
 800eda2:	4603      	mov	r3, r0
 800eda4:	4a05      	ldr	r2, [pc, #20]	; (800edbc <check_fs+0xa8>)
 800eda6:	4293      	cmp	r3, r2
 800eda8:	d101      	bne.n	800edae <check_fs+0x9a>
 800edaa:	2300      	movs	r3, #0
 800edac:	e000      	b.n	800edb0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800edae:	2302      	movs	r3, #2
}
 800edb0:	4618      	mov	r0, r3
 800edb2:	3708      	adds	r7, #8
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}
 800edb8:	00544146 	.word	0x00544146
 800edbc:	33544146 	.word	0x33544146

0800edc0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800edc0:	b580      	push	{r7, lr}
 800edc2:	b096      	sub	sp, #88	; 0x58
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	60f8      	str	r0, [r7, #12]
 800edc8:	60b9      	str	r1, [r7, #8]
 800edca:	4613      	mov	r3, r2
 800edcc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	2200      	movs	r2, #0
 800edd2:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800edd4:	68f8      	ldr	r0, [r7, #12]
 800edd6:	f7ff ff58 	bl	800ec8a <get_ldnumber>
 800edda:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800eddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edde:	2b00      	cmp	r3, #0
 800ede0:	da01      	bge.n	800ede6 <find_volume+0x26>
 800ede2:	230b      	movs	r3, #11
 800ede4:	e236      	b.n	800f254 <find_volume+0x494>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800ede6:	4aac      	ldr	r2, [pc, #688]	; (800f098 <find_volume+0x2d8>)
 800ede8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800edea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800edee:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800edf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800edf2:	2b00      	cmp	r3, #0
 800edf4:	d101      	bne.n	800edfa <find_volume+0x3a>
 800edf6:	230c      	movs	r3, #12
 800edf8:	e22c      	b.n	800f254 <find_volume+0x494>

	ENTER_FF(fs);						/* Lock the volume */
 800edfa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800edfc:	f7fe fe90 	bl	800db20 <lock_fs>
 800ee00:	4603      	mov	r3, r0
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d101      	bne.n	800ee0a <find_volume+0x4a>
 800ee06:	230f      	movs	r3, #15
 800ee08:	e224      	b.n	800f254 <find_volume+0x494>
	*rfs = fs;							/* Return pointer to the file system object */
 800ee0a:	68bb      	ldr	r3, [r7, #8]
 800ee0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ee0e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800ee10:	79fb      	ldrb	r3, [r7, #7]
 800ee12:	f023 0301 	bic.w	r3, r3, #1
 800ee16:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800ee18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d01a      	beq.n	800ee56 <find_volume+0x96>
		stat = disk_status(fs->drv);
 800ee20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee22:	785b      	ldrb	r3, [r3, #1]
 800ee24:	4618      	mov	r0, r3
 800ee26:	f7fe fcdd 	bl	800d7e4 <disk_status>
 800ee2a:	4603      	mov	r3, r0
 800ee2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800ee30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee34:	f003 0301 	and.w	r3, r3, #1
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d10c      	bne.n	800ee56 <find_volume+0x96>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800ee3c:	79fb      	ldrb	r3, [r7, #7]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d007      	beq.n	800ee52 <find_volume+0x92>
 800ee42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee46:	f003 0304 	and.w	r3, r3, #4
 800ee4a:	2b00      	cmp	r3, #0
 800ee4c:	d001      	beq.n	800ee52 <find_volume+0x92>
				return FR_WRITE_PROTECTED;
 800ee4e:	230a      	movs	r3, #10
 800ee50:	e200      	b.n	800f254 <find_volume+0x494>
			}
			return FR_OK;				/* The file system object is valid */
 800ee52:	2300      	movs	r3, #0
 800ee54:	e1fe      	b.n	800f254 <find_volume+0x494>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800ee56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee58:	2200      	movs	r2, #0
 800ee5a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800ee5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ee5e:	b2da      	uxtb	r2, r3
 800ee60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee62:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800ee64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee66:	785b      	ldrb	r3, [r3, #1]
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7fe fcd5 	bl	800d818 <disk_initialize>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800ee74:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee78:	f003 0301 	and.w	r3, r3, #1
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d001      	beq.n	800ee84 <find_volume+0xc4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800ee80:	2303      	movs	r3, #3
 800ee82:	e1e7      	b.n	800f254 <find_volume+0x494>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800ee84:	79fb      	ldrb	r3, [r7, #7]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d007      	beq.n	800ee9a <find_volume+0xda>
 800ee8a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ee8e:	f003 0304 	and.w	r3, r3, #4
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d001      	beq.n	800ee9a <find_volume+0xda>
		return FR_WRITE_PROTECTED;
 800ee96:	230a      	movs	r3, #10
 800ee98:	e1dc      	b.n	800f254 <find_volume+0x494>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800ee9a:	2300      	movs	r3, #0
 800ee9c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800ee9e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800eea0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800eea2:	f7ff ff37 	bl	800ed14 <check_fs>
 800eea6:	4603      	mov	r3, r0
 800eea8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800eeac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800eeb0:	2b02      	cmp	r3, #2
 800eeb2:	d14b      	bne.n	800ef4c <find_volume+0x18c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eeb4:	2300      	movs	r3, #0
 800eeb6:	643b      	str	r3, [r7, #64]	; 0x40
 800eeb8:	e01f      	b.n	800eefa <find_volume+0x13a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800eeba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eebc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eec2:	011b      	lsls	r3, r3, #4
 800eec4:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800eec8:	4413      	add	r3, r2
 800eeca:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800eecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eece:	3304      	adds	r3, #4
 800eed0:	781b      	ldrb	r3, [r3, #0]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d006      	beq.n	800eee4 <find_volume+0x124>
 800eed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eed8:	3308      	adds	r3, #8
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7fe fd38 	bl	800d950 <ld_dword>
 800eee0:	4602      	mov	r2, r0
 800eee2:	e000      	b.n	800eee6 <find_volume+0x126>
 800eee4:	2200      	movs	r2, #0
 800eee6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eee8:	009b      	lsls	r3, r3, #2
 800eeea:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800eeee:	440b      	add	r3, r1
 800eef0:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800eef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eef6:	3301      	adds	r3, #1
 800eef8:	643b      	str	r3, [r7, #64]	; 0x40
 800eefa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eefc:	2b03      	cmp	r3, #3
 800eefe:	d9dc      	bls.n	800eeba <find_volume+0xfa>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800ef00:	2300      	movs	r3, #0
 800ef02:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800ef04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	d002      	beq.n	800ef10 <find_volume+0x150>
 800ef0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef0c:	3b01      	subs	r3, #1
 800ef0e:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800ef10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef12:	009b      	lsls	r3, r3, #2
 800ef14:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800ef18:	4413      	add	r3, r2
 800ef1a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800ef1e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800ef20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d005      	beq.n	800ef32 <find_volume+0x172>
 800ef26:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800ef28:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ef2a:	f7ff fef3 	bl	800ed14 <check_fs>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	e000      	b.n	800ef34 <find_volume+0x174>
 800ef32:	2303      	movs	r3, #3
 800ef34:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800ef38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef3c:	2b01      	cmp	r3, #1
 800ef3e:	d905      	bls.n	800ef4c <find_volume+0x18c>
 800ef40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef42:	3301      	adds	r3, #1
 800ef44:	643b      	str	r3, [r7, #64]	; 0x40
 800ef46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef48:	2b03      	cmp	r3, #3
 800ef4a:	d9e1      	bls.n	800ef10 <find_volume+0x150>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800ef4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef50:	2b04      	cmp	r3, #4
 800ef52:	d101      	bne.n	800ef58 <find_volume+0x198>
 800ef54:	2301      	movs	r3, #1
 800ef56:	e17d      	b.n	800f254 <find_volume+0x494>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800ef58:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ef5c:	2b01      	cmp	r3, #1
 800ef5e:	d901      	bls.n	800ef64 <find_volume+0x1a4>
 800ef60:	230d      	movs	r3, #13
 800ef62:	e177      	b.n	800f254 <find_volume+0x494>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800ef64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef66:	3334      	adds	r3, #52	; 0x34
 800ef68:	330b      	adds	r3, #11
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fe fcd8 	bl	800d920 <ld_word>
 800ef70:	4603      	mov	r3, r0
 800ef72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef76:	d001      	beq.n	800ef7c <find_volume+0x1bc>
 800ef78:	230d      	movs	r3, #13
 800ef7a:	e16b      	b.n	800f254 <find_volume+0x494>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800ef7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef7e:	3334      	adds	r3, #52	; 0x34
 800ef80:	3316      	adds	r3, #22
 800ef82:	4618      	mov	r0, r3
 800ef84:	f7fe fccc 	bl	800d920 <ld_word>
 800ef88:	4603      	mov	r3, r0
 800ef8a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800ef8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d106      	bne.n	800efa0 <find_volume+0x1e0>
 800ef92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ef94:	3334      	adds	r3, #52	; 0x34
 800ef96:	3324      	adds	r3, #36	; 0x24
 800ef98:	4618      	mov	r0, r3
 800ef9a:	f7fe fcd9 	bl	800d950 <ld_dword>
 800ef9e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800efa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800efa4:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800efa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efa8:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800efac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efae:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800efb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efb2:	789b      	ldrb	r3, [r3, #2]
 800efb4:	2b01      	cmp	r3, #1
 800efb6:	d005      	beq.n	800efc4 <find_volume+0x204>
 800efb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efba:	789b      	ldrb	r3, [r3, #2]
 800efbc:	2b02      	cmp	r3, #2
 800efbe:	d001      	beq.n	800efc4 <find_volume+0x204>
 800efc0:	230d      	movs	r3, #13
 800efc2:	e147      	b.n	800f254 <find_volume+0x494>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800efc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efc6:	789b      	ldrb	r3, [r3, #2]
 800efc8:	461a      	mov	r2, r3
 800efca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800efcc:	fb02 f303 	mul.w	r3, r2, r3
 800efd0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800efd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800efd8:	b29a      	uxth	r2, r3
 800efda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efdc:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800efde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe0:	895b      	ldrh	r3, [r3, #10]
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d008      	beq.n	800eff8 <find_volume+0x238>
 800efe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efe8:	895b      	ldrh	r3, [r3, #10]
 800efea:	461a      	mov	r2, r3
 800efec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800efee:	895b      	ldrh	r3, [r3, #10]
 800eff0:	3b01      	subs	r3, #1
 800eff2:	4013      	ands	r3, r2
 800eff4:	2b00      	cmp	r3, #0
 800eff6:	d001      	beq.n	800effc <find_volume+0x23c>
 800eff8:	230d      	movs	r3, #13
 800effa:	e12b      	b.n	800f254 <find_volume+0x494>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800effc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800effe:	3334      	adds	r3, #52	; 0x34
 800f000:	3311      	adds	r3, #17
 800f002:	4618      	mov	r0, r3
 800f004:	f7fe fc8c 	bl	800d920 <ld_word>
 800f008:	4603      	mov	r3, r0
 800f00a:	461a      	mov	r2, r3
 800f00c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f00e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800f010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f012:	891b      	ldrh	r3, [r3, #8]
 800f014:	f003 030f 	and.w	r3, r3, #15
 800f018:	b29b      	uxth	r3, r3
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d001      	beq.n	800f022 <find_volume+0x262>
 800f01e:	230d      	movs	r3, #13
 800f020:	e118      	b.n	800f254 <find_volume+0x494>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800f022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f024:	3334      	adds	r3, #52	; 0x34
 800f026:	3313      	adds	r3, #19
 800f028:	4618      	mov	r0, r3
 800f02a:	f7fe fc79 	bl	800d920 <ld_word>
 800f02e:	4603      	mov	r3, r0
 800f030:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800f032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f034:	2b00      	cmp	r3, #0
 800f036:	d106      	bne.n	800f046 <find_volume+0x286>
 800f038:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f03a:	3334      	adds	r3, #52	; 0x34
 800f03c:	3320      	adds	r3, #32
 800f03e:	4618      	mov	r0, r3
 800f040:	f7fe fc86 	bl	800d950 <ld_dword>
 800f044:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800f046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f048:	3334      	adds	r3, #52	; 0x34
 800f04a:	330e      	adds	r3, #14
 800f04c:	4618      	mov	r0, r3
 800f04e:	f7fe fc67 	bl	800d920 <ld_word>
 800f052:	4603      	mov	r3, r0
 800f054:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800f056:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d101      	bne.n	800f060 <find_volume+0x2a0>
 800f05c:	230d      	movs	r3, #13
 800f05e:	e0f9      	b.n	800f254 <find_volume+0x494>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800f060:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f062:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f064:	4413      	add	r3, r2
 800f066:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f068:	8912      	ldrh	r2, [r2, #8]
 800f06a:	0912      	lsrs	r2, r2, #4
 800f06c:	b292      	uxth	r2, r2
 800f06e:	4413      	add	r3, r2
 800f070:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800f072:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f074:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f076:	429a      	cmp	r2, r3
 800f078:	d201      	bcs.n	800f07e <find_volume+0x2be>
 800f07a:	230d      	movs	r3, #13
 800f07c:	e0ea      	b.n	800f254 <find_volume+0x494>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800f07e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f080:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f082:	1ad3      	subs	r3, r2, r3
 800f084:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f086:	8952      	ldrh	r2, [r2, #10]
 800f088:	fbb3 f3f2 	udiv	r3, r3, r2
 800f08c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800f08e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f090:	2b00      	cmp	r3, #0
 800f092:	d103      	bne.n	800f09c <find_volume+0x2dc>
 800f094:	230d      	movs	r3, #13
 800f096:	e0dd      	b.n	800f254 <find_volume+0x494>
 800f098:	20000704 	.word	0x20000704
		fmt = FS_FAT32;
 800f09c:	2303      	movs	r3, #3
 800f09e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800f0a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0a4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800f0a8:	4293      	cmp	r3, r2
 800f0aa:	d802      	bhi.n	800f0b2 <find_volume+0x2f2>
 800f0ac:	2302      	movs	r3, #2
 800f0ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800f0b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 800f0b8:	4293      	cmp	r3, r2
 800f0ba:	d802      	bhi.n	800f0c2 <find_volume+0x302>
 800f0bc:	2301      	movs	r3, #1
 800f0be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800f0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c4:	1c9a      	adds	r2, r3, #2
 800f0c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0c8:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800f0ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f0ce:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800f0d0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f0d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f0d4:	441a      	add	r2, r3
 800f0d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0d8:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800f0da:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800f0dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0de:	441a      	add	r2, r3
 800f0e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0e2:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800f0e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f0e8:	2b03      	cmp	r3, #3
 800f0ea:	d11e      	bne.n	800f12a <find_volume+0x36a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800f0ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f0ee:	3334      	adds	r3, #52	; 0x34
 800f0f0:	332a      	adds	r3, #42	; 0x2a
 800f0f2:	4618      	mov	r0, r3
 800f0f4:	f7fe fc14 	bl	800d920 <ld_word>
 800f0f8:	4603      	mov	r3, r0
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d001      	beq.n	800f102 <find_volume+0x342>
 800f0fe:	230d      	movs	r3, #13
 800f100:	e0a8      	b.n	800f254 <find_volume+0x494>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800f102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f104:	891b      	ldrh	r3, [r3, #8]
 800f106:	2b00      	cmp	r3, #0
 800f108:	d001      	beq.n	800f10e <find_volume+0x34e>
 800f10a:	230d      	movs	r3, #13
 800f10c:	e0a2      	b.n	800f254 <find_volume+0x494>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800f10e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f110:	3334      	adds	r3, #52	; 0x34
 800f112:	332c      	adds	r3, #44	; 0x2c
 800f114:	4618      	mov	r0, r3
 800f116:	f7fe fc1b 	bl	800d950 <ld_dword>
 800f11a:	4602      	mov	r2, r0
 800f11c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f11e:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800f120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f122:	699b      	ldr	r3, [r3, #24]
 800f124:	009b      	lsls	r3, r3, #2
 800f126:	647b      	str	r3, [r7, #68]	; 0x44
 800f128:	e01f      	b.n	800f16a <find_volume+0x3aa>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800f12a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f12c:	891b      	ldrh	r3, [r3, #8]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d101      	bne.n	800f136 <find_volume+0x376>
 800f132:	230d      	movs	r3, #13
 800f134:	e08e      	b.n	800f254 <find_volume+0x494>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800f136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f138:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f13a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f13c:	441a      	add	r2, r3
 800f13e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f140:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800f142:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f146:	2b02      	cmp	r3, #2
 800f148:	d103      	bne.n	800f152 <find_volume+0x392>
 800f14a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f14c:	699b      	ldr	r3, [r3, #24]
 800f14e:	005b      	lsls	r3, r3, #1
 800f150:	e00a      	b.n	800f168 <find_volume+0x3a8>
 800f152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f154:	699a      	ldr	r2, [r3, #24]
 800f156:	4613      	mov	r3, r2
 800f158:	005b      	lsls	r3, r3, #1
 800f15a:	4413      	add	r3, r2
 800f15c:	085a      	lsrs	r2, r3, #1
 800f15e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f160:	699b      	ldr	r3, [r3, #24]
 800f162:	f003 0301 	and.w	r3, r3, #1
 800f166:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800f168:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800f16a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f16c:	69da      	ldr	r2, [r3, #28]
 800f16e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f170:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800f174:	0a5b      	lsrs	r3, r3, #9
 800f176:	429a      	cmp	r2, r3
 800f178:	d201      	bcs.n	800f17e <find_volume+0x3be>
 800f17a:	230d      	movs	r3, #13
 800f17c:	e06a      	b.n	800f254 <find_volume+0x494>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800f17e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f180:	f04f 32ff 	mov.w	r2, #4294967295
 800f184:	615a      	str	r2, [r3, #20]
 800f186:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f188:	695a      	ldr	r2, [r3, #20]
 800f18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f18c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800f18e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f190:	2280      	movs	r2, #128	; 0x80
 800f192:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800f194:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800f198:	2b03      	cmp	r3, #3
 800f19a:	d149      	bne.n	800f230 <find_volume+0x470>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800f19c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f19e:	3334      	adds	r3, #52	; 0x34
 800f1a0:	3330      	adds	r3, #48	; 0x30
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7fe fbbc 	bl	800d920 <ld_word>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d140      	bne.n	800f230 <find_volume+0x470>
			&& move_window(fs, bsect + 1) == FR_OK)
 800f1ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	4619      	mov	r1, r3
 800f1b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f1b6:	f7fe fe95 	bl	800dee4 <move_window>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	2b00      	cmp	r3, #0
 800f1be:	d137      	bne.n	800f230 <find_volume+0x470>
		{
			fs->fsi_flag = 0;
 800f1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800f1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1c8:	3334      	adds	r3, #52	; 0x34
 800f1ca:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	f7fe fba6 	bl	800d920 <ld_word>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	461a      	mov	r2, r3
 800f1d8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800f1dc:	429a      	cmp	r2, r3
 800f1de:	d127      	bne.n	800f230 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800f1e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e2:	3334      	adds	r3, #52	; 0x34
 800f1e4:	4618      	mov	r0, r3
 800f1e6:	f7fe fbb3 	bl	800d950 <ld_dword>
 800f1ea:	4603      	mov	r3, r0
 800f1ec:	4a1b      	ldr	r2, [pc, #108]	; (800f25c <find_volume+0x49c>)
 800f1ee:	4293      	cmp	r3, r2
 800f1f0:	d11e      	bne.n	800f230 <find_volume+0x470>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800f1f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f4:	3334      	adds	r3, #52	; 0x34
 800f1f6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7fe fba8 	bl	800d950 <ld_dword>
 800f200:	4603      	mov	r3, r0
 800f202:	4a17      	ldr	r2, [pc, #92]	; (800f260 <find_volume+0x4a0>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d113      	bne.n	800f230 <find_volume+0x470>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800f208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f20a:	3334      	adds	r3, #52	; 0x34
 800f20c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800f210:	4618      	mov	r0, r3
 800f212:	f7fe fb9d 	bl	800d950 <ld_dword>
 800f216:	4602      	mov	r2, r0
 800f218:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21a:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800f21c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f21e:	3334      	adds	r3, #52	; 0x34
 800f220:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800f224:	4618      	mov	r0, r3
 800f226:	f7fe fb93 	bl	800d950 <ld_dword>
 800f22a:	4602      	mov	r2, r0
 800f22c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f22e:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800f230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f232:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800f236:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800f238:	4b0a      	ldr	r3, [pc, #40]	; (800f264 <find_volume+0x4a4>)
 800f23a:	881b      	ldrh	r3, [r3, #0]
 800f23c:	3301      	adds	r3, #1
 800f23e:	b29a      	uxth	r2, r3
 800f240:	4b08      	ldr	r3, [pc, #32]	; (800f264 <find_volume+0x4a4>)
 800f242:	801a      	strh	r2, [r3, #0]
 800f244:	4b07      	ldr	r3, [pc, #28]	; (800f264 <find_volume+0x4a4>)
 800f246:	881a      	ldrh	r2, [r3, #0]
 800f248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f24a:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800f24c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800f24e:	f7fe fde1 	bl	800de14 <clear_lock>
#endif
	return FR_OK;
 800f252:	2300      	movs	r3, #0
}
 800f254:	4618      	mov	r0, r3
 800f256:	3758      	adds	r7, #88	; 0x58
 800f258:	46bd      	mov	sp, r7
 800f25a:	bd80      	pop	{r7, pc}
 800f25c:	41615252 	.word	0x41615252
 800f260:	61417272 	.word	0x61417272
 800f264:	20000708 	.word	0x20000708

0800f268 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800f268:	b580      	push	{r7, lr}
 800f26a:	b084      	sub	sp, #16
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	6078      	str	r0, [r7, #4]
 800f270:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800f272:	2309      	movs	r3, #9
 800f274:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d02e      	beq.n	800f2da <validate+0x72>
 800f27c:	687b      	ldr	r3, [r7, #4]
 800f27e:	681b      	ldr	r3, [r3, #0]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d02a      	beq.n	800f2da <validate+0x72>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681b      	ldr	r3, [r3, #0]
 800f288:	781b      	ldrb	r3, [r3, #0]
 800f28a:	2b00      	cmp	r3, #0
 800f28c:	d025      	beq.n	800f2da <validate+0x72>
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	889a      	ldrh	r2, [r3, #4]
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	681b      	ldr	r3, [r3, #0]
 800f296:	88db      	ldrh	r3, [r3, #6]
 800f298:	429a      	cmp	r2, r3
 800f29a:	d11e      	bne.n	800f2da <validate+0x72>
#if _FS_REENTRANT
		if (lock_fs(obj->fs)) {	/* Obtain the filesystem object */
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	681b      	ldr	r3, [r3, #0]
 800f2a0:	4618      	mov	r0, r3
 800f2a2:	f7fe fc3d 	bl	800db20 <lock_fs>
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d014      	beq.n	800f2d6 <validate+0x6e>
			if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	785b      	ldrb	r3, [r3, #1]
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7fe fa96 	bl	800d7e4 <disk_status>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	f003 0301 	and.w	r3, r3, #1
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d102      	bne.n	800f2c8 <validate+0x60>
				res = FR_OK;
 800f2c2:	2300      	movs	r3, #0
 800f2c4:	73fb      	strb	r3, [r7, #15]
 800f2c6:	e008      	b.n	800f2da <validate+0x72>
			} else {
				unlock_fs(obj->fs, FR_OK);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	681b      	ldr	r3, [r3, #0]
 800f2cc:	2100      	movs	r1, #0
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7fe fc3c 	bl	800db4c <unlock_fs>
 800f2d4:	e001      	b.n	800f2da <validate+0x72>
			}
		} else {
			res = FR_TIMEOUT;
 800f2d6:	230f      	movs	r3, #15
 800f2d8:	73fb      	strb	r3, [r7, #15]
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
			res = FR_OK;
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800f2da:	7bfb      	ldrb	r3, [r7, #15]
 800f2dc:	2b00      	cmp	r3, #0
 800f2de:	d102      	bne.n	800f2e6 <validate+0x7e>
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	e000      	b.n	800f2e8 <validate+0x80>
 800f2e6:	2300      	movs	r3, #0
 800f2e8:	683a      	ldr	r2, [r7, #0]
 800f2ea:	6013      	str	r3, [r2, #0]
	return res;
 800f2ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ee:	4618      	mov	r0, r3
 800f2f0:	3710      	adds	r7, #16
 800f2f2:	46bd      	mov	sp, r7
 800f2f4:	bd80      	pop	{r7, pc}
	...

0800f2f8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b088      	sub	sp, #32
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	60f8      	str	r0, [r7, #12]
 800f300:	60b9      	str	r1, [r7, #8]
 800f302:	4613      	mov	r3, r2
 800f304:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800f30a:	f107 0310 	add.w	r3, r7, #16
 800f30e:	4618      	mov	r0, r3
 800f310:	f7ff fcbb 	bl	800ec8a <get_ldnumber>
 800f314:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800f316:	69fb      	ldr	r3, [r7, #28]
 800f318:	2b00      	cmp	r3, #0
 800f31a:	da01      	bge.n	800f320 <f_mount+0x28>
 800f31c:	230b      	movs	r3, #11
 800f31e:	e048      	b.n	800f3b2 <f_mount+0xba>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800f320:	4a26      	ldr	r2, [pc, #152]	; (800f3bc <f_mount+0xc4>)
 800f322:	69fb      	ldr	r3, [r7, #28]
 800f324:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f328:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800f32a:	69bb      	ldr	r3, [r7, #24]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d00f      	beq.n	800f350 <f_mount+0x58>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800f330:	69b8      	ldr	r0, [r7, #24]
 800f332:	f7fe fd6f 	bl	800de14 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
 800f336:	69bb      	ldr	r3, [r7, #24]
 800f338:	68db      	ldr	r3, [r3, #12]
 800f33a:	4618      	mov	r0, r3
 800f33c:	f001 f905 	bl	801054a <ff_del_syncobj>
 800f340:	4603      	mov	r3, r0
 800f342:	2b00      	cmp	r3, #0
 800f344:	d101      	bne.n	800f34a <f_mount+0x52>
 800f346:	2302      	movs	r3, #2
 800f348:	e033      	b.n	800f3b2 <f_mount+0xba>
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800f34a:	69bb      	ldr	r3, [r7, #24]
 800f34c:	2200      	movs	r2, #0
 800f34e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800f350:	68fb      	ldr	r3, [r7, #12]
 800f352:	2b00      	cmp	r3, #0
 800f354:	d00f      	beq.n	800f376 <f_mount+0x7e>
		fs->fs_type = 0;				/* Clear new fs object */
 800f356:	68fb      	ldr	r3, [r7, #12]
 800f358:	2200      	movs	r2, #0
 800f35a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
 800f35c:	69fb      	ldr	r3, [r7, #28]
 800f35e:	b2da      	uxtb	r2, r3
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	330c      	adds	r3, #12
 800f364:	4619      	mov	r1, r3
 800f366:	4610      	mov	r0, r2
 800f368:	f001 f8cf 	bl	801050a <ff_cre_syncobj>
 800f36c:	4603      	mov	r3, r0
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d101      	bne.n	800f376 <f_mount+0x7e>
 800f372:	2302      	movs	r3, #2
 800f374:	e01d      	b.n	800f3b2 <f_mount+0xba>
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800f376:	68fa      	ldr	r2, [r7, #12]
 800f378:	4910      	ldr	r1, [pc, #64]	; (800f3bc <f_mount+0xc4>)
 800f37a:	69fb      	ldr	r3, [r7, #28]
 800f37c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800f380:	68fb      	ldr	r3, [r7, #12]
 800f382:	2b00      	cmp	r3, #0
 800f384:	d002      	beq.n	800f38c <f_mount+0x94>
 800f386:	79fb      	ldrb	r3, [r7, #7]
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d001      	beq.n	800f390 <f_mount+0x98>
 800f38c:	2300      	movs	r3, #0
 800f38e:	e010      	b.n	800f3b2 <f_mount+0xba>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800f390:	f107 010c 	add.w	r1, r7, #12
 800f394:	f107 0308 	add.w	r3, r7, #8
 800f398:	2200      	movs	r2, #0
 800f39a:	4618      	mov	r0, r3
 800f39c:	f7ff fd10 	bl	800edc0 <find_volume>
 800f3a0:	4603      	mov	r3, r0
 800f3a2:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800f3a4:	68fb      	ldr	r3, [r7, #12]
 800f3a6:	7dfa      	ldrb	r2, [r7, #23]
 800f3a8:	4611      	mov	r1, r2
 800f3aa:	4618      	mov	r0, r3
 800f3ac:	f7fe fbce 	bl	800db4c <unlock_fs>
 800f3b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3b2:	4618      	mov	r0, r3
 800f3b4:	3720      	adds	r7, #32
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
 800f3ba:	bf00      	nop
 800f3bc:	20000704 	.word	0x20000704

0800f3c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800f3c0:	b580      	push	{r7, lr}
 800f3c2:	b098      	sub	sp, #96	; 0x60
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	60f8      	str	r0, [r7, #12]
 800f3c8:	60b9      	str	r1, [r7, #8]
 800f3ca:	4613      	mov	r3, r2
 800f3cc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d101      	bne.n	800f3d8 <f_open+0x18>
 800f3d4:	2309      	movs	r3, #9
 800f3d6:	e1b0      	b.n	800f73a <f_open+0x37a>

	/* Get logical drive */
	//mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
	res = find_volume(&path, &fs, mode);
 800f3d8:	79fa      	ldrb	r2, [r7, #7]
 800f3da:	f107 0110 	add.w	r1, r7, #16
 800f3de:	f107 0308 	add.w	r3, r7, #8
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7ff fcec 	bl	800edc0 <find_volume>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800f3ee:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	f040 8191 	bne.w	800f71a <f_open+0x35a>
		dj.obj.fs = fs;
 800f3f8:	693b      	ldr	r3, [r7, #16]
 800f3fa:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800f3fc:	68ba      	ldr	r2, [r7, #8]
 800f3fe:	f107 0314 	add.w	r3, r7, #20
 800f402:	4611      	mov	r1, r2
 800f404:	4618      	mov	r0, r3
 800f406:	f7ff fbcf 	bl	800eba8 <follow_path>
 800f40a:	4603      	mov	r3, r0
 800f40c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800f410:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f414:	2b00      	cmp	r3, #0
 800f416:	d11a      	bne.n	800f44e <f_open+0x8e>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800f418:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f41c:	b25b      	sxtb	r3, r3
 800f41e:	2b00      	cmp	r3, #0
 800f420:	da03      	bge.n	800f42a <f_open+0x6a>
				res = FR_INVALID_NAME;
 800f422:	2306      	movs	r3, #6
 800f424:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f428:	e011      	b.n	800f44e <f_open+0x8e>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f42a:	79fb      	ldrb	r3, [r7, #7]
 800f42c:	f023 0301 	bic.w	r3, r3, #1
 800f430:	2b00      	cmp	r3, #0
 800f432:	bf14      	ite	ne
 800f434:	2301      	movne	r3, #1
 800f436:	2300      	moveq	r3, #0
 800f438:	b2db      	uxtb	r3, r3
 800f43a:	461a      	mov	r2, r3
 800f43c:	f107 0314 	add.w	r3, r7, #20
 800f440:	4611      	mov	r1, r2
 800f442:	4618      	mov	r0, r3
 800f444:	f7fe fb9e 	bl	800db84 <chk_lock>
 800f448:	4603      	mov	r3, r0
 800f44a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800f44e:	79fb      	ldrb	r3, [r7, #7]
 800f450:	f003 031c 	and.w	r3, r3, #28
 800f454:	2b00      	cmp	r3, #0
 800f456:	d07f      	beq.n	800f558 <f_open+0x198>
			if (res != FR_OK) {					/* No file, create new */
 800f458:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d017      	beq.n	800f490 <f_open+0xd0>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800f460:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f464:	2b04      	cmp	r3, #4
 800f466:	d10e      	bne.n	800f486 <f_open+0xc6>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800f468:	f7fe fbe8 	bl	800dc3c <enq_lock>
 800f46c:	4603      	mov	r3, r0
 800f46e:	2b00      	cmp	r3, #0
 800f470:	d006      	beq.n	800f480 <f_open+0xc0>
 800f472:	f107 0314 	add.w	r3, r7, #20
 800f476:	4618      	mov	r0, r3
 800f478:	f7ff facf 	bl	800ea1a <dir_register>
 800f47c:	4603      	mov	r3, r0
 800f47e:	e000      	b.n	800f482 <f_open+0xc2>
 800f480:	2312      	movs	r3, #18
 800f482:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800f486:	79fb      	ldrb	r3, [r7, #7]
 800f488:	f043 0308 	orr.w	r3, r3, #8
 800f48c:	71fb      	strb	r3, [r7, #7]
 800f48e:	e010      	b.n	800f4b2 <f_open+0xf2>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800f490:	7ebb      	ldrb	r3, [r7, #26]
 800f492:	f003 0311 	and.w	r3, r3, #17
 800f496:	2b00      	cmp	r3, #0
 800f498:	d003      	beq.n	800f4a2 <f_open+0xe2>
					res = FR_DENIED;
 800f49a:	2307      	movs	r3, #7
 800f49c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f4a0:	e007      	b.n	800f4b2 <f_open+0xf2>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800f4a2:	79fb      	ldrb	r3, [r7, #7]
 800f4a4:	f003 0304 	and.w	r3, r3, #4
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d002      	beq.n	800f4b2 <f_open+0xf2>
 800f4ac:	2308      	movs	r3, #8
 800f4ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800f4b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d168      	bne.n	800f58c <f_open+0x1cc>
 800f4ba:	79fb      	ldrb	r3, [r7, #7]
 800f4bc:	f003 0308 	and.w	r3, r3, #8
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d063      	beq.n	800f58c <f_open+0x1cc>
				dw = GET_FATTIME();
 800f4c4:	f7fd ff1e 	bl	800d304 <get_fattime>
 800f4c8:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800f4ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4cc:	330e      	adds	r3, #14
 800f4ce:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f4d0:	4618      	mov	r0, r3
 800f4d2:	f7fe fa7b 	bl	800d9cc <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800f4d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4d8:	3316      	adds	r3, #22
 800f4da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f4dc:	4618      	mov	r0, r3
 800f4de:	f7fe fa75 	bl	800d9cc <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800f4e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4e4:	330b      	adds	r3, #11
 800f4e6:	2220      	movs	r2, #32
 800f4e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800f4ea:	693b      	ldr	r3, [r7, #16]
 800f4ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f4ee:	4611      	mov	r1, r2
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	f7ff f9fe 	bl	800e8f2 <ld_clust>
 800f4f6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800f4f8:	693b      	ldr	r3, [r7, #16]
 800f4fa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	4618      	mov	r0, r3
 800f500:	f7ff fa16 	bl	800e930 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800f504:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f506:	331c      	adds	r3, #28
 800f508:	2100      	movs	r1, #0
 800f50a:	4618      	mov	r0, r3
 800f50c:	f7fe fa5e 	bl	800d9cc <st_dword>
					fs->wflag = 1;
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	2201      	movs	r2, #1
 800f514:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800f516:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f518:	2b00      	cmp	r3, #0
 800f51a:	d037      	beq.n	800f58c <f_open+0x1cc>
						dw = fs->winsect;
 800f51c:	693b      	ldr	r3, [r7, #16]
 800f51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f520:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800f522:	f107 0314 	add.w	r3, r7, #20
 800f526:	2200      	movs	r2, #0
 800f528:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800f52a:	4618      	mov	r0, r3
 800f52c:	f7fe ff29 	bl	800e382 <remove_chain>
 800f530:	4603      	mov	r3, r0
 800f532:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800f536:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d126      	bne.n	800f58c <f_open+0x1cc>
							res = move_window(fs, dw);
 800f53e:	693b      	ldr	r3, [r7, #16]
 800f540:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800f542:	4618      	mov	r0, r3
 800f544:	f7fe fcce 	bl	800dee4 <move_window>
 800f548:	4603      	mov	r3, r0
 800f54a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800f54e:	693b      	ldr	r3, [r7, #16]
 800f550:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800f552:	3a01      	subs	r2, #1
 800f554:	611a      	str	r2, [r3, #16]
 800f556:	e019      	b.n	800f58c <f_open+0x1cc>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800f558:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d115      	bne.n	800f58c <f_open+0x1cc>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800f560:	7ebb      	ldrb	r3, [r7, #26]
 800f562:	f003 0310 	and.w	r3, r3, #16
 800f566:	2b00      	cmp	r3, #0
 800f568:	d003      	beq.n	800f572 <f_open+0x1b2>
					res = FR_NO_FILE;
 800f56a:	2304      	movs	r3, #4
 800f56c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f570:	e00c      	b.n	800f58c <f_open+0x1cc>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800f572:	79fb      	ldrb	r3, [r7, #7]
 800f574:	f003 0302 	and.w	r3, r3, #2
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d007      	beq.n	800f58c <f_open+0x1cc>
 800f57c:	7ebb      	ldrb	r3, [r7, #26]
 800f57e:	f003 0301 	and.w	r3, r3, #1
 800f582:	2b00      	cmp	r3, #0
 800f584:	d002      	beq.n	800f58c <f_open+0x1cc>
						res = FR_DENIED;
 800f586:	2307      	movs	r3, #7
 800f588:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800f58c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f590:	2b00      	cmp	r3, #0
 800f592:	d128      	bne.n	800f5e6 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800f594:	79fb      	ldrb	r3, [r7, #7]
 800f596:	f003 0308 	and.w	r3, r3, #8
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d003      	beq.n	800f5a6 <f_open+0x1e6>
				mode |= FA_MODIFIED;
 800f59e:	79fb      	ldrb	r3, [r7, #7]
 800f5a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f5a4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800f5a6:	693b      	ldr	r3, [r7, #16]
 800f5a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800f5ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5b0:	68fb      	ldr	r3, [r7, #12]
 800f5b2:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800f5b4:	79fb      	ldrb	r3, [r7, #7]
 800f5b6:	f023 0301 	bic.w	r3, r3, #1
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	bf14      	ite	ne
 800f5be:	2301      	movne	r3, #1
 800f5c0:	2300      	moveq	r3, #0
 800f5c2:	b2db      	uxtb	r3, r3
 800f5c4:	461a      	mov	r2, r3
 800f5c6:	f107 0314 	add.w	r3, r7, #20
 800f5ca:	4611      	mov	r1, r2
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	f7fe fb57 	bl	800dc80 <inc_lock>
 800f5d2:	4602      	mov	r2, r0
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800f5d8:	68fb      	ldr	r3, [r7, #12]
 800f5da:	691b      	ldr	r3, [r3, #16]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d102      	bne.n	800f5e6 <f_open+0x226>
 800f5e0:	2302      	movs	r3, #2
 800f5e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800f5e6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f5ea:	2b00      	cmp	r3, #0
 800f5ec:	f040 8095 	bne.w	800f71a <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800f5f0:	693b      	ldr	r3, [r7, #16]
 800f5f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f5f4:	4611      	mov	r1, r2
 800f5f6:	4618      	mov	r0, r3
 800f5f8:	f7ff f97b 	bl	800e8f2 <ld_clust>
 800f5fc:	4602      	mov	r2, r0
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800f602:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f604:	331c      	adds	r3, #28
 800f606:	4618      	mov	r0, r3
 800f608:	f7fe f9a2 	bl	800d950 <ld_dword>
 800f60c:	4602      	mov	r2, r0
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2200      	movs	r2, #0
 800f616:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800f618:	693a      	ldr	r2, [r7, #16]
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800f61e:	693b      	ldr	r3, [r7, #16]
 800f620:	88da      	ldrh	r2, [r3, #6]
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	79fa      	ldrb	r2, [r7, #7]
 800f62a:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	2200      	movs	r2, #0
 800f630:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	2200      	movs	r2, #0
 800f636:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	2200      	movs	r2, #0
 800f63c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800f63e:	68fb      	ldr	r3, [r7, #12]
 800f640:	3330      	adds	r3, #48	; 0x30
 800f642:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f646:	2100      	movs	r1, #0
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fe fa0c 	bl	800da66 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800f64e:	79fb      	ldrb	r3, [r7, #7]
 800f650:	f003 0320 	and.w	r3, r3, #32
 800f654:	2b00      	cmp	r3, #0
 800f656:	d060      	beq.n	800f71a <f_open+0x35a>
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	68db      	ldr	r3, [r3, #12]
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d05c      	beq.n	800f71a <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	68da      	ldr	r2, [r3, #12]
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800f668:	693b      	ldr	r3, [r7, #16]
 800f66a:	895b      	ldrh	r3, [r3, #10]
 800f66c:	025b      	lsls	r3, r3, #9
 800f66e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800f670:	68fb      	ldr	r3, [r7, #12]
 800f672:	689b      	ldr	r3, [r3, #8]
 800f674:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	68db      	ldr	r3, [r3, #12]
 800f67a:	657b      	str	r3, [r7, #84]	; 0x54
 800f67c:	e016      	b.n	800f6ac <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f682:	4618      	mov	r0, r3
 800f684:	f7fe fce9 	bl	800e05a <get_fat>
 800f688:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800f68a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d802      	bhi.n	800f696 <f_open+0x2d6>
 800f690:	2302      	movs	r3, #2
 800f692:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800f696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800f698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f69c:	d102      	bne.n	800f6a4 <f_open+0x2e4>
 800f69e:	2301      	movs	r3, #1
 800f6a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800f6a4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f6a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6a8:	1ad3      	subs	r3, r2, r3
 800f6aa:	657b      	str	r3, [r7, #84]	; 0x54
 800f6ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d103      	bne.n	800f6bc <f_open+0x2fc>
 800f6b4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800f6b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f6b8:	429a      	cmp	r2, r3
 800f6ba:	d8e0      	bhi.n	800f67e <f_open+0x2be>
				}
				fp->clust = clst;
 800f6bc:	68fb      	ldr	r3, [r7, #12]
 800f6be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f6c0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800f6c2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d127      	bne.n	800f71a <f_open+0x35a>
 800f6ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d022      	beq.n	800f71a <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800f6d4:	693b      	ldr	r3, [r7, #16]
 800f6d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7fe fc9f 	bl	800e01c <clust2sect>
 800f6de:	6478      	str	r0, [r7, #68]	; 0x44
 800f6e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d103      	bne.n	800f6ee <f_open+0x32e>
						res = FR_INT_ERR;
 800f6e6:	2302      	movs	r3, #2
 800f6e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800f6ec:	e015      	b.n	800f71a <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800f6ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f6f0:	0a5a      	lsrs	r2, r3, #9
 800f6f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f6f4:	441a      	add	r2, r3
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800f6fa:	693b      	ldr	r3, [r7, #16]
 800f6fc:	7858      	ldrb	r0, [r3, #1]
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	6a1a      	ldr	r2, [r3, #32]
 800f708:	2301      	movs	r3, #1
 800f70a:	f7fe f8ab 	bl	800d864 <disk_read>
 800f70e:	4603      	mov	r3, r0
 800f710:	2b00      	cmp	r3, #0
 800f712:	d002      	beq.n	800f71a <f_open+0x35a>
 800f714:	2301      	movs	r3, #1
 800f716:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800f71a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d002      	beq.n	800f728 <f_open+0x368>
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	2200      	movs	r2, #0
 800f726:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800f728:	693b      	ldr	r3, [r7, #16]
 800f72a:	f897 205f 	ldrb.w	r2, [r7, #95]	; 0x5f
 800f72e:	4611      	mov	r1, r2
 800f730:	4618      	mov	r0, r3
 800f732:	f7fe fa0b 	bl	800db4c <unlock_fs>
 800f736:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800f73a:	4618      	mov	r0, r3
 800f73c:	3760      	adds	r7, #96	; 0x60
 800f73e:	46bd      	mov	sp, r7
 800f740:	bd80      	pop	{r7, pc}

0800f742 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800f742:	b580      	push	{r7, lr}
 800f744:	b08c      	sub	sp, #48	; 0x30
 800f746:	af00      	add	r7, sp, #0
 800f748:	60f8      	str	r0, [r7, #12]
 800f74a:	60b9      	str	r1, [r7, #8]
 800f74c:	607a      	str	r2, [r7, #4]
 800f74e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800f750:	68bb      	ldr	r3, [r7, #8]
 800f752:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800f754:	683b      	ldr	r3, [r7, #0]
 800f756:	2200      	movs	r2, #0
 800f758:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f107 0210 	add.w	r2, r7, #16
 800f760:	4611      	mov	r1, r2
 800f762:	4618      	mov	r0, r3
 800f764:	f7ff fd80 	bl	800f268 <validate>
 800f768:	4603      	mov	r3, r0
 800f76a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800f76e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f772:	2b00      	cmp	r3, #0
 800f774:	d107      	bne.n	800f786 <f_write+0x44>
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	7d5b      	ldrb	r3, [r3, #21]
 800f77a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800f77e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f782:	2b00      	cmp	r3, #0
 800f784:	d009      	beq.n	800f79a <f_write+0x58>
 800f786:	693b      	ldr	r3, [r7, #16]
 800f788:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f78c:	4611      	mov	r1, r2
 800f78e:	4618      	mov	r0, r3
 800f790:	f7fe f9dc 	bl	800db4c <unlock_fs>
 800f794:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f798:	e173      	b.n	800fa82 <f_write+0x340>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	7d1b      	ldrb	r3, [r3, #20]
 800f79e:	f003 0302 	and.w	r3, r3, #2
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d106      	bne.n	800f7b4 <f_write+0x72>
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	2107      	movs	r1, #7
 800f7aa:	4618      	mov	r0, r3
 800f7ac:	f7fe f9ce 	bl	800db4c <unlock_fs>
 800f7b0:	2307      	movs	r3, #7
 800f7b2:	e166      	b.n	800fa82 <f_write+0x340>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	699a      	ldr	r2, [r3, #24]
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	441a      	add	r2, r3
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	699b      	ldr	r3, [r3, #24]
 800f7c0:	429a      	cmp	r2, r3
 800f7c2:	f080 814b 	bcs.w	800fa5c <f_write+0x31a>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	699b      	ldr	r3, [r3, #24]
 800f7ca:	43db      	mvns	r3, r3
 800f7cc:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800f7ce:	e145      	b.n	800fa5c <f_write+0x31a>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800f7d0:	68fb      	ldr	r3, [r7, #12]
 800f7d2:	699b      	ldr	r3, [r3, #24]
 800f7d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f7d8:	2b00      	cmp	r3, #0
 800f7da:	f040 8101 	bne.w	800f9e0 <f_write+0x29e>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	699b      	ldr	r3, [r3, #24]
 800f7e2:	0a5b      	lsrs	r3, r3, #9
 800f7e4:	693a      	ldr	r2, [r7, #16]
 800f7e6:	8952      	ldrh	r2, [r2, #10]
 800f7e8:	3a01      	subs	r2, #1
 800f7ea:	4013      	ands	r3, r2
 800f7ec:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800f7ee:	69bb      	ldr	r3, [r7, #24]
 800f7f0:	2b00      	cmp	r3, #0
 800f7f2:	d14d      	bne.n	800f890 <f_write+0x14e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	699b      	ldr	r3, [r3, #24]
 800f7f8:	2b00      	cmp	r3, #0
 800f7fa:	d10c      	bne.n	800f816 <f_write+0xd4>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	689b      	ldr	r3, [r3, #8]
 800f800:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800f802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f804:	2b00      	cmp	r3, #0
 800f806:	d11a      	bne.n	800f83e <f_write+0xfc>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800f808:	68fb      	ldr	r3, [r7, #12]
 800f80a:	2100      	movs	r1, #0
 800f80c:	4618      	mov	r0, r3
 800f80e:	f7fe fe1d 	bl	800e44c <create_chain>
 800f812:	62b8      	str	r0, [r7, #40]	; 0x28
 800f814:	e013      	b.n	800f83e <f_write+0xfc>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800f816:	68fb      	ldr	r3, [r7, #12]
 800f818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d007      	beq.n	800f82e <f_write+0xec>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800f81e:	68fb      	ldr	r3, [r7, #12]
 800f820:	699b      	ldr	r3, [r3, #24]
 800f822:	4619      	mov	r1, r3
 800f824:	68f8      	ldr	r0, [r7, #12]
 800f826:	f7fe fea9 	bl	800e57c <clmt_clust>
 800f82a:	62b8      	str	r0, [r7, #40]	; 0x28
 800f82c:	e007      	b.n	800f83e <f_write+0xfc>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800f82e:	68fa      	ldr	r2, [r7, #12]
 800f830:	68fb      	ldr	r3, [r7, #12]
 800f832:	69db      	ldr	r3, [r3, #28]
 800f834:	4619      	mov	r1, r3
 800f836:	4610      	mov	r0, r2
 800f838:	f7fe fe08 	bl	800e44c <create_chain>
 800f83c:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800f83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f840:	2b00      	cmp	r3, #0
 800f842:	f000 8110 	beq.w	800fa66 <f_write+0x324>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800f846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f848:	2b01      	cmp	r3, #1
 800f84a:	d109      	bne.n	800f860 <f_write+0x11e>
 800f84c:	68fb      	ldr	r3, [r7, #12]
 800f84e:	2202      	movs	r2, #2
 800f850:	755a      	strb	r2, [r3, #21]
 800f852:	693b      	ldr	r3, [r7, #16]
 800f854:	2102      	movs	r1, #2
 800f856:	4618      	mov	r0, r3
 800f858:	f7fe f978 	bl	800db4c <unlock_fs>
 800f85c:	2302      	movs	r3, #2
 800f85e:	e110      	b.n	800fa82 <f_write+0x340>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800f860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f862:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f866:	d109      	bne.n	800f87c <f_write+0x13a>
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	2201      	movs	r2, #1
 800f86c:	755a      	strb	r2, [r3, #21]
 800f86e:	693b      	ldr	r3, [r7, #16]
 800f870:	2101      	movs	r1, #1
 800f872:	4618      	mov	r0, r3
 800f874:	f7fe f96a 	bl	800db4c <unlock_fs>
 800f878:	2301      	movs	r3, #1
 800f87a:	e102      	b.n	800fa82 <f_write+0x340>
				fp->clust = clst;			/* Update current cluster */
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f880:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	689b      	ldr	r3, [r3, #8]
 800f886:	2b00      	cmp	r3, #0
 800f888:	d102      	bne.n	800f890 <f_write+0x14e>
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f88e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	7d1b      	ldrb	r3, [r3, #20]
 800f894:	b25b      	sxtb	r3, r3
 800f896:	2b00      	cmp	r3, #0
 800f898:	da1d      	bge.n	800f8d6 <f_write+0x194>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f89a:	693b      	ldr	r3, [r7, #16]
 800f89c:	7858      	ldrb	r0, [r3, #1]
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f8a4:	68fb      	ldr	r3, [r7, #12]
 800f8a6:	6a1a      	ldr	r2, [r3, #32]
 800f8a8:	2301      	movs	r3, #1
 800f8aa:	f7fd fffb 	bl	800d8a4 <disk_write>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	2b00      	cmp	r3, #0
 800f8b2:	d009      	beq.n	800f8c8 <f_write+0x186>
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	2201      	movs	r2, #1
 800f8b8:	755a      	strb	r2, [r3, #21]
 800f8ba:	693b      	ldr	r3, [r7, #16]
 800f8bc:	2101      	movs	r1, #1
 800f8be:	4618      	mov	r0, r3
 800f8c0:	f7fe f944 	bl	800db4c <unlock_fs>
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	e0dc      	b.n	800fa82 <f_write+0x340>
				fp->flag &= (BYTE)~FA_DIRTY;
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	7d1b      	ldrb	r3, [r3, #20]
 800f8cc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f8d0:	b2da      	uxtb	r2, r3
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800f8d6:	693a      	ldr	r2, [r7, #16]
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	69db      	ldr	r3, [r3, #28]
 800f8dc:	4619      	mov	r1, r3
 800f8de:	4610      	mov	r0, r2
 800f8e0:	f7fe fb9c 	bl	800e01c <clust2sect>
 800f8e4:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800f8e6:	697b      	ldr	r3, [r7, #20]
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d109      	bne.n	800f900 <f_write+0x1be>
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2202      	movs	r2, #2
 800f8f0:	755a      	strb	r2, [r3, #21]
 800f8f2:	693b      	ldr	r3, [r7, #16]
 800f8f4:	2102      	movs	r1, #2
 800f8f6:	4618      	mov	r0, r3
 800f8f8:	f7fe f928 	bl	800db4c <unlock_fs>
 800f8fc:	2302      	movs	r3, #2
 800f8fe:	e0c0      	b.n	800fa82 <f_write+0x340>
			sect += csect;
 800f900:	697a      	ldr	r2, [r7, #20]
 800f902:	69bb      	ldr	r3, [r7, #24]
 800f904:	4413      	add	r3, r2
 800f906:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	0a5b      	lsrs	r3, r3, #9
 800f90c:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800f90e:	6a3b      	ldr	r3, [r7, #32]
 800f910:	2b00      	cmp	r3, #0
 800f912:	d041      	beq.n	800f998 <f_write+0x256>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800f914:	69ba      	ldr	r2, [r7, #24]
 800f916:	6a3b      	ldr	r3, [r7, #32]
 800f918:	4413      	add	r3, r2
 800f91a:	693a      	ldr	r2, [r7, #16]
 800f91c:	8952      	ldrh	r2, [r2, #10]
 800f91e:	4293      	cmp	r3, r2
 800f920:	d905      	bls.n	800f92e <f_write+0x1ec>
					cc = fs->csize - csect;
 800f922:	693b      	ldr	r3, [r7, #16]
 800f924:	895b      	ldrh	r3, [r3, #10]
 800f926:	461a      	mov	r2, r3
 800f928:	69bb      	ldr	r3, [r7, #24]
 800f92a:	1ad3      	subs	r3, r2, r3
 800f92c:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800f92e:	693b      	ldr	r3, [r7, #16]
 800f930:	7858      	ldrb	r0, [r3, #1]
 800f932:	6a3b      	ldr	r3, [r7, #32]
 800f934:	697a      	ldr	r2, [r7, #20]
 800f936:	69f9      	ldr	r1, [r7, #28]
 800f938:	f7fd ffb4 	bl	800d8a4 <disk_write>
 800f93c:	4603      	mov	r3, r0
 800f93e:	2b00      	cmp	r3, #0
 800f940:	d009      	beq.n	800f956 <f_write+0x214>
 800f942:	68fb      	ldr	r3, [r7, #12]
 800f944:	2201      	movs	r2, #1
 800f946:	755a      	strb	r2, [r3, #21]
 800f948:	693b      	ldr	r3, [r7, #16]
 800f94a:	2101      	movs	r1, #1
 800f94c:	4618      	mov	r0, r3
 800f94e:	f7fe f8fd 	bl	800db4c <unlock_fs>
 800f952:	2301      	movs	r3, #1
 800f954:	e095      	b.n	800fa82 <f_write+0x340>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	6a1a      	ldr	r2, [r3, #32]
 800f95a:	697b      	ldr	r3, [r7, #20]
 800f95c:	1ad3      	subs	r3, r2, r3
 800f95e:	6a3a      	ldr	r2, [r7, #32]
 800f960:	429a      	cmp	r2, r3
 800f962:	d915      	bls.n	800f990 <f_write+0x24e>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800f96a:	68fb      	ldr	r3, [r7, #12]
 800f96c:	6a1a      	ldr	r2, [r3, #32]
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	1ad3      	subs	r3, r2, r3
 800f972:	025b      	lsls	r3, r3, #9
 800f974:	69fa      	ldr	r2, [r7, #28]
 800f976:	4413      	add	r3, r2
 800f978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f97c:	4619      	mov	r1, r3
 800f97e:	f7fe f851 	bl	800da24 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800f982:	68fb      	ldr	r3, [r7, #12]
 800f984:	7d1b      	ldrb	r3, [r3, #20]
 800f986:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f98a:	b2da      	uxtb	r2, r3
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800f990:	6a3b      	ldr	r3, [r7, #32]
 800f992:	025b      	lsls	r3, r3, #9
 800f994:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800f996:	e044      	b.n	800fa22 <f_write+0x2e0>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f998:	68fb      	ldr	r3, [r7, #12]
 800f99a:	6a1b      	ldr	r3, [r3, #32]
 800f99c:	697a      	ldr	r2, [r7, #20]
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d01b      	beq.n	800f9da <f_write+0x298>
				fp->fptr < fp->obj.objsize &&
 800f9a2:	68fb      	ldr	r3, [r7, #12]
 800f9a4:	699a      	ldr	r2, [r3, #24]
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800f9aa:	429a      	cmp	r2, r3
 800f9ac:	d215      	bcs.n	800f9da <f_write+0x298>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800f9ae:	693b      	ldr	r3, [r7, #16]
 800f9b0:	7858      	ldrb	r0, [r3, #1]
 800f9b2:	68fb      	ldr	r3, [r7, #12]
 800f9b4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	697a      	ldr	r2, [r7, #20]
 800f9bc:	f7fd ff52 	bl	800d864 <disk_read>
 800f9c0:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800f9c2:	2b00      	cmp	r3, #0
 800f9c4:	d009      	beq.n	800f9da <f_write+0x298>
					ABORT(fs, FR_DISK_ERR);
 800f9c6:	68fb      	ldr	r3, [r7, #12]
 800f9c8:	2201      	movs	r2, #1
 800f9ca:	755a      	strb	r2, [r3, #21]
 800f9cc:	693b      	ldr	r3, [r7, #16]
 800f9ce:	2101      	movs	r1, #1
 800f9d0:	4618      	mov	r0, r3
 800f9d2:	f7fe f8bb 	bl	800db4c <unlock_fs>
 800f9d6:	2301      	movs	r3, #1
 800f9d8:	e053      	b.n	800fa82 <f_write+0x340>
			}
#endif
			fp->sect = sect;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	697a      	ldr	r2, [r7, #20]
 800f9de:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	699b      	ldr	r3, [r3, #24]
 800f9e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f9e8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800f9ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800f9ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	429a      	cmp	r2, r3
 800f9f4:	d901      	bls.n	800f9fa <f_write+0x2b8>
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800f9fa:	68fb      	ldr	r3, [r7, #12]
 800f9fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800fa00:	68fb      	ldr	r3, [r7, #12]
 800fa02:	699b      	ldr	r3, [r3, #24]
 800fa04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fa08:	4413      	add	r3, r2
 800fa0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fa0c:	69f9      	ldr	r1, [r7, #28]
 800fa0e:	4618      	mov	r0, r3
 800fa10:	f7fe f808 	bl	800da24 <mem_cpy>
		fp->flag |= FA_DIRTY;
 800fa14:	68fb      	ldr	r3, [r7, #12]
 800fa16:	7d1b      	ldrb	r3, [r3, #20]
 800fa18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fa1c:	b2da      	uxtb	r2, r3
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800fa22:	69fa      	ldr	r2, [r7, #28]
 800fa24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa26:	4413      	add	r3, r2
 800fa28:	61fb      	str	r3, [r7, #28]
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	699a      	ldr	r2, [r3, #24]
 800fa2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa30:	441a      	add	r2, r3
 800fa32:	68fb      	ldr	r3, [r7, #12]
 800fa34:	619a      	str	r2, [r3, #24]
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	68da      	ldr	r2, [r3, #12]
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	699b      	ldr	r3, [r3, #24]
 800fa3e:	429a      	cmp	r2, r3
 800fa40:	bf38      	it	cc
 800fa42:	461a      	movcc	r2, r3
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	60da      	str	r2, [r3, #12]
 800fa48:	683b      	ldr	r3, [r7, #0]
 800fa4a:	681a      	ldr	r2, [r3, #0]
 800fa4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa4e:	441a      	add	r2, r3
 800fa50:	683b      	ldr	r3, [r7, #0]
 800fa52:	601a      	str	r2, [r3, #0]
 800fa54:	687a      	ldr	r2, [r7, #4]
 800fa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa58:	1ad3      	subs	r3, r2, r3
 800fa5a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800fa5c:	687b      	ldr	r3, [r7, #4]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	f47f aeb6 	bne.w	800f7d0 <f_write+0x8e>
 800fa64:	e000      	b.n	800fa68 <f_write+0x326>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800fa66:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	7d1b      	ldrb	r3, [r3, #20]
 800fa6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa70:	b2da      	uxtb	r2, r3
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800fa76:	693b      	ldr	r3, [r7, #16]
 800fa78:	2100      	movs	r1, #0
 800fa7a:	4618      	mov	r0, r3
 800fa7c:	f7fe f866 	bl	800db4c <unlock_fs>
 800fa80:	2300      	movs	r3, #0
}
 800fa82:	4618      	mov	r0, r3
 800fa84:	3730      	adds	r7, #48	; 0x30
 800fa86:	46bd      	mov	sp, r7
 800fa88:	bd80      	pop	{r7, pc}

0800fa8a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800fa8a:	b580      	push	{r7, lr}
 800fa8c:	b086      	sub	sp, #24
 800fa8e:	af00      	add	r7, sp, #0
 800fa90:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	f107 0208 	add.w	r2, r7, #8
 800fa98:	4611      	mov	r1, r2
 800fa9a:	4618      	mov	r0, r3
 800fa9c:	f7ff fbe4 	bl	800f268 <validate>
 800faa0:	4603      	mov	r3, r0
 800faa2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800faa4:	7dfb      	ldrb	r3, [r7, #23]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	d16d      	bne.n	800fb86 <f_sync+0xfc>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	7d1b      	ldrb	r3, [r3, #20]
 800faae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fab2:	2b00      	cmp	r3, #0
 800fab4:	d067      	beq.n	800fb86 <f_sync+0xfc>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	7d1b      	ldrb	r3, [r3, #20]
 800faba:	b25b      	sxtb	r3, r3
 800fabc:	2b00      	cmp	r3, #0
 800fabe:	da1a      	bge.n	800faf6 <f_sync+0x6c>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	7858      	ldrb	r0, [r3, #1]
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a1a      	ldr	r2, [r3, #32]
 800face:	2301      	movs	r3, #1
 800fad0:	f7fd fee8 	bl	800d8a4 <disk_write>
 800fad4:	4603      	mov	r3, r0
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d006      	beq.n	800fae8 <f_sync+0x5e>
 800fada:	68bb      	ldr	r3, [r7, #8]
 800fadc:	2101      	movs	r1, #1
 800fade:	4618      	mov	r0, r3
 800fae0:	f7fe f834 	bl	800db4c <unlock_fs>
 800fae4:	2301      	movs	r3, #1
 800fae6:	e055      	b.n	800fb94 <f_sync+0x10a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	7d1b      	ldrb	r3, [r3, #20]
 800faec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800faf0:	b2da      	uxtb	r2, r3
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800faf6:	f7fd fc05 	bl	800d304 <get_fattime>
 800fafa:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800fafc:	68ba      	ldr	r2, [r7, #8]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb02:	4619      	mov	r1, r3
 800fb04:	4610      	mov	r0, r2
 800fb06:	f7fe f9ed 	bl	800dee4 <move_window>
 800fb0a:	4603      	mov	r3, r0
 800fb0c:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800fb0e:	7dfb      	ldrb	r3, [r7, #23]
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	d138      	bne.n	800fb86 <f_sync+0xfc>
					dir = fp->dir_ptr;
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fb18:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	330b      	adds	r3, #11
 800fb1e:	781a      	ldrb	r2, [r3, #0]
 800fb20:	68fb      	ldr	r3, [r7, #12]
 800fb22:	330b      	adds	r3, #11
 800fb24:	f042 0220 	orr.w	r2, r2, #32
 800fb28:	b2d2      	uxtb	r2, r2
 800fb2a:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6818      	ldr	r0, [r3, #0]
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	689b      	ldr	r3, [r3, #8]
 800fb34:	461a      	mov	r2, r3
 800fb36:	68f9      	ldr	r1, [r7, #12]
 800fb38:	f7fe fefa 	bl	800e930 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f103 021c 	add.w	r2, r3, #28
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	68db      	ldr	r3, [r3, #12]
 800fb46:	4619      	mov	r1, r3
 800fb48:	4610      	mov	r0, r2
 800fb4a:	f7fd ff3f 	bl	800d9cc <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800fb4e:	68fb      	ldr	r3, [r7, #12]
 800fb50:	3316      	adds	r3, #22
 800fb52:	6939      	ldr	r1, [r7, #16]
 800fb54:	4618      	mov	r0, r3
 800fb56:	f7fd ff39 	bl	800d9cc <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800fb5a:	68fb      	ldr	r3, [r7, #12]
 800fb5c:	3312      	adds	r3, #18
 800fb5e:	2100      	movs	r1, #0
 800fb60:	4618      	mov	r0, r3
 800fb62:	f7fd ff18 	bl	800d996 <st_word>
					fs->wflag = 1;
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	2201      	movs	r2, #1
 800fb6a:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800fb6c:	68bb      	ldr	r3, [r7, #8]
 800fb6e:	4618      	mov	r0, r3
 800fb70:	f7fe f9e6 	bl	800df40 <sync_fs>
 800fb74:	4603      	mov	r3, r0
 800fb76:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	7d1b      	ldrb	r3, [r3, #20]
 800fb7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb80:	b2da      	uxtb	r2, r3
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800fb86:	68bb      	ldr	r3, [r7, #8]
 800fb88:	7dfa      	ldrb	r2, [r7, #23]
 800fb8a:	4611      	mov	r1, r2
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fd ffdd 	bl	800db4c <unlock_fs>
 800fb92:	7dfb      	ldrb	r3, [r7, #23]
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3718      	adds	r7, #24
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	bd80      	pop	{r7, pc}

0800fb9c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800fb9c:	b580      	push	{r7, lr}
 800fb9e:	b084      	sub	sp, #16
 800fba0:	af00      	add	r7, sp, #0
 800fba2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800fba4:	6878      	ldr	r0, [r7, #4]
 800fba6:	f7ff ff70 	bl	800fa8a <f_sync>
 800fbaa:	4603      	mov	r3, r0
 800fbac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800fbae:	7bfb      	ldrb	r3, [r7, #15]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d11d      	bne.n	800fbf0 <f_close+0x54>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f107 0208 	add.w	r2, r7, #8
 800fbba:	4611      	mov	r1, r2
 800fbbc:	4618      	mov	r0, r3
 800fbbe:	f7ff fb53 	bl	800f268 <validate>
 800fbc2:	4603      	mov	r3, r0
 800fbc4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800fbc6:	7bfb      	ldrb	r3, [r7, #15]
 800fbc8:	2b00      	cmp	r3, #0
 800fbca:	d111      	bne.n	800fbf0 <f_close+0x54>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	691b      	ldr	r3, [r3, #16]
 800fbd0:	4618      	mov	r0, r3
 800fbd2:	f7fe f8e3 	bl	800dd9c <dec_lock>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800fbda:	7bfb      	ldrb	r3, [r7, #15]
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d102      	bne.n	800fbe6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	2200      	movs	r2, #0
 800fbe4:	601a      	str	r2, [r3, #0]
			}
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
 800fbe6:	68bb      	ldr	r3, [r7, #8]
 800fbe8:	2100      	movs	r1, #0
 800fbea:	4618      	mov	r0, r3
 800fbec:	f7fd ffae 	bl	800db4c <unlock_fs>
#endif
		}
	}
	return res;
 800fbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbf2:	4618      	mov	r0, r3
 800fbf4:	3710      	adds	r7, #16
 800fbf6:	46bd      	mov	sp, r7
 800fbf8:	bd80      	pop	{r7, pc}
	...

0800fbfc <f_mkfs>:
	BYTE opt,			/* Format option */
	DWORD au,			/* Size of allocation unit (cluster) [byte] */
	void* work,			/* Pointer to working buffer */
	UINT len			/* Size of working buffer */
)
{
 800fbfc:	b590      	push	{r4, r7, lr}
 800fbfe:	b09d      	sub	sp, #116	; 0x74
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	60f8      	str	r0, [r7, #12]
 800fc04:	607a      	str	r2, [r7, #4]
 800fc06:	603b      	str	r3, [r7, #0]
 800fc08:	460b      	mov	r3, r1
 800fc0a:	72fb      	strb	r3, [r7, #11]
	const UINT n_fats = 1;		/* Number of FATs for FAT12/16/32 volume (1 or 2) */
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	647b      	str	r3, [r7, #68]	; 0x44
	const UINT n_rootdir = 512;	/* Number of root directory entries for FAT12/16 volume */
 800fc10:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fc14:	643b      	str	r3, [r7, #64]	; 0x40
	DWORD tbl[3];
#endif


	/* Check mounted drive and clear work area */
	vol = get_ldnumber(&path);					/* Get target logical drive */
 800fc16:	f107 030c 	add.w	r3, r7, #12
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	f7ff f835 	bl	800ec8a <get_ldnumber>
 800fc20:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800fc22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc24:	2b00      	cmp	r3, #0
 800fc26:	da02      	bge.n	800fc2e <f_mkfs+0x32>
 800fc28:	230b      	movs	r3, #11
 800fc2a:	f000 bc0d 	b.w	8010448 <f_mkfs+0x84c>
	if (FatFs[vol]) FatFs[vol]->fs_type = 0;	/* Clear the volume */
 800fc2e:	4a94      	ldr	r2, [pc, #592]	; (800fe80 <f_mkfs+0x284>)
 800fc30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d005      	beq.n	800fc46 <f_mkfs+0x4a>
 800fc3a:	4a91      	ldr	r2, [pc, #580]	; (800fe80 <f_mkfs+0x284>)
 800fc3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800fc42:	2200      	movs	r2, #0
 800fc44:	701a      	strb	r2, [r3, #0]
	pdrv = LD2PD(vol);	/* Physical drive */
 800fc46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc48:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	part = LD2PT(vol);	/* Partition (0:create as new, 1-4:get from partition table) */
 800fc4c:	2300      	movs	r3, #0
 800fc4e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a

	/* Check physical drive status */
	stat = disk_initialize(pdrv);
 800fc52:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fc56:	4618      	mov	r0, r3
 800fc58:	f7fd fdde 	bl	800d818 <disk_initialize>
 800fc5c:	4603      	mov	r3, r0
 800fc5e:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
	if (stat & STA_NOINIT) return FR_NOT_READY;
 800fc62:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fc66:	f003 0301 	and.w	r3, r3, #1
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d001      	beq.n	800fc72 <f_mkfs+0x76>
 800fc6e:	2303      	movs	r3, #3
 800fc70:	e3ea      	b.n	8010448 <f_mkfs+0x84c>
	if (stat & STA_PROTECT) return FR_WRITE_PROTECTED;
 800fc72:	f897 3039 	ldrb.w	r3, [r7, #57]	; 0x39
 800fc76:	f003 0304 	and.w	r3, r3, #4
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d001      	beq.n	800fc82 <f_mkfs+0x86>
 800fc7e:	230a      	movs	r3, #10
 800fc80:	e3e2      	b.n	8010448 <f_mkfs+0x84c>
	if (disk_ioctl(pdrv, GET_BLOCK_SIZE, &sz_blk) != RES_OK || !sz_blk || sz_blk > 32768 || (sz_blk & (sz_blk - 1))) sz_blk = 1;	/* Erase block to align data area */
 800fc82:	f107 0214 	add.w	r2, r7, #20
 800fc86:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fc8a:	2103      	movs	r1, #3
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7fd fe29 	bl	800d8e4 <disk_ioctl>
 800fc92:	4603      	mov	r3, r0
 800fc94:	2b00      	cmp	r3, #0
 800fc96:	d10c      	bne.n	800fcb2 <f_mkfs+0xb6>
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	d009      	beq.n	800fcb2 <f_mkfs+0xb6>
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fca4:	d805      	bhi.n	800fcb2 <f_mkfs+0xb6>
 800fca6:	697b      	ldr	r3, [r7, #20]
 800fca8:	1e5a      	subs	r2, r3, #1
 800fcaa:	697b      	ldr	r3, [r7, #20]
 800fcac:	4013      	ands	r3, r2
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d001      	beq.n	800fcb6 <f_mkfs+0xba>
 800fcb2:	2301      	movs	r3, #1
 800fcb4:	617b      	str	r3, [r7, #20]
#if _MAX_SS != _MIN_SS		/* Get sector size of the medium if variable sector size cfg. */
	if (disk_ioctl(pdrv, GET_SECTOR_SIZE, &ss) != RES_OK) return FR_DISK_ERR;
	if (ss > _MAX_SS || ss < _MIN_SS || (ss & (ss - 1))) return FR_DISK_ERR;
#else
	ss = _MAX_SS;
 800fcb6:	f44f 7300 	mov.w	r3, #512	; 0x200
 800fcba:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif
	if ((au != 0 && au < ss) || au > 0x1000000 || (au & (au - 1))) return FR_INVALID_PARAMETER;	/* Check if au is valid */
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	2b00      	cmp	r3, #0
 800fcc0:	d003      	beq.n	800fcca <f_mkfs+0xce>
 800fcc2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	429a      	cmp	r2, r3
 800fcc8:	d309      	bcc.n	800fcde <f_mkfs+0xe2>
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800fcd0:	d805      	bhi.n	800fcde <f_mkfs+0xe2>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	1e5a      	subs	r2, r3, #1
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	4013      	ands	r3, r2
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d001      	beq.n	800fce2 <f_mkfs+0xe6>
 800fcde:	2313      	movs	r3, #19
 800fce0:	e3b2      	b.n	8010448 <f_mkfs+0x84c>
	au /= ss;	/* Cluster size in unit of sector */
 800fce2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fce4:	687a      	ldr	r2, [r7, #4]
 800fce6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcea:	607b      	str	r3, [r7, #4]

	/* Get working buffer */
	buf = (BYTE*)work;		/* Working buffer */
 800fcec:	683b      	ldr	r3, [r7, #0]
 800fcee:	633b      	str	r3, [r7, #48]	; 0x30
	sz_buf = len / ss;		/* Size of working buffer (sector) */
 800fcf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fcf2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fcf6:	fbb2 f3f3 	udiv	r3, r2, r3
 800fcfa:	62fb      	str	r3, [r7, #44]	; 0x2c
	szb_buf = sz_buf * ss;	/* Size of working buffer (byte) */
 800fcfc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd00:	fb02 f303 	mul.w	r3, r2, r3
 800fd04:	62bb      	str	r3, [r7, #40]	; 0x28
	if (!szb_buf) return FR_MKFS_ABORTED;
 800fd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd08:	2b00      	cmp	r3, #0
 800fd0a:	d101      	bne.n	800fd10 <f_mkfs+0x114>
 800fd0c:	230e      	movs	r3, #14
 800fd0e:	e39b      	b.n	8010448 <f_mkfs+0x84c>
		if (!pte[PTE_System]) return FR_MKFS_ABORTED;	/* No partition? */
		b_vol = ld_dword(pte + PTE_StLba);		/* Get volume start sector */
		sz_vol = ld_dword(pte + PTE_SizLba);	/* Get volume size */
	} else {
		/* Create a single-partition in this function */
		if (disk_ioctl(pdrv, GET_SECTOR_COUNT, &sz_vol) != RES_OK) return FR_DISK_ERR;
 800fd10:	f107 0210 	add.w	r2, r7, #16
 800fd14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800fd18:	2101      	movs	r1, #1
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	f7fd fde2 	bl	800d8e4 <disk_ioctl>
 800fd20:	4603      	mov	r3, r0
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d001      	beq.n	800fd2a <f_mkfs+0x12e>
 800fd26:	2301      	movs	r3, #1
 800fd28:	e38e      	b.n	8010448 <f_mkfs+0x84c>
		b_vol = (opt & FM_SFD) ? 0 : 63;		/* Volume start sector */
 800fd2a:	7afb      	ldrb	r3, [r7, #11]
 800fd2c:	f003 0308 	and.w	r3, r3, #8
 800fd30:	2b00      	cmp	r3, #0
 800fd32:	d001      	beq.n	800fd38 <f_mkfs+0x13c>
 800fd34:	2300      	movs	r3, #0
 800fd36:	e000      	b.n	800fd3a <f_mkfs+0x13e>
 800fd38:	233f      	movs	r3, #63	; 0x3f
 800fd3a:	627b      	str	r3, [r7, #36]	; 0x24
		if (sz_vol < b_vol) return FR_MKFS_ABORTED;
 800fd3c:	693b      	ldr	r3, [r7, #16]
 800fd3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd40:	429a      	cmp	r2, r3
 800fd42:	d901      	bls.n	800fd48 <f_mkfs+0x14c>
 800fd44:	230e      	movs	r3, #14
 800fd46:	e37f      	b.n	8010448 <f_mkfs+0x84c>
		sz_vol -= b_vol;						/* Volume size */
 800fd48:	693a      	ldr	r2, [r7, #16]
 800fd4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4c:	1ad3      	subs	r3, r2, r3
 800fd4e:	613b      	str	r3, [r7, #16]
	}
	if (sz_vol < 128) return FR_MKFS_ABORTED;	/* Check if volume size is >=128s */
 800fd50:	693b      	ldr	r3, [r7, #16]
 800fd52:	2b7f      	cmp	r3, #127	; 0x7f
 800fd54:	d801      	bhi.n	800fd5a <f_mkfs+0x15e>
 800fd56:	230e      	movs	r3, #14
 800fd58:	e376      	b.n	8010448 <f_mkfs+0x84c>
		if (_FS_EXFAT && (opt & FM_EXFAT)) {	/* exFAT possible? */
			if ((opt & FM_ANY) == FM_EXFAT || sz_vol >= 0x4000000 || au > 128) {	/* exFAT only, vol >= 64Ms or au > 128s ? */
				fmt = FS_EXFAT; break;
			}
		}
		if (au > 128) return FR_INVALID_PARAMETER;	/* Too large au for FAT/FAT32 */
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2b80      	cmp	r3, #128	; 0x80
 800fd5e:	d901      	bls.n	800fd64 <f_mkfs+0x168>
 800fd60:	2313      	movs	r3, #19
 800fd62:	e371      	b.n	8010448 <f_mkfs+0x84c>
		if (opt & FM_FAT32) {	/* FAT32 possible? */
 800fd64:	7afb      	ldrb	r3, [r7, #11]
 800fd66:	f003 0302 	and.w	r3, r3, #2
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d00d      	beq.n	800fd8a <f_mkfs+0x18e>
			if ((opt & FM_ANY) == FM_FAT32 || !(opt & FM_FAT)) {	/* FAT32 only or no-FAT? */
 800fd6e:	7afb      	ldrb	r3, [r7, #11]
 800fd70:	f003 0307 	and.w	r3, r3, #7
 800fd74:	2b02      	cmp	r3, #2
 800fd76:	d004      	beq.n	800fd82 <f_mkfs+0x186>
 800fd78:	7afb      	ldrb	r3, [r7, #11]
 800fd7a:	f003 0301 	and.w	r3, r3, #1
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d103      	bne.n	800fd8a <f_mkfs+0x18e>
				fmt = FS_FAT32; break;
 800fd82:	2303      	movs	r3, #3
 800fd84:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800fd88:	e009      	b.n	800fd9e <f_mkfs+0x1a2>
			}
		}
		if (!(opt & FM_FAT)) return FR_INVALID_PARAMETER;	/* no-FAT? */
 800fd8a:	7afb      	ldrb	r3, [r7, #11]
 800fd8c:	f003 0301 	and.w	r3, r3, #1
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d101      	bne.n	800fd98 <f_mkfs+0x19c>
 800fd94:	2313      	movs	r3, #19
 800fd96:	e357      	b.n	8010448 <f_mkfs+0x84c>
		fmt = FS_FAT16;
 800fd98:	2302      	movs	r3, #2
 800fd9a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

	} else
#endif	/* _FS_EXFAT */
	{	/* Create an FAT12/16/32 volume */
		do {
			pau = au;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	653b      	str	r3, [r7, #80]	; 0x50
			/* Pre-determine number of clusters and FAT sub-type */
			if (fmt == FS_FAT32) {	/* FAT32 volume */
 800fda2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fda6:	2b03      	cmp	r3, #3
 800fda8:	d13c      	bne.n	800fe24 <f_mkfs+0x228>
				if (!pau) {	/* au auto-selection */
 800fdaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d11b      	bne.n	800fde8 <f_mkfs+0x1ec>
					n = sz_vol / 0x20000;	/* Volume size in unit of 128KS */
 800fdb0:	693b      	ldr	r3, [r7, #16]
 800fdb2:	0c5b      	lsrs	r3, r3, #17
 800fdb4:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst32[i] && cst32[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800fdba:	2301      	movs	r3, #1
 800fdbc:	653b      	str	r3, [r7, #80]	; 0x50
 800fdbe:	e005      	b.n	800fdcc <f_mkfs+0x1d0>
 800fdc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdc2:	3301      	adds	r3, #1
 800fdc4:	64bb      	str	r3, [r7, #72]	; 0x48
 800fdc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdc8:	005b      	lsls	r3, r3, #1
 800fdca:	653b      	str	r3, [r7, #80]	; 0x50
 800fdcc:	4a2d      	ldr	r2, [pc, #180]	; (800fe84 <f_mkfs+0x288>)
 800fdce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fdd0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d007      	beq.n	800fde8 <f_mkfs+0x1ec>
 800fdd8:	4a2a      	ldr	r2, [pc, #168]	; (800fe84 <f_mkfs+0x288>)
 800fdda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fddc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fde0:	461a      	mov	r2, r3
 800fde2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fde4:	4293      	cmp	r3, r2
 800fde6:	d2eb      	bcs.n	800fdc0 <f_mkfs+0x1c4>
				}
				n_clst = sz_vol / pau;	/* Number of clusters */
 800fde8:	693a      	ldr	r2, [r7, #16]
 800fdea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fdec:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdf0:	623b      	str	r3, [r7, #32]
				sz_fat = (n_clst * 4 + 8 + ss - 1) / ss;	/* FAT size [sector] */
 800fdf2:	6a3b      	ldr	r3, [r7, #32]
 800fdf4:	3302      	adds	r3, #2
 800fdf6:	009a      	lsls	r2, r3, #2
 800fdf8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fdfa:	4413      	add	r3, r2
 800fdfc:	1e5a      	subs	r2, r3, #1
 800fdfe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fe00:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe04:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 32;	/* Number of reserved sectors */
 800fe06:	2320      	movs	r3, #32
 800fe08:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = 0;		/* No static directory */
 800fe0a:	2300      	movs	r3, #0
 800fe0c:	66fb      	str	r3, [r7, #108]	; 0x6c
				if (n_clst <= MAX_FAT16 || n_clst > MAX_FAT32) return FR_MKFS_ABORTED;
 800fe0e:	6a3b      	ldr	r3, [r7, #32]
 800fe10:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800fe14:	4293      	cmp	r3, r2
 800fe16:	d903      	bls.n	800fe20 <f_mkfs+0x224>
 800fe18:	6a3b      	ldr	r3, [r7, #32]
 800fe1a:	4a1b      	ldr	r2, [pc, #108]	; (800fe88 <f_mkfs+0x28c>)
 800fe1c:	4293      	cmp	r3, r2
 800fe1e:	d952      	bls.n	800fec6 <f_mkfs+0x2ca>
 800fe20:	230e      	movs	r3, #14
 800fe22:	e311      	b.n	8010448 <f_mkfs+0x84c>
			} else {				/* FAT12/16 volume */
				if (!pau) {	/* au auto-selection */
 800fe24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d11b      	bne.n	800fe62 <f_mkfs+0x266>
					n = sz_vol / 0x1000;	/* Volume size in unit of 4KS */
 800fe2a:	693b      	ldr	r3, [r7, #16]
 800fe2c:	0b1b      	lsrs	r3, r3, #12
 800fe2e:	65fb      	str	r3, [r7, #92]	; 0x5c
					for (i = 0, pau = 1; cst[i] && cst[i] <= n; i++, pau <<= 1) ;	/* Get from table */
 800fe30:	2300      	movs	r3, #0
 800fe32:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe34:	2301      	movs	r3, #1
 800fe36:	653b      	str	r3, [r7, #80]	; 0x50
 800fe38:	e005      	b.n	800fe46 <f_mkfs+0x24a>
 800fe3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe3c:	3301      	adds	r3, #1
 800fe3e:	64bb      	str	r3, [r7, #72]	; 0x48
 800fe40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe42:	005b      	lsls	r3, r3, #1
 800fe44:	653b      	str	r3, [r7, #80]	; 0x50
 800fe46:	4a11      	ldr	r2, [pc, #68]	; (800fe8c <f_mkfs+0x290>)
 800fe48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d007      	beq.n	800fe62 <f_mkfs+0x266>
 800fe52:	4a0e      	ldr	r2, [pc, #56]	; (800fe8c <f_mkfs+0x290>)
 800fe54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fe5a:	461a      	mov	r2, r3
 800fe5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fe5e:	4293      	cmp	r3, r2
 800fe60:	d2eb      	bcs.n	800fe3a <f_mkfs+0x23e>
				}
				n_clst = sz_vol / pau;
 800fe62:	693a      	ldr	r2, [r7, #16]
 800fe64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fe66:	fbb2 f3f3 	udiv	r3, r2, r3
 800fe6a:	623b      	str	r3, [r7, #32]
				if (n_clst > MAX_FAT12) {
 800fe6c:	6a3b      	ldr	r3, [r7, #32]
 800fe6e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fe72:	4293      	cmp	r3, r2
 800fe74:	d90c      	bls.n	800fe90 <f_mkfs+0x294>
					n = n_clst * 2 + 4;		/* FAT size [byte] */
 800fe76:	6a3b      	ldr	r3, [r7, #32]
 800fe78:	3302      	adds	r3, #2
 800fe7a:	005b      	lsls	r3, r3, #1
 800fe7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800fe7e:	e012      	b.n	800fea6 <f_mkfs+0x2aa>
 800fe80:	20000704 	.word	0x20000704
 800fe84:	08015e34 	.word	0x08015e34
 800fe88:	0ffffff5 	.word	0x0ffffff5
 800fe8c:	08015e44 	.word	0x08015e44
				} else {
					fmt = FS_FAT12;
 800fe90:	2301      	movs	r3, #1
 800fe92:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					n = (n_clst * 3 + 1) / 2 + 3;	/* FAT size [byte] */
 800fe96:	6a3a      	ldr	r2, [r7, #32]
 800fe98:	4613      	mov	r3, r2
 800fe9a:	005b      	lsls	r3, r3, #1
 800fe9c:	4413      	add	r3, r2
 800fe9e:	3301      	adds	r3, #1
 800fea0:	085b      	lsrs	r3, r3, #1
 800fea2:	3303      	adds	r3, #3
 800fea4:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
				sz_fat = (n + ss - 1) / ss;		/* FAT size [sector] */
 800fea6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fea8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800feaa:	4413      	add	r3, r2
 800feac:	1e5a      	subs	r2, r3, #1
 800feae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800feb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800feb4:	66bb      	str	r3, [r7, #104]	; 0x68
				sz_rsv = 1;						/* Number of reserved sectors */
 800feb6:	2301      	movs	r3, #1
 800feb8:	657b      	str	r3, [r7, #84]	; 0x54
				sz_dir = (DWORD)n_rootdir * SZDIRE / ss;	/* Rootdir size [sector] */
 800feba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800febc:	015a      	lsls	r2, r3, #5
 800febe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800fec4:	66fb      	str	r3, [r7, #108]	; 0x6c
			}
			b_fat = b_vol + sz_rsv;						/* FAT base */
 800fec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fec8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800feca:	4413      	add	r3, r2
 800fecc:	65bb      	str	r3, [r7, #88]	; 0x58
			b_data = b_fat + sz_fat * n_fats + sz_dir;	/* Data base */
 800fece:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fed0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fed2:	fb02 f203 	mul.w	r2, r2, r3
 800fed6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800fed8:	4413      	add	r3, r2
 800feda:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fedc:	4413      	add	r3, r2
 800fede:	61fb      	str	r3, [r7, #28]

			/* Align data base to erase block boundary (for flash memory media) */
			n = ((b_data + sz_blk - 1) & ~(sz_blk - 1)) - b_data;	/* Next nearest erase block from current data base */
 800fee0:	697a      	ldr	r2, [r7, #20]
 800fee2:	69fb      	ldr	r3, [r7, #28]
 800fee4:	4413      	add	r3, r2
 800fee6:	1e5a      	subs	r2, r3, #1
 800fee8:	697b      	ldr	r3, [r7, #20]
 800feea:	425b      	negs	r3, r3
 800feec:	401a      	ands	r2, r3
 800feee:	69fb      	ldr	r3, [r7, #28]
 800fef0:	1ad3      	subs	r3, r2, r3
 800fef2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (fmt == FS_FAT32) {		/* FAT32: Move FAT base */
 800fef4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800fef8:	2b03      	cmp	r3, #3
 800fefa:	d108      	bne.n	800ff0e <f_mkfs+0x312>
				sz_rsv += n; b_fat += n;
 800fefc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800fefe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff00:	4413      	add	r3, r2
 800ff02:	657b      	str	r3, [r7, #84]	; 0x54
 800ff04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ff06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ff08:	4413      	add	r3, r2
 800ff0a:	65bb      	str	r3, [r7, #88]	; 0x58
 800ff0c:	e006      	b.n	800ff1c <f_mkfs+0x320>
			} else {					/* FAT12/16: Expand FAT size */
				sz_fat += n / n_fats;
 800ff0e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ff10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ff12:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff16:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ff18:	4413      	add	r3, r2
 800ff1a:	66bb      	str	r3, [r7, #104]	; 0x68
			}

			/* Determine number of clusters and final check of validity of the FAT sub-type */
			if (sz_vol < b_data + pau * 16 - b_vol) return FR_MKFS_ABORTED;	/* Too small volume */
 800ff1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff1e:	011a      	lsls	r2, r3, #4
 800ff20:	69fb      	ldr	r3, [r7, #28]
 800ff22:	441a      	add	r2, r3
 800ff24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff26:	1ad2      	subs	r2, r2, r3
 800ff28:	693b      	ldr	r3, [r7, #16]
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d901      	bls.n	800ff32 <f_mkfs+0x336>
 800ff2e:	230e      	movs	r3, #14
 800ff30:	e28a      	b.n	8010448 <f_mkfs+0x84c>
			n_clst = (sz_vol - sz_rsv - sz_fat * n_fats - sz_dir) / pau;
 800ff32:	693a      	ldr	r2, [r7, #16]
 800ff34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ff36:	1ad2      	subs	r2, r2, r3
 800ff38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ff3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ff3c:	fb01 f303 	mul.w	r3, r1, r3
 800ff40:	1ad2      	subs	r2, r2, r3
 800ff42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ff44:	1ad2      	subs	r2, r2, r3
 800ff46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff48:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff4c:	623b      	str	r3, [r7, #32]
			if (fmt == FS_FAT32) {
 800ff4e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ff52:	2b03      	cmp	r3, #3
 800ff54:	d10f      	bne.n	800ff76 <f_mkfs+0x37a>
				if (n_clst <= MAX_FAT16) {	/* Too few clusters for FAT32 */
 800ff56:	6a3b      	ldr	r3, [r7, #32]
 800ff58:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ff5c:	4293      	cmp	r3, r2
 800ff5e:	d80a      	bhi.n	800ff76 <f_mkfs+0x37a>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	2b00      	cmp	r3, #0
 800ff64:	d105      	bne.n	800ff72 <f_mkfs+0x376>
 800ff66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff68:	085b      	lsrs	r3, r3, #1
 800ff6a:	607b      	str	r3, [r7, #4]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	2b00      	cmp	r3, #0
 800ff70:	d144      	bne.n	800fffc <f_mkfs+0x400>
					return FR_MKFS_ABORTED;
 800ff72:	230e      	movs	r3, #14
 800ff74:	e268      	b.n	8010448 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT16) {
 800ff76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ff7a:	2b02      	cmp	r3, #2
 800ff7c:	d133      	bne.n	800ffe6 <f_mkfs+0x3ea>
				if (n_clst > MAX_FAT16) {	/* Too many clusters for FAT16 */
 800ff7e:	6a3b      	ldr	r3, [r7, #32]
 800ff80:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800ff84:	4293      	cmp	r3, r2
 800ff86:	d91e      	bls.n	800ffc6 <f_mkfs+0x3ca>
					if (!au && (pau * 2) <= 64) {
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d107      	bne.n	800ff9e <f_mkfs+0x3a2>
 800ff8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff90:	005b      	lsls	r3, r3, #1
 800ff92:	2b40      	cmp	r3, #64	; 0x40
 800ff94:	d803      	bhi.n	800ff9e <f_mkfs+0x3a2>
						au = pau * 2; continue;		/* Adjust cluster size and retry */
 800ff96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ff98:	005b      	lsls	r3, r3, #1
 800ff9a:	607b      	str	r3, [r7, #4]
 800ff9c:	e033      	b.n	8010006 <f_mkfs+0x40a>
					}
					if ((opt & FM_FAT32)) {
 800ff9e:	7afb      	ldrb	r3, [r7, #11]
 800ffa0:	f003 0302 	and.w	r3, r3, #2
 800ffa4:	2b00      	cmp	r3, #0
 800ffa6:	d003      	beq.n	800ffb0 <f_mkfs+0x3b4>
						fmt = FS_FAT32; continue;	/* Switch type to FAT32 and retry */
 800ffa8:	2303      	movs	r3, #3
 800ffaa:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800ffae:	e02a      	b.n	8010006 <f_mkfs+0x40a>
					}
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d105      	bne.n	800ffc2 <f_mkfs+0x3c6>
 800ffb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffb8:	005b      	lsls	r3, r3, #1
 800ffba:	607b      	str	r3, [r7, #4]
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	2b80      	cmp	r3, #128	; 0x80
 800ffc0:	d91e      	bls.n	8010000 <f_mkfs+0x404>
					return FR_MKFS_ABORTED;
 800ffc2:	230e      	movs	r3, #14
 800ffc4:	e240      	b.n	8010448 <f_mkfs+0x84c>
				}
				if  (n_clst <= MAX_FAT12) {	/* Too few clusters for FAT16 */
 800ffc6:	6a3b      	ldr	r3, [r7, #32]
 800ffc8:	f640 72f5 	movw	r2, #4085	; 0xff5
 800ffcc:	4293      	cmp	r3, r2
 800ffce:	d80a      	bhi.n	800ffe6 <f_mkfs+0x3ea>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d105      	bne.n	800ffe2 <f_mkfs+0x3e6>
 800ffd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ffd8:	005b      	lsls	r3, r3, #1
 800ffda:	607b      	str	r3, [r7, #4]
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	2b80      	cmp	r3, #128	; 0x80
 800ffe0:	d910      	bls.n	8010004 <f_mkfs+0x408>
					return FR_MKFS_ABORTED;
 800ffe2:	230e      	movs	r3, #14
 800ffe4:	e230      	b.n	8010448 <f_mkfs+0x84c>
				}
			}
			if (fmt == FS_FAT12 && n_clst > MAX_FAT12) return FR_MKFS_ABORTED;	/* Too many clusters for FAT12 */
 800ffe6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800ffea:	2b01      	cmp	r3, #1
 800ffec:	d10c      	bne.n	8010008 <f_mkfs+0x40c>
 800ffee:	6a3b      	ldr	r3, [r7, #32]
 800fff0:	f640 72f5 	movw	r2, #4085	; 0xff5
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d907      	bls.n	8010008 <f_mkfs+0x40c>
 800fff8:	230e      	movs	r3, #14
 800fffa:	e225      	b.n	8010448 <f_mkfs+0x84c>
					if (!au && (au = pau / 2) != 0) continue;	/* Adjust cluster size and retry */
 800fffc:	bf00      	nop
 800fffe:	e6ce      	b.n	800fd9e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010000:	bf00      	nop
 8010002:	e6cc      	b.n	800fd9e <f_mkfs+0x1a2>
					if (!au && (au = pau * 2) <= 128) continue;	/* Adjust cluster size and retry */
 8010004:	bf00      	nop
			pau = au;
 8010006:	e6ca      	b.n	800fd9e <f_mkfs+0x1a2>

			/* Ok, it is the valid cluster configuration */
			break;
 8010008:	bf00      	nop
#if _USE_TRIM
		tbl[0] = b_vol; tbl[1] = b_vol + sz_vol - 1;	/* Inform the device the volume area can be erased */
		disk_ioctl(pdrv, CTRL_TRIM, tbl);
#endif
		/* Create FAT VBR */
		mem_set(buf, 0, ss);
 801000a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 801000c:	461a      	mov	r2, r3
 801000e:	2100      	movs	r1, #0
 8010010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010012:	f7fd fd28 	bl	800da66 <mem_set>
		mem_cpy(buf + BS_JmpBoot, "\xEB\xFE\x90" "MSDOS5.0", 11);/* Boot jump code (x86), OEM name */
 8010016:	220b      	movs	r2, #11
 8010018:	49bc      	ldr	r1, [pc, #752]	; (801030c <f_mkfs+0x710>)
 801001a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801001c:	f7fd fd02 	bl	800da24 <mem_cpy>
		st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
 8010020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010022:	330b      	adds	r3, #11
 8010024:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8010026:	4611      	mov	r1, r2
 8010028:	4618      	mov	r0, r3
 801002a:	f7fd fcb4 	bl	800d996 <st_word>
		buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
 801002e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010030:	330d      	adds	r3, #13
 8010032:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010034:	b2d2      	uxtb	r2, r2
 8010036:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RsvdSecCnt, (WORD)sz_rsv);	/* Size of reserved area */
 8010038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801003a:	330e      	adds	r3, #14
 801003c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801003e:	b292      	uxth	r2, r2
 8010040:	4611      	mov	r1, r2
 8010042:	4618      	mov	r0, r3
 8010044:	f7fd fca7 	bl	800d996 <st_word>
		buf[BPB_NumFATs] = (BYTE)n_fats;				/* Number of FATs */
 8010048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801004a:	3310      	adds	r3, #16
 801004c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801004e:	b2d2      	uxtb	r2, r2
 8010050:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_RootEntCnt, (WORD)((fmt == FS_FAT32) ? 0 : n_rootdir));	/* Number of root directory entries */
 8010052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010054:	f103 0211 	add.w	r2, r3, #17
 8010058:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801005c:	2b03      	cmp	r3, #3
 801005e:	d002      	beq.n	8010066 <f_mkfs+0x46a>
 8010060:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010062:	b29b      	uxth	r3, r3
 8010064:	e000      	b.n	8010068 <f_mkfs+0x46c>
 8010066:	2300      	movs	r3, #0
 8010068:	4619      	mov	r1, r3
 801006a:	4610      	mov	r0, r2
 801006c:	f7fd fc93 	bl	800d996 <st_word>
		if (sz_vol < 0x10000) {
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010076:	d208      	bcs.n	801008a <f_mkfs+0x48e>
			st_word(buf + BPB_TotSec16, (WORD)sz_vol);	/* Volume size in 16-bit LBA */
 8010078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801007a:	3313      	adds	r3, #19
 801007c:	693a      	ldr	r2, [r7, #16]
 801007e:	b292      	uxth	r2, r2
 8010080:	4611      	mov	r1, r2
 8010082:	4618      	mov	r0, r3
 8010084:	f7fd fc87 	bl	800d996 <st_word>
 8010088:	e006      	b.n	8010098 <f_mkfs+0x49c>
		} else {
			st_dword(buf + BPB_TotSec32, sz_vol);		/* Volume size in 32-bit LBA */
 801008a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801008c:	3320      	adds	r3, #32
 801008e:	693a      	ldr	r2, [r7, #16]
 8010090:	4611      	mov	r1, r2
 8010092:	4618      	mov	r0, r3
 8010094:	f7fd fc9a 	bl	800d9cc <st_dword>
		}
		buf[BPB_Media] = 0xF8;							/* Media descriptor byte */
 8010098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801009a:	3315      	adds	r3, #21
 801009c:	22f8      	movs	r2, #248	; 0xf8
 801009e:	701a      	strb	r2, [r3, #0]
		st_word(buf + BPB_SecPerTrk, 63);				/* Number of sectors per track (for int13) */
 80100a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100a2:	3318      	adds	r3, #24
 80100a4:	213f      	movs	r1, #63	; 0x3f
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7fd fc75 	bl	800d996 <st_word>
		st_word(buf + BPB_NumHeads, 255);				/* Number of heads (for int13) */
 80100ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ae:	331a      	adds	r3, #26
 80100b0:	21ff      	movs	r1, #255	; 0xff
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7fd fc6f 	bl	800d996 <st_word>
		st_dword(buf + BPB_HiddSec, b_vol);				/* Volume offset in the physical drive [sector] */
 80100b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ba:	331c      	adds	r3, #28
 80100bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80100be:	4618      	mov	r0, r3
 80100c0:	f7fd fc84 	bl	800d9cc <st_dword>
		if (fmt == FS_FAT32) {
 80100c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80100c8:	2b03      	cmp	r3, #3
 80100ca:	d131      	bne.n	8010130 <f_mkfs+0x534>
			st_dword(buf + BS_VolID32, GET_FATTIME());	/* VSN */
 80100cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ce:	f103 0443 	add.w	r4, r3, #67	; 0x43
 80100d2:	f7fd f917 	bl	800d304 <get_fattime>
 80100d6:	4603      	mov	r3, r0
 80100d8:	4619      	mov	r1, r3
 80100da:	4620      	mov	r0, r4
 80100dc:	f7fd fc76 	bl	800d9cc <st_dword>
			st_dword(buf + BPB_FATSz32, sz_fat);		/* FAT size [sector] */
 80100e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100e2:	3324      	adds	r3, #36	; 0x24
 80100e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80100e6:	4618      	mov	r0, r3
 80100e8:	f7fd fc70 	bl	800d9cc <st_dword>
			st_dword(buf + BPB_RootClus32, 2);			/* Root directory cluster # (2) */
 80100ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100ee:	332c      	adds	r3, #44	; 0x2c
 80100f0:	2102      	movs	r1, #2
 80100f2:	4618      	mov	r0, r3
 80100f4:	f7fd fc6a 	bl	800d9cc <st_dword>
			st_word(buf + BPB_FSInfo32, 1);				/* Offset of FSINFO sector (VBR + 1) */
 80100f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100fa:	3330      	adds	r3, #48	; 0x30
 80100fc:	2101      	movs	r1, #1
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fd fc49 	bl	800d996 <st_word>
			st_word(buf + BPB_BkBootSec32, 6);			/* Offset of backup VBR (VBR + 6) */
 8010104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010106:	3332      	adds	r3, #50	; 0x32
 8010108:	2106      	movs	r1, #6
 801010a:	4618      	mov	r0, r3
 801010c:	f7fd fc43 	bl	800d996 <st_word>
			buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
 8010110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010112:	3340      	adds	r3, #64	; 0x40
 8010114:	2280      	movs	r2, #128	; 0x80
 8010116:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
 8010118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011a:	3342      	adds	r3, #66	; 0x42
 801011c:	2229      	movs	r2, #41	; 0x29
 801011e:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab32, "NO NAME    " "FAT32   ", 19);	/* Volume label, FAT signature */
 8010120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010122:	3347      	adds	r3, #71	; 0x47
 8010124:	2213      	movs	r2, #19
 8010126:	497a      	ldr	r1, [pc, #488]	; (8010310 <f_mkfs+0x714>)
 8010128:	4618      	mov	r0, r3
 801012a:	f7fd fc7b 	bl	800da24 <mem_cpy>
 801012e:	e020      	b.n	8010172 <f_mkfs+0x576>
		} else {
			st_dword(buf + BS_VolID, GET_FATTIME());	/* VSN */
 8010130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010132:	f103 0427 	add.w	r4, r3, #39	; 0x27
 8010136:	f7fd f8e5 	bl	800d304 <get_fattime>
 801013a:	4603      	mov	r3, r0
 801013c:	4619      	mov	r1, r3
 801013e:	4620      	mov	r0, r4
 8010140:	f7fd fc44 	bl	800d9cc <st_dword>
			st_word(buf + BPB_FATSz16, (WORD)sz_fat);	/* FAT size [sector] */
 8010144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010146:	3316      	adds	r3, #22
 8010148:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801014a:	b292      	uxth	r2, r2
 801014c:	4611      	mov	r1, r2
 801014e:	4618      	mov	r0, r3
 8010150:	f7fd fc21 	bl	800d996 <st_word>
			buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
 8010154:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010156:	3324      	adds	r3, #36	; 0x24
 8010158:	2280      	movs	r2, #128	; 0x80
 801015a:	701a      	strb	r2, [r3, #0]
			buf[BS_BootSig] = 0x29;						/* Extended boot signature */
 801015c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801015e:	3326      	adds	r3, #38	; 0x26
 8010160:	2229      	movs	r2, #41	; 0x29
 8010162:	701a      	strb	r2, [r3, #0]
			mem_cpy(buf + BS_VolLab, "NO NAME    " "FAT     ", 19);	/* Volume label, FAT signature */
 8010164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010166:	332b      	adds	r3, #43	; 0x2b
 8010168:	2213      	movs	r2, #19
 801016a:	496a      	ldr	r1, [pc, #424]	; (8010314 <f_mkfs+0x718>)
 801016c:	4618      	mov	r0, r3
 801016e:	f7fd fc59 	bl	800da24 <mem_cpy>
		}
		st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
 8010172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010174:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010178:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801017c:	4618      	mov	r0, r3
 801017e:	f7fd fc0a 	bl	800d996 <st_word>
		if (disk_write(pdrv, buf, b_vol, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the VBR sector */
 8010182:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010186:	2301      	movs	r3, #1
 8010188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801018a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801018c:	f7fd fb8a 	bl	800d8a4 <disk_write>
 8010190:	4603      	mov	r3, r0
 8010192:	2b00      	cmp	r3, #0
 8010194:	d001      	beq.n	801019a <f_mkfs+0x59e>
 8010196:	2301      	movs	r3, #1
 8010198:	e156      	b.n	8010448 <f_mkfs+0x84c>

		/* Create FSINFO record if needed */
		if (fmt == FS_FAT32) {
 801019a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801019e:	2b03      	cmp	r3, #3
 80101a0:	d140      	bne.n	8010224 <f_mkfs+0x628>
			disk_write(pdrv, buf, b_vol + 6, 1);		/* Write backup VBR (VBR + 6) */
 80101a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101a4:	1d9a      	adds	r2, r3, #6
 80101a6:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80101aa:	2301      	movs	r3, #1
 80101ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80101ae:	f7fd fb79 	bl	800d8a4 <disk_write>
			mem_set(buf, 0, ss);
 80101b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80101b4:	461a      	mov	r2, r3
 80101b6:	2100      	movs	r1, #0
 80101b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101ba:	f7fd fc54 	bl	800da66 <mem_set>
			st_dword(buf + FSI_LeadSig, 0x41615252);
 80101be:	4956      	ldr	r1, [pc, #344]	; (8010318 <f_mkfs+0x71c>)
 80101c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80101c2:	f7fd fc03 	bl	800d9cc <st_dword>
			st_dword(buf + FSI_StrucSig, 0x61417272);
 80101c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101c8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80101cc:	4953      	ldr	r1, [pc, #332]	; (801031c <f_mkfs+0x720>)
 80101ce:	4618      	mov	r0, r3
 80101d0:	f7fd fbfc 	bl	800d9cc <st_dword>
			st_dword(buf + FSI_Free_Count, n_clst - 1);	/* Number of free clusters */
 80101d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101d6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80101da:	6a3b      	ldr	r3, [r7, #32]
 80101dc:	3b01      	subs	r3, #1
 80101de:	4619      	mov	r1, r3
 80101e0:	4610      	mov	r0, r2
 80101e2:	f7fd fbf3 	bl	800d9cc <st_dword>
			st_dword(buf + FSI_Nxt_Free, 2);			/* Last allocated cluster# */
 80101e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101e8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80101ec:	2102      	movs	r1, #2
 80101ee:	4618      	mov	r0, r3
 80101f0:	f7fd fbec 	bl	800d9cc <st_dword>
			st_word(buf + BS_55AA, 0xAA55);
 80101f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101f6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80101fa:	f64a 2155 	movw	r1, #43605	; 0xaa55
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fd fbc9 	bl	800d996 <st_word>
			disk_write(pdrv, buf, b_vol + 7, 1);		/* Write backup FSINFO (VBR + 7) */
 8010204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010206:	1dda      	adds	r2, r3, #7
 8010208:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801020c:	2301      	movs	r3, #1
 801020e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010210:	f7fd fb48 	bl	800d8a4 <disk_write>
			disk_write(pdrv, buf, b_vol + 1, 1);		/* Write original FSINFO (VBR + 1) */
 8010214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010216:	1c5a      	adds	r2, r3, #1
 8010218:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801021c:	2301      	movs	r3, #1
 801021e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010220:	f7fd fb40 	bl	800d8a4 <disk_write>
		}

		/* Initialize FAT area */
		mem_set(buf, 0, (UINT)szb_buf);
 8010224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010226:	2100      	movs	r1, #0
 8010228:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801022a:	f7fd fc1c 	bl	800da66 <mem_set>
		sect = b_fat;		/* FAT start sector */
 801022e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8010230:	667b      	str	r3, [r7, #100]	; 0x64
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 8010232:	2300      	movs	r3, #0
 8010234:	64bb      	str	r3, [r7, #72]	; 0x48
 8010236:	e04b      	b.n	80102d0 <f_mkfs+0x6d4>
			if (fmt == FS_FAT32) {
 8010238:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801023c:	2b03      	cmp	r3, #3
 801023e:	d113      	bne.n	8010268 <f_mkfs+0x66c>
				st_dword(buf + 0, 0xFFFFFFF8);	/* Entry 0 */
 8010240:	f06f 0107 	mvn.w	r1, #7
 8010244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010246:	f7fd fbc1 	bl	800d9cc <st_dword>
				st_dword(buf + 4, 0xFFFFFFFF);	/* Entry 1 */
 801024a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801024c:	3304      	adds	r3, #4
 801024e:	f04f 31ff 	mov.w	r1, #4294967295
 8010252:	4618      	mov	r0, r3
 8010254:	f7fd fbba 	bl	800d9cc <st_dword>
				st_dword(buf + 8, 0x0FFFFFFF);	/* Entry 2 (root directory) */
 8010258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801025a:	3308      	adds	r3, #8
 801025c:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8010260:	4618      	mov	r0, r3
 8010262:	f7fd fbb3 	bl	800d9cc <st_dword>
 8010266:	e00b      	b.n	8010280 <f_mkfs+0x684>
			} else {
				st_dword(buf + 0, (fmt == FS_FAT12) ? 0xFFFFF8 : 0xFFFFFFF8);	/* Entry 0 and 1 */
 8010268:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801026c:	2b01      	cmp	r3, #1
 801026e:	d101      	bne.n	8010274 <f_mkfs+0x678>
 8010270:	4b2b      	ldr	r3, [pc, #172]	; (8010320 <f_mkfs+0x724>)
 8010272:	e001      	b.n	8010278 <f_mkfs+0x67c>
 8010274:	f06f 0307 	mvn.w	r3, #7
 8010278:	4619      	mov	r1, r3
 801027a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801027c:	f7fd fba6 	bl	800d9cc <st_dword>
			}
			nsect = sz_fat;		/* Number of FAT sectors */
 8010280:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010282:	663b      	str	r3, [r7, #96]	; 0x60
			do {	/* Fill FAT sectors */
				n = (nsect > sz_buf) ? sz_buf : nsect;
 8010284:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010288:	4293      	cmp	r3, r2
 801028a:	bf28      	it	cs
 801028c:	4613      	movcs	r3, r2
 801028e:	65fb      	str	r3, [r7, #92]	; 0x5c
				if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 8010290:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 8010294:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010296:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010298:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801029a:	f7fd fb03 	bl	800d8a4 <disk_write>
 801029e:	4603      	mov	r3, r0
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d001      	beq.n	80102a8 <f_mkfs+0x6ac>
 80102a4:	2301      	movs	r3, #1
 80102a6:	e0cf      	b.n	8010448 <f_mkfs+0x84c>
				mem_set(buf, 0, ss);
 80102a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80102aa:	461a      	mov	r2, r3
 80102ac:	2100      	movs	r1, #0
 80102ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102b0:	f7fd fbd9 	bl	800da66 <mem_set>
				sect += n; nsect -= n;
 80102b4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80102b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102b8:	4413      	add	r3, r2
 80102ba:	667b      	str	r3, [r7, #100]	; 0x64
 80102bc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80102be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102c0:	1ad3      	subs	r3, r2, r3
 80102c2:	663b      	str	r3, [r7, #96]	; 0x60
			} while (nsect);
 80102c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d1dc      	bne.n	8010284 <f_mkfs+0x688>
		for (i = 0; i < n_fats; i++) {			/* Initialize FATs each */
 80102ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80102cc:	3301      	adds	r3, #1
 80102ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80102d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102d4:	429a      	cmp	r2, r3
 80102d6:	d3af      	bcc.n	8010238 <f_mkfs+0x63c>
		}

		/* Initialize root directory (fill with zero) */
		nsect = (fmt == FS_FAT32) ? pau : sz_dir;	/* Number of root directory sectors */
 80102d8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80102dc:	2b03      	cmp	r3, #3
 80102de:	d101      	bne.n	80102e4 <f_mkfs+0x6e8>
 80102e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80102e2:	e000      	b.n	80102e6 <f_mkfs+0x6ea>
 80102e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102e6:	663b      	str	r3, [r7, #96]	; 0x60
		do {
			n = (nsect > sz_buf) ? sz_buf : nsect;
 80102e8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80102ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102ec:	4293      	cmp	r3, r2
 80102ee:	bf28      	it	cs
 80102f0:	4613      	movcs	r3, r2
 80102f2:	65fb      	str	r3, [r7, #92]	; 0x5c
			if (disk_write(pdrv, buf, sect, (UINT)n) != RES_OK) return FR_DISK_ERR;
 80102f4:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 80102f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80102fa:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80102fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80102fe:	f7fd fad1 	bl	800d8a4 <disk_write>
 8010302:	4603      	mov	r3, r0
 8010304:	2b00      	cmp	r3, #0
 8010306:	d00d      	beq.n	8010324 <f_mkfs+0x728>
 8010308:	2301      	movs	r3, #1
 801030a:	e09d      	b.n	8010448 <f_mkfs+0x84c>
 801030c:	08013e18 	.word	0x08013e18
 8010310:	08013e24 	.word	0x08013e24
 8010314:	08013e38 	.word	0x08013e38
 8010318:	41615252 	.word	0x41615252
 801031c:	61417272 	.word	0x61417272
 8010320:	00fffff8 	.word	0x00fffff8
			sect += n; nsect -= n;
 8010324:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8010326:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010328:	4413      	add	r3, r2
 801032a:	667b      	str	r3, [r7, #100]	; 0x64
 801032c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801032e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010330:	1ad3      	subs	r3, r2, r3
 8010332:	663b      	str	r3, [r7, #96]	; 0x60
		} while (nsect);
 8010334:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010336:	2b00      	cmp	r3, #0
 8010338:	d1d6      	bne.n	80102e8 <f_mkfs+0x6ec>

	/* Determine system ID in the partition table */
	if (_FS_EXFAT && fmt == FS_EXFAT) {
		sys = 0x07;			/* HPFS/NTFS/exFAT */
	} else {
		if (fmt == FS_FAT32) {
 801033a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801033e:	2b03      	cmp	r3, #3
 8010340:	d103      	bne.n	801034a <f_mkfs+0x74e>
			sys = 0x0C;		/* FAT32X */
 8010342:	230c      	movs	r3, #12
 8010344:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8010348:	e010      	b.n	801036c <f_mkfs+0x770>
		} else {
			if (sz_vol >= 0x10000) {
 801034a:	693b      	ldr	r3, [r7, #16]
 801034c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010350:	d303      	bcc.n	801035a <f_mkfs+0x75e>
				sys = 0x06;	/* FAT12/16 (>=64KS) */
 8010352:	2306      	movs	r3, #6
 8010354:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 8010358:	e008      	b.n	801036c <f_mkfs+0x770>
			} else {
				sys = (fmt == FS_FAT16) ? 0x04 : 0x01;	/* FAT16 (<64KS) : FAT12 (<64KS) */
 801035a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 801035e:	2b02      	cmp	r3, #2
 8010360:	d101      	bne.n	8010366 <f_mkfs+0x76a>
 8010362:	2304      	movs	r3, #4
 8010364:	e000      	b.n	8010368 <f_mkfs+0x76c>
 8010366:	2301      	movs	r3, #1
 8010368:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
		/* Update system ID in the partition table */
		if (disk_read(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Read the MBR */
		buf[MBR_Table + (part - 1) * SZ_PTE + PTE_System] = sys;		/* Set system ID */
		if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it back to the MBR */
	} else {								/* Created as a new single partition */
		if (!(opt & FM_SFD)) {	/* Create partition table if in FDISK format */
 801036c:	7afb      	ldrb	r3, [r7, #11]
 801036e:	f003 0308 	and.w	r3, r3, #8
 8010372:	2b00      	cmp	r3, #0
 8010374:	d15b      	bne.n	801042e <f_mkfs+0x832>
			mem_set(buf, 0, ss);
 8010376:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8010378:	461a      	mov	r2, r3
 801037a:	2100      	movs	r1, #0
 801037c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801037e:	f7fd fb72 	bl	800da66 <mem_set>
			st_word(buf + BS_55AA, 0xAA55);		/* MBR signature */
 8010382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010384:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010388:	f64a 2155 	movw	r1, #43605	; 0xaa55
 801038c:	4618      	mov	r0, r3
 801038e:	f7fd fb02 	bl	800d996 <st_word>
			pte = buf + MBR_Table;				/* Create partition table for single partition in the drive */
 8010392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010394:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010398:	61bb      	str	r3, [r7, #24]
			pte[PTE_Boot] = 0;					/* Boot indicator */
 801039a:	69bb      	ldr	r3, [r7, #24]
 801039c:	2200      	movs	r2, #0
 801039e:	701a      	strb	r2, [r3, #0]
			pte[PTE_StHead] = 1;				/* Start head */
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	3301      	adds	r3, #1
 80103a4:	2201      	movs	r2, #1
 80103a6:	701a      	strb	r2, [r3, #0]
			pte[PTE_StSec] = 1;					/* Start sector */
 80103a8:	69bb      	ldr	r3, [r7, #24]
 80103aa:	3302      	adds	r3, #2
 80103ac:	2201      	movs	r2, #1
 80103ae:	701a      	strb	r2, [r3, #0]
			pte[PTE_StCyl] = 0;					/* Start cylinder */
 80103b0:	69bb      	ldr	r3, [r7, #24]
 80103b2:	3303      	adds	r3, #3
 80103b4:	2200      	movs	r2, #0
 80103b6:	701a      	strb	r2, [r3, #0]
			pte[PTE_System] = sys;				/* System type */
 80103b8:	69bb      	ldr	r3, [r7, #24]
 80103ba:	3304      	adds	r3, #4
 80103bc:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80103c0:	701a      	strb	r2, [r3, #0]
			n = (b_vol + sz_vol) / (63 * 255);	/* (End CHS may be invalid) */
 80103c2:	693a      	ldr	r2, [r7, #16]
 80103c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103c6:	441a      	add	r2, r3
 80103c8:	4b21      	ldr	r3, [pc, #132]	; (8010450 <f_mkfs+0x854>)
 80103ca:	fba3 1302 	umull	r1, r3, r3, r2
 80103ce:	1ad2      	subs	r2, r2, r3
 80103d0:	0852      	lsrs	r2, r2, #1
 80103d2:	4413      	add	r3, r2
 80103d4:	0b5b      	lsrs	r3, r3, #13
 80103d6:	65fb      	str	r3, [r7, #92]	; 0x5c
			pte[PTE_EdHead] = 254;				/* End head */
 80103d8:	69bb      	ldr	r3, [r7, #24]
 80103da:	3305      	adds	r3, #5
 80103dc:	22fe      	movs	r2, #254	; 0xfe
 80103de:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdSec] = (BYTE)(n >> 2 | 63);	/* End sector */
 80103e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80103e2:	089b      	lsrs	r3, r3, #2
 80103e4:	b2da      	uxtb	r2, r3
 80103e6:	69bb      	ldr	r3, [r7, #24]
 80103e8:	3306      	adds	r3, #6
 80103ea:	f042 023f 	orr.w	r2, r2, #63	; 0x3f
 80103ee:	b2d2      	uxtb	r2, r2
 80103f0:	701a      	strb	r2, [r3, #0]
			pte[PTE_EdCyl] = (BYTE)n;			/* End cylinder */
 80103f2:	69bb      	ldr	r3, [r7, #24]
 80103f4:	3307      	adds	r3, #7
 80103f6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80103f8:	b2d2      	uxtb	r2, r2
 80103fa:	701a      	strb	r2, [r3, #0]
			st_dword(pte + PTE_StLba, b_vol);	/* Start offset in LBA */
 80103fc:	69bb      	ldr	r3, [r7, #24]
 80103fe:	3308      	adds	r3, #8
 8010400:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010402:	4618      	mov	r0, r3
 8010404:	f7fd fae2 	bl	800d9cc <st_dword>
			st_dword(pte + PTE_SizLba, sz_vol);	/* Size in sectors */
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	330c      	adds	r3, #12
 801040c:	693a      	ldr	r2, [r7, #16]
 801040e:	4611      	mov	r1, r2
 8010410:	4618      	mov	r0, r3
 8010412:	f7fd fadb 	bl	800d9cc <st_dword>
			if (disk_write(pdrv, buf, 0, 1) != RES_OK) return FR_DISK_ERR;	/* Write it to the MBR */
 8010416:	f897 003b 	ldrb.w	r0, [r7, #59]	; 0x3b
 801041a:	2301      	movs	r3, #1
 801041c:	2200      	movs	r2, #0
 801041e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010420:	f7fd fa40 	bl	800d8a4 <disk_write>
 8010424:	4603      	mov	r3, r0
 8010426:	2b00      	cmp	r3, #0
 8010428:	d001      	beq.n	801042e <f_mkfs+0x832>
 801042a:	2301      	movs	r3, #1
 801042c:	e00c      	b.n	8010448 <f_mkfs+0x84c>
		}
	}

	if (disk_ioctl(pdrv, CTRL_SYNC, 0) != RES_OK) return FR_DISK_ERR;
 801042e:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8010432:	2200      	movs	r2, #0
 8010434:	2100      	movs	r1, #0
 8010436:	4618      	mov	r0, r3
 8010438:	f7fd fa54 	bl	800d8e4 <disk_ioctl>
 801043c:	4603      	mov	r3, r0
 801043e:	2b00      	cmp	r3, #0
 8010440:	d001      	beq.n	8010446 <f_mkfs+0x84a>
 8010442:	2301      	movs	r3, #1
 8010444:	e000      	b.n	8010448 <f_mkfs+0x84c>

	return FR_OK;
 8010446:	2300      	movs	r3, #0
}
 8010448:	4618      	mov	r0, r3
 801044a:	3774      	adds	r7, #116	; 0x74
 801044c:	46bd      	mov	sp, r7
 801044e:	bd90      	pop	{r4, r7, pc}
 8010450:	0515565b 	.word	0x0515565b

08010454 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010454:	b480      	push	{r7}
 8010456:	b087      	sub	sp, #28
 8010458:	af00      	add	r7, sp, #0
 801045a:	60f8      	str	r0, [r7, #12]
 801045c:	60b9      	str	r1, [r7, #8]
 801045e:	4613      	mov	r3, r2
 8010460:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010462:	2301      	movs	r3, #1
 8010464:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010466:	2300      	movs	r3, #0
 8010468:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801046a:	4b1f      	ldr	r3, [pc, #124]	; (80104e8 <FATFS_LinkDriverEx+0x94>)
 801046c:	7a5b      	ldrb	r3, [r3, #9]
 801046e:	b2db      	uxtb	r3, r3
 8010470:	2b00      	cmp	r3, #0
 8010472:	d131      	bne.n	80104d8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010474:	4b1c      	ldr	r3, [pc, #112]	; (80104e8 <FATFS_LinkDriverEx+0x94>)
 8010476:	7a5b      	ldrb	r3, [r3, #9]
 8010478:	b2db      	uxtb	r3, r3
 801047a:	461a      	mov	r2, r3
 801047c:	4b1a      	ldr	r3, [pc, #104]	; (80104e8 <FATFS_LinkDriverEx+0x94>)
 801047e:	2100      	movs	r1, #0
 8010480:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010482:	4b19      	ldr	r3, [pc, #100]	; (80104e8 <FATFS_LinkDriverEx+0x94>)
 8010484:	7a5b      	ldrb	r3, [r3, #9]
 8010486:	b2db      	uxtb	r3, r3
 8010488:	4a17      	ldr	r2, [pc, #92]	; (80104e8 <FATFS_LinkDriverEx+0x94>)
 801048a:	009b      	lsls	r3, r3, #2
 801048c:	4413      	add	r3, r2
 801048e:	68fa      	ldr	r2, [r7, #12]
 8010490:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010492:	4b15      	ldr	r3, [pc, #84]	; (80104e8 <FATFS_LinkDriverEx+0x94>)
 8010494:	7a5b      	ldrb	r3, [r3, #9]
 8010496:	b2db      	uxtb	r3, r3
 8010498:	461a      	mov	r2, r3
 801049a:	4b13      	ldr	r3, [pc, #76]	; (80104e8 <FATFS_LinkDriverEx+0x94>)
 801049c:	4413      	add	r3, r2
 801049e:	79fa      	ldrb	r2, [r7, #7]
 80104a0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80104a2:	4b11      	ldr	r3, [pc, #68]	; (80104e8 <FATFS_LinkDriverEx+0x94>)
 80104a4:	7a5b      	ldrb	r3, [r3, #9]
 80104a6:	b2db      	uxtb	r3, r3
 80104a8:	1c5a      	adds	r2, r3, #1
 80104aa:	b2d1      	uxtb	r1, r2
 80104ac:	4a0e      	ldr	r2, [pc, #56]	; (80104e8 <FATFS_LinkDriverEx+0x94>)
 80104ae:	7251      	strb	r1, [r2, #9]
 80104b0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80104b2:	7dbb      	ldrb	r3, [r7, #22]
 80104b4:	3330      	adds	r3, #48	; 0x30
 80104b6:	b2da      	uxtb	r2, r3
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80104bc:	68bb      	ldr	r3, [r7, #8]
 80104be:	3301      	adds	r3, #1
 80104c0:	223a      	movs	r2, #58	; 0x3a
 80104c2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	3302      	adds	r3, #2
 80104c8:	222f      	movs	r2, #47	; 0x2f
 80104ca:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	3303      	adds	r3, #3
 80104d0:	2200      	movs	r2, #0
 80104d2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80104d4:	2300      	movs	r3, #0
 80104d6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80104d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80104da:	4618      	mov	r0, r3
 80104dc:	371c      	adds	r7, #28
 80104de:	46bd      	mov	sp, r7
 80104e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104e4:	4770      	bx	lr
 80104e6:	bf00      	nop
 80104e8:	2000072c 	.word	0x2000072c

080104ec <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80104ec:	b580      	push	{r7, lr}
 80104ee:	b082      	sub	sp, #8
 80104f0:	af00      	add	r7, sp, #0
 80104f2:	6078      	str	r0, [r7, #4]
 80104f4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80104f6:	2200      	movs	r2, #0
 80104f8:	6839      	ldr	r1, [r7, #0]
 80104fa:	6878      	ldr	r0, [r7, #4]
 80104fc:	f7ff ffaa 	bl	8010454 <FATFS_LinkDriverEx>
 8010500:	4603      	mov	r3, r0
}
 8010502:	4618      	mov	r0, r3
 8010504:	3708      	adds	r7, #8
 8010506:	46bd      	mov	sp, r7
 8010508:	bd80      	pop	{r7, pc}

0801050a <ff_cre_syncobj>:

int ff_cre_syncobj (	/* 1:Function succeeded, 0:Could not create the sync object */
	BYTE vol,			/* Corresponding volume (logical drive number) */
	_SYNC_t *sobj		/* Pointer to return the created sync object */
)
{
 801050a:	b580      	push	{r7, lr}
 801050c:	b086      	sub	sp, #24
 801050e:	af00      	add	r7, sp, #0
 8010510:	4603      	mov	r3, r0
 8010512:	6039      	str	r1, [r7, #0]
 8010514:	71fb      	strb	r3, [r7, #7]
#endif

#else

#if (osCMSIS < 0x20000U)
    osSemaphoreDef(SEM);
 8010516:	2300      	movs	r3, #0
 8010518:	60fb      	str	r3, [r7, #12]
 801051a:	2300      	movs	r3, #0
 801051c:	613b      	str	r3, [r7, #16]
    *sobj = osSemaphoreCreate(osSemaphore(SEM), 1);
 801051e:	f107 030c 	add.w	r3, r7, #12
 8010522:	2101      	movs	r1, #1
 8010524:	4618      	mov	r0, r3
 8010526:	f000 f8e9 	bl	80106fc <osSemaphoreCreate>
 801052a:	4602      	mov	r2, r0
 801052c:	683b      	ldr	r3, [r7, #0]
 801052e:	601a      	str	r2, [r3, #0]
#else
    *sobj = osSemaphoreNew(1, 1, NULL);
#endif

#endif
    ret = (*sobj != NULL);
 8010530:	683b      	ldr	r3, [r7, #0]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	2b00      	cmp	r3, #0
 8010536:	bf14      	ite	ne
 8010538:	2301      	movne	r3, #1
 801053a:	2300      	moveq	r3, #0
 801053c:	b2db      	uxtb	r3, r3
 801053e:	617b      	str	r3, [r7, #20]

    return ret;
 8010540:	697b      	ldr	r3, [r7, #20]
}
 8010542:	4618      	mov	r0, r3
 8010544:	3718      	adds	r7, #24
 8010546:	46bd      	mov	sp, r7
 8010548:	bd80      	pop	{r7, pc}

0801054a <ff_del_syncobj>:
*/

int ff_del_syncobj (	/* 1:Function succeeded, 0:Could not delete due to any error */
	_SYNC_t sobj		/* Sync object tied to the logical drive to be deleted */
)
{
 801054a:	b580      	push	{r7, lr}
 801054c:	b082      	sub	sp, #8
 801054e:	af00      	add	r7, sp, #0
 8010550:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
    osMutexDelete (sobj);
#else
    osSemaphoreDelete (sobj);
 8010552:	6878      	ldr	r0, [r7, #4]
 8010554:	f000 f988 	bl	8010868 <osSemaphoreDelete>
#endif
    return 1;
 8010558:	2301      	movs	r3, #1
}
 801055a:	4618      	mov	r0, r3
 801055c:	3708      	adds	r7, #8
 801055e:	46bd      	mov	sp, r7
 8010560:	bd80      	pop	{r7, pc}

08010562 <ff_req_grant>:
*/

int ff_req_grant (	/* 1:Got a grant to access the volume, 0:Could not get a grant */
	_SYNC_t sobj	/* Sync object to wait */
)
{
 8010562:	b580      	push	{r7, lr}
 8010564:	b084      	sub	sp, #16
 8010566:	af00      	add	r7, sp, #0
 8010568:	6078      	str	r0, [r7, #4]
  int ret = 0;
 801056a:	2300      	movs	r3, #0
 801056c:	60fb      	str	r3, [r7, #12]
#if (osCMSIS < 0x20000U)

#if _USE_MUTEX
  if(osMutexWait(sobj, _FS_TIMEOUT) == osOK)
#else
  if(osSemaphoreWait(sobj, _FS_TIMEOUT) == osOK)
 801056e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f000 f8f4 	bl	8010760 <osSemaphoreWait>
 8010578:	4603      	mov	r3, r0
 801057a:	2b00      	cmp	r3, #0
 801057c:	d101      	bne.n	8010582 <ff_req_grant+0x20>
   if(osSemaphoreAcquire(sobj, _FS_TIMEOUT) == osOK)
#endif

#endif
  {
    ret = 1;
 801057e:	2301      	movs	r3, #1
 8010580:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8010582:	68fb      	ldr	r3, [r7, #12]
}
 8010584:	4618      	mov	r0, r3
 8010586:	3710      	adds	r7, #16
 8010588:	46bd      	mov	sp, r7
 801058a:	bd80      	pop	{r7, pc}

0801058c <ff_rel_grant>:
*/

void ff_rel_grant (
	_SYNC_t sobj	/* Sync object to be signaled */
)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b082      	sub	sp, #8
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
#if _USE_MUTEX
  osMutexRelease(sobj);
#else
  osSemaphoreRelease(sobj);
 8010594:	6878      	ldr	r0, [r7, #4]
 8010596:	f000 f931 	bl	80107fc <osSemaphoreRelease>
#endif
}
 801059a:	bf00      	nop
 801059c:	3708      	adds	r7, #8
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80105a2:	b480      	push	{r7}
 80105a4:	b085      	sub	sp, #20
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	4603      	mov	r3, r0
 80105aa:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80105ac:	2300      	movs	r3, #0
 80105ae:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80105b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80105b4:	2b84      	cmp	r3, #132	; 0x84
 80105b6:	d005      	beq.n	80105c4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80105b8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	4413      	add	r3, r2
 80105c0:	3303      	adds	r3, #3
 80105c2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80105c4:	68fb      	ldr	r3, [r7, #12]
}
 80105c6:	4618      	mov	r0, r3
 80105c8:	3714      	adds	r7, #20
 80105ca:	46bd      	mov	sp, r7
 80105cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105d0:	4770      	bx	lr

080105d2 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80105d2:	b480      	push	{r7}
 80105d4:	b083      	sub	sp, #12
 80105d6:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80105d8:	f3ef 8305 	mrs	r3, IPSR
 80105dc:	607b      	str	r3, [r7, #4]
  return(result);
 80105de:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	bf14      	ite	ne
 80105e4:	2301      	movne	r3, #1
 80105e6:	2300      	moveq	r3, #0
 80105e8:	b2db      	uxtb	r3, r3
}
 80105ea:	4618      	mov	r0, r3
 80105ec:	370c      	adds	r7, #12
 80105ee:	46bd      	mov	sp, r7
 80105f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105f4:	4770      	bx	lr

080105f6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80105f6:	b580      	push	{r7, lr}
 80105f8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80105fa:	f001 fc35 	bl	8011e68 <vTaskStartScheduler>
  
  return osOK;
 80105fe:	2300      	movs	r3, #0
}
 8010600:	4618      	mov	r0, r3
 8010602:	bd80      	pop	{r7, pc}

08010604 <osKernelRunning>:
*         (1) RTOS is started
*         (-1) if this feature is disabled in FreeRTOSConfig.h 
* @note  MUST REMAIN UNCHANGED: \b osKernelRunning shall be consistent in every CMSIS-RTOS.
*/
int32_t osKernelRunning(void)
{
 8010604:	b580      	push	{r7, lr}
 8010606:	af00      	add	r7, sp, #0
#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
  if (xTaskGetSchedulerState() == taskSCHEDULER_NOT_STARTED)
 8010608:	f002 f888 	bl	801271c <xTaskGetSchedulerState>
 801060c:	4603      	mov	r3, r0
 801060e:	2b01      	cmp	r3, #1
 8010610:	d101      	bne.n	8010616 <osKernelRunning+0x12>
    return 0;
 8010612:	2300      	movs	r3, #0
 8010614:	e000      	b.n	8010618 <osKernelRunning+0x14>
  else
    return 1;
 8010616:	2301      	movs	r3, #1
#else
	return (-1);
#endif	
}
 8010618:	4618      	mov	r0, r3
 801061a:	bd80      	pop	{r7, pc}

0801061c <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 801061c:	b580      	push	{r7, lr}
 801061e:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8010620:	f7ff ffd7 	bl	80105d2 <inHandlerMode>
 8010624:	4603      	mov	r3, r0
 8010626:	2b00      	cmp	r3, #0
 8010628:	d003      	beq.n	8010632 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 801062a:	f001 fd3d 	bl	80120a8 <xTaskGetTickCountFromISR>
 801062e:	4603      	mov	r3, r0
 8010630:	e002      	b.n	8010638 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8010632:	f001 fd29 	bl	8012088 <xTaskGetTickCount>
 8010636:	4603      	mov	r3, r0
  }
}
 8010638:	4618      	mov	r0, r3
 801063a:	bd80      	pop	{r7, pc}

0801063c <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801063c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801063e:	b089      	sub	sp, #36	; 0x24
 8010640:	af04      	add	r7, sp, #16
 8010642:	6078      	str	r0, [r7, #4]
 8010644:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	695b      	ldr	r3, [r3, #20]
 801064a:	2b00      	cmp	r3, #0
 801064c:	d020      	beq.n	8010690 <osThreadCreate+0x54>
 801064e:	687b      	ldr	r3, [r7, #4]
 8010650:	699b      	ldr	r3, [r3, #24]
 8010652:	2b00      	cmp	r3, #0
 8010654:	d01c      	beq.n	8010690 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	685c      	ldr	r4, [r3, #4]
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	681d      	ldr	r5, [r3, #0]
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	691e      	ldr	r6, [r3, #16]
 8010662:	687b      	ldr	r3, [r7, #4]
 8010664:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8010668:	4618      	mov	r0, r3
 801066a:	f7ff ff9a 	bl	80105a2 <makeFreeRtosPriority>
 801066e:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8010670:	687b      	ldr	r3, [r7, #4]
 8010672:	695b      	ldr	r3, [r3, #20]
 8010674:	687a      	ldr	r2, [r7, #4]
 8010676:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010678:	9202      	str	r2, [sp, #8]
 801067a:	9301      	str	r3, [sp, #4]
 801067c:	9100      	str	r1, [sp, #0]
 801067e:	683b      	ldr	r3, [r7, #0]
 8010680:	4632      	mov	r2, r6
 8010682:	4629      	mov	r1, r5
 8010684:	4620      	mov	r0, r4
 8010686:	f001 fa15 	bl	8011ab4 <xTaskCreateStatic>
 801068a:	4603      	mov	r3, r0
 801068c:	60fb      	str	r3, [r7, #12]
 801068e:	e01c      	b.n	80106ca <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	685c      	ldr	r4, [r3, #4]
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801069c:	b29e      	uxth	r6, r3
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7ff ff7c 	bl	80105a2 <makeFreeRtosPriority>
 80106aa:	4602      	mov	r2, r0
 80106ac:	f107 030c 	add.w	r3, r7, #12
 80106b0:	9301      	str	r3, [sp, #4]
 80106b2:	9200      	str	r2, [sp, #0]
 80106b4:	683b      	ldr	r3, [r7, #0]
 80106b6:	4632      	mov	r2, r6
 80106b8:	4629      	mov	r1, r5
 80106ba:	4620      	mov	r0, r4
 80106bc:	f001 fa5d 	bl	8011b7a <xTaskCreate>
 80106c0:	4603      	mov	r3, r0
 80106c2:	2b01      	cmp	r3, #1
 80106c4:	d001      	beq.n	80106ca <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80106c6:	2300      	movs	r3, #0
 80106c8:	e000      	b.n	80106cc <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80106ca:	68fb      	ldr	r3, [r7, #12]
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3714      	adds	r7, #20
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080106d4 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80106d4:	b580      	push	{r7, lr}
 80106d6:	b084      	sub	sp, #16
 80106d8:	af00      	add	r7, sp, #0
 80106da:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d001      	beq.n	80106ea <osDelay+0x16>
 80106e6:	68fb      	ldr	r3, [r7, #12]
 80106e8:	e000      	b.n	80106ec <osDelay+0x18>
 80106ea:	2301      	movs	r3, #1
 80106ec:	4618      	mov	r0, r3
 80106ee:	f001 fb85 	bl	8011dfc <vTaskDelay>
  
  return osOK;
 80106f2:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80106f4:	4618      	mov	r0, r3
 80106f6:	3710      	adds	r7, #16
 80106f8:	46bd      	mov	sp, r7
 80106fa:	bd80      	pop	{r7, pc}

080106fc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b086      	sub	sp, #24
 8010700:	af02      	add	r7, sp, #8
 8010702:	6078      	str	r0, [r7, #4]
 8010704:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	685b      	ldr	r3, [r3, #4]
 801070a:	2b00      	cmp	r3, #0
 801070c:	d00f      	beq.n	801072e <osSemaphoreCreate+0x32>
    if (count == 1) {
 801070e:	683b      	ldr	r3, [r7, #0]
 8010710:	2b01      	cmp	r3, #1
 8010712:	d10a      	bne.n	801072a <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	2203      	movs	r2, #3
 801071a:	9200      	str	r2, [sp, #0]
 801071c:	2200      	movs	r2, #0
 801071e:	2100      	movs	r1, #0
 8010720:	2001      	movs	r0, #1
 8010722:	f000 faaf 	bl	8010c84 <xQueueGenericCreateStatic>
 8010726:	4603      	mov	r3, r0
 8010728:	e016      	b.n	8010758 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 801072a:	2300      	movs	r3, #0
 801072c:	e014      	b.n	8010758 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 801072e:	683b      	ldr	r3, [r7, #0]
 8010730:	2b01      	cmp	r3, #1
 8010732:	d110      	bne.n	8010756 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8010734:	2203      	movs	r2, #3
 8010736:	2100      	movs	r1, #0
 8010738:	2001      	movs	r0, #1
 801073a:	f000 fb25 	bl	8010d88 <xQueueGenericCreate>
 801073e:	60f8      	str	r0, [r7, #12]
 8010740:	68fb      	ldr	r3, [r7, #12]
 8010742:	2b00      	cmp	r3, #0
 8010744:	d005      	beq.n	8010752 <osSemaphoreCreate+0x56>
 8010746:	2300      	movs	r3, #0
 8010748:	2200      	movs	r2, #0
 801074a:	2100      	movs	r1, #0
 801074c:	68f8      	ldr	r0, [r7, #12]
 801074e:	f000 fb7d 	bl	8010e4c <xQueueGenericSend>
      return sema;
 8010752:	68fb      	ldr	r3, [r7, #12]
 8010754:	e000      	b.n	8010758 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8010756:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8010758:	4618      	mov	r0, r3
 801075a:	3710      	adds	r7, #16
 801075c:	46bd      	mov	sp, r7
 801075e:	bd80      	pop	{r7, pc}

08010760 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8010760:	b580      	push	{r7, lr}
 8010762:	b084      	sub	sp, #16
 8010764:	af00      	add	r7, sp, #0
 8010766:	6078      	str	r0, [r7, #4]
 8010768:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 801076a:	2300      	movs	r3, #0
 801076c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 801076e:	687b      	ldr	r3, [r7, #4]
 8010770:	2b00      	cmp	r3, #0
 8010772:	d101      	bne.n	8010778 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8010774:	2380      	movs	r3, #128	; 0x80
 8010776:	e03a      	b.n	80107ee <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8010778:	2300      	movs	r3, #0
 801077a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010782:	d103      	bne.n	801078c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8010784:	f04f 33ff 	mov.w	r3, #4294967295
 8010788:	60fb      	str	r3, [r7, #12]
 801078a:	e009      	b.n	80107a0 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 801078c:	683b      	ldr	r3, [r7, #0]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d006      	beq.n	80107a0 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8010792:	683b      	ldr	r3, [r7, #0]
 8010794:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8010796:	68fb      	ldr	r3, [r7, #12]
 8010798:	2b00      	cmp	r3, #0
 801079a:	d101      	bne.n	80107a0 <osSemaphoreWait+0x40>
      ticks = 1;
 801079c:	2301      	movs	r3, #1
 801079e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80107a0:	f7ff ff17 	bl	80105d2 <inHandlerMode>
 80107a4:	4603      	mov	r3, r0
 80107a6:	2b00      	cmp	r3, #0
 80107a8:	d017      	beq.n	80107da <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80107aa:	f107 0308 	add.w	r3, r7, #8
 80107ae:	461a      	mov	r2, r3
 80107b0:	2100      	movs	r1, #0
 80107b2:	6878      	ldr	r0, [r7, #4]
 80107b4:	f000 ff80 	bl	80116b8 <xQueueReceiveFromISR>
 80107b8:	4603      	mov	r3, r0
 80107ba:	2b01      	cmp	r3, #1
 80107bc:	d001      	beq.n	80107c2 <osSemaphoreWait+0x62>
      return osErrorOS;
 80107be:	23ff      	movs	r3, #255	; 0xff
 80107c0:	e015      	b.n	80107ee <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	2b00      	cmp	r3, #0
 80107c6:	d011      	beq.n	80107ec <osSemaphoreWait+0x8c>
 80107c8:	4b0b      	ldr	r3, [pc, #44]	; (80107f8 <osSemaphoreWait+0x98>)
 80107ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80107ce:	601a      	str	r2, [r3, #0]
 80107d0:	f3bf 8f4f 	dsb	sy
 80107d4:	f3bf 8f6f 	isb	sy
 80107d8:	e008      	b.n	80107ec <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 80107da:	68f9      	ldr	r1, [r7, #12]
 80107dc:	6878      	ldr	r0, [r7, #4]
 80107de:	f000 fe57 	bl	8011490 <xQueueSemaphoreTake>
 80107e2:	4603      	mov	r3, r0
 80107e4:	2b01      	cmp	r3, #1
 80107e6:	d001      	beq.n	80107ec <osSemaphoreWait+0x8c>
    return osErrorOS;
 80107e8:	23ff      	movs	r3, #255	; 0xff
 80107ea:	e000      	b.n	80107ee <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 80107ec:	2300      	movs	r3, #0
}
 80107ee:	4618      	mov	r0, r3
 80107f0:	3710      	adds	r7, #16
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd80      	pop	{r7, pc}
 80107f6:	bf00      	nop
 80107f8:	e000ed04 	.word	0xe000ed04

080107fc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 80107fc:	b580      	push	{r7, lr}
 80107fe:	b084      	sub	sp, #16
 8010800:	af00      	add	r7, sp, #0
 8010802:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8010804:	2300      	movs	r3, #0
 8010806:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8010808:	2300      	movs	r3, #0
 801080a:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 801080c:	f7ff fee1 	bl	80105d2 <inHandlerMode>
 8010810:	4603      	mov	r3, r0
 8010812:	2b00      	cmp	r3, #0
 8010814:	d016      	beq.n	8010844 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8010816:	f107 0308 	add.w	r3, r7, #8
 801081a:	4619      	mov	r1, r3
 801081c:	6878      	ldr	r0, [r7, #4]
 801081e:	f000 fcbb 	bl	8011198 <xQueueGiveFromISR>
 8010822:	4603      	mov	r3, r0
 8010824:	2b01      	cmp	r3, #1
 8010826:	d001      	beq.n	801082c <osSemaphoreRelease+0x30>
      return osErrorOS;
 8010828:	23ff      	movs	r3, #255	; 0xff
 801082a:	e017      	b.n	801085c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 801082c:	68bb      	ldr	r3, [r7, #8]
 801082e:	2b00      	cmp	r3, #0
 8010830:	d013      	beq.n	801085a <osSemaphoreRelease+0x5e>
 8010832:	4b0c      	ldr	r3, [pc, #48]	; (8010864 <osSemaphoreRelease+0x68>)
 8010834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010838:	601a      	str	r2, [r3, #0]
 801083a:	f3bf 8f4f 	dsb	sy
 801083e:	f3bf 8f6f 	isb	sy
 8010842:	e00a      	b.n	801085a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8010844:	2300      	movs	r3, #0
 8010846:	2200      	movs	r2, #0
 8010848:	2100      	movs	r1, #0
 801084a:	6878      	ldr	r0, [r7, #4]
 801084c:	f000 fafe 	bl	8010e4c <xQueueGenericSend>
 8010850:	4603      	mov	r3, r0
 8010852:	2b01      	cmp	r3, #1
 8010854:	d001      	beq.n	801085a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8010856:	23ff      	movs	r3, #255	; 0xff
 8010858:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 801085a:	68fb      	ldr	r3, [r7, #12]
}
 801085c:	4618      	mov	r0, r3
 801085e:	3710      	adds	r7, #16
 8010860:	46bd      	mov	sp, r7
 8010862:	bd80      	pop	{r7, pc}
 8010864:	e000ed04 	.word	0xe000ed04

08010868 <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 8010868:	b580      	push	{r7, lr}
 801086a:	b082      	sub	sp, #8
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 8010870:	f7ff feaf 	bl	80105d2 <inHandlerMode>
 8010874:	4603      	mov	r3, r0
 8010876:	2b00      	cmp	r3, #0
 8010878:	d001      	beq.n	801087e <osSemaphoreDelete+0x16>
    return osErrorISR;
 801087a:	2382      	movs	r3, #130	; 0x82
 801087c:	e003      	b.n	8010886 <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 801087e:	6878      	ldr	r0, [r7, #4]
 8010880:	f000 ffa0 	bl	80117c4 <vQueueDelete>

  return osOK; 
 8010884:	2300      	movs	r3, #0
}
 8010886:	4618      	mov	r0, r3
 8010888:	3708      	adds	r7, #8
 801088a:	46bd      	mov	sp, r7
 801088c:	bd80      	pop	{r7, pc}

0801088e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 801088e:	b590      	push	{r4, r7, lr}
 8010890:	b085      	sub	sp, #20
 8010892:	af02      	add	r7, sp, #8
 8010894:	6078      	str	r0, [r7, #4]
 8010896:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	689b      	ldr	r3, [r3, #8]
 801089c:	2b00      	cmp	r3, #0
 801089e:	d011      	beq.n	80108c4 <osMessageCreate+0x36>
 80108a0:	687b      	ldr	r3, [r7, #4]
 80108a2:	68db      	ldr	r3, [r3, #12]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d00d      	beq.n	80108c4 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	6818      	ldr	r0, [r3, #0]
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6859      	ldr	r1, [r3, #4]
 80108b0:	687b      	ldr	r3, [r7, #4]
 80108b2:	689a      	ldr	r2, [r3, #8]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	68db      	ldr	r3, [r3, #12]
 80108b8:	2400      	movs	r4, #0
 80108ba:	9400      	str	r4, [sp, #0]
 80108bc:	f000 f9e2 	bl	8010c84 <xQueueGenericCreateStatic>
 80108c0:	4603      	mov	r3, r0
 80108c2:	e008      	b.n	80108d6 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	6818      	ldr	r0, [r3, #0]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	685b      	ldr	r3, [r3, #4]
 80108cc:	2200      	movs	r2, #0
 80108ce:	4619      	mov	r1, r3
 80108d0:	f000 fa5a 	bl	8010d88 <xQueueGenericCreate>
 80108d4:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80108d6:	4618      	mov	r0, r3
 80108d8:	370c      	adds	r7, #12
 80108da:	46bd      	mov	sp, r7
 80108dc:	bd90      	pop	{r4, r7, pc}
	...

080108e0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b086      	sub	sp, #24
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	60f8      	str	r0, [r7, #12]
 80108e8:	60b9      	str	r1, [r7, #8]
 80108ea:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80108ec:	2300      	movs	r3, #0
 80108ee:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80108f4:	697b      	ldr	r3, [r7, #20]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d101      	bne.n	80108fe <osMessagePut+0x1e>
    ticks = 1;
 80108fa:	2301      	movs	r3, #1
 80108fc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80108fe:	f7ff fe68 	bl	80105d2 <inHandlerMode>
 8010902:	4603      	mov	r3, r0
 8010904:	2b00      	cmp	r3, #0
 8010906:	d018      	beq.n	801093a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8010908:	f107 0210 	add.w	r2, r7, #16
 801090c:	f107 0108 	add.w	r1, r7, #8
 8010910:	2300      	movs	r3, #0
 8010912:	68f8      	ldr	r0, [r7, #12]
 8010914:	f000 fba0 	bl	8011058 <xQueueGenericSendFromISR>
 8010918:	4603      	mov	r3, r0
 801091a:	2b01      	cmp	r3, #1
 801091c:	d001      	beq.n	8010922 <osMessagePut+0x42>
      return osErrorOS;
 801091e:	23ff      	movs	r3, #255	; 0xff
 8010920:	e018      	b.n	8010954 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8010922:	693b      	ldr	r3, [r7, #16]
 8010924:	2b00      	cmp	r3, #0
 8010926:	d014      	beq.n	8010952 <osMessagePut+0x72>
 8010928:	4b0c      	ldr	r3, [pc, #48]	; (801095c <osMessagePut+0x7c>)
 801092a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801092e:	601a      	str	r2, [r3, #0]
 8010930:	f3bf 8f4f 	dsb	sy
 8010934:	f3bf 8f6f 	isb	sy
 8010938:	e00b      	b.n	8010952 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801093a:	f107 0108 	add.w	r1, r7, #8
 801093e:	2300      	movs	r3, #0
 8010940:	697a      	ldr	r2, [r7, #20]
 8010942:	68f8      	ldr	r0, [r7, #12]
 8010944:	f000 fa82 	bl	8010e4c <xQueueGenericSend>
 8010948:	4603      	mov	r3, r0
 801094a:	2b01      	cmp	r3, #1
 801094c:	d001      	beq.n	8010952 <osMessagePut+0x72>
      return osErrorOS;
 801094e:	23ff      	movs	r3, #255	; 0xff
 8010950:	e000      	b.n	8010954 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8010952:	2300      	movs	r3, #0
}
 8010954:	4618      	mov	r0, r3
 8010956:	3718      	adds	r7, #24
 8010958:	46bd      	mov	sp, r7
 801095a:	bd80      	pop	{r7, pc}
 801095c:	e000ed04 	.word	0xe000ed04

08010960 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8010960:	b590      	push	{r4, r7, lr}
 8010962:	b08b      	sub	sp, #44	; 0x2c
 8010964:	af00      	add	r7, sp, #0
 8010966:	60f8      	str	r0, [r7, #12]
 8010968:	60b9      	str	r1, [r7, #8]
 801096a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 801096c:	68bb      	ldr	r3, [r7, #8]
 801096e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8010970:	2300      	movs	r3, #0
 8010972:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8010974:	68bb      	ldr	r3, [r7, #8]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d10a      	bne.n	8010990 <osMessageGet+0x30>
    event.status = osErrorParameter;
 801097a:	2380      	movs	r3, #128	; 0x80
 801097c:	617b      	str	r3, [r7, #20]
    return event;
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	461c      	mov	r4, r3
 8010982:	f107 0314 	add.w	r3, r7, #20
 8010986:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801098a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 801098e:	e054      	b.n	8010a3a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8010990:	2300      	movs	r3, #0
 8010992:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8010994:	2300      	movs	r3, #0
 8010996:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801099e:	d103      	bne.n	80109a8 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80109a0:	f04f 33ff 	mov.w	r3, #4294967295
 80109a4:	627b      	str	r3, [r7, #36]	; 0x24
 80109a6:	e009      	b.n	80109bc <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80109a8:	687b      	ldr	r3, [r7, #4]
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	d006      	beq.n	80109bc <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80109b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d101      	bne.n	80109bc <osMessageGet+0x5c>
      ticks = 1;
 80109b8:	2301      	movs	r3, #1
 80109ba:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 80109bc:	f7ff fe09 	bl	80105d2 <inHandlerMode>
 80109c0:	4603      	mov	r3, r0
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d01c      	beq.n	8010a00 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 80109c6:	f107 0220 	add.w	r2, r7, #32
 80109ca:	f107 0314 	add.w	r3, r7, #20
 80109ce:	3304      	adds	r3, #4
 80109d0:	4619      	mov	r1, r3
 80109d2:	68b8      	ldr	r0, [r7, #8]
 80109d4:	f000 fe70 	bl	80116b8 <xQueueReceiveFromISR>
 80109d8:	4603      	mov	r3, r0
 80109da:	2b01      	cmp	r3, #1
 80109dc:	d102      	bne.n	80109e4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80109de:	2310      	movs	r3, #16
 80109e0:	617b      	str	r3, [r7, #20]
 80109e2:	e001      	b.n	80109e8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80109e4:	2300      	movs	r3, #0
 80109e6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80109e8:	6a3b      	ldr	r3, [r7, #32]
 80109ea:	2b00      	cmp	r3, #0
 80109ec:	d01d      	beq.n	8010a2a <osMessageGet+0xca>
 80109ee:	4b15      	ldr	r3, [pc, #84]	; (8010a44 <osMessageGet+0xe4>)
 80109f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80109f4:	601a      	str	r2, [r3, #0]
 80109f6:	f3bf 8f4f 	dsb	sy
 80109fa:	f3bf 8f6f 	isb	sy
 80109fe:	e014      	b.n	8010a2a <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8010a00:	f107 0314 	add.w	r3, r7, #20
 8010a04:	3304      	adds	r3, #4
 8010a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010a08:	4619      	mov	r1, r3
 8010a0a:	68b8      	ldr	r0, [r7, #8]
 8010a0c:	f000 fc5a 	bl	80112c4 <xQueueReceive>
 8010a10:	4603      	mov	r3, r0
 8010a12:	2b01      	cmp	r3, #1
 8010a14:	d102      	bne.n	8010a1c <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8010a16:	2310      	movs	r3, #16
 8010a18:	617b      	str	r3, [r7, #20]
 8010a1a:	e006      	b.n	8010a2a <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8010a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d101      	bne.n	8010a26 <osMessageGet+0xc6>
 8010a22:	2300      	movs	r3, #0
 8010a24:	e000      	b.n	8010a28 <osMessageGet+0xc8>
 8010a26:	2340      	movs	r3, #64	; 0x40
 8010a28:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	461c      	mov	r4, r3
 8010a2e:	f107 0314 	add.w	r3, r7, #20
 8010a32:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010a36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8010a3a:	68f8      	ldr	r0, [r7, #12]
 8010a3c:	372c      	adds	r7, #44	; 0x2c
 8010a3e:	46bd      	mov	sp, r7
 8010a40:	bd90      	pop	{r4, r7, pc}
 8010a42:	bf00      	nop
 8010a44:	e000ed04 	.word	0xe000ed04

08010a48 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8010a48:	b480      	push	{r7}
 8010a4a:	b083      	sub	sp, #12
 8010a4c:	af00      	add	r7, sp, #0
 8010a4e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a50:	687b      	ldr	r3, [r7, #4]
 8010a52:	f103 0208 	add.w	r2, r3, #8
 8010a56:	687b      	ldr	r3, [r7, #4]
 8010a58:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8010a5a:	687b      	ldr	r3, [r7, #4]
 8010a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8010a60:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	f103 0208 	add.w	r2, r3, #8
 8010a68:	687b      	ldr	r3, [r7, #4]
 8010a6a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f103 0208 	add.w	r2, r3, #8
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	2200      	movs	r2, #0
 8010a7a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8010a7c:	bf00      	nop
 8010a7e:	370c      	adds	r7, #12
 8010a80:	46bd      	mov	sp, r7
 8010a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a86:	4770      	bx	lr

08010a88 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8010a88:	b480      	push	{r7}
 8010a8a:	b083      	sub	sp, #12
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	2200      	movs	r2, #0
 8010a94:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8010a96:	bf00      	nop
 8010a98:	370c      	adds	r7, #12
 8010a9a:	46bd      	mov	sp, r7
 8010a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aa0:	4770      	bx	lr

08010aa2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010aa2:	b480      	push	{r7}
 8010aa4:	b085      	sub	sp, #20
 8010aa6:	af00      	add	r7, sp, #0
 8010aa8:	6078      	str	r0, [r7, #4]
 8010aaa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	685b      	ldr	r3, [r3, #4]
 8010ab0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8010ab2:	683b      	ldr	r3, [r7, #0]
 8010ab4:	68fa      	ldr	r2, [r7, #12]
 8010ab6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	689a      	ldr	r2, [r3, #8]
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8010ac0:	68fb      	ldr	r3, [r7, #12]
 8010ac2:	689b      	ldr	r3, [r3, #8]
 8010ac4:	683a      	ldr	r2, [r7, #0]
 8010ac6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	683a      	ldr	r2, [r7, #0]
 8010acc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8010ace:	683b      	ldr	r3, [r7, #0]
 8010ad0:	687a      	ldr	r2, [r7, #4]
 8010ad2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	1c5a      	adds	r2, r3, #1
 8010ada:	687b      	ldr	r3, [r7, #4]
 8010adc:	601a      	str	r2, [r3, #0]
}
 8010ade:	bf00      	nop
 8010ae0:	3714      	adds	r7, #20
 8010ae2:	46bd      	mov	sp, r7
 8010ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ae8:	4770      	bx	lr

08010aea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8010aea:	b480      	push	{r7}
 8010aec:	b085      	sub	sp, #20
 8010aee:	af00      	add	r7, sp, #0
 8010af0:	6078      	str	r0, [r7, #4]
 8010af2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8010afa:	68bb      	ldr	r3, [r7, #8]
 8010afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010b00:	d103      	bne.n	8010b0a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	691b      	ldr	r3, [r3, #16]
 8010b06:	60fb      	str	r3, [r7, #12]
 8010b08:	e00c      	b.n	8010b24 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	3308      	adds	r3, #8
 8010b0e:	60fb      	str	r3, [r7, #12]
 8010b10:	e002      	b.n	8010b18 <vListInsert+0x2e>
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	685b      	ldr	r3, [r3, #4]
 8010b16:	60fb      	str	r3, [r7, #12]
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	68ba      	ldr	r2, [r7, #8]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d2f6      	bcs.n	8010b12 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	685a      	ldr	r2, [r3, #4]
 8010b28:	683b      	ldr	r3, [r7, #0]
 8010b2a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8010b2c:	683b      	ldr	r3, [r7, #0]
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	683a      	ldr	r2, [r7, #0]
 8010b32:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8010b34:	683b      	ldr	r3, [r7, #0]
 8010b36:	68fa      	ldr	r2, [r7, #12]
 8010b38:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	683a      	ldr	r2, [r7, #0]
 8010b3e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8010b40:	683b      	ldr	r3, [r7, #0]
 8010b42:	687a      	ldr	r2, [r7, #4]
 8010b44:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	1c5a      	adds	r2, r3, #1
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	601a      	str	r2, [r3, #0]
}
 8010b50:	bf00      	nop
 8010b52:	3714      	adds	r7, #20
 8010b54:	46bd      	mov	sp, r7
 8010b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b5a:	4770      	bx	lr

08010b5c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8010b5c:	b480      	push	{r7}
 8010b5e:	b085      	sub	sp, #20
 8010b60:	af00      	add	r7, sp, #0
 8010b62:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	691b      	ldr	r3, [r3, #16]
 8010b68:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8010b6a:	687b      	ldr	r3, [r7, #4]
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	687a      	ldr	r2, [r7, #4]
 8010b70:	6892      	ldr	r2, [r2, #8]
 8010b72:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	689b      	ldr	r3, [r3, #8]
 8010b78:	687a      	ldr	r2, [r7, #4]
 8010b7a:	6852      	ldr	r2, [r2, #4]
 8010b7c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8010b7e:	68fb      	ldr	r3, [r7, #12]
 8010b80:	685b      	ldr	r3, [r3, #4]
 8010b82:	687a      	ldr	r2, [r7, #4]
 8010b84:	429a      	cmp	r2, r3
 8010b86:	d103      	bne.n	8010b90 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8010b88:	687b      	ldr	r3, [r7, #4]
 8010b8a:	689a      	ldr	r2, [r3, #8]
 8010b8c:	68fb      	ldr	r3, [r7, #12]
 8010b8e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8010b90:	687b      	ldr	r3, [r7, #4]
 8010b92:	2200      	movs	r2, #0
 8010b94:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	1e5a      	subs	r2, r3, #1
 8010b9c:	68fb      	ldr	r3, [r7, #12]
 8010b9e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8010ba0:	68fb      	ldr	r3, [r7, #12]
 8010ba2:	681b      	ldr	r3, [r3, #0]
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3714      	adds	r7, #20
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bae:	4770      	bx	lr

08010bb0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8010bbe:	68fb      	ldr	r3, [r7, #12]
 8010bc0:	2b00      	cmp	r3, #0
 8010bc2:	d10c      	bne.n	8010bde <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8010bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bc8:	b672      	cpsid	i
 8010bca:	f383 8811 	msr	BASEPRI, r3
 8010bce:	f3bf 8f6f 	isb	sy
 8010bd2:	f3bf 8f4f 	dsb	sy
 8010bd6:	b662      	cpsie	i
 8010bd8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8010bda:	bf00      	nop
 8010bdc:	e7fe      	b.n	8010bdc <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8010bde:	f002 f8ed 	bl	8012dbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010be2:	68fb      	ldr	r3, [r7, #12]
 8010be4:	681a      	ldr	r2, [r3, #0]
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010bea:	68f9      	ldr	r1, [r7, #12]
 8010bec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010bee:	fb01 f303 	mul.w	r3, r1, r3
 8010bf2:	441a      	add	r2, r3
 8010bf4:	68fb      	ldr	r3, [r7, #12]
 8010bf6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8010bf8:	68fb      	ldr	r3, [r7, #12]
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	681a      	ldr	r2, [r3, #0]
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	681a      	ldr	r2, [r3, #0]
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010c0e:	3b01      	subs	r3, #1
 8010c10:	68f9      	ldr	r1, [r7, #12]
 8010c12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8010c14:	fb01 f303 	mul.w	r3, r1, r3
 8010c18:	441a      	add	r2, r3
 8010c1a:	68fb      	ldr	r3, [r7, #12]
 8010c1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8010c1e:	68fb      	ldr	r3, [r7, #12]
 8010c20:	22ff      	movs	r2, #255	; 0xff
 8010c22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	22ff      	movs	r2, #255	; 0xff
 8010c2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8010c2e:	683b      	ldr	r3, [r7, #0]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d114      	bne.n	8010c5e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	691b      	ldr	r3, [r3, #16]
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d01a      	beq.n	8010c72 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8010c3c:	68fb      	ldr	r3, [r7, #12]
 8010c3e:	3310      	adds	r3, #16
 8010c40:	4618      	mov	r0, r3
 8010c42:	f001 fba5 	bl	8012390 <xTaskRemoveFromEventList>
 8010c46:	4603      	mov	r3, r0
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d012      	beq.n	8010c72 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8010c4c:	4b0c      	ldr	r3, [pc, #48]	; (8010c80 <xQueueGenericReset+0xd0>)
 8010c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c52:	601a      	str	r2, [r3, #0]
 8010c54:	f3bf 8f4f 	dsb	sy
 8010c58:	f3bf 8f6f 	isb	sy
 8010c5c:	e009      	b.n	8010c72 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8010c5e:	68fb      	ldr	r3, [r7, #12]
 8010c60:	3310      	adds	r3, #16
 8010c62:	4618      	mov	r0, r3
 8010c64:	f7ff fef0 	bl	8010a48 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	3324      	adds	r3, #36	; 0x24
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	f7ff feeb 	bl	8010a48 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8010c72:	f002 f8d7 	bl	8012e24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8010c76:	2301      	movs	r3, #1
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3710      	adds	r7, #16
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd80      	pop	{r7, pc}
 8010c80:	e000ed04 	.word	0xe000ed04

08010c84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8010c84:	b580      	push	{r7, lr}
 8010c86:	b08e      	sub	sp, #56	; 0x38
 8010c88:	af02      	add	r7, sp, #8
 8010c8a:	60f8      	str	r0, [r7, #12]
 8010c8c:	60b9      	str	r1, [r7, #8]
 8010c8e:	607a      	str	r2, [r7, #4]
 8010c90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010c92:	68fb      	ldr	r3, [r7, #12]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d10c      	bne.n	8010cb2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8010c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c9c:	b672      	cpsid	i
 8010c9e:	f383 8811 	msr	BASEPRI, r3
 8010ca2:	f3bf 8f6f 	isb	sy
 8010ca6:	f3bf 8f4f 	dsb	sy
 8010caa:	b662      	cpsie	i
 8010cac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010cae:	bf00      	nop
 8010cb0:	e7fe      	b.n	8010cb0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8010cb2:	683b      	ldr	r3, [r7, #0]
 8010cb4:	2b00      	cmp	r3, #0
 8010cb6:	d10c      	bne.n	8010cd2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8010cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cbc:	b672      	cpsid	i
 8010cbe:	f383 8811 	msr	BASEPRI, r3
 8010cc2:	f3bf 8f6f 	isb	sy
 8010cc6:	f3bf 8f4f 	dsb	sy
 8010cca:	b662      	cpsie	i
 8010ccc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010cce:	bf00      	nop
 8010cd0:	e7fe      	b.n	8010cd0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d002      	beq.n	8010cde <xQueueGenericCreateStatic+0x5a>
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	2b00      	cmp	r3, #0
 8010cdc:	d001      	beq.n	8010ce2 <xQueueGenericCreateStatic+0x5e>
 8010cde:	2301      	movs	r3, #1
 8010ce0:	e000      	b.n	8010ce4 <xQueueGenericCreateStatic+0x60>
 8010ce2:	2300      	movs	r3, #0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d10c      	bne.n	8010d02 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8010ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cec:	b672      	cpsid	i
 8010cee:	f383 8811 	msr	BASEPRI, r3
 8010cf2:	f3bf 8f6f 	isb	sy
 8010cf6:	f3bf 8f4f 	dsb	sy
 8010cfa:	b662      	cpsie	i
 8010cfc:	623b      	str	r3, [r7, #32]
}
 8010cfe:	bf00      	nop
 8010d00:	e7fe      	b.n	8010d00 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2b00      	cmp	r3, #0
 8010d06:	d102      	bne.n	8010d0e <xQueueGenericCreateStatic+0x8a>
 8010d08:	68bb      	ldr	r3, [r7, #8]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d101      	bne.n	8010d12 <xQueueGenericCreateStatic+0x8e>
 8010d0e:	2301      	movs	r3, #1
 8010d10:	e000      	b.n	8010d14 <xQueueGenericCreateStatic+0x90>
 8010d12:	2300      	movs	r3, #0
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d10c      	bne.n	8010d32 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8010d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d1c:	b672      	cpsid	i
 8010d1e:	f383 8811 	msr	BASEPRI, r3
 8010d22:	f3bf 8f6f 	isb	sy
 8010d26:	f3bf 8f4f 	dsb	sy
 8010d2a:	b662      	cpsie	i
 8010d2c:	61fb      	str	r3, [r7, #28]
}
 8010d2e:	bf00      	nop
 8010d30:	e7fe      	b.n	8010d30 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8010d32:	2348      	movs	r3, #72	; 0x48
 8010d34:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8010d36:	697b      	ldr	r3, [r7, #20]
 8010d38:	2b48      	cmp	r3, #72	; 0x48
 8010d3a:	d00c      	beq.n	8010d56 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8010d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d40:	b672      	cpsid	i
 8010d42:	f383 8811 	msr	BASEPRI, r3
 8010d46:	f3bf 8f6f 	isb	sy
 8010d4a:	f3bf 8f4f 	dsb	sy
 8010d4e:	b662      	cpsie	i
 8010d50:	61bb      	str	r3, [r7, #24]
}
 8010d52:	bf00      	nop
 8010d54:	e7fe      	b.n	8010d54 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8010d56:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8010d58:	683b      	ldr	r3, [r7, #0]
 8010d5a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8010d5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5e:	2b00      	cmp	r3, #0
 8010d60:	d00d      	beq.n	8010d7e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8010d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d64:	2201      	movs	r2, #1
 8010d66:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010d6a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8010d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d70:	9300      	str	r3, [sp, #0]
 8010d72:	4613      	mov	r3, r2
 8010d74:	687a      	ldr	r2, [r7, #4]
 8010d76:	68b9      	ldr	r1, [r7, #8]
 8010d78:	68f8      	ldr	r0, [r7, #12]
 8010d7a:	f000 f847 	bl	8010e0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3730      	adds	r7, #48	; 0x30
 8010d84:	46bd      	mov	sp, r7
 8010d86:	bd80      	pop	{r7, pc}

08010d88 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8010d88:	b580      	push	{r7, lr}
 8010d8a:	b08a      	sub	sp, #40	; 0x28
 8010d8c:	af02      	add	r7, sp, #8
 8010d8e:	60f8      	str	r0, [r7, #12]
 8010d90:	60b9      	str	r1, [r7, #8]
 8010d92:	4613      	mov	r3, r2
 8010d94:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	2b00      	cmp	r3, #0
 8010d9a:	d10c      	bne.n	8010db6 <xQueueGenericCreate+0x2e>
	__asm volatile
 8010d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da0:	b672      	cpsid	i
 8010da2:	f383 8811 	msr	BASEPRI, r3
 8010da6:	f3bf 8f6f 	isb	sy
 8010daa:	f3bf 8f4f 	dsb	sy
 8010dae:	b662      	cpsie	i
 8010db0:	613b      	str	r3, [r7, #16]
}
 8010db2:	bf00      	nop
 8010db4:	e7fe      	b.n	8010db4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8010db6:	68bb      	ldr	r3, [r7, #8]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d102      	bne.n	8010dc2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8010dbc:	2300      	movs	r3, #0
 8010dbe:	61fb      	str	r3, [r7, #28]
 8010dc0:	e004      	b.n	8010dcc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010dc2:	68fb      	ldr	r3, [r7, #12]
 8010dc4:	68ba      	ldr	r2, [r7, #8]
 8010dc6:	fb02 f303 	mul.w	r3, r2, r3
 8010dca:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8010dcc:	69fb      	ldr	r3, [r7, #28]
 8010dce:	3348      	adds	r3, #72	; 0x48
 8010dd0:	4618      	mov	r0, r3
 8010dd2:	f002 f91f 	bl	8013014 <pvPortMalloc>
 8010dd6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8010dd8:	69bb      	ldr	r3, [r7, #24]
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d011      	beq.n	8010e02 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8010dde:	69bb      	ldr	r3, [r7, #24]
 8010de0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8010de2:	697b      	ldr	r3, [r7, #20]
 8010de4:	3348      	adds	r3, #72	; 0x48
 8010de6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8010de8:	69bb      	ldr	r3, [r7, #24]
 8010dea:	2200      	movs	r2, #0
 8010dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8010df0:	79fa      	ldrb	r2, [r7, #7]
 8010df2:	69bb      	ldr	r3, [r7, #24]
 8010df4:	9300      	str	r3, [sp, #0]
 8010df6:	4613      	mov	r3, r2
 8010df8:	697a      	ldr	r2, [r7, #20]
 8010dfa:	68b9      	ldr	r1, [r7, #8]
 8010dfc:	68f8      	ldr	r0, [r7, #12]
 8010dfe:	f000 f805 	bl	8010e0c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8010e02:	69bb      	ldr	r3, [r7, #24]
	}
 8010e04:	4618      	mov	r0, r3
 8010e06:	3720      	adds	r7, #32
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	bd80      	pop	{r7, pc}

08010e0c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8010e0c:	b580      	push	{r7, lr}
 8010e0e:	b084      	sub	sp, #16
 8010e10:	af00      	add	r7, sp, #0
 8010e12:	60f8      	str	r0, [r7, #12]
 8010e14:	60b9      	str	r1, [r7, #8]
 8010e16:	607a      	str	r2, [r7, #4]
 8010e18:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8010e1a:	68bb      	ldr	r3, [r7, #8]
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d103      	bne.n	8010e28 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8010e20:	69bb      	ldr	r3, [r7, #24]
 8010e22:	69ba      	ldr	r2, [r7, #24]
 8010e24:	601a      	str	r2, [r3, #0]
 8010e26:	e002      	b.n	8010e2e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8010e28:	69bb      	ldr	r3, [r7, #24]
 8010e2a:	687a      	ldr	r2, [r7, #4]
 8010e2c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8010e2e:	69bb      	ldr	r3, [r7, #24]
 8010e30:	68fa      	ldr	r2, [r7, #12]
 8010e32:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8010e34:	69bb      	ldr	r3, [r7, #24]
 8010e36:	68ba      	ldr	r2, [r7, #8]
 8010e38:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8010e3a:	2101      	movs	r1, #1
 8010e3c:	69b8      	ldr	r0, [r7, #24]
 8010e3e:	f7ff feb7 	bl	8010bb0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8010e42:	bf00      	nop
 8010e44:	3710      	adds	r7, #16
 8010e46:	46bd      	mov	sp, r7
 8010e48:	bd80      	pop	{r7, pc}
	...

08010e4c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8010e4c:	b580      	push	{r7, lr}
 8010e4e:	b08e      	sub	sp, #56	; 0x38
 8010e50:	af00      	add	r7, sp, #0
 8010e52:	60f8      	str	r0, [r7, #12]
 8010e54:	60b9      	str	r1, [r7, #8]
 8010e56:	607a      	str	r2, [r7, #4]
 8010e58:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e64:	2b00      	cmp	r3, #0
 8010e66:	d10c      	bne.n	8010e82 <xQueueGenericSend+0x36>
	__asm volatile
 8010e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e6c:	b672      	cpsid	i
 8010e6e:	f383 8811 	msr	BASEPRI, r3
 8010e72:	f3bf 8f6f 	isb	sy
 8010e76:	f3bf 8f4f 	dsb	sy
 8010e7a:	b662      	cpsie	i
 8010e7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8010e7e:	bf00      	nop
 8010e80:	e7fe      	b.n	8010e80 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010e82:	68bb      	ldr	r3, [r7, #8]
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d103      	bne.n	8010e90 <xQueueGenericSend+0x44>
 8010e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d101      	bne.n	8010e94 <xQueueGenericSend+0x48>
 8010e90:	2301      	movs	r3, #1
 8010e92:	e000      	b.n	8010e96 <xQueueGenericSend+0x4a>
 8010e94:	2300      	movs	r3, #0
 8010e96:	2b00      	cmp	r3, #0
 8010e98:	d10c      	bne.n	8010eb4 <xQueueGenericSend+0x68>
	__asm volatile
 8010e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e9e:	b672      	cpsid	i
 8010ea0:	f383 8811 	msr	BASEPRI, r3
 8010ea4:	f3bf 8f6f 	isb	sy
 8010ea8:	f3bf 8f4f 	dsb	sy
 8010eac:	b662      	cpsie	i
 8010eae:	627b      	str	r3, [r7, #36]	; 0x24
}
 8010eb0:	bf00      	nop
 8010eb2:	e7fe      	b.n	8010eb2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	2b02      	cmp	r3, #2
 8010eb8:	d103      	bne.n	8010ec2 <xQueueGenericSend+0x76>
 8010eba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ebc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010ebe:	2b01      	cmp	r3, #1
 8010ec0:	d101      	bne.n	8010ec6 <xQueueGenericSend+0x7a>
 8010ec2:	2301      	movs	r3, #1
 8010ec4:	e000      	b.n	8010ec8 <xQueueGenericSend+0x7c>
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d10c      	bne.n	8010ee6 <xQueueGenericSend+0x9a>
	__asm volatile
 8010ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ed0:	b672      	cpsid	i
 8010ed2:	f383 8811 	msr	BASEPRI, r3
 8010ed6:	f3bf 8f6f 	isb	sy
 8010eda:	f3bf 8f4f 	dsb	sy
 8010ede:	b662      	cpsie	i
 8010ee0:	623b      	str	r3, [r7, #32]
}
 8010ee2:	bf00      	nop
 8010ee4:	e7fe      	b.n	8010ee4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010ee6:	f001 fc19 	bl	801271c <xTaskGetSchedulerState>
 8010eea:	4603      	mov	r3, r0
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d102      	bne.n	8010ef6 <xQueueGenericSend+0xaa>
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d101      	bne.n	8010efa <xQueueGenericSend+0xae>
 8010ef6:	2301      	movs	r3, #1
 8010ef8:	e000      	b.n	8010efc <xQueueGenericSend+0xb0>
 8010efa:	2300      	movs	r3, #0
 8010efc:	2b00      	cmp	r3, #0
 8010efe:	d10c      	bne.n	8010f1a <xQueueGenericSend+0xce>
	__asm volatile
 8010f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f04:	b672      	cpsid	i
 8010f06:	f383 8811 	msr	BASEPRI, r3
 8010f0a:	f3bf 8f6f 	isb	sy
 8010f0e:	f3bf 8f4f 	dsb	sy
 8010f12:	b662      	cpsie	i
 8010f14:	61fb      	str	r3, [r7, #28]
}
 8010f16:	bf00      	nop
 8010f18:	e7fe      	b.n	8010f18 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8010f1a:	f001 ff4f 	bl	8012dbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8010f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f20:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010f26:	429a      	cmp	r2, r3
 8010f28:	d302      	bcc.n	8010f30 <xQueueGenericSend+0xe4>
 8010f2a:	683b      	ldr	r3, [r7, #0]
 8010f2c:	2b02      	cmp	r3, #2
 8010f2e:	d129      	bne.n	8010f84 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8010f30:	683a      	ldr	r2, [r7, #0]
 8010f32:	68b9      	ldr	r1, [r7, #8]
 8010f34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f36:	f000 fc82 	bl	801183e <prvCopyDataToQueue>
 8010f3a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8010f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d010      	beq.n	8010f66 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f46:	3324      	adds	r3, #36	; 0x24
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f001 fa21 	bl	8012390 <xTaskRemoveFromEventList>
 8010f4e:	4603      	mov	r3, r0
 8010f50:	2b00      	cmp	r3, #0
 8010f52:	d013      	beq.n	8010f7c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8010f54:	4b3f      	ldr	r3, [pc, #252]	; (8011054 <xQueueGenericSend+0x208>)
 8010f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f5a:	601a      	str	r2, [r3, #0]
 8010f5c:	f3bf 8f4f 	dsb	sy
 8010f60:	f3bf 8f6f 	isb	sy
 8010f64:	e00a      	b.n	8010f7c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8010f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	d007      	beq.n	8010f7c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8010f6c:	4b39      	ldr	r3, [pc, #228]	; (8011054 <xQueueGenericSend+0x208>)
 8010f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010f72:	601a      	str	r2, [r3, #0]
 8010f74:	f3bf 8f4f 	dsb	sy
 8010f78:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8010f7c:	f001 ff52 	bl	8012e24 <vPortExitCritical>
				return pdPASS;
 8010f80:	2301      	movs	r3, #1
 8010f82:	e063      	b.n	801104c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d103      	bne.n	8010f92 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8010f8a:	f001 ff4b 	bl	8012e24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8010f8e:	2300      	movs	r3, #0
 8010f90:	e05c      	b.n	801104c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8010f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d106      	bne.n	8010fa6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010f98:	f107 0314 	add.w	r3, r7, #20
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f001 fa5b 	bl	8012458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010fa6:	f001 ff3d 	bl	8012e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010faa:	f000 ffc1 	bl	8011f30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010fae:	f001 ff05 	bl	8012dbc <vPortEnterCritical>
 8010fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fb4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010fb8:	b25b      	sxtb	r3, r3
 8010fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fbe:	d103      	bne.n	8010fc8 <xQueueGenericSend+0x17c>
 8010fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010fce:	b25b      	sxtb	r3, r3
 8010fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010fd4:	d103      	bne.n	8010fde <xQueueGenericSend+0x192>
 8010fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fd8:	2200      	movs	r2, #0
 8010fda:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010fde:	f001 ff21 	bl	8012e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010fe2:	1d3a      	adds	r2, r7, #4
 8010fe4:	f107 0314 	add.w	r3, r7, #20
 8010fe8:	4611      	mov	r1, r2
 8010fea:	4618      	mov	r0, r3
 8010fec:	f001 fa4a 	bl	8012484 <xTaskCheckForTimeOut>
 8010ff0:	4603      	mov	r3, r0
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d124      	bne.n	8011040 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8010ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ff8:	f000 fd19 	bl	8011a2e <prvIsQueueFull>
 8010ffc:	4603      	mov	r3, r0
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	d018      	beq.n	8011034 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011004:	3310      	adds	r3, #16
 8011006:	687a      	ldr	r2, [r7, #4]
 8011008:	4611      	mov	r1, r2
 801100a:	4618      	mov	r0, r3
 801100c:	f001 f99a 	bl	8012344 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011012:	f000 fca4 	bl	801195e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011016:	f000 ff99 	bl	8011f4c <xTaskResumeAll>
 801101a:	4603      	mov	r3, r0
 801101c:	2b00      	cmp	r3, #0
 801101e:	f47f af7c 	bne.w	8010f1a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8011022:	4b0c      	ldr	r3, [pc, #48]	; (8011054 <xQueueGenericSend+0x208>)
 8011024:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011028:	601a      	str	r2, [r3, #0]
 801102a:	f3bf 8f4f 	dsb	sy
 801102e:	f3bf 8f6f 	isb	sy
 8011032:	e772      	b.n	8010f1a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011036:	f000 fc92 	bl	801195e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801103a:	f000 ff87 	bl	8011f4c <xTaskResumeAll>
 801103e:	e76c      	b.n	8010f1a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011040:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011042:	f000 fc8c 	bl	801195e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011046:	f000 ff81 	bl	8011f4c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801104a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801104c:	4618      	mov	r0, r3
 801104e:	3738      	adds	r7, #56	; 0x38
 8011050:	46bd      	mov	sp, r7
 8011052:	bd80      	pop	{r7, pc}
 8011054:	e000ed04 	.word	0xe000ed04

08011058 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b08e      	sub	sp, #56	; 0x38
 801105c:	af00      	add	r7, sp, #0
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	60b9      	str	r1, [r7, #8]
 8011062:	607a      	str	r2, [r7, #4]
 8011064:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 801106a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801106c:	2b00      	cmp	r3, #0
 801106e:	d10c      	bne.n	801108a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8011070:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011074:	b672      	cpsid	i
 8011076:	f383 8811 	msr	BASEPRI, r3
 801107a:	f3bf 8f6f 	isb	sy
 801107e:	f3bf 8f4f 	dsb	sy
 8011082:	b662      	cpsie	i
 8011084:	627b      	str	r3, [r7, #36]	; 0x24
}
 8011086:	bf00      	nop
 8011088:	e7fe      	b.n	8011088 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801108a:	68bb      	ldr	r3, [r7, #8]
 801108c:	2b00      	cmp	r3, #0
 801108e:	d103      	bne.n	8011098 <xQueueGenericSendFromISR+0x40>
 8011090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011094:	2b00      	cmp	r3, #0
 8011096:	d101      	bne.n	801109c <xQueueGenericSendFromISR+0x44>
 8011098:	2301      	movs	r3, #1
 801109a:	e000      	b.n	801109e <xQueueGenericSendFromISR+0x46>
 801109c:	2300      	movs	r3, #0
 801109e:	2b00      	cmp	r3, #0
 80110a0:	d10c      	bne.n	80110bc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80110a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110a6:	b672      	cpsid	i
 80110a8:	f383 8811 	msr	BASEPRI, r3
 80110ac:	f3bf 8f6f 	isb	sy
 80110b0:	f3bf 8f4f 	dsb	sy
 80110b4:	b662      	cpsie	i
 80110b6:	623b      	str	r3, [r7, #32]
}
 80110b8:	bf00      	nop
 80110ba:	e7fe      	b.n	80110ba <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80110bc:	683b      	ldr	r3, [r7, #0]
 80110be:	2b02      	cmp	r3, #2
 80110c0:	d103      	bne.n	80110ca <xQueueGenericSendFromISR+0x72>
 80110c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80110c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80110c6:	2b01      	cmp	r3, #1
 80110c8:	d101      	bne.n	80110ce <xQueueGenericSendFromISR+0x76>
 80110ca:	2301      	movs	r3, #1
 80110cc:	e000      	b.n	80110d0 <xQueueGenericSendFromISR+0x78>
 80110ce:	2300      	movs	r3, #0
 80110d0:	2b00      	cmp	r3, #0
 80110d2:	d10c      	bne.n	80110ee <xQueueGenericSendFromISR+0x96>
	__asm volatile
 80110d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110d8:	b672      	cpsid	i
 80110da:	f383 8811 	msr	BASEPRI, r3
 80110de:	f3bf 8f6f 	isb	sy
 80110e2:	f3bf 8f4f 	dsb	sy
 80110e6:	b662      	cpsie	i
 80110e8:	61fb      	str	r3, [r7, #28]
}
 80110ea:	bf00      	nop
 80110ec:	e7fe      	b.n	80110ec <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80110ee:	f001 ff4d 	bl	8012f8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80110f2:	f3ef 8211 	mrs	r2, BASEPRI
 80110f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110fa:	b672      	cpsid	i
 80110fc:	f383 8811 	msr	BASEPRI, r3
 8011100:	f3bf 8f6f 	isb	sy
 8011104:	f3bf 8f4f 	dsb	sy
 8011108:	b662      	cpsie	i
 801110a:	61ba      	str	r2, [r7, #24]
 801110c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 801110e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011110:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011114:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801111a:	429a      	cmp	r2, r3
 801111c:	d302      	bcc.n	8011124 <xQueueGenericSendFromISR+0xcc>
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	2b02      	cmp	r3, #2
 8011122:	d12c      	bne.n	801117e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011126:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801112a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 801112e:	683a      	ldr	r2, [r7, #0]
 8011130:	68b9      	ldr	r1, [r7, #8]
 8011132:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011134:	f000 fb83 	bl	801183e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011138:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 801113c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011140:	d112      	bne.n	8011168 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011146:	2b00      	cmp	r3, #0
 8011148:	d016      	beq.n	8011178 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801114a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801114c:	3324      	adds	r3, #36	; 0x24
 801114e:	4618      	mov	r0, r3
 8011150:	f001 f91e 	bl	8012390 <xTaskRemoveFromEventList>
 8011154:	4603      	mov	r3, r0
 8011156:	2b00      	cmp	r3, #0
 8011158:	d00e      	beq.n	8011178 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d00b      	beq.n	8011178 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011160:	687b      	ldr	r3, [r7, #4]
 8011162:	2201      	movs	r2, #1
 8011164:	601a      	str	r2, [r3, #0]
 8011166:	e007      	b.n	8011178 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011168:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 801116c:	3301      	adds	r3, #1
 801116e:	b2db      	uxtb	r3, r3
 8011170:	b25a      	sxtb	r2, r3
 8011172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8011178:	2301      	movs	r3, #1
 801117a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 801117c:	e001      	b.n	8011182 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 801117e:	2300      	movs	r3, #0
 8011180:	637b      	str	r3, [r7, #52]	; 0x34
 8011182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011184:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011186:	693b      	ldr	r3, [r7, #16]
 8011188:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801118c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 801118e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8011190:	4618      	mov	r0, r3
 8011192:	3738      	adds	r7, #56	; 0x38
 8011194:	46bd      	mov	sp, r7
 8011196:	bd80      	pop	{r7, pc}

08011198 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011198:	b580      	push	{r7, lr}
 801119a:	b08e      	sub	sp, #56	; 0x38
 801119c:	af00      	add	r7, sp, #0
 801119e:	6078      	str	r0, [r7, #4]
 80111a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80111a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a8:	2b00      	cmp	r3, #0
 80111aa:	d10c      	bne.n	80111c6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80111ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111b0:	b672      	cpsid	i
 80111b2:	f383 8811 	msr	BASEPRI, r3
 80111b6:	f3bf 8f6f 	isb	sy
 80111ba:	f3bf 8f4f 	dsb	sy
 80111be:	b662      	cpsie	i
 80111c0:	623b      	str	r3, [r7, #32]
}
 80111c2:	bf00      	nop
 80111c4:	e7fe      	b.n	80111c4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80111c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d00c      	beq.n	80111e8 <xQueueGiveFromISR+0x50>
	__asm volatile
 80111ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d2:	b672      	cpsid	i
 80111d4:	f383 8811 	msr	BASEPRI, r3
 80111d8:	f3bf 8f6f 	isb	sy
 80111dc:	f3bf 8f4f 	dsb	sy
 80111e0:	b662      	cpsie	i
 80111e2:	61fb      	str	r3, [r7, #28]
}
 80111e4:	bf00      	nop
 80111e6:	e7fe      	b.n	80111e6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80111e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	d103      	bne.n	80111f8 <xQueueGiveFromISR+0x60>
 80111f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111f2:	689b      	ldr	r3, [r3, #8]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d101      	bne.n	80111fc <xQueueGiveFromISR+0x64>
 80111f8:	2301      	movs	r3, #1
 80111fa:	e000      	b.n	80111fe <xQueueGiveFromISR+0x66>
 80111fc:	2300      	movs	r3, #0
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d10c      	bne.n	801121c <xQueueGiveFromISR+0x84>
	__asm volatile
 8011202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011206:	b672      	cpsid	i
 8011208:	f383 8811 	msr	BASEPRI, r3
 801120c:	f3bf 8f6f 	isb	sy
 8011210:	f3bf 8f4f 	dsb	sy
 8011214:	b662      	cpsie	i
 8011216:	61bb      	str	r3, [r7, #24]
}
 8011218:	bf00      	nop
 801121a:	e7fe      	b.n	801121a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801121c:	f001 feb6 	bl	8012f8c <vPortValidateInterruptPriority>
	__asm volatile
 8011220:	f3ef 8211 	mrs	r2, BASEPRI
 8011224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011228:	b672      	cpsid	i
 801122a:	f383 8811 	msr	BASEPRI, r3
 801122e:	f3bf 8f6f 	isb	sy
 8011232:	f3bf 8f4f 	dsb	sy
 8011236:	b662      	cpsie	i
 8011238:	617a      	str	r2, [r7, #20]
 801123a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 801123c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801123e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011244:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8011246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011248:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801124a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801124c:	429a      	cmp	r2, r3
 801124e:	d22b      	bcs.n	80112a8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011252:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 801125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801125c:	1c5a      	adds	r2, r3, #1
 801125e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011260:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011262:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011266:	f1b3 3fff 	cmp.w	r3, #4294967295
 801126a:	d112      	bne.n	8011292 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801126c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011270:	2b00      	cmp	r3, #0
 8011272:	d016      	beq.n	80112a2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011276:	3324      	adds	r3, #36	; 0x24
 8011278:	4618      	mov	r0, r3
 801127a:	f001 f889 	bl	8012390 <xTaskRemoveFromEventList>
 801127e:	4603      	mov	r3, r0
 8011280:	2b00      	cmp	r3, #0
 8011282:	d00e      	beq.n	80112a2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011284:	683b      	ldr	r3, [r7, #0]
 8011286:	2b00      	cmp	r3, #0
 8011288:	d00b      	beq.n	80112a2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 801128a:	683b      	ldr	r3, [r7, #0]
 801128c:	2201      	movs	r2, #1
 801128e:	601a      	str	r2, [r3, #0]
 8011290:	e007      	b.n	80112a2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011292:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011296:	3301      	adds	r3, #1
 8011298:	b2db      	uxtb	r3, r3
 801129a:	b25a      	sxtb	r2, r3
 801129c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801129e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80112a2:	2301      	movs	r3, #1
 80112a4:	637b      	str	r3, [r7, #52]	; 0x34
 80112a6:	e001      	b.n	80112ac <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80112a8:	2300      	movs	r3, #0
 80112aa:	637b      	str	r3, [r7, #52]	; 0x34
 80112ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80112ae:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80112b0:	68fb      	ldr	r3, [r7, #12]
 80112b2:	f383 8811 	msr	BASEPRI, r3
}
 80112b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80112b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80112ba:	4618      	mov	r0, r3
 80112bc:	3738      	adds	r7, #56	; 0x38
 80112be:	46bd      	mov	sp, r7
 80112c0:	bd80      	pop	{r7, pc}
	...

080112c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80112c4:	b580      	push	{r7, lr}
 80112c6:	b08c      	sub	sp, #48	; 0x30
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	60f8      	str	r0, [r7, #12]
 80112cc:	60b9      	str	r1, [r7, #8]
 80112ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80112d0:	2300      	movs	r3, #0
 80112d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80112d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d10c      	bne.n	80112f8 <xQueueReceive+0x34>
	__asm volatile
 80112de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112e2:	b672      	cpsid	i
 80112e4:	f383 8811 	msr	BASEPRI, r3
 80112e8:	f3bf 8f6f 	isb	sy
 80112ec:	f3bf 8f4f 	dsb	sy
 80112f0:	b662      	cpsie	i
 80112f2:	623b      	str	r3, [r7, #32]
}
 80112f4:	bf00      	nop
 80112f6:	e7fe      	b.n	80112f6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80112f8:	68bb      	ldr	r3, [r7, #8]
 80112fa:	2b00      	cmp	r3, #0
 80112fc:	d103      	bne.n	8011306 <xQueueReceive+0x42>
 80112fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011302:	2b00      	cmp	r3, #0
 8011304:	d101      	bne.n	801130a <xQueueReceive+0x46>
 8011306:	2301      	movs	r3, #1
 8011308:	e000      	b.n	801130c <xQueueReceive+0x48>
 801130a:	2300      	movs	r3, #0
 801130c:	2b00      	cmp	r3, #0
 801130e:	d10c      	bne.n	801132a <xQueueReceive+0x66>
	__asm volatile
 8011310:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011314:	b672      	cpsid	i
 8011316:	f383 8811 	msr	BASEPRI, r3
 801131a:	f3bf 8f6f 	isb	sy
 801131e:	f3bf 8f4f 	dsb	sy
 8011322:	b662      	cpsie	i
 8011324:	61fb      	str	r3, [r7, #28]
}
 8011326:	bf00      	nop
 8011328:	e7fe      	b.n	8011328 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801132a:	f001 f9f7 	bl	801271c <xTaskGetSchedulerState>
 801132e:	4603      	mov	r3, r0
 8011330:	2b00      	cmp	r3, #0
 8011332:	d102      	bne.n	801133a <xQueueReceive+0x76>
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	2b00      	cmp	r3, #0
 8011338:	d101      	bne.n	801133e <xQueueReceive+0x7a>
 801133a:	2301      	movs	r3, #1
 801133c:	e000      	b.n	8011340 <xQueueReceive+0x7c>
 801133e:	2300      	movs	r3, #0
 8011340:	2b00      	cmp	r3, #0
 8011342:	d10c      	bne.n	801135e <xQueueReceive+0x9a>
	__asm volatile
 8011344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011348:	b672      	cpsid	i
 801134a:	f383 8811 	msr	BASEPRI, r3
 801134e:	f3bf 8f6f 	isb	sy
 8011352:	f3bf 8f4f 	dsb	sy
 8011356:	b662      	cpsie	i
 8011358:	61bb      	str	r3, [r7, #24]
}
 801135a:	bf00      	nop
 801135c:	e7fe      	b.n	801135c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801135e:	f001 fd2d 	bl	8012dbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011366:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801136a:	2b00      	cmp	r3, #0
 801136c:	d01f      	beq.n	80113ae <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 801136e:	68b9      	ldr	r1, [r7, #8]
 8011370:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011372:	f000 face 	bl	8011912 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011378:	1e5a      	subs	r2, r3, #1
 801137a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801137c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801137e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011380:	691b      	ldr	r3, [r3, #16]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d00f      	beq.n	80113a6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011386:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011388:	3310      	adds	r3, #16
 801138a:	4618      	mov	r0, r3
 801138c:	f001 f800 	bl	8012390 <xTaskRemoveFromEventList>
 8011390:	4603      	mov	r3, r0
 8011392:	2b00      	cmp	r3, #0
 8011394:	d007      	beq.n	80113a6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011396:	4b3d      	ldr	r3, [pc, #244]	; (801148c <xQueueReceive+0x1c8>)
 8011398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801139c:	601a      	str	r2, [r3, #0]
 801139e:	f3bf 8f4f 	dsb	sy
 80113a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80113a6:	f001 fd3d 	bl	8012e24 <vPortExitCritical>
				return pdPASS;
 80113aa:	2301      	movs	r3, #1
 80113ac:	e069      	b.n	8011482 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d103      	bne.n	80113bc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80113b4:	f001 fd36 	bl	8012e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80113b8:	2300      	movs	r3, #0
 80113ba:	e062      	b.n	8011482 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80113bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d106      	bne.n	80113d0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80113c2:	f107 0310 	add.w	r3, r7, #16
 80113c6:	4618      	mov	r0, r3
 80113c8:	f001 f846 	bl	8012458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80113cc:	2301      	movs	r3, #1
 80113ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80113d0:	f001 fd28 	bl	8012e24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80113d4:	f000 fdac 	bl	8011f30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80113d8:	f001 fcf0 	bl	8012dbc <vPortEnterCritical>
 80113dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80113e2:	b25b      	sxtb	r3, r3
 80113e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113e8:	d103      	bne.n	80113f2 <xQueueReceive+0x12e>
 80113ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ec:	2200      	movs	r2, #0
 80113ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80113f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80113f8:	b25b      	sxtb	r3, r3
 80113fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80113fe:	d103      	bne.n	8011408 <xQueueReceive+0x144>
 8011400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011402:	2200      	movs	r2, #0
 8011404:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8011408:	f001 fd0c 	bl	8012e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801140c:	1d3a      	adds	r2, r7, #4
 801140e:	f107 0310 	add.w	r3, r7, #16
 8011412:	4611      	mov	r1, r2
 8011414:	4618      	mov	r0, r3
 8011416:	f001 f835 	bl	8012484 <xTaskCheckForTimeOut>
 801141a:	4603      	mov	r3, r0
 801141c:	2b00      	cmp	r3, #0
 801141e:	d123      	bne.n	8011468 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011420:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011422:	f000 faee 	bl	8011a02 <prvIsQueueEmpty>
 8011426:	4603      	mov	r3, r0
 8011428:	2b00      	cmp	r3, #0
 801142a:	d017      	beq.n	801145c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801142c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142e:	3324      	adds	r3, #36	; 0x24
 8011430:	687a      	ldr	r2, [r7, #4]
 8011432:	4611      	mov	r1, r2
 8011434:	4618      	mov	r0, r3
 8011436:	f000 ff85 	bl	8012344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801143a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801143c:	f000 fa8f 	bl	801195e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011440:	f000 fd84 	bl	8011f4c <xTaskResumeAll>
 8011444:	4603      	mov	r3, r0
 8011446:	2b00      	cmp	r3, #0
 8011448:	d189      	bne.n	801135e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801144a:	4b10      	ldr	r3, [pc, #64]	; (801148c <xQueueReceive+0x1c8>)
 801144c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011450:	601a      	str	r2, [r3, #0]
 8011452:	f3bf 8f4f 	dsb	sy
 8011456:	f3bf 8f6f 	isb	sy
 801145a:	e780      	b.n	801135e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801145c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801145e:	f000 fa7e 	bl	801195e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011462:	f000 fd73 	bl	8011f4c <xTaskResumeAll>
 8011466:	e77a      	b.n	801135e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011468:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801146a:	f000 fa78 	bl	801195e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 801146e:	f000 fd6d 	bl	8011f4c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011472:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011474:	f000 fac5 	bl	8011a02 <prvIsQueueEmpty>
 8011478:	4603      	mov	r3, r0
 801147a:	2b00      	cmp	r3, #0
 801147c:	f43f af6f 	beq.w	801135e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011480:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011482:	4618      	mov	r0, r3
 8011484:	3730      	adds	r7, #48	; 0x30
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}
 801148a:	bf00      	nop
 801148c:	e000ed04 	.word	0xe000ed04

08011490 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b08e      	sub	sp, #56	; 0x38
 8011494:	af00      	add	r7, sp, #0
 8011496:	6078      	str	r0, [r7, #4]
 8011498:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 801149a:	2300      	movs	r3, #0
 801149c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80114a2:	2300      	movs	r3, #0
 80114a4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80114a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114a8:	2b00      	cmp	r3, #0
 80114aa:	d10c      	bne.n	80114c6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80114ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114b0:	b672      	cpsid	i
 80114b2:	f383 8811 	msr	BASEPRI, r3
 80114b6:	f3bf 8f6f 	isb	sy
 80114ba:	f3bf 8f4f 	dsb	sy
 80114be:	b662      	cpsie	i
 80114c0:	623b      	str	r3, [r7, #32]
}
 80114c2:	bf00      	nop
 80114c4:	e7fe      	b.n	80114c4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80114c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80114c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d00c      	beq.n	80114e8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80114ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80114d2:	b672      	cpsid	i
 80114d4:	f383 8811 	msr	BASEPRI, r3
 80114d8:	f3bf 8f6f 	isb	sy
 80114dc:	f3bf 8f4f 	dsb	sy
 80114e0:	b662      	cpsie	i
 80114e2:	61fb      	str	r3, [r7, #28]
}
 80114e4:	bf00      	nop
 80114e6:	e7fe      	b.n	80114e6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80114e8:	f001 f918 	bl	801271c <xTaskGetSchedulerState>
 80114ec:	4603      	mov	r3, r0
 80114ee:	2b00      	cmp	r3, #0
 80114f0:	d102      	bne.n	80114f8 <xQueueSemaphoreTake+0x68>
 80114f2:	683b      	ldr	r3, [r7, #0]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d101      	bne.n	80114fc <xQueueSemaphoreTake+0x6c>
 80114f8:	2301      	movs	r3, #1
 80114fa:	e000      	b.n	80114fe <xQueueSemaphoreTake+0x6e>
 80114fc:	2300      	movs	r3, #0
 80114fe:	2b00      	cmp	r3, #0
 8011500:	d10c      	bne.n	801151c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8011502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011506:	b672      	cpsid	i
 8011508:	f383 8811 	msr	BASEPRI, r3
 801150c:	f3bf 8f6f 	isb	sy
 8011510:	f3bf 8f4f 	dsb	sy
 8011514:	b662      	cpsie	i
 8011516:	61bb      	str	r3, [r7, #24]
}
 8011518:	bf00      	nop
 801151a:	e7fe      	b.n	801151a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801151c:	f001 fc4e 	bl	8012dbc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8011520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011524:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8011526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011528:	2b00      	cmp	r3, #0
 801152a:	d024      	beq.n	8011576 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801152c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801152e:	1e5a      	subs	r2, r3, #1
 8011530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011532:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011536:	681b      	ldr	r3, [r3, #0]
 8011538:	2b00      	cmp	r3, #0
 801153a:	d104      	bne.n	8011546 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801153c:	f001 fab4 	bl	8012aa8 <pvTaskIncrementMutexHeldCount>
 8011540:	4602      	mov	r2, r0
 8011542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011544:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011548:	691b      	ldr	r3, [r3, #16]
 801154a:	2b00      	cmp	r3, #0
 801154c:	d00f      	beq.n	801156e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011550:	3310      	adds	r3, #16
 8011552:	4618      	mov	r0, r3
 8011554:	f000 ff1c 	bl	8012390 <xTaskRemoveFromEventList>
 8011558:	4603      	mov	r3, r0
 801155a:	2b00      	cmp	r3, #0
 801155c:	d007      	beq.n	801156e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801155e:	4b55      	ldr	r3, [pc, #340]	; (80116b4 <xQueueSemaphoreTake+0x224>)
 8011560:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011564:	601a      	str	r2, [r3, #0]
 8011566:	f3bf 8f4f 	dsb	sy
 801156a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 801156e:	f001 fc59 	bl	8012e24 <vPortExitCritical>
				return pdPASS;
 8011572:	2301      	movs	r3, #1
 8011574:	e099      	b.n	80116aa <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d113      	bne.n	80115a4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 801157c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801157e:	2b00      	cmp	r3, #0
 8011580:	d00c      	beq.n	801159c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8011582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011586:	b672      	cpsid	i
 8011588:	f383 8811 	msr	BASEPRI, r3
 801158c:	f3bf 8f6f 	isb	sy
 8011590:	f3bf 8f4f 	dsb	sy
 8011594:	b662      	cpsie	i
 8011596:	617b      	str	r3, [r7, #20]
}
 8011598:	bf00      	nop
 801159a:	e7fe      	b.n	801159a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 801159c:	f001 fc42 	bl	8012e24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80115a0:	2300      	movs	r3, #0
 80115a2:	e082      	b.n	80116aa <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80115a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80115a6:	2b00      	cmp	r3, #0
 80115a8:	d106      	bne.n	80115b8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80115aa:	f107 030c 	add.w	r3, r7, #12
 80115ae:	4618      	mov	r0, r3
 80115b0:	f000 ff52 	bl	8012458 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80115b4:	2301      	movs	r3, #1
 80115b6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80115b8:	f001 fc34 	bl	8012e24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80115bc:	f000 fcb8 	bl	8011f30 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80115c0:	f001 fbfc 	bl	8012dbc <vPortEnterCritical>
 80115c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80115ca:	b25b      	sxtb	r3, r3
 80115cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115d0:	d103      	bne.n	80115da <xQueueSemaphoreTake+0x14a>
 80115d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115d4:	2200      	movs	r2, #0
 80115d6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80115da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80115e0:	b25b      	sxtb	r3, r3
 80115e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115e6:	d103      	bne.n	80115f0 <xQueueSemaphoreTake+0x160>
 80115e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80115ea:	2200      	movs	r2, #0
 80115ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80115f0:	f001 fc18 	bl	8012e24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80115f4:	463a      	mov	r2, r7
 80115f6:	f107 030c 	add.w	r3, r7, #12
 80115fa:	4611      	mov	r1, r2
 80115fc:	4618      	mov	r0, r3
 80115fe:	f000 ff41 	bl	8012484 <xTaskCheckForTimeOut>
 8011602:	4603      	mov	r3, r0
 8011604:	2b00      	cmp	r3, #0
 8011606:	d132      	bne.n	801166e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011608:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801160a:	f000 f9fa 	bl	8011a02 <prvIsQueueEmpty>
 801160e:	4603      	mov	r3, r0
 8011610:	2b00      	cmp	r3, #0
 8011612:	d026      	beq.n	8011662 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8011614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011616:	681b      	ldr	r3, [r3, #0]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d109      	bne.n	8011630 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 801161c:	f001 fbce 	bl	8012dbc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011622:	689b      	ldr	r3, [r3, #8]
 8011624:	4618      	mov	r0, r3
 8011626:	f001 f897 	bl	8012758 <xTaskPriorityInherit>
 801162a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801162c:	f001 fbfa 	bl	8012e24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011632:	3324      	adds	r3, #36	; 0x24
 8011634:	683a      	ldr	r2, [r7, #0]
 8011636:	4611      	mov	r1, r2
 8011638:	4618      	mov	r0, r3
 801163a:	f000 fe83 	bl	8012344 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801163e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011640:	f000 f98d 	bl	801195e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011644:	f000 fc82 	bl	8011f4c <xTaskResumeAll>
 8011648:	4603      	mov	r3, r0
 801164a:	2b00      	cmp	r3, #0
 801164c:	f47f af66 	bne.w	801151c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8011650:	4b18      	ldr	r3, [pc, #96]	; (80116b4 <xQueueSemaphoreTake+0x224>)
 8011652:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011656:	601a      	str	r2, [r3, #0]
 8011658:	f3bf 8f4f 	dsb	sy
 801165c:	f3bf 8f6f 	isb	sy
 8011660:	e75c      	b.n	801151c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8011662:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011664:	f000 f97b 	bl	801195e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011668:	f000 fc70 	bl	8011f4c <xTaskResumeAll>
 801166c:	e756      	b.n	801151c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 801166e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011670:	f000 f975 	bl	801195e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011674:	f000 fc6a 	bl	8011f4c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011678:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801167a:	f000 f9c2 	bl	8011a02 <prvIsQueueEmpty>
 801167e:	4603      	mov	r3, r0
 8011680:	2b00      	cmp	r3, #0
 8011682:	f43f af4b 	beq.w	801151c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8011686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011688:	2b00      	cmp	r3, #0
 801168a:	d00d      	beq.n	80116a8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 801168c:	f001 fb96 	bl	8012dbc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8011690:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011692:	f000 f8bc 	bl	801180e <prvGetDisinheritPriorityAfterTimeout>
 8011696:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8011698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801169a:	689b      	ldr	r3, [r3, #8]
 801169c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801169e:	4618      	mov	r0, r3
 80116a0:	f001 f964 	bl	801296c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80116a4:	f001 fbbe 	bl	8012e24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80116a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80116aa:	4618      	mov	r0, r3
 80116ac:	3738      	adds	r7, #56	; 0x38
 80116ae:	46bd      	mov	sp, r7
 80116b0:	bd80      	pop	{r7, pc}
 80116b2:	bf00      	nop
 80116b4:	e000ed04 	.word	0xe000ed04

080116b8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b08e      	sub	sp, #56	; 0x38
 80116bc:	af00      	add	r7, sp, #0
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	60b9      	str	r1, [r7, #8]
 80116c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80116c4:	68fb      	ldr	r3, [r7, #12]
 80116c6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80116c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116ca:	2b00      	cmp	r3, #0
 80116cc:	d10c      	bne.n	80116e8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80116ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80116d2:	b672      	cpsid	i
 80116d4:	f383 8811 	msr	BASEPRI, r3
 80116d8:	f3bf 8f6f 	isb	sy
 80116dc:	f3bf 8f4f 	dsb	sy
 80116e0:	b662      	cpsie	i
 80116e2:	623b      	str	r3, [r7, #32]
}
 80116e4:	bf00      	nop
 80116e6:	e7fe      	b.n	80116e6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d103      	bne.n	80116f6 <xQueueReceiveFromISR+0x3e>
 80116ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d101      	bne.n	80116fa <xQueueReceiveFromISR+0x42>
 80116f6:	2301      	movs	r3, #1
 80116f8:	e000      	b.n	80116fc <xQueueReceiveFromISR+0x44>
 80116fa:	2300      	movs	r3, #0
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d10c      	bne.n	801171a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8011700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011704:	b672      	cpsid	i
 8011706:	f383 8811 	msr	BASEPRI, r3
 801170a:	f3bf 8f6f 	isb	sy
 801170e:	f3bf 8f4f 	dsb	sy
 8011712:	b662      	cpsie	i
 8011714:	61fb      	str	r3, [r7, #28]
}
 8011716:	bf00      	nop
 8011718:	e7fe      	b.n	8011718 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801171a:	f001 fc37 	bl	8012f8c <vPortValidateInterruptPriority>
	__asm volatile
 801171e:	f3ef 8211 	mrs	r2, BASEPRI
 8011722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011726:	b672      	cpsid	i
 8011728:	f383 8811 	msr	BASEPRI, r3
 801172c:	f3bf 8f6f 	isb	sy
 8011730:	f3bf 8f4f 	dsb	sy
 8011734:	b662      	cpsie	i
 8011736:	61ba      	str	r2, [r7, #24]
 8011738:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801173a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801173c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801173e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011742:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011746:	2b00      	cmp	r3, #0
 8011748:	d02f      	beq.n	80117aa <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801174a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8011750:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011754:	68b9      	ldr	r1, [r7, #8]
 8011756:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011758:	f000 f8db 	bl	8011912 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801175c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801175e:	1e5a      	subs	r2, r3, #1
 8011760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011762:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8011764:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8011768:	f1b3 3fff 	cmp.w	r3, #4294967295
 801176c:	d112      	bne.n	8011794 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801176e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011770:	691b      	ldr	r3, [r3, #16]
 8011772:	2b00      	cmp	r3, #0
 8011774:	d016      	beq.n	80117a4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011776:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011778:	3310      	adds	r3, #16
 801177a:	4618      	mov	r0, r3
 801177c:	f000 fe08 	bl	8012390 <xTaskRemoveFromEventList>
 8011780:	4603      	mov	r3, r0
 8011782:	2b00      	cmp	r3, #0
 8011784:	d00e      	beq.n	80117a4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d00b      	beq.n	80117a4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 801178c:	687b      	ldr	r3, [r7, #4]
 801178e:	2201      	movs	r2, #1
 8011790:	601a      	str	r2, [r3, #0]
 8011792:	e007      	b.n	80117a4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8011794:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011798:	3301      	adds	r3, #1
 801179a:	b2db      	uxtb	r3, r3
 801179c:	b25a      	sxtb	r2, r3
 801179e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80117a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80117a4:	2301      	movs	r3, #1
 80117a6:	637b      	str	r3, [r7, #52]	; 0x34
 80117a8:	e001      	b.n	80117ae <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80117aa:	2300      	movs	r3, #0
 80117ac:	637b      	str	r3, [r7, #52]	; 0x34
 80117ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80117b0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	f383 8811 	msr	BASEPRI, r3
}
 80117b8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80117ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80117bc:	4618      	mov	r0, r3
 80117be:	3738      	adds	r7, #56	; 0x38
 80117c0:	46bd      	mov	sp, r7
 80117c2:	bd80      	pop	{r7, pc}

080117c4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b084      	sub	sp, #16
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80117cc:	687b      	ldr	r3, [r7, #4]
 80117ce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80117d0:	68fb      	ldr	r3, [r7, #12]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d10c      	bne.n	80117f0 <vQueueDelete+0x2c>
	__asm volatile
 80117d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80117da:	b672      	cpsid	i
 80117dc:	f383 8811 	msr	BASEPRI, r3
 80117e0:	f3bf 8f6f 	isb	sy
 80117e4:	f3bf 8f4f 	dsb	sy
 80117e8:	b662      	cpsie	i
 80117ea:	60bb      	str	r3, [r7, #8]
}
 80117ec:	bf00      	nop
 80117ee:	e7fe      	b.n	80117ee <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80117f0:	68f8      	ldr	r0, [r7, #12]
 80117f2:	f000 f935 	bl	8011a60 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80117f6:	68fb      	ldr	r3, [r7, #12]
 80117f8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d102      	bne.n	8011806 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8011800:	68f8      	ldr	r0, [r7, #12]
 8011802:	f001 fcd7 	bl	80131b4 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8011806:	bf00      	nop
 8011808:	3710      	adds	r7, #16
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}

0801180e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 801180e:	b480      	push	{r7}
 8011810:	b085      	sub	sp, #20
 8011812:	af00      	add	r7, sp, #0
 8011814:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801181a:	2b00      	cmp	r3, #0
 801181c:	d006      	beq.n	801182c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	f1c3 0307 	rsb	r3, r3, #7
 8011828:	60fb      	str	r3, [r7, #12]
 801182a:	e001      	b.n	8011830 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 801182c:	2300      	movs	r3, #0
 801182e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8011830:	68fb      	ldr	r3, [r7, #12]
	}
 8011832:	4618      	mov	r0, r3
 8011834:	3714      	adds	r7, #20
 8011836:	46bd      	mov	sp, r7
 8011838:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183c:	4770      	bx	lr

0801183e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 801183e:	b580      	push	{r7, lr}
 8011840:	b086      	sub	sp, #24
 8011842:	af00      	add	r7, sp, #0
 8011844:	60f8      	str	r0, [r7, #12]
 8011846:	60b9      	str	r1, [r7, #8]
 8011848:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801184a:	2300      	movs	r3, #0
 801184c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011852:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8011854:	68fb      	ldr	r3, [r7, #12]
 8011856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011858:	2b00      	cmp	r3, #0
 801185a:	d10d      	bne.n	8011878 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	681b      	ldr	r3, [r3, #0]
 8011860:	2b00      	cmp	r3, #0
 8011862:	d14d      	bne.n	8011900 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	689b      	ldr	r3, [r3, #8]
 8011868:	4618      	mov	r0, r3
 801186a:	f000 fff5 	bl	8012858 <xTaskPriorityDisinherit>
 801186e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	2200      	movs	r2, #0
 8011874:	609a      	str	r2, [r3, #8]
 8011876:	e043      	b.n	8011900 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8011878:	687b      	ldr	r3, [r7, #4]
 801187a:	2b00      	cmp	r3, #0
 801187c:	d119      	bne.n	80118b2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801187e:	68fb      	ldr	r3, [r7, #12]
 8011880:	6858      	ldr	r0, [r3, #4]
 8011882:	68fb      	ldr	r3, [r7, #12]
 8011884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011886:	461a      	mov	r2, r3
 8011888:	68b9      	ldr	r1, [r7, #8]
 801188a:	f001 fdd7 	bl	801343c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	685a      	ldr	r2, [r3, #4]
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011896:	441a      	add	r2, r3
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	685a      	ldr	r2, [r3, #4]
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	689b      	ldr	r3, [r3, #8]
 80118a4:	429a      	cmp	r2, r3
 80118a6:	d32b      	bcc.n	8011900 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	681a      	ldr	r2, [r3, #0]
 80118ac:	68fb      	ldr	r3, [r7, #12]
 80118ae:	605a      	str	r2, [r3, #4]
 80118b0:	e026      	b.n	8011900 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80118b2:	68fb      	ldr	r3, [r7, #12]
 80118b4:	68d8      	ldr	r0, [r3, #12]
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118ba:	461a      	mov	r2, r3
 80118bc:	68b9      	ldr	r1, [r7, #8]
 80118be:	f001 fdbd 	bl	801343c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	68da      	ldr	r2, [r3, #12]
 80118c6:	68fb      	ldr	r3, [r7, #12]
 80118c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118ca:	425b      	negs	r3, r3
 80118cc:	441a      	add	r2, r3
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80118d2:	68fb      	ldr	r3, [r7, #12]
 80118d4:	68da      	ldr	r2, [r3, #12]
 80118d6:	68fb      	ldr	r3, [r7, #12]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	429a      	cmp	r2, r3
 80118dc:	d207      	bcs.n	80118ee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80118de:	68fb      	ldr	r3, [r7, #12]
 80118e0:	689a      	ldr	r2, [r3, #8]
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80118e6:	425b      	negs	r3, r3
 80118e8:	441a      	add	r2, r3
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	2b02      	cmp	r3, #2
 80118f2:	d105      	bne.n	8011900 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80118f4:	693b      	ldr	r3, [r7, #16]
 80118f6:	2b00      	cmp	r3, #0
 80118f8:	d002      	beq.n	8011900 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80118fa:	693b      	ldr	r3, [r7, #16]
 80118fc:	3b01      	subs	r3, #1
 80118fe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8011900:	693b      	ldr	r3, [r7, #16]
 8011902:	1c5a      	adds	r2, r3, #1
 8011904:	68fb      	ldr	r3, [r7, #12]
 8011906:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8011908:	697b      	ldr	r3, [r7, #20]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3718      	adds	r7, #24
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}

08011912 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8011912:	b580      	push	{r7, lr}
 8011914:	b082      	sub	sp, #8
 8011916:	af00      	add	r7, sp, #0
 8011918:	6078      	str	r0, [r7, #4]
 801191a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8011920:	2b00      	cmp	r3, #0
 8011922:	d018      	beq.n	8011956 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8011924:	687b      	ldr	r3, [r7, #4]
 8011926:	68da      	ldr	r2, [r3, #12]
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801192c:	441a      	add	r2, r3
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	68da      	ldr	r2, [r3, #12]
 8011936:	687b      	ldr	r3, [r7, #4]
 8011938:	689b      	ldr	r3, [r3, #8]
 801193a:	429a      	cmp	r2, r3
 801193c:	d303      	bcc.n	8011946 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	681a      	ldr	r2, [r3, #0]
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	68d9      	ldr	r1, [r3, #12]
 801194a:	687b      	ldr	r3, [r7, #4]
 801194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801194e:	461a      	mov	r2, r3
 8011950:	6838      	ldr	r0, [r7, #0]
 8011952:	f001 fd73 	bl	801343c <memcpy>
	}
}
 8011956:	bf00      	nop
 8011958:	3708      	adds	r7, #8
 801195a:	46bd      	mov	sp, r7
 801195c:	bd80      	pop	{r7, pc}

0801195e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801195e:	b580      	push	{r7, lr}
 8011960:	b084      	sub	sp, #16
 8011962:	af00      	add	r7, sp, #0
 8011964:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8011966:	f001 fa29 	bl	8012dbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011970:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011972:	e011      	b.n	8011998 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011978:	2b00      	cmp	r3, #0
 801197a:	d012      	beq.n	80119a2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801197c:	687b      	ldr	r3, [r7, #4]
 801197e:	3324      	adds	r3, #36	; 0x24
 8011980:	4618      	mov	r0, r3
 8011982:	f000 fd05 	bl	8012390 <xTaskRemoveFromEventList>
 8011986:	4603      	mov	r3, r0
 8011988:	2b00      	cmp	r3, #0
 801198a:	d001      	beq.n	8011990 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801198c:	f000 fde0 	bl	8012550 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8011990:	7bfb      	ldrb	r3, [r7, #15]
 8011992:	3b01      	subs	r3, #1
 8011994:	b2db      	uxtb	r3, r3
 8011996:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8011998:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801199c:	2b00      	cmp	r3, #0
 801199e:	dce9      	bgt.n	8011974 <prvUnlockQueue+0x16>
 80119a0:	e000      	b.n	80119a4 <prvUnlockQueue+0x46>
					break;
 80119a2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	22ff      	movs	r2, #255	; 0xff
 80119a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80119ac:	f001 fa3a 	bl	8012e24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80119b0:	f001 fa04 	bl	8012dbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80119b4:	687b      	ldr	r3, [r7, #4]
 80119b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80119ba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80119bc:	e011      	b.n	80119e2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	691b      	ldr	r3, [r3, #16]
 80119c2:	2b00      	cmp	r3, #0
 80119c4:	d012      	beq.n	80119ec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	3310      	adds	r3, #16
 80119ca:	4618      	mov	r0, r3
 80119cc:	f000 fce0 	bl	8012390 <xTaskRemoveFromEventList>
 80119d0:	4603      	mov	r3, r0
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d001      	beq.n	80119da <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80119d6:	f000 fdbb 	bl	8012550 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80119da:	7bbb      	ldrb	r3, [r7, #14]
 80119dc:	3b01      	subs	r3, #1
 80119de:	b2db      	uxtb	r3, r3
 80119e0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80119e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	dce9      	bgt.n	80119be <prvUnlockQueue+0x60>
 80119ea:	e000      	b.n	80119ee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80119ec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80119ee:	687b      	ldr	r3, [r7, #4]
 80119f0:	22ff      	movs	r2, #255	; 0xff
 80119f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80119f6:	f001 fa15 	bl	8012e24 <vPortExitCritical>
}
 80119fa:	bf00      	nop
 80119fc:	3710      	adds	r7, #16
 80119fe:	46bd      	mov	sp, r7
 8011a00:	bd80      	pop	{r7, pc}

08011a02 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8011a02:	b580      	push	{r7, lr}
 8011a04:	b084      	sub	sp, #16
 8011a06:	af00      	add	r7, sp, #0
 8011a08:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011a0a:	f001 f9d7 	bl	8012dbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d102      	bne.n	8011a1c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8011a16:	2301      	movs	r3, #1
 8011a18:	60fb      	str	r3, [r7, #12]
 8011a1a:	e001      	b.n	8011a20 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011a20:	f001 fa00 	bl	8012e24 <vPortExitCritical>

	return xReturn;
 8011a24:	68fb      	ldr	r3, [r7, #12]
}
 8011a26:	4618      	mov	r0, r3
 8011a28:	3710      	adds	r7, #16
 8011a2a:	46bd      	mov	sp, r7
 8011a2c:	bd80      	pop	{r7, pc}

08011a2e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8011a2e:	b580      	push	{r7, lr}
 8011a30:	b084      	sub	sp, #16
 8011a32:	af00      	add	r7, sp, #0
 8011a34:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8011a36:	f001 f9c1 	bl	8012dbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8011a3a:	687b      	ldr	r3, [r7, #4]
 8011a3c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d102      	bne.n	8011a4c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8011a46:	2301      	movs	r3, #1
 8011a48:	60fb      	str	r3, [r7, #12]
 8011a4a:	e001      	b.n	8011a50 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8011a4c:	2300      	movs	r3, #0
 8011a4e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8011a50:	f001 f9e8 	bl	8012e24 <vPortExitCritical>

	return xReturn;
 8011a54:	68fb      	ldr	r3, [r7, #12]
}
 8011a56:	4618      	mov	r0, r3
 8011a58:	3710      	adds	r7, #16
 8011a5a:	46bd      	mov	sp, r7
 8011a5c:	bd80      	pop	{r7, pc}
	...

08011a60 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8011a60:	b480      	push	{r7}
 8011a62:	b085      	sub	sp, #20
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011a68:	2300      	movs	r3, #0
 8011a6a:	60fb      	str	r3, [r7, #12]
 8011a6c:	e016      	b.n	8011a9c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8011a6e:	4a10      	ldr	r2, [pc, #64]	; (8011ab0 <vQueueUnregisterQueue+0x50>)
 8011a70:	68fb      	ldr	r3, [r7, #12]
 8011a72:	00db      	lsls	r3, r3, #3
 8011a74:	4413      	add	r3, r2
 8011a76:	685b      	ldr	r3, [r3, #4]
 8011a78:	687a      	ldr	r2, [r7, #4]
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	d10b      	bne.n	8011a96 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8011a7e:	4a0c      	ldr	r2, [pc, #48]	; (8011ab0 <vQueueUnregisterQueue+0x50>)
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	2100      	movs	r1, #0
 8011a84:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8011a88:	4a09      	ldr	r2, [pc, #36]	; (8011ab0 <vQueueUnregisterQueue+0x50>)
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	00db      	lsls	r3, r3, #3
 8011a8e:	4413      	add	r3, r2
 8011a90:	2200      	movs	r2, #0
 8011a92:	605a      	str	r2, [r3, #4]
				break;
 8011a94:	e006      	b.n	8011aa4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8011a96:	68fb      	ldr	r3, [r7, #12]
 8011a98:	3301      	adds	r3, #1
 8011a9a:	60fb      	str	r3, [r7, #12]
 8011a9c:	68fb      	ldr	r3, [r7, #12]
 8011a9e:	2b07      	cmp	r3, #7
 8011aa0:	d9e5      	bls.n	8011a6e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8011aa2:	bf00      	nop
 8011aa4:	bf00      	nop
 8011aa6:	3714      	adds	r7, #20
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aae:	4770      	bx	lr
 8011ab0:	2000973c 	.word	0x2000973c

08011ab4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b08e      	sub	sp, #56	; 0x38
 8011ab8:	af04      	add	r7, sp, #16
 8011aba:	60f8      	str	r0, [r7, #12]
 8011abc:	60b9      	str	r1, [r7, #8]
 8011abe:	607a      	str	r2, [r7, #4]
 8011ac0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8011ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011ac4:	2b00      	cmp	r3, #0
 8011ac6:	d10c      	bne.n	8011ae2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8011ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011acc:	b672      	cpsid	i
 8011ace:	f383 8811 	msr	BASEPRI, r3
 8011ad2:	f3bf 8f6f 	isb	sy
 8011ad6:	f3bf 8f4f 	dsb	sy
 8011ada:	b662      	cpsie	i
 8011adc:	623b      	str	r3, [r7, #32]
}
 8011ade:	bf00      	nop
 8011ae0:	e7fe      	b.n	8011ae0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8011ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ae4:	2b00      	cmp	r3, #0
 8011ae6:	d10c      	bne.n	8011b02 <xTaskCreateStatic+0x4e>
	__asm volatile
 8011ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011aec:	b672      	cpsid	i
 8011aee:	f383 8811 	msr	BASEPRI, r3
 8011af2:	f3bf 8f6f 	isb	sy
 8011af6:	f3bf 8f4f 	dsb	sy
 8011afa:	b662      	cpsie	i
 8011afc:	61fb      	str	r3, [r7, #28]
}
 8011afe:	bf00      	nop
 8011b00:	e7fe      	b.n	8011b00 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8011b02:	2354      	movs	r3, #84	; 0x54
 8011b04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	2b54      	cmp	r3, #84	; 0x54
 8011b0a:	d00c      	beq.n	8011b26 <xTaskCreateStatic+0x72>
	__asm volatile
 8011b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b10:	b672      	cpsid	i
 8011b12:	f383 8811 	msr	BASEPRI, r3
 8011b16:	f3bf 8f6f 	isb	sy
 8011b1a:	f3bf 8f4f 	dsb	sy
 8011b1e:	b662      	cpsie	i
 8011b20:	61bb      	str	r3, [r7, #24]
}
 8011b22:	bf00      	nop
 8011b24:	e7fe      	b.n	8011b24 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8011b26:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8011b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d01e      	beq.n	8011b6c <xTaskCreateStatic+0xb8>
 8011b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d01b      	beq.n	8011b6c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8011b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b36:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8011b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b3a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b3c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8011b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b40:	2202      	movs	r2, #2
 8011b42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8011b46:	2300      	movs	r3, #0
 8011b48:	9303      	str	r3, [sp, #12]
 8011b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b4c:	9302      	str	r3, [sp, #8]
 8011b4e:	f107 0314 	add.w	r3, r7, #20
 8011b52:	9301      	str	r3, [sp, #4]
 8011b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b56:	9300      	str	r3, [sp, #0]
 8011b58:	683b      	ldr	r3, [r7, #0]
 8011b5a:	687a      	ldr	r2, [r7, #4]
 8011b5c:	68b9      	ldr	r1, [r7, #8]
 8011b5e:	68f8      	ldr	r0, [r7, #12]
 8011b60:	f000 f850 	bl	8011c04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011b64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011b66:	f000 f8df 	bl	8011d28 <prvAddNewTaskToReadyList>
 8011b6a:	e001      	b.n	8011b70 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8011b6c:	2300      	movs	r3, #0
 8011b6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8011b70:	697b      	ldr	r3, [r7, #20]
	}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3728      	adds	r7, #40	; 0x28
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}

08011b7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8011b7a:	b580      	push	{r7, lr}
 8011b7c:	b08c      	sub	sp, #48	; 0x30
 8011b7e:	af04      	add	r7, sp, #16
 8011b80:	60f8      	str	r0, [r7, #12]
 8011b82:	60b9      	str	r1, [r7, #8]
 8011b84:	603b      	str	r3, [r7, #0]
 8011b86:	4613      	mov	r3, r2
 8011b88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8011b8a:	88fb      	ldrh	r3, [r7, #6]
 8011b8c:	009b      	lsls	r3, r3, #2
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f001 fa40 	bl	8013014 <pvPortMalloc>
 8011b94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8011b96:	697b      	ldr	r3, [r7, #20]
 8011b98:	2b00      	cmp	r3, #0
 8011b9a:	d00e      	beq.n	8011bba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8011b9c:	2054      	movs	r0, #84	; 0x54
 8011b9e:	f001 fa39 	bl	8013014 <pvPortMalloc>
 8011ba2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8011ba4:	69fb      	ldr	r3, [r7, #28]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d003      	beq.n	8011bb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8011baa:	69fb      	ldr	r3, [r7, #28]
 8011bac:	697a      	ldr	r2, [r7, #20]
 8011bae:	631a      	str	r2, [r3, #48]	; 0x30
 8011bb0:	e005      	b.n	8011bbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8011bb2:	6978      	ldr	r0, [r7, #20]
 8011bb4:	f001 fafe 	bl	80131b4 <vPortFree>
 8011bb8:	e001      	b.n	8011bbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8011bbe:	69fb      	ldr	r3, [r7, #28]
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	d017      	beq.n	8011bf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8011bc4:	69fb      	ldr	r3, [r7, #28]
 8011bc6:	2200      	movs	r2, #0
 8011bc8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8011bcc:	88fa      	ldrh	r2, [r7, #6]
 8011bce:	2300      	movs	r3, #0
 8011bd0:	9303      	str	r3, [sp, #12]
 8011bd2:	69fb      	ldr	r3, [r7, #28]
 8011bd4:	9302      	str	r3, [sp, #8]
 8011bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011bd8:	9301      	str	r3, [sp, #4]
 8011bda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bdc:	9300      	str	r3, [sp, #0]
 8011bde:	683b      	ldr	r3, [r7, #0]
 8011be0:	68b9      	ldr	r1, [r7, #8]
 8011be2:	68f8      	ldr	r0, [r7, #12]
 8011be4:	f000 f80e 	bl	8011c04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8011be8:	69f8      	ldr	r0, [r7, #28]
 8011bea:	f000 f89d 	bl	8011d28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8011bee:	2301      	movs	r3, #1
 8011bf0:	61bb      	str	r3, [r7, #24]
 8011bf2:	e002      	b.n	8011bfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8011bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8011bfa:	69bb      	ldr	r3, [r7, #24]
	}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3720      	adds	r7, #32
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}

08011c04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8011c04:	b580      	push	{r7, lr}
 8011c06:	b088      	sub	sp, #32
 8011c08:	af00      	add	r7, sp, #0
 8011c0a:	60f8      	str	r0, [r7, #12]
 8011c0c:	60b9      	str	r1, [r7, #8]
 8011c0e:	607a      	str	r2, [r7, #4]
 8011c10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8011c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c14:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	009b      	lsls	r3, r3, #2
 8011c1a:	461a      	mov	r2, r3
 8011c1c:	21a5      	movs	r1, #165	; 0xa5
 8011c1e:	f001 fc1b 	bl	8013458 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8011c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011c26:	6879      	ldr	r1, [r7, #4]
 8011c28:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8011c2c:	440b      	add	r3, r1
 8011c2e:	009b      	lsls	r3, r3, #2
 8011c30:	4413      	add	r3, r2
 8011c32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8011c34:	69bb      	ldr	r3, [r7, #24]
 8011c36:	f023 0307 	bic.w	r3, r3, #7
 8011c3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8011c3c:	69bb      	ldr	r3, [r7, #24]
 8011c3e:	f003 0307 	and.w	r3, r3, #7
 8011c42:	2b00      	cmp	r3, #0
 8011c44:	d00c      	beq.n	8011c60 <prvInitialiseNewTask+0x5c>
	__asm volatile
 8011c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011c4a:	b672      	cpsid	i
 8011c4c:	f383 8811 	msr	BASEPRI, r3
 8011c50:	f3bf 8f6f 	isb	sy
 8011c54:	f3bf 8f4f 	dsb	sy
 8011c58:	b662      	cpsie	i
 8011c5a:	617b      	str	r3, [r7, #20]
}
 8011c5c:	bf00      	nop
 8011c5e:	e7fe      	b.n	8011c5e <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8011c60:	68bb      	ldr	r3, [r7, #8]
 8011c62:	2b00      	cmp	r3, #0
 8011c64:	d01f      	beq.n	8011ca6 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011c66:	2300      	movs	r3, #0
 8011c68:	61fb      	str	r3, [r7, #28]
 8011c6a:	e012      	b.n	8011c92 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8011c6c:	68ba      	ldr	r2, [r7, #8]
 8011c6e:	69fb      	ldr	r3, [r7, #28]
 8011c70:	4413      	add	r3, r2
 8011c72:	7819      	ldrb	r1, [r3, #0]
 8011c74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011c76:	69fb      	ldr	r3, [r7, #28]
 8011c78:	4413      	add	r3, r2
 8011c7a:	3334      	adds	r3, #52	; 0x34
 8011c7c:	460a      	mov	r2, r1
 8011c7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8011c80:	68ba      	ldr	r2, [r7, #8]
 8011c82:	69fb      	ldr	r3, [r7, #28]
 8011c84:	4413      	add	r3, r2
 8011c86:	781b      	ldrb	r3, [r3, #0]
 8011c88:	2b00      	cmp	r3, #0
 8011c8a:	d006      	beq.n	8011c9a <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8011c8c:	69fb      	ldr	r3, [r7, #28]
 8011c8e:	3301      	adds	r3, #1
 8011c90:	61fb      	str	r3, [r7, #28]
 8011c92:	69fb      	ldr	r3, [r7, #28]
 8011c94:	2b0f      	cmp	r3, #15
 8011c96:	d9e9      	bls.n	8011c6c <prvInitialiseNewTask+0x68>
 8011c98:	e000      	b.n	8011c9c <prvInitialiseNewTask+0x98>
			{
				break;
 8011c9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8011c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c9e:	2200      	movs	r2, #0
 8011ca0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8011ca4:	e003      	b.n	8011cae <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8011ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ca8:	2200      	movs	r2, #0
 8011caa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8011cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011cb0:	2b06      	cmp	r3, #6
 8011cb2:	d901      	bls.n	8011cb8 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8011cb4:	2306      	movs	r3, #6
 8011cb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8011cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8011cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011cc2:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8011cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cc6:	2200      	movs	r2, #0
 8011cc8:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8011cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ccc:	3304      	adds	r3, #4
 8011cce:	4618      	mov	r0, r3
 8011cd0:	f7fe feda 	bl	8010a88 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8011cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cd6:	3318      	adds	r3, #24
 8011cd8:	4618      	mov	r0, r3
 8011cda:	f7fe fed5 	bl	8010a88 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8011cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ce0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011ce2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ce6:	f1c3 0207 	rsb	r2, r3, #7
 8011cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8011cee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011cf2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8011cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cf6:	2200      	movs	r2, #0
 8011cf8:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8011cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011cfc:	2200      	movs	r2, #0
 8011cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8011d02:	683a      	ldr	r2, [r7, #0]
 8011d04:	68f9      	ldr	r1, [r7, #12]
 8011d06:	69b8      	ldr	r0, [r7, #24]
 8011d08:	f000 ff48 	bl	8012b9c <pxPortInitialiseStack>
 8011d0c:	4602      	mov	r2, r0
 8011d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8011d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d002      	beq.n	8011d1e <prvInitialiseNewTask+0x11a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8011d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011d1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011d1e:	bf00      	nop
 8011d20:	3720      	adds	r7, #32
 8011d22:	46bd      	mov	sp, r7
 8011d24:	bd80      	pop	{r7, pc}
	...

08011d28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b082      	sub	sp, #8
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8011d30:	f001 f844 	bl	8012dbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8011d34:	4b2a      	ldr	r3, [pc, #168]	; (8011de0 <prvAddNewTaskToReadyList+0xb8>)
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	3301      	adds	r3, #1
 8011d3a:	4a29      	ldr	r2, [pc, #164]	; (8011de0 <prvAddNewTaskToReadyList+0xb8>)
 8011d3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8011d3e:	4b29      	ldr	r3, [pc, #164]	; (8011de4 <prvAddNewTaskToReadyList+0xbc>)
 8011d40:	681b      	ldr	r3, [r3, #0]
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d109      	bne.n	8011d5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8011d46:	4a27      	ldr	r2, [pc, #156]	; (8011de4 <prvAddNewTaskToReadyList+0xbc>)
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8011d4c:	4b24      	ldr	r3, [pc, #144]	; (8011de0 <prvAddNewTaskToReadyList+0xb8>)
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	2b01      	cmp	r3, #1
 8011d52:	d110      	bne.n	8011d76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8011d54:	f000 fc22 	bl	801259c <prvInitialiseTaskLists>
 8011d58:	e00d      	b.n	8011d76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8011d5a:	4b23      	ldr	r3, [pc, #140]	; (8011de8 <prvAddNewTaskToReadyList+0xc0>)
 8011d5c:	681b      	ldr	r3, [r3, #0]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d109      	bne.n	8011d76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8011d62:	4b20      	ldr	r3, [pc, #128]	; (8011de4 <prvAddNewTaskToReadyList+0xbc>)
 8011d64:	681b      	ldr	r3, [r3, #0]
 8011d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d6c:	429a      	cmp	r2, r3
 8011d6e:	d802      	bhi.n	8011d76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8011d70:	4a1c      	ldr	r2, [pc, #112]	; (8011de4 <prvAddNewTaskToReadyList+0xbc>)
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8011d76:	4b1d      	ldr	r3, [pc, #116]	; (8011dec <prvAddNewTaskToReadyList+0xc4>)
 8011d78:	681b      	ldr	r3, [r3, #0]
 8011d7a:	3301      	adds	r3, #1
 8011d7c:	4a1b      	ldr	r2, [pc, #108]	; (8011dec <prvAddNewTaskToReadyList+0xc4>)
 8011d7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8011d80:	687b      	ldr	r3, [r7, #4]
 8011d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011d84:	2201      	movs	r2, #1
 8011d86:	409a      	lsls	r2, r3
 8011d88:	4b19      	ldr	r3, [pc, #100]	; (8011df0 <prvAddNewTaskToReadyList+0xc8>)
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	4313      	orrs	r3, r2
 8011d8e:	4a18      	ldr	r2, [pc, #96]	; (8011df0 <prvAddNewTaskToReadyList+0xc8>)
 8011d90:	6013      	str	r3, [r2, #0]
 8011d92:	687b      	ldr	r3, [r7, #4]
 8011d94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011d96:	4613      	mov	r3, r2
 8011d98:	009b      	lsls	r3, r3, #2
 8011d9a:	4413      	add	r3, r2
 8011d9c:	009b      	lsls	r3, r3, #2
 8011d9e:	4a15      	ldr	r2, [pc, #84]	; (8011df4 <prvAddNewTaskToReadyList+0xcc>)
 8011da0:	441a      	add	r2, r3
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	3304      	adds	r3, #4
 8011da6:	4619      	mov	r1, r3
 8011da8:	4610      	mov	r0, r2
 8011daa:	f7fe fe7a 	bl	8010aa2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8011dae:	f001 f839 	bl	8012e24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8011db2:	4b0d      	ldr	r3, [pc, #52]	; (8011de8 <prvAddNewTaskToReadyList+0xc0>)
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d00e      	beq.n	8011dd8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8011dba:	4b0a      	ldr	r3, [pc, #40]	; (8011de4 <prvAddNewTaskToReadyList+0xbc>)
 8011dbc:	681b      	ldr	r3, [r3, #0]
 8011dbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011dc4:	429a      	cmp	r2, r3
 8011dc6:	d207      	bcs.n	8011dd8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8011dc8:	4b0b      	ldr	r3, [pc, #44]	; (8011df8 <prvAddNewTaskToReadyList+0xd0>)
 8011dca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011dce:	601a      	str	r2, [r3, #0]
 8011dd0:	f3bf 8f4f 	dsb	sy
 8011dd4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011dd8:	bf00      	nop
 8011dda:	3708      	adds	r7, #8
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	bd80      	pop	{r7, pc}
 8011de0:	20000838 	.word	0x20000838
 8011de4:	20000738 	.word	0x20000738
 8011de8:	20000844 	.word	0x20000844
 8011dec:	20000854 	.word	0x20000854
 8011df0:	20000840 	.word	0x20000840
 8011df4:	2000073c 	.word	0x2000073c
 8011df8:	e000ed04 	.word	0xe000ed04

08011dfc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b084      	sub	sp, #16
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8011e04:	2300      	movs	r3, #0
 8011e06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	2b00      	cmp	r3, #0
 8011e0c:	d019      	beq.n	8011e42 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8011e0e:	4b14      	ldr	r3, [pc, #80]	; (8011e60 <vTaskDelay+0x64>)
 8011e10:	681b      	ldr	r3, [r3, #0]
 8011e12:	2b00      	cmp	r3, #0
 8011e14:	d00c      	beq.n	8011e30 <vTaskDelay+0x34>
	__asm volatile
 8011e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e1a:	b672      	cpsid	i
 8011e1c:	f383 8811 	msr	BASEPRI, r3
 8011e20:	f3bf 8f6f 	isb	sy
 8011e24:	f3bf 8f4f 	dsb	sy
 8011e28:	b662      	cpsie	i
 8011e2a:	60bb      	str	r3, [r7, #8]
}
 8011e2c:	bf00      	nop
 8011e2e:	e7fe      	b.n	8011e2e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8011e30:	f000 f87e 	bl	8011f30 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8011e34:	2100      	movs	r1, #0
 8011e36:	6878      	ldr	r0, [r7, #4]
 8011e38:	f000 fe4a 	bl	8012ad0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8011e3c:	f000 f886 	bl	8011f4c <xTaskResumeAll>
 8011e40:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8011e42:	68fb      	ldr	r3, [r7, #12]
 8011e44:	2b00      	cmp	r3, #0
 8011e46:	d107      	bne.n	8011e58 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8011e48:	4b06      	ldr	r3, [pc, #24]	; (8011e64 <vTaskDelay+0x68>)
 8011e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011e4e:	601a      	str	r2, [r3, #0]
 8011e50:	f3bf 8f4f 	dsb	sy
 8011e54:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011e58:	bf00      	nop
 8011e5a:	3710      	adds	r7, #16
 8011e5c:	46bd      	mov	sp, r7
 8011e5e:	bd80      	pop	{r7, pc}
 8011e60:	20000860 	.word	0x20000860
 8011e64:	e000ed04 	.word	0xe000ed04

08011e68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b08a      	sub	sp, #40	; 0x28
 8011e6c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8011e6e:	2300      	movs	r3, #0
 8011e70:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8011e72:	2300      	movs	r3, #0
 8011e74:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8011e76:	463a      	mov	r2, r7
 8011e78:	1d39      	adds	r1, r7, #4
 8011e7a:	f107 0308 	add.w	r3, r7, #8
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f7ee fd22 	bl	80008c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8011e84:	6839      	ldr	r1, [r7, #0]
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	68ba      	ldr	r2, [r7, #8]
 8011e8a:	9202      	str	r2, [sp, #8]
 8011e8c:	9301      	str	r3, [sp, #4]
 8011e8e:	2300      	movs	r3, #0
 8011e90:	9300      	str	r3, [sp, #0]
 8011e92:	2300      	movs	r3, #0
 8011e94:	460a      	mov	r2, r1
 8011e96:	4920      	ldr	r1, [pc, #128]	; (8011f18 <vTaskStartScheduler+0xb0>)
 8011e98:	4820      	ldr	r0, [pc, #128]	; (8011f1c <vTaskStartScheduler+0xb4>)
 8011e9a:	f7ff fe0b 	bl	8011ab4 <xTaskCreateStatic>
 8011e9e:	4603      	mov	r3, r0
 8011ea0:	4a1f      	ldr	r2, [pc, #124]	; (8011f20 <vTaskStartScheduler+0xb8>)
 8011ea2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8011ea4:	4b1e      	ldr	r3, [pc, #120]	; (8011f20 <vTaskStartScheduler+0xb8>)
 8011ea6:	681b      	ldr	r3, [r3, #0]
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d002      	beq.n	8011eb2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8011eac:	2301      	movs	r3, #1
 8011eae:	617b      	str	r3, [r7, #20]
 8011eb0:	e001      	b.n	8011eb6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8011eb6:	697b      	ldr	r3, [r7, #20]
 8011eb8:	2b01      	cmp	r3, #1
 8011eba:	d118      	bne.n	8011eee <vTaskStartScheduler+0x86>
	__asm volatile
 8011ebc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ec0:	b672      	cpsid	i
 8011ec2:	f383 8811 	msr	BASEPRI, r3
 8011ec6:	f3bf 8f6f 	isb	sy
 8011eca:	f3bf 8f4f 	dsb	sy
 8011ece:	b662      	cpsie	i
 8011ed0:	613b      	str	r3, [r7, #16]
}
 8011ed2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8011ed4:	4b13      	ldr	r3, [pc, #76]	; (8011f24 <vTaskStartScheduler+0xbc>)
 8011ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8011eda:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8011edc:	4b12      	ldr	r3, [pc, #72]	; (8011f28 <vTaskStartScheduler+0xc0>)
 8011ede:	2201      	movs	r2, #1
 8011ee0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8011ee2:	4b12      	ldr	r3, [pc, #72]	; (8011f2c <vTaskStartScheduler+0xc4>)
 8011ee4:	2200      	movs	r2, #0
 8011ee6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8011ee8:	f000 feea 	bl	8012cc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8011eec:	e010      	b.n	8011f10 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8011eee:	697b      	ldr	r3, [r7, #20]
 8011ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ef4:	d10c      	bne.n	8011f10 <vTaskStartScheduler+0xa8>
	__asm volatile
 8011ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011efa:	b672      	cpsid	i
 8011efc:	f383 8811 	msr	BASEPRI, r3
 8011f00:	f3bf 8f6f 	isb	sy
 8011f04:	f3bf 8f4f 	dsb	sy
 8011f08:	b662      	cpsie	i
 8011f0a:	60fb      	str	r3, [r7, #12]
}
 8011f0c:	bf00      	nop
 8011f0e:	e7fe      	b.n	8011f0e <vTaskStartScheduler+0xa6>
}
 8011f10:	bf00      	nop
 8011f12:	3718      	adds	r7, #24
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bd80      	pop	{r7, pc}
 8011f18:	08013e4c 	.word	0x08013e4c
 8011f1c:	08012569 	.word	0x08012569
 8011f20:	2000085c 	.word	0x2000085c
 8011f24:	20000858 	.word	0x20000858
 8011f28:	20000844 	.word	0x20000844
 8011f2c:	2000083c 	.word	0x2000083c

08011f30 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8011f30:	b480      	push	{r7}
 8011f32:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8011f34:	4b04      	ldr	r3, [pc, #16]	; (8011f48 <vTaskSuspendAll+0x18>)
 8011f36:	681b      	ldr	r3, [r3, #0]
 8011f38:	3301      	adds	r3, #1
 8011f3a:	4a03      	ldr	r2, [pc, #12]	; (8011f48 <vTaskSuspendAll+0x18>)
 8011f3c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8011f3e:	bf00      	nop
 8011f40:	46bd      	mov	sp, r7
 8011f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f46:	4770      	bx	lr
 8011f48:	20000860 	.word	0x20000860

08011f4c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b084      	sub	sp, #16
 8011f50:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8011f52:	2300      	movs	r3, #0
 8011f54:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8011f56:	2300      	movs	r3, #0
 8011f58:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8011f5a:	4b42      	ldr	r3, [pc, #264]	; (8012064 <xTaskResumeAll+0x118>)
 8011f5c:	681b      	ldr	r3, [r3, #0]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d10c      	bne.n	8011f7c <xTaskResumeAll+0x30>
	__asm volatile
 8011f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f66:	b672      	cpsid	i
 8011f68:	f383 8811 	msr	BASEPRI, r3
 8011f6c:	f3bf 8f6f 	isb	sy
 8011f70:	f3bf 8f4f 	dsb	sy
 8011f74:	b662      	cpsie	i
 8011f76:	603b      	str	r3, [r7, #0]
}
 8011f78:	bf00      	nop
 8011f7a:	e7fe      	b.n	8011f7a <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8011f7c:	f000 ff1e 	bl	8012dbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8011f80:	4b38      	ldr	r3, [pc, #224]	; (8012064 <xTaskResumeAll+0x118>)
 8011f82:	681b      	ldr	r3, [r3, #0]
 8011f84:	3b01      	subs	r3, #1
 8011f86:	4a37      	ldr	r2, [pc, #220]	; (8012064 <xTaskResumeAll+0x118>)
 8011f88:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011f8a:	4b36      	ldr	r3, [pc, #216]	; (8012064 <xTaskResumeAll+0x118>)
 8011f8c:	681b      	ldr	r3, [r3, #0]
 8011f8e:	2b00      	cmp	r3, #0
 8011f90:	d161      	bne.n	8012056 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8011f92:	4b35      	ldr	r3, [pc, #212]	; (8012068 <xTaskResumeAll+0x11c>)
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d05d      	beq.n	8012056 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011f9a:	e02e      	b.n	8011ffa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011f9c:	4b33      	ldr	r3, [pc, #204]	; (801206c <xTaskResumeAll+0x120>)
 8011f9e:	68db      	ldr	r3, [r3, #12]
 8011fa0:	68db      	ldr	r3, [r3, #12]
 8011fa2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8011fa4:	68fb      	ldr	r3, [r7, #12]
 8011fa6:	3318      	adds	r3, #24
 8011fa8:	4618      	mov	r0, r3
 8011faa:	f7fe fdd7 	bl	8010b5c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	3304      	adds	r3, #4
 8011fb2:	4618      	mov	r0, r3
 8011fb4:	f7fe fdd2 	bl	8010b5c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011fbc:	2201      	movs	r2, #1
 8011fbe:	409a      	lsls	r2, r3
 8011fc0:	4b2b      	ldr	r3, [pc, #172]	; (8012070 <xTaskResumeAll+0x124>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	4313      	orrs	r3, r2
 8011fc6:	4a2a      	ldr	r2, [pc, #168]	; (8012070 <xTaskResumeAll+0x124>)
 8011fc8:	6013      	str	r3, [r2, #0]
 8011fca:	68fb      	ldr	r3, [r7, #12]
 8011fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fce:	4613      	mov	r3, r2
 8011fd0:	009b      	lsls	r3, r3, #2
 8011fd2:	4413      	add	r3, r2
 8011fd4:	009b      	lsls	r3, r3, #2
 8011fd6:	4a27      	ldr	r2, [pc, #156]	; (8012074 <xTaskResumeAll+0x128>)
 8011fd8:	441a      	add	r2, r3
 8011fda:	68fb      	ldr	r3, [r7, #12]
 8011fdc:	3304      	adds	r3, #4
 8011fde:	4619      	mov	r1, r3
 8011fe0:	4610      	mov	r0, r2
 8011fe2:	f7fe fd5e 	bl	8010aa2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8011fe6:	68fb      	ldr	r3, [r7, #12]
 8011fe8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011fea:	4b23      	ldr	r3, [pc, #140]	; (8012078 <xTaskResumeAll+0x12c>)
 8011fec:	681b      	ldr	r3, [r3, #0]
 8011fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ff0:	429a      	cmp	r2, r3
 8011ff2:	d302      	bcc.n	8011ffa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8011ff4:	4b21      	ldr	r3, [pc, #132]	; (801207c <xTaskResumeAll+0x130>)
 8011ff6:	2201      	movs	r2, #1
 8011ff8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8011ffa:	4b1c      	ldr	r3, [pc, #112]	; (801206c <xTaskResumeAll+0x120>)
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d1cc      	bne.n	8011f9c <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	2b00      	cmp	r3, #0
 8012006:	d001      	beq.n	801200c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8012008:	f000 fb68 	bl	80126dc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 801200c:	4b1c      	ldr	r3, [pc, #112]	; (8012080 <xTaskResumeAll+0x134>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	2b00      	cmp	r3, #0
 8012016:	d010      	beq.n	801203a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8012018:	f000 f858 	bl	80120cc <xTaskIncrementTick>
 801201c:	4603      	mov	r3, r0
 801201e:	2b00      	cmp	r3, #0
 8012020:	d002      	beq.n	8012028 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8012022:	4b16      	ldr	r3, [pc, #88]	; (801207c <xTaskResumeAll+0x130>)
 8012024:	2201      	movs	r2, #1
 8012026:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8012028:	687b      	ldr	r3, [r7, #4]
 801202a:	3b01      	subs	r3, #1
 801202c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 801202e:	687b      	ldr	r3, [r7, #4]
 8012030:	2b00      	cmp	r3, #0
 8012032:	d1f1      	bne.n	8012018 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8012034:	4b12      	ldr	r3, [pc, #72]	; (8012080 <xTaskResumeAll+0x134>)
 8012036:	2200      	movs	r2, #0
 8012038:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801203a:	4b10      	ldr	r3, [pc, #64]	; (801207c <xTaskResumeAll+0x130>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d009      	beq.n	8012056 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012042:	2301      	movs	r3, #1
 8012044:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012046:	4b0f      	ldr	r3, [pc, #60]	; (8012084 <xTaskResumeAll+0x138>)
 8012048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801204c:	601a      	str	r2, [r3, #0]
 801204e:	f3bf 8f4f 	dsb	sy
 8012052:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012056:	f000 fee5 	bl	8012e24 <vPortExitCritical>

	return xAlreadyYielded;
 801205a:	68bb      	ldr	r3, [r7, #8]
}
 801205c:	4618      	mov	r0, r3
 801205e:	3710      	adds	r7, #16
 8012060:	46bd      	mov	sp, r7
 8012062:	bd80      	pop	{r7, pc}
 8012064:	20000860 	.word	0x20000860
 8012068:	20000838 	.word	0x20000838
 801206c:	200007f8 	.word	0x200007f8
 8012070:	20000840 	.word	0x20000840
 8012074:	2000073c 	.word	0x2000073c
 8012078:	20000738 	.word	0x20000738
 801207c:	2000084c 	.word	0x2000084c
 8012080:	20000848 	.word	0x20000848
 8012084:	e000ed04 	.word	0xe000ed04

08012088 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8012088:	b480      	push	{r7}
 801208a:	b083      	sub	sp, #12
 801208c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 801208e:	4b05      	ldr	r3, [pc, #20]	; (80120a4 <xTaskGetTickCount+0x1c>)
 8012090:	681b      	ldr	r3, [r3, #0]
 8012092:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8012094:	687b      	ldr	r3, [r7, #4]
}
 8012096:	4618      	mov	r0, r3
 8012098:	370c      	adds	r7, #12
 801209a:	46bd      	mov	sp, r7
 801209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120a0:	4770      	bx	lr
 80120a2:	bf00      	nop
 80120a4:	2000083c 	.word	0x2000083c

080120a8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80120a8:	b580      	push	{r7, lr}
 80120aa:	b082      	sub	sp, #8
 80120ac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80120ae:	f000 ff6d 	bl	8012f8c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80120b2:	2300      	movs	r3, #0
 80120b4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80120b6:	4b04      	ldr	r3, [pc, #16]	; (80120c8 <xTaskGetTickCountFromISR+0x20>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80120bc:	683b      	ldr	r3, [r7, #0]
}
 80120be:	4618      	mov	r0, r3
 80120c0:	3708      	adds	r7, #8
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
 80120c6:	bf00      	nop
 80120c8:	2000083c 	.word	0x2000083c

080120cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b086      	sub	sp, #24
 80120d0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80120d2:	2300      	movs	r3, #0
 80120d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80120d6:	4b4f      	ldr	r3, [pc, #316]	; (8012214 <xTaskIncrementTick+0x148>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	2b00      	cmp	r3, #0
 80120dc:	f040 808a 	bne.w	80121f4 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80120e0:	4b4d      	ldr	r3, [pc, #308]	; (8012218 <xTaskIncrementTick+0x14c>)
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	3301      	adds	r3, #1
 80120e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80120e8:	4a4b      	ldr	r2, [pc, #300]	; (8012218 <xTaskIncrementTick+0x14c>)
 80120ea:	693b      	ldr	r3, [r7, #16]
 80120ec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80120ee:	693b      	ldr	r3, [r7, #16]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d122      	bne.n	801213a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80120f4:	4b49      	ldr	r3, [pc, #292]	; (801221c <xTaskIncrementTick+0x150>)
 80120f6:	681b      	ldr	r3, [r3, #0]
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	2b00      	cmp	r3, #0
 80120fc:	d00c      	beq.n	8012118 <xTaskIncrementTick+0x4c>
	__asm volatile
 80120fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012102:	b672      	cpsid	i
 8012104:	f383 8811 	msr	BASEPRI, r3
 8012108:	f3bf 8f6f 	isb	sy
 801210c:	f3bf 8f4f 	dsb	sy
 8012110:	b662      	cpsie	i
 8012112:	603b      	str	r3, [r7, #0]
}
 8012114:	bf00      	nop
 8012116:	e7fe      	b.n	8012116 <xTaskIncrementTick+0x4a>
 8012118:	4b40      	ldr	r3, [pc, #256]	; (801221c <xTaskIncrementTick+0x150>)
 801211a:	681b      	ldr	r3, [r3, #0]
 801211c:	60fb      	str	r3, [r7, #12]
 801211e:	4b40      	ldr	r3, [pc, #256]	; (8012220 <xTaskIncrementTick+0x154>)
 8012120:	681b      	ldr	r3, [r3, #0]
 8012122:	4a3e      	ldr	r2, [pc, #248]	; (801221c <xTaskIncrementTick+0x150>)
 8012124:	6013      	str	r3, [r2, #0]
 8012126:	4a3e      	ldr	r2, [pc, #248]	; (8012220 <xTaskIncrementTick+0x154>)
 8012128:	68fb      	ldr	r3, [r7, #12]
 801212a:	6013      	str	r3, [r2, #0]
 801212c:	4b3d      	ldr	r3, [pc, #244]	; (8012224 <xTaskIncrementTick+0x158>)
 801212e:	681b      	ldr	r3, [r3, #0]
 8012130:	3301      	adds	r3, #1
 8012132:	4a3c      	ldr	r2, [pc, #240]	; (8012224 <xTaskIncrementTick+0x158>)
 8012134:	6013      	str	r3, [r2, #0]
 8012136:	f000 fad1 	bl	80126dc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801213a:	4b3b      	ldr	r3, [pc, #236]	; (8012228 <xTaskIncrementTick+0x15c>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	693a      	ldr	r2, [r7, #16]
 8012140:	429a      	cmp	r2, r3
 8012142:	d348      	bcc.n	80121d6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012144:	4b35      	ldr	r3, [pc, #212]	; (801221c <xTaskIncrementTick+0x150>)
 8012146:	681b      	ldr	r3, [r3, #0]
 8012148:	681b      	ldr	r3, [r3, #0]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d104      	bne.n	8012158 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801214e:	4b36      	ldr	r3, [pc, #216]	; (8012228 <xTaskIncrementTick+0x15c>)
 8012150:	f04f 32ff 	mov.w	r2, #4294967295
 8012154:	601a      	str	r2, [r3, #0]
					break;
 8012156:	e03e      	b.n	80121d6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012158:	4b30      	ldr	r3, [pc, #192]	; (801221c <xTaskIncrementTick+0x150>)
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	68db      	ldr	r3, [r3, #12]
 801215e:	68db      	ldr	r3, [r3, #12]
 8012160:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012162:	68bb      	ldr	r3, [r7, #8]
 8012164:	685b      	ldr	r3, [r3, #4]
 8012166:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012168:	693a      	ldr	r2, [r7, #16]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	429a      	cmp	r2, r3
 801216e:	d203      	bcs.n	8012178 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012170:	4a2d      	ldr	r2, [pc, #180]	; (8012228 <xTaskIncrementTick+0x15c>)
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012176:	e02e      	b.n	80121d6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	3304      	adds	r3, #4
 801217c:	4618      	mov	r0, r3
 801217e:	f7fe fced 	bl	8010b5c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012186:	2b00      	cmp	r3, #0
 8012188:	d004      	beq.n	8012194 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	3318      	adds	r3, #24
 801218e:	4618      	mov	r0, r3
 8012190:	f7fe fce4 	bl	8010b5c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012194:	68bb      	ldr	r3, [r7, #8]
 8012196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012198:	2201      	movs	r2, #1
 801219a:	409a      	lsls	r2, r3
 801219c:	4b23      	ldr	r3, [pc, #140]	; (801222c <xTaskIncrementTick+0x160>)
 801219e:	681b      	ldr	r3, [r3, #0]
 80121a0:	4313      	orrs	r3, r2
 80121a2:	4a22      	ldr	r2, [pc, #136]	; (801222c <xTaskIncrementTick+0x160>)
 80121a4:	6013      	str	r3, [r2, #0]
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121aa:	4613      	mov	r3, r2
 80121ac:	009b      	lsls	r3, r3, #2
 80121ae:	4413      	add	r3, r2
 80121b0:	009b      	lsls	r3, r3, #2
 80121b2:	4a1f      	ldr	r2, [pc, #124]	; (8012230 <xTaskIncrementTick+0x164>)
 80121b4:	441a      	add	r2, r3
 80121b6:	68bb      	ldr	r3, [r7, #8]
 80121b8:	3304      	adds	r3, #4
 80121ba:	4619      	mov	r1, r3
 80121bc:	4610      	mov	r0, r2
 80121be:	f7fe fc70 	bl	8010aa2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121c6:	4b1b      	ldr	r3, [pc, #108]	; (8012234 <xTaskIncrementTick+0x168>)
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121cc:	429a      	cmp	r2, r3
 80121ce:	d3b9      	bcc.n	8012144 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80121d0:	2301      	movs	r3, #1
 80121d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80121d4:	e7b6      	b.n	8012144 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80121d6:	4b17      	ldr	r3, [pc, #92]	; (8012234 <xTaskIncrementTick+0x168>)
 80121d8:	681b      	ldr	r3, [r3, #0]
 80121da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80121dc:	4914      	ldr	r1, [pc, #80]	; (8012230 <xTaskIncrementTick+0x164>)
 80121de:	4613      	mov	r3, r2
 80121e0:	009b      	lsls	r3, r3, #2
 80121e2:	4413      	add	r3, r2
 80121e4:	009b      	lsls	r3, r3, #2
 80121e6:	440b      	add	r3, r1
 80121e8:	681b      	ldr	r3, [r3, #0]
 80121ea:	2b01      	cmp	r3, #1
 80121ec:	d907      	bls.n	80121fe <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80121ee:	2301      	movs	r3, #1
 80121f0:	617b      	str	r3, [r7, #20]
 80121f2:	e004      	b.n	80121fe <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80121f4:	4b10      	ldr	r3, [pc, #64]	; (8012238 <xTaskIncrementTick+0x16c>)
 80121f6:	681b      	ldr	r3, [r3, #0]
 80121f8:	3301      	adds	r3, #1
 80121fa:	4a0f      	ldr	r2, [pc, #60]	; (8012238 <xTaskIncrementTick+0x16c>)
 80121fc:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80121fe:	4b0f      	ldr	r3, [pc, #60]	; (801223c <xTaskIncrementTick+0x170>)
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	2b00      	cmp	r3, #0
 8012204:	d001      	beq.n	801220a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8012206:	2301      	movs	r3, #1
 8012208:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 801220a:	697b      	ldr	r3, [r7, #20]
}
 801220c:	4618      	mov	r0, r3
 801220e:	3718      	adds	r7, #24
 8012210:	46bd      	mov	sp, r7
 8012212:	bd80      	pop	{r7, pc}
 8012214:	20000860 	.word	0x20000860
 8012218:	2000083c 	.word	0x2000083c
 801221c:	200007f0 	.word	0x200007f0
 8012220:	200007f4 	.word	0x200007f4
 8012224:	20000850 	.word	0x20000850
 8012228:	20000858 	.word	0x20000858
 801222c:	20000840 	.word	0x20000840
 8012230:	2000073c 	.word	0x2000073c
 8012234:	20000738 	.word	0x20000738
 8012238:	20000848 	.word	0x20000848
 801223c:	2000084c 	.word	0x2000084c

08012240 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b088      	sub	sp, #32
 8012244:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012246:	4b3a      	ldr	r3, [pc, #232]	; (8012330 <vTaskSwitchContext+0xf0>)
 8012248:	681b      	ldr	r3, [r3, #0]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d003      	beq.n	8012256 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801224e:	4b39      	ldr	r3, [pc, #228]	; (8012334 <vTaskSwitchContext+0xf4>)
 8012250:	2201      	movs	r2, #1
 8012252:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012254:	e068      	b.n	8012328 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 8012256:	4b37      	ldr	r3, [pc, #220]	; (8012334 <vTaskSwitchContext+0xf4>)
 8012258:	2200      	movs	r2, #0
 801225a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 801225c:	4b36      	ldr	r3, [pc, #216]	; (8012338 <vTaskSwitchContext+0xf8>)
 801225e:	681b      	ldr	r3, [r3, #0]
 8012260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012262:	61fb      	str	r3, [r7, #28]
 8012264:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8012268:	61bb      	str	r3, [r7, #24]
 801226a:	69fb      	ldr	r3, [r7, #28]
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	69ba      	ldr	r2, [r7, #24]
 8012270:	429a      	cmp	r2, r3
 8012272:	d111      	bne.n	8012298 <vTaskSwitchContext+0x58>
 8012274:	69fb      	ldr	r3, [r7, #28]
 8012276:	3304      	adds	r3, #4
 8012278:	681b      	ldr	r3, [r3, #0]
 801227a:	69ba      	ldr	r2, [r7, #24]
 801227c:	429a      	cmp	r2, r3
 801227e:	d10b      	bne.n	8012298 <vTaskSwitchContext+0x58>
 8012280:	69fb      	ldr	r3, [r7, #28]
 8012282:	3308      	adds	r3, #8
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	69ba      	ldr	r2, [r7, #24]
 8012288:	429a      	cmp	r2, r3
 801228a:	d105      	bne.n	8012298 <vTaskSwitchContext+0x58>
 801228c:	69fb      	ldr	r3, [r7, #28]
 801228e:	330c      	adds	r3, #12
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	69ba      	ldr	r2, [r7, #24]
 8012294:	429a      	cmp	r2, r3
 8012296:	d008      	beq.n	80122aa <vTaskSwitchContext+0x6a>
 8012298:	4b27      	ldr	r3, [pc, #156]	; (8012338 <vTaskSwitchContext+0xf8>)
 801229a:	681a      	ldr	r2, [r3, #0]
 801229c:	4b26      	ldr	r3, [pc, #152]	; (8012338 <vTaskSwitchContext+0xf8>)
 801229e:	681b      	ldr	r3, [r3, #0]
 80122a0:	3334      	adds	r3, #52	; 0x34
 80122a2:	4619      	mov	r1, r3
 80122a4:	4610      	mov	r0, r2
 80122a6:	f7ee fafc 	bl	80008a2 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80122aa:	4b24      	ldr	r3, [pc, #144]	; (801233c <vTaskSwitchContext+0xfc>)
 80122ac:	681b      	ldr	r3, [r3, #0]
 80122ae:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80122b0:	68fb      	ldr	r3, [r7, #12]
 80122b2:	fab3 f383 	clz	r3, r3
 80122b6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80122b8:	7afb      	ldrb	r3, [r7, #11]
 80122ba:	f1c3 031f 	rsb	r3, r3, #31
 80122be:	617b      	str	r3, [r7, #20]
 80122c0:	491f      	ldr	r1, [pc, #124]	; (8012340 <vTaskSwitchContext+0x100>)
 80122c2:	697a      	ldr	r2, [r7, #20]
 80122c4:	4613      	mov	r3, r2
 80122c6:	009b      	lsls	r3, r3, #2
 80122c8:	4413      	add	r3, r2
 80122ca:	009b      	lsls	r3, r3, #2
 80122cc:	440b      	add	r3, r1
 80122ce:	681b      	ldr	r3, [r3, #0]
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d10c      	bne.n	80122ee <vTaskSwitchContext+0xae>
	__asm volatile
 80122d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80122d8:	b672      	cpsid	i
 80122da:	f383 8811 	msr	BASEPRI, r3
 80122de:	f3bf 8f6f 	isb	sy
 80122e2:	f3bf 8f4f 	dsb	sy
 80122e6:	b662      	cpsie	i
 80122e8:	607b      	str	r3, [r7, #4]
}
 80122ea:	bf00      	nop
 80122ec:	e7fe      	b.n	80122ec <vTaskSwitchContext+0xac>
 80122ee:	697a      	ldr	r2, [r7, #20]
 80122f0:	4613      	mov	r3, r2
 80122f2:	009b      	lsls	r3, r3, #2
 80122f4:	4413      	add	r3, r2
 80122f6:	009b      	lsls	r3, r3, #2
 80122f8:	4a11      	ldr	r2, [pc, #68]	; (8012340 <vTaskSwitchContext+0x100>)
 80122fa:	4413      	add	r3, r2
 80122fc:	613b      	str	r3, [r7, #16]
 80122fe:	693b      	ldr	r3, [r7, #16]
 8012300:	685b      	ldr	r3, [r3, #4]
 8012302:	685a      	ldr	r2, [r3, #4]
 8012304:	693b      	ldr	r3, [r7, #16]
 8012306:	605a      	str	r2, [r3, #4]
 8012308:	693b      	ldr	r3, [r7, #16]
 801230a:	685a      	ldr	r2, [r3, #4]
 801230c:	693b      	ldr	r3, [r7, #16]
 801230e:	3308      	adds	r3, #8
 8012310:	429a      	cmp	r2, r3
 8012312:	d104      	bne.n	801231e <vTaskSwitchContext+0xde>
 8012314:	693b      	ldr	r3, [r7, #16]
 8012316:	685b      	ldr	r3, [r3, #4]
 8012318:	685a      	ldr	r2, [r3, #4]
 801231a:	693b      	ldr	r3, [r7, #16]
 801231c:	605a      	str	r2, [r3, #4]
 801231e:	693b      	ldr	r3, [r7, #16]
 8012320:	685b      	ldr	r3, [r3, #4]
 8012322:	68db      	ldr	r3, [r3, #12]
 8012324:	4a04      	ldr	r2, [pc, #16]	; (8012338 <vTaskSwitchContext+0xf8>)
 8012326:	6013      	str	r3, [r2, #0]
}
 8012328:	bf00      	nop
 801232a:	3720      	adds	r7, #32
 801232c:	46bd      	mov	sp, r7
 801232e:	bd80      	pop	{r7, pc}
 8012330:	20000860 	.word	0x20000860
 8012334:	2000084c 	.word	0x2000084c
 8012338:	20000738 	.word	0x20000738
 801233c:	20000840 	.word	0x20000840
 8012340:	2000073c 	.word	0x2000073c

08012344 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b084      	sub	sp, #16
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
 801234c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 801234e:	687b      	ldr	r3, [r7, #4]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d10c      	bne.n	801236e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8012354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012358:	b672      	cpsid	i
 801235a:	f383 8811 	msr	BASEPRI, r3
 801235e:	f3bf 8f6f 	isb	sy
 8012362:	f3bf 8f4f 	dsb	sy
 8012366:	b662      	cpsie	i
 8012368:	60fb      	str	r3, [r7, #12]
}
 801236a:	bf00      	nop
 801236c:	e7fe      	b.n	801236c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801236e:	4b07      	ldr	r3, [pc, #28]	; (801238c <vTaskPlaceOnEventList+0x48>)
 8012370:	681b      	ldr	r3, [r3, #0]
 8012372:	3318      	adds	r3, #24
 8012374:	4619      	mov	r1, r3
 8012376:	6878      	ldr	r0, [r7, #4]
 8012378:	f7fe fbb7 	bl	8010aea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 801237c:	2101      	movs	r1, #1
 801237e:	6838      	ldr	r0, [r7, #0]
 8012380:	f000 fba6 	bl	8012ad0 <prvAddCurrentTaskToDelayedList>
}
 8012384:	bf00      	nop
 8012386:	3710      	adds	r7, #16
 8012388:	46bd      	mov	sp, r7
 801238a:	bd80      	pop	{r7, pc}
 801238c:	20000738 	.word	0x20000738

08012390 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012390:	b580      	push	{r7, lr}
 8012392:	b086      	sub	sp, #24
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012398:	687b      	ldr	r3, [r7, #4]
 801239a:	68db      	ldr	r3, [r3, #12]
 801239c:	68db      	ldr	r3, [r3, #12]
 801239e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80123a0:	693b      	ldr	r3, [r7, #16]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d10c      	bne.n	80123c0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80123a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80123aa:	b672      	cpsid	i
 80123ac:	f383 8811 	msr	BASEPRI, r3
 80123b0:	f3bf 8f6f 	isb	sy
 80123b4:	f3bf 8f4f 	dsb	sy
 80123b8:	b662      	cpsie	i
 80123ba:	60fb      	str	r3, [r7, #12]
}
 80123bc:	bf00      	nop
 80123be:	e7fe      	b.n	80123be <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80123c0:	693b      	ldr	r3, [r7, #16]
 80123c2:	3318      	adds	r3, #24
 80123c4:	4618      	mov	r0, r3
 80123c6:	f7fe fbc9 	bl	8010b5c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80123ca:	4b1d      	ldr	r3, [pc, #116]	; (8012440 <xTaskRemoveFromEventList+0xb0>)
 80123cc:	681b      	ldr	r3, [r3, #0]
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d11c      	bne.n	801240c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80123d2:	693b      	ldr	r3, [r7, #16]
 80123d4:	3304      	adds	r3, #4
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7fe fbc0 	bl	8010b5c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80123dc:	693b      	ldr	r3, [r7, #16]
 80123de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80123e0:	2201      	movs	r2, #1
 80123e2:	409a      	lsls	r2, r3
 80123e4:	4b17      	ldr	r3, [pc, #92]	; (8012444 <xTaskRemoveFromEventList+0xb4>)
 80123e6:	681b      	ldr	r3, [r3, #0]
 80123e8:	4313      	orrs	r3, r2
 80123ea:	4a16      	ldr	r2, [pc, #88]	; (8012444 <xTaskRemoveFromEventList+0xb4>)
 80123ec:	6013      	str	r3, [r2, #0]
 80123ee:	693b      	ldr	r3, [r7, #16]
 80123f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80123f2:	4613      	mov	r3, r2
 80123f4:	009b      	lsls	r3, r3, #2
 80123f6:	4413      	add	r3, r2
 80123f8:	009b      	lsls	r3, r3, #2
 80123fa:	4a13      	ldr	r2, [pc, #76]	; (8012448 <xTaskRemoveFromEventList+0xb8>)
 80123fc:	441a      	add	r2, r3
 80123fe:	693b      	ldr	r3, [r7, #16]
 8012400:	3304      	adds	r3, #4
 8012402:	4619      	mov	r1, r3
 8012404:	4610      	mov	r0, r2
 8012406:	f7fe fb4c 	bl	8010aa2 <vListInsertEnd>
 801240a:	e005      	b.n	8012418 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 801240c:	693b      	ldr	r3, [r7, #16]
 801240e:	3318      	adds	r3, #24
 8012410:	4619      	mov	r1, r3
 8012412:	480e      	ldr	r0, [pc, #56]	; (801244c <xTaskRemoveFromEventList+0xbc>)
 8012414:	f7fe fb45 	bl	8010aa2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012418:	693b      	ldr	r3, [r7, #16]
 801241a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801241c:	4b0c      	ldr	r3, [pc, #48]	; (8012450 <xTaskRemoveFromEventList+0xc0>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012422:	429a      	cmp	r2, r3
 8012424:	d905      	bls.n	8012432 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012426:	2301      	movs	r3, #1
 8012428:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801242a:	4b0a      	ldr	r3, [pc, #40]	; (8012454 <xTaskRemoveFromEventList+0xc4>)
 801242c:	2201      	movs	r2, #1
 801242e:	601a      	str	r2, [r3, #0]
 8012430:	e001      	b.n	8012436 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8012432:	2300      	movs	r3, #0
 8012434:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012436:	697b      	ldr	r3, [r7, #20]
}
 8012438:	4618      	mov	r0, r3
 801243a:	3718      	adds	r7, #24
 801243c:	46bd      	mov	sp, r7
 801243e:	bd80      	pop	{r7, pc}
 8012440:	20000860 	.word	0x20000860
 8012444:	20000840 	.word	0x20000840
 8012448:	2000073c 	.word	0x2000073c
 801244c:	200007f8 	.word	0x200007f8
 8012450:	20000738 	.word	0x20000738
 8012454:	2000084c 	.word	0x2000084c

08012458 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012458:	b480      	push	{r7}
 801245a:	b083      	sub	sp, #12
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012460:	4b06      	ldr	r3, [pc, #24]	; (801247c <vTaskInternalSetTimeOutState+0x24>)
 8012462:	681a      	ldr	r2, [r3, #0]
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012468:	4b05      	ldr	r3, [pc, #20]	; (8012480 <vTaskInternalSetTimeOutState+0x28>)
 801246a:	681a      	ldr	r2, [r3, #0]
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	605a      	str	r2, [r3, #4]
}
 8012470:	bf00      	nop
 8012472:	370c      	adds	r7, #12
 8012474:	46bd      	mov	sp, r7
 8012476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801247a:	4770      	bx	lr
 801247c:	20000850 	.word	0x20000850
 8012480:	2000083c 	.word	0x2000083c

08012484 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b088      	sub	sp, #32
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
 801248c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	2b00      	cmp	r3, #0
 8012492:	d10c      	bne.n	80124ae <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8012494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012498:	b672      	cpsid	i
 801249a:	f383 8811 	msr	BASEPRI, r3
 801249e:	f3bf 8f6f 	isb	sy
 80124a2:	f3bf 8f4f 	dsb	sy
 80124a6:	b662      	cpsie	i
 80124a8:	613b      	str	r3, [r7, #16]
}
 80124aa:	bf00      	nop
 80124ac:	e7fe      	b.n	80124ac <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80124ae:	683b      	ldr	r3, [r7, #0]
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d10c      	bne.n	80124ce <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80124b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80124b8:	b672      	cpsid	i
 80124ba:	f383 8811 	msr	BASEPRI, r3
 80124be:	f3bf 8f6f 	isb	sy
 80124c2:	f3bf 8f4f 	dsb	sy
 80124c6:	b662      	cpsie	i
 80124c8:	60fb      	str	r3, [r7, #12]
}
 80124ca:	bf00      	nop
 80124cc:	e7fe      	b.n	80124cc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80124ce:	f000 fc75 	bl	8012dbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80124d2:	4b1d      	ldr	r3, [pc, #116]	; (8012548 <xTaskCheckForTimeOut+0xc4>)
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80124d8:	687b      	ldr	r3, [r7, #4]
 80124da:	685b      	ldr	r3, [r3, #4]
 80124dc:	69ba      	ldr	r2, [r7, #24]
 80124de:	1ad3      	subs	r3, r2, r3
 80124e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80124e2:	683b      	ldr	r3, [r7, #0]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80124ea:	d102      	bne.n	80124f2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80124ec:	2300      	movs	r3, #0
 80124ee:	61fb      	str	r3, [r7, #28]
 80124f0:	e023      	b.n	801253a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	681a      	ldr	r2, [r3, #0]
 80124f6:	4b15      	ldr	r3, [pc, #84]	; (801254c <xTaskCheckForTimeOut+0xc8>)
 80124f8:	681b      	ldr	r3, [r3, #0]
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d007      	beq.n	801250e <xTaskCheckForTimeOut+0x8a>
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	685b      	ldr	r3, [r3, #4]
 8012502:	69ba      	ldr	r2, [r7, #24]
 8012504:	429a      	cmp	r2, r3
 8012506:	d302      	bcc.n	801250e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012508:	2301      	movs	r3, #1
 801250a:	61fb      	str	r3, [r7, #28]
 801250c:	e015      	b.n	801253a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	681b      	ldr	r3, [r3, #0]
 8012512:	697a      	ldr	r2, [r7, #20]
 8012514:	429a      	cmp	r2, r3
 8012516:	d20b      	bcs.n	8012530 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012518:	683b      	ldr	r3, [r7, #0]
 801251a:	681a      	ldr	r2, [r3, #0]
 801251c:	697b      	ldr	r3, [r7, #20]
 801251e:	1ad2      	subs	r2, r2, r3
 8012520:	683b      	ldr	r3, [r7, #0]
 8012522:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012524:	6878      	ldr	r0, [r7, #4]
 8012526:	f7ff ff97 	bl	8012458 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801252a:	2300      	movs	r3, #0
 801252c:	61fb      	str	r3, [r7, #28]
 801252e:	e004      	b.n	801253a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8012530:	683b      	ldr	r3, [r7, #0]
 8012532:	2200      	movs	r2, #0
 8012534:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012536:	2301      	movs	r3, #1
 8012538:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801253a:	f000 fc73 	bl	8012e24 <vPortExitCritical>

	return xReturn;
 801253e:	69fb      	ldr	r3, [r7, #28]
}
 8012540:	4618      	mov	r0, r3
 8012542:	3720      	adds	r7, #32
 8012544:	46bd      	mov	sp, r7
 8012546:	bd80      	pop	{r7, pc}
 8012548:	2000083c 	.word	0x2000083c
 801254c:	20000850 	.word	0x20000850

08012550 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012550:	b480      	push	{r7}
 8012552:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012554:	4b03      	ldr	r3, [pc, #12]	; (8012564 <vTaskMissedYield+0x14>)
 8012556:	2201      	movs	r2, #1
 8012558:	601a      	str	r2, [r3, #0]
}
 801255a:	bf00      	nop
 801255c:	46bd      	mov	sp, r7
 801255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012562:	4770      	bx	lr
 8012564:	2000084c 	.word	0x2000084c

08012568 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012568:	b580      	push	{r7, lr}
 801256a:	b082      	sub	sp, #8
 801256c:	af00      	add	r7, sp, #0
 801256e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012570:	f000 f854 	bl	801261c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012574:	4b07      	ldr	r3, [pc, #28]	; (8012594 <prvIdleTask+0x2c>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	2b01      	cmp	r3, #1
 801257a:	d907      	bls.n	801258c <prvIdleTask+0x24>
			{
				taskYIELD();
 801257c:	4b06      	ldr	r3, [pc, #24]	; (8012598 <prvIdleTask+0x30>)
 801257e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012582:	601a      	str	r2, [r3, #0]
 8012584:	f3bf 8f4f 	dsb	sy
 8012588:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 801258c:	f7ee f982 	bl	8000894 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 8012590:	e7ee      	b.n	8012570 <prvIdleTask+0x8>
 8012592:	bf00      	nop
 8012594:	2000073c 	.word	0x2000073c
 8012598:	e000ed04 	.word	0xe000ed04

0801259c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801259c:	b580      	push	{r7, lr}
 801259e:	b082      	sub	sp, #8
 80125a0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80125a2:	2300      	movs	r3, #0
 80125a4:	607b      	str	r3, [r7, #4]
 80125a6:	e00c      	b.n	80125c2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80125a8:	687a      	ldr	r2, [r7, #4]
 80125aa:	4613      	mov	r3, r2
 80125ac:	009b      	lsls	r3, r3, #2
 80125ae:	4413      	add	r3, r2
 80125b0:	009b      	lsls	r3, r3, #2
 80125b2:	4a12      	ldr	r2, [pc, #72]	; (80125fc <prvInitialiseTaskLists+0x60>)
 80125b4:	4413      	add	r3, r2
 80125b6:	4618      	mov	r0, r3
 80125b8:	f7fe fa46 	bl	8010a48 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	3301      	adds	r3, #1
 80125c0:	607b      	str	r3, [r7, #4]
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	2b06      	cmp	r3, #6
 80125c6:	d9ef      	bls.n	80125a8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80125c8:	480d      	ldr	r0, [pc, #52]	; (8012600 <prvInitialiseTaskLists+0x64>)
 80125ca:	f7fe fa3d 	bl	8010a48 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80125ce:	480d      	ldr	r0, [pc, #52]	; (8012604 <prvInitialiseTaskLists+0x68>)
 80125d0:	f7fe fa3a 	bl	8010a48 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80125d4:	480c      	ldr	r0, [pc, #48]	; (8012608 <prvInitialiseTaskLists+0x6c>)
 80125d6:	f7fe fa37 	bl	8010a48 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80125da:	480c      	ldr	r0, [pc, #48]	; (801260c <prvInitialiseTaskLists+0x70>)
 80125dc:	f7fe fa34 	bl	8010a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80125e0:	480b      	ldr	r0, [pc, #44]	; (8012610 <prvInitialiseTaskLists+0x74>)
 80125e2:	f7fe fa31 	bl	8010a48 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80125e6:	4b0b      	ldr	r3, [pc, #44]	; (8012614 <prvInitialiseTaskLists+0x78>)
 80125e8:	4a05      	ldr	r2, [pc, #20]	; (8012600 <prvInitialiseTaskLists+0x64>)
 80125ea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80125ec:	4b0a      	ldr	r3, [pc, #40]	; (8012618 <prvInitialiseTaskLists+0x7c>)
 80125ee:	4a05      	ldr	r2, [pc, #20]	; (8012604 <prvInitialiseTaskLists+0x68>)
 80125f0:	601a      	str	r2, [r3, #0]
}
 80125f2:	bf00      	nop
 80125f4:	3708      	adds	r7, #8
 80125f6:	46bd      	mov	sp, r7
 80125f8:	bd80      	pop	{r7, pc}
 80125fa:	bf00      	nop
 80125fc:	2000073c 	.word	0x2000073c
 8012600:	200007c8 	.word	0x200007c8
 8012604:	200007dc 	.word	0x200007dc
 8012608:	200007f8 	.word	0x200007f8
 801260c:	2000080c 	.word	0x2000080c
 8012610:	20000824 	.word	0x20000824
 8012614:	200007f0 	.word	0x200007f0
 8012618:	200007f4 	.word	0x200007f4

0801261c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801261c:	b580      	push	{r7, lr}
 801261e:	b082      	sub	sp, #8
 8012620:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012622:	e019      	b.n	8012658 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012624:	f000 fbca 	bl	8012dbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012628:	4b10      	ldr	r3, [pc, #64]	; (801266c <prvCheckTasksWaitingTermination+0x50>)
 801262a:	68db      	ldr	r3, [r3, #12]
 801262c:	68db      	ldr	r3, [r3, #12]
 801262e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	3304      	adds	r3, #4
 8012634:	4618      	mov	r0, r3
 8012636:	f7fe fa91 	bl	8010b5c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801263a:	4b0d      	ldr	r3, [pc, #52]	; (8012670 <prvCheckTasksWaitingTermination+0x54>)
 801263c:	681b      	ldr	r3, [r3, #0]
 801263e:	3b01      	subs	r3, #1
 8012640:	4a0b      	ldr	r2, [pc, #44]	; (8012670 <prvCheckTasksWaitingTermination+0x54>)
 8012642:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012644:	4b0b      	ldr	r3, [pc, #44]	; (8012674 <prvCheckTasksWaitingTermination+0x58>)
 8012646:	681b      	ldr	r3, [r3, #0]
 8012648:	3b01      	subs	r3, #1
 801264a:	4a0a      	ldr	r2, [pc, #40]	; (8012674 <prvCheckTasksWaitingTermination+0x58>)
 801264c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801264e:	f000 fbe9 	bl	8012e24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012652:	6878      	ldr	r0, [r7, #4]
 8012654:	f000 f810 	bl	8012678 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012658:	4b06      	ldr	r3, [pc, #24]	; (8012674 <prvCheckTasksWaitingTermination+0x58>)
 801265a:	681b      	ldr	r3, [r3, #0]
 801265c:	2b00      	cmp	r3, #0
 801265e:	d1e1      	bne.n	8012624 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012660:	bf00      	nop
 8012662:	bf00      	nop
 8012664:	3708      	adds	r7, #8
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}
 801266a:	bf00      	nop
 801266c:	2000080c 	.word	0x2000080c
 8012670:	20000838 	.word	0x20000838
 8012674:	20000820 	.word	0x20000820

08012678 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012678:	b580      	push	{r7, lr}
 801267a:	b084      	sub	sp, #16
 801267c:	af00      	add	r7, sp, #0
 801267e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8012680:	687b      	ldr	r3, [r7, #4]
 8012682:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8012686:	2b00      	cmp	r3, #0
 8012688:	d108      	bne.n	801269c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 801268a:	687b      	ldr	r3, [r7, #4]
 801268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801268e:	4618      	mov	r0, r3
 8012690:	f000 fd90 	bl	80131b4 <vPortFree>
				vPortFree( pxTCB );
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f000 fd8d 	bl	80131b4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801269a:	e01a      	b.n	80126d2 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80126a2:	2b01      	cmp	r3, #1
 80126a4:	d103      	bne.n	80126ae <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80126a6:	6878      	ldr	r0, [r7, #4]
 80126a8:	f000 fd84 	bl	80131b4 <vPortFree>
	}
 80126ac:	e011      	b.n	80126d2 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80126b4:	2b02      	cmp	r3, #2
 80126b6:	d00c      	beq.n	80126d2 <prvDeleteTCB+0x5a>
	__asm volatile
 80126b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80126bc:	b672      	cpsid	i
 80126be:	f383 8811 	msr	BASEPRI, r3
 80126c2:	f3bf 8f6f 	isb	sy
 80126c6:	f3bf 8f4f 	dsb	sy
 80126ca:	b662      	cpsie	i
 80126cc:	60fb      	str	r3, [r7, #12]
}
 80126ce:	bf00      	nop
 80126d0:	e7fe      	b.n	80126d0 <prvDeleteTCB+0x58>
	}
 80126d2:	bf00      	nop
 80126d4:	3710      	adds	r7, #16
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}
	...

080126dc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80126dc:	b480      	push	{r7}
 80126de:	b083      	sub	sp, #12
 80126e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80126e2:	4b0c      	ldr	r3, [pc, #48]	; (8012714 <prvResetNextTaskUnblockTime+0x38>)
 80126e4:	681b      	ldr	r3, [r3, #0]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d104      	bne.n	80126f6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80126ec:	4b0a      	ldr	r3, [pc, #40]	; (8012718 <prvResetNextTaskUnblockTime+0x3c>)
 80126ee:	f04f 32ff 	mov.w	r2, #4294967295
 80126f2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80126f4:	e008      	b.n	8012708 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80126f6:	4b07      	ldr	r3, [pc, #28]	; (8012714 <prvResetNextTaskUnblockTime+0x38>)
 80126f8:	681b      	ldr	r3, [r3, #0]
 80126fa:	68db      	ldr	r3, [r3, #12]
 80126fc:	68db      	ldr	r3, [r3, #12]
 80126fe:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	685b      	ldr	r3, [r3, #4]
 8012704:	4a04      	ldr	r2, [pc, #16]	; (8012718 <prvResetNextTaskUnblockTime+0x3c>)
 8012706:	6013      	str	r3, [r2, #0]
}
 8012708:	bf00      	nop
 801270a:	370c      	adds	r7, #12
 801270c:	46bd      	mov	sp, r7
 801270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012712:	4770      	bx	lr
 8012714:	200007f0 	.word	0x200007f0
 8012718:	20000858 	.word	0x20000858

0801271c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 801271c:	b480      	push	{r7}
 801271e:	b083      	sub	sp, #12
 8012720:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012722:	4b0b      	ldr	r3, [pc, #44]	; (8012750 <xTaskGetSchedulerState+0x34>)
 8012724:	681b      	ldr	r3, [r3, #0]
 8012726:	2b00      	cmp	r3, #0
 8012728:	d102      	bne.n	8012730 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801272a:	2301      	movs	r3, #1
 801272c:	607b      	str	r3, [r7, #4]
 801272e:	e008      	b.n	8012742 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012730:	4b08      	ldr	r3, [pc, #32]	; (8012754 <xTaskGetSchedulerState+0x38>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	2b00      	cmp	r3, #0
 8012736:	d102      	bne.n	801273e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012738:	2302      	movs	r3, #2
 801273a:	607b      	str	r3, [r7, #4]
 801273c:	e001      	b.n	8012742 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 801273e:	2300      	movs	r3, #0
 8012740:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012742:	687b      	ldr	r3, [r7, #4]
	}
 8012744:	4618      	mov	r0, r3
 8012746:	370c      	adds	r7, #12
 8012748:	46bd      	mov	sp, r7
 801274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801274e:	4770      	bx	lr
 8012750:	20000844 	.word	0x20000844
 8012754:	20000860 	.word	0x20000860

08012758 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8012758:	b580      	push	{r7, lr}
 801275a:	b084      	sub	sp, #16
 801275c:	af00      	add	r7, sp, #0
 801275e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8012764:	2300      	movs	r3, #0
 8012766:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8012768:	687b      	ldr	r3, [r7, #4]
 801276a:	2b00      	cmp	r3, #0
 801276c:	d069      	beq.n	8012842 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801276e:	68bb      	ldr	r3, [r7, #8]
 8012770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012772:	4b36      	ldr	r3, [pc, #216]	; (801284c <xTaskPriorityInherit+0xf4>)
 8012774:	681b      	ldr	r3, [r3, #0]
 8012776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012778:	429a      	cmp	r2, r3
 801277a:	d259      	bcs.n	8012830 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 801277c:	68bb      	ldr	r3, [r7, #8]
 801277e:	699b      	ldr	r3, [r3, #24]
 8012780:	2b00      	cmp	r3, #0
 8012782:	db06      	blt.n	8012792 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012784:	4b31      	ldr	r3, [pc, #196]	; (801284c <xTaskPriorityInherit+0xf4>)
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801278a:	f1c3 0207 	rsb	r2, r3, #7
 801278e:	68bb      	ldr	r3, [r7, #8]
 8012790:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8012792:	68bb      	ldr	r3, [r7, #8]
 8012794:	6959      	ldr	r1, [r3, #20]
 8012796:	68bb      	ldr	r3, [r7, #8]
 8012798:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801279a:	4613      	mov	r3, r2
 801279c:	009b      	lsls	r3, r3, #2
 801279e:	4413      	add	r3, r2
 80127a0:	009b      	lsls	r3, r3, #2
 80127a2:	4a2b      	ldr	r2, [pc, #172]	; (8012850 <xTaskPriorityInherit+0xf8>)
 80127a4:	4413      	add	r3, r2
 80127a6:	4299      	cmp	r1, r3
 80127a8:	d13a      	bne.n	8012820 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80127aa:	68bb      	ldr	r3, [r7, #8]
 80127ac:	3304      	adds	r3, #4
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7fe f9d4 	bl	8010b5c <uxListRemove>
 80127b4:	4603      	mov	r3, r0
 80127b6:	2b00      	cmp	r3, #0
 80127b8:	d115      	bne.n	80127e6 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80127ba:	68bb      	ldr	r3, [r7, #8]
 80127bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127be:	4924      	ldr	r1, [pc, #144]	; (8012850 <xTaskPriorityInherit+0xf8>)
 80127c0:	4613      	mov	r3, r2
 80127c2:	009b      	lsls	r3, r3, #2
 80127c4:	4413      	add	r3, r2
 80127c6:	009b      	lsls	r3, r3, #2
 80127c8:	440b      	add	r3, r1
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d10a      	bne.n	80127e6 <xTaskPriorityInherit+0x8e>
 80127d0:	68bb      	ldr	r3, [r7, #8]
 80127d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127d4:	2201      	movs	r2, #1
 80127d6:	fa02 f303 	lsl.w	r3, r2, r3
 80127da:	43da      	mvns	r2, r3
 80127dc:	4b1d      	ldr	r3, [pc, #116]	; (8012854 <xTaskPriorityInherit+0xfc>)
 80127de:	681b      	ldr	r3, [r3, #0]
 80127e0:	4013      	ands	r3, r2
 80127e2:	4a1c      	ldr	r2, [pc, #112]	; (8012854 <xTaskPriorityInherit+0xfc>)
 80127e4:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80127e6:	4b19      	ldr	r3, [pc, #100]	; (801284c <xTaskPriorityInherit+0xf4>)
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80127ec:	68bb      	ldr	r3, [r7, #8]
 80127ee:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80127f0:	68bb      	ldr	r3, [r7, #8]
 80127f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80127f4:	2201      	movs	r2, #1
 80127f6:	409a      	lsls	r2, r3
 80127f8:	4b16      	ldr	r3, [pc, #88]	; (8012854 <xTaskPriorityInherit+0xfc>)
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	4313      	orrs	r3, r2
 80127fe:	4a15      	ldr	r2, [pc, #84]	; (8012854 <xTaskPriorityInherit+0xfc>)
 8012800:	6013      	str	r3, [r2, #0]
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012806:	4613      	mov	r3, r2
 8012808:	009b      	lsls	r3, r3, #2
 801280a:	4413      	add	r3, r2
 801280c:	009b      	lsls	r3, r3, #2
 801280e:	4a10      	ldr	r2, [pc, #64]	; (8012850 <xTaskPriorityInherit+0xf8>)
 8012810:	441a      	add	r2, r3
 8012812:	68bb      	ldr	r3, [r7, #8]
 8012814:	3304      	adds	r3, #4
 8012816:	4619      	mov	r1, r3
 8012818:	4610      	mov	r0, r2
 801281a:	f7fe f942 	bl	8010aa2 <vListInsertEnd>
 801281e:	e004      	b.n	801282a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8012820:	4b0a      	ldr	r3, [pc, #40]	; (801284c <xTaskPriorityInherit+0xf4>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012826:	68bb      	ldr	r3, [r7, #8]
 8012828:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801282a:	2301      	movs	r3, #1
 801282c:	60fb      	str	r3, [r7, #12]
 801282e:	e008      	b.n	8012842 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8012830:	68bb      	ldr	r3, [r7, #8]
 8012832:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012834:	4b05      	ldr	r3, [pc, #20]	; (801284c <xTaskPriorityInherit+0xf4>)
 8012836:	681b      	ldr	r3, [r3, #0]
 8012838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801283a:	429a      	cmp	r2, r3
 801283c:	d201      	bcs.n	8012842 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 801283e:	2301      	movs	r3, #1
 8012840:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012842:	68fb      	ldr	r3, [r7, #12]
	}
 8012844:	4618      	mov	r0, r3
 8012846:	3710      	adds	r7, #16
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}
 801284c:	20000738 	.word	0x20000738
 8012850:	2000073c 	.word	0x2000073c
 8012854:	20000840 	.word	0x20000840

08012858 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012858:	b580      	push	{r7, lr}
 801285a:	b086      	sub	sp, #24
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012864:	2300      	movs	r3, #0
 8012866:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012868:	687b      	ldr	r3, [r7, #4]
 801286a:	2b00      	cmp	r3, #0
 801286c:	d072      	beq.n	8012954 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801286e:	4b3c      	ldr	r3, [pc, #240]	; (8012960 <xTaskPriorityDisinherit+0x108>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	693a      	ldr	r2, [r7, #16]
 8012874:	429a      	cmp	r2, r3
 8012876:	d00c      	beq.n	8012892 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8012878:	f04f 0350 	mov.w	r3, #80	; 0x50
 801287c:	b672      	cpsid	i
 801287e:	f383 8811 	msr	BASEPRI, r3
 8012882:	f3bf 8f6f 	isb	sy
 8012886:	f3bf 8f4f 	dsb	sy
 801288a:	b662      	cpsie	i
 801288c:	60fb      	str	r3, [r7, #12]
}
 801288e:	bf00      	nop
 8012890:	e7fe      	b.n	8012890 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8012892:	693b      	ldr	r3, [r7, #16]
 8012894:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8012896:	2b00      	cmp	r3, #0
 8012898:	d10c      	bne.n	80128b4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801289a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801289e:	b672      	cpsid	i
 80128a0:	f383 8811 	msr	BASEPRI, r3
 80128a4:	f3bf 8f6f 	isb	sy
 80128a8:	f3bf 8f4f 	dsb	sy
 80128ac:	b662      	cpsie	i
 80128ae:	60bb      	str	r3, [r7, #8]
}
 80128b0:	bf00      	nop
 80128b2:	e7fe      	b.n	80128b2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80128b8:	1e5a      	subs	r2, r3, #1
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80128be:	693b      	ldr	r3, [r7, #16]
 80128c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80128c6:	429a      	cmp	r2, r3
 80128c8:	d044      	beq.n	8012954 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80128ca:	693b      	ldr	r3, [r7, #16]
 80128cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80128ce:	2b00      	cmp	r3, #0
 80128d0:	d140      	bne.n	8012954 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	3304      	adds	r3, #4
 80128d6:	4618      	mov	r0, r3
 80128d8:	f7fe f940 	bl	8010b5c <uxListRemove>
 80128dc:	4603      	mov	r3, r0
 80128de:	2b00      	cmp	r3, #0
 80128e0:	d115      	bne.n	801290e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80128e2:	693b      	ldr	r3, [r7, #16]
 80128e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80128e6:	491f      	ldr	r1, [pc, #124]	; (8012964 <xTaskPriorityDisinherit+0x10c>)
 80128e8:	4613      	mov	r3, r2
 80128ea:	009b      	lsls	r3, r3, #2
 80128ec:	4413      	add	r3, r2
 80128ee:	009b      	lsls	r3, r3, #2
 80128f0:	440b      	add	r3, r1
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d10a      	bne.n	801290e <xTaskPriorityDisinherit+0xb6>
 80128f8:	693b      	ldr	r3, [r7, #16]
 80128fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80128fc:	2201      	movs	r2, #1
 80128fe:	fa02 f303 	lsl.w	r3, r2, r3
 8012902:	43da      	mvns	r2, r3
 8012904:	4b18      	ldr	r3, [pc, #96]	; (8012968 <xTaskPriorityDisinherit+0x110>)
 8012906:	681b      	ldr	r3, [r3, #0]
 8012908:	4013      	ands	r3, r2
 801290a:	4a17      	ldr	r2, [pc, #92]	; (8012968 <xTaskPriorityDisinherit+0x110>)
 801290c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 801290e:	693b      	ldr	r3, [r7, #16]
 8012910:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012912:	693b      	ldr	r3, [r7, #16]
 8012914:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012916:	693b      	ldr	r3, [r7, #16]
 8012918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801291a:	f1c3 0207 	rsb	r2, r3, #7
 801291e:	693b      	ldr	r3, [r7, #16]
 8012920:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8012922:	693b      	ldr	r3, [r7, #16]
 8012924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012926:	2201      	movs	r2, #1
 8012928:	409a      	lsls	r2, r3
 801292a:	4b0f      	ldr	r3, [pc, #60]	; (8012968 <xTaskPriorityDisinherit+0x110>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	4313      	orrs	r3, r2
 8012930:	4a0d      	ldr	r2, [pc, #52]	; (8012968 <xTaskPriorityDisinherit+0x110>)
 8012932:	6013      	str	r3, [r2, #0]
 8012934:	693b      	ldr	r3, [r7, #16]
 8012936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012938:	4613      	mov	r3, r2
 801293a:	009b      	lsls	r3, r3, #2
 801293c:	4413      	add	r3, r2
 801293e:	009b      	lsls	r3, r3, #2
 8012940:	4a08      	ldr	r2, [pc, #32]	; (8012964 <xTaskPriorityDisinherit+0x10c>)
 8012942:	441a      	add	r2, r3
 8012944:	693b      	ldr	r3, [r7, #16]
 8012946:	3304      	adds	r3, #4
 8012948:	4619      	mov	r1, r3
 801294a:	4610      	mov	r0, r2
 801294c:	f7fe f8a9 	bl	8010aa2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8012950:	2301      	movs	r3, #1
 8012952:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8012954:	697b      	ldr	r3, [r7, #20]
	}
 8012956:	4618      	mov	r0, r3
 8012958:	3718      	adds	r7, #24
 801295a:	46bd      	mov	sp, r7
 801295c:	bd80      	pop	{r7, pc}
 801295e:	bf00      	nop
 8012960:	20000738 	.word	0x20000738
 8012964:	2000073c 	.word	0x2000073c
 8012968:	20000840 	.word	0x20000840

0801296c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 801296c:	b580      	push	{r7, lr}
 801296e:	b088      	sub	sp, #32
 8012970:	af00      	add	r7, sp, #0
 8012972:	6078      	str	r0, [r7, #4]
 8012974:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8012976:	687b      	ldr	r3, [r7, #4]
 8012978:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801297a:	2301      	movs	r3, #1
 801297c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801297e:	687b      	ldr	r3, [r7, #4]
 8012980:	2b00      	cmp	r3, #0
 8012982:	f000 8087 	beq.w	8012a94 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8012986:	69bb      	ldr	r3, [r7, #24]
 8012988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801298a:	2b00      	cmp	r3, #0
 801298c:	d10c      	bne.n	80129a8 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 801298e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012992:	b672      	cpsid	i
 8012994:	f383 8811 	msr	BASEPRI, r3
 8012998:	f3bf 8f6f 	isb	sy
 801299c:	f3bf 8f4f 	dsb	sy
 80129a0:	b662      	cpsie	i
 80129a2:	60fb      	str	r3, [r7, #12]
}
 80129a4:	bf00      	nop
 80129a6:	e7fe      	b.n	80129a6 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80129a8:	69bb      	ldr	r3, [r7, #24]
 80129aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129ac:	683a      	ldr	r2, [r7, #0]
 80129ae:	429a      	cmp	r2, r3
 80129b0:	d902      	bls.n	80129b8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80129b2:	683b      	ldr	r3, [r7, #0]
 80129b4:	61fb      	str	r3, [r7, #28]
 80129b6:	e002      	b.n	80129be <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80129b8:	69bb      	ldr	r3, [r7, #24]
 80129ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80129bc:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80129be:	69bb      	ldr	r3, [r7, #24]
 80129c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129c2:	69fa      	ldr	r2, [r7, #28]
 80129c4:	429a      	cmp	r2, r3
 80129c6:	d065      	beq.n	8012a94 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80129c8:	69bb      	ldr	r3, [r7, #24]
 80129ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80129cc:	697a      	ldr	r2, [r7, #20]
 80129ce:	429a      	cmp	r2, r3
 80129d0:	d160      	bne.n	8012a94 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80129d2:	4b32      	ldr	r3, [pc, #200]	; (8012a9c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	69ba      	ldr	r2, [r7, #24]
 80129d8:	429a      	cmp	r2, r3
 80129da:	d10c      	bne.n	80129f6 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 80129dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e0:	b672      	cpsid	i
 80129e2:	f383 8811 	msr	BASEPRI, r3
 80129e6:	f3bf 8f6f 	isb	sy
 80129ea:	f3bf 8f4f 	dsb	sy
 80129ee:	b662      	cpsie	i
 80129f0:	60bb      	str	r3, [r7, #8]
}
 80129f2:	bf00      	nop
 80129f4:	e7fe      	b.n	80129f4 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80129f6:	69bb      	ldr	r3, [r7, #24]
 80129f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80129fa:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80129fc:	69bb      	ldr	r3, [r7, #24]
 80129fe:	69fa      	ldr	r2, [r7, #28]
 8012a00:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8012a02:	69bb      	ldr	r3, [r7, #24]
 8012a04:	699b      	ldr	r3, [r3, #24]
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	db04      	blt.n	8012a14 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a0a:	69fb      	ldr	r3, [r7, #28]
 8012a0c:	f1c3 0207 	rsb	r2, r3, #7
 8012a10:	69bb      	ldr	r3, [r7, #24]
 8012a12:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8012a14:	69bb      	ldr	r3, [r7, #24]
 8012a16:	6959      	ldr	r1, [r3, #20]
 8012a18:	693a      	ldr	r2, [r7, #16]
 8012a1a:	4613      	mov	r3, r2
 8012a1c:	009b      	lsls	r3, r3, #2
 8012a1e:	4413      	add	r3, r2
 8012a20:	009b      	lsls	r3, r3, #2
 8012a22:	4a1f      	ldr	r2, [pc, #124]	; (8012aa0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012a24:	4413      	add	r3, r2
 8012a26:	4299      	cmp	r1, r3
 8012a28:	d134      	bne.n	8012a94 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012a2a:	69bb      	ldr	r3, [r7, #24]
 8012a2c:	3304      	adds	r3, #4
 8012a2e:	4618      	mov	r0, r3
 8012a30:	f7fe f894 	bl	8010b5c <uxListRemove>
 8012a34:	4603      	mov	r3, r0
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d115      	bne.n	8012a66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8012a3a:	69bb      	ldr	r3, [r7, #24]
 8012a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a3e:	4918      	ldr	r1, [pc, #96]	; (8012aa0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012a40:	4613      	mov	r3, r2
 8012a42:	009b      	lsls	r3, r3, #2
 8012a44:	4413      	add	r3, r2
 8012a46:	009b      	lsls	r3, r3, #2
 8012a48:	440b      	add	r3, r1
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d10a      	bne.n	8012a66 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8012a50:	69bb      	ldr	r3, [r7, #24]
 8012a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a54:	2201      	movs	r2, #1
 8012a56:	fa02 f303 	lsl.w	r3, r2, r3
 8012a5a:	43da      	mvns	r2, r3
 8012a5c:	4b11      	ldr	r3, [pc, #68]	; (8012aa4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012a5e:	681b      	ldr	r3, [r3, #0]
 8012a60:	4013      	ands	r3, r2
 8012a62:	4a10      	ldr	r2, [pc, #64]	; (8012aa4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012a64:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8012a66:	69bb      	ldr	r3, [r7, #24]
 8012a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012a6a:	2201      	movs	r2, #1
 8012a6c:	409a      	lsls	r2, r3
 8012a6e:	4b0d      	ldr	r3, [pc, #52]	; (8012aa4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	4313      	orrs	r3, r2
 8012a74:	4a0b      	ldr	r2, [pc, #44]	; (8012aa4 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8012a76:	6013      	str	r3, [r2, #0]
 8012a78:	69bb      	ldr	r3, [r7, #24]
 8012a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012a7c:	4613      	mov	r3, r2
 8012a7e:	009b      	lsls	r3, r3, #2
 8012a80:	4413      	add	r3, r2
 8012a82:	009b      	lsls	r3, r3, #2
 8012a84:	4a06      	ldr	r2, [pc, #24]	; (8012aa0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8012a86:	441a      	add	r2, r3
 8012a88:	69bb      	ldr	r3, [r7, #24]
 8012a8a:	3304      	adds	r3, #4
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	4610      	mov	r0, r2
 8012a90:	f7fe f807 	bl	8010aa2 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8012a94:	bf00      	nop
 8012a96:	3720      	adds	r7, #32
 8012a98:	46bd      	mov	sp, r7
 8012a9a:	bd80      	pop	{r7, pc}
 8012a9c:	20000738 	.word	0x20000738
 8012aa0:	2000073c 	.word	0x2000073c
 8012aa4:	20000840 	.word	0x20000840

08012aa8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8012aa8:	b480      	push	{r7}
 8012aaa:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8012aac:	4b07      	ldr	r3, [pc, #28]	; (8012acc <pvTaskIncrementMutexHeldCount+0x24>)
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d004      	beq.n	8012abe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8012ab4:	4b05      	ldr	r3, [pc, #20]	; (8012acc <pvTaskIncrementMutexHeldCount+0x24>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8012aba:	3201      	adds	r2, #1
 8012abc:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8012abe:	4b03      	ldr	r3, [pc, #12]	; (8012acc <pvTaskIncrementMutexHeldCount+0x24>)
 8012ac0:	681b      	ldr	r3, [r3, #0]
	}
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	46bd      	mov	sp, r7
 8012ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012aca:	4770      	bx	lr
 8012acc:	20000738 	.word	0x20000738

08012ad0 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8012ad0:	b580      	push	{r7, lr}
 8012ad2:	b084      	sub	sp, #16
 8012ad4:	af00      	add	r7, sp, #0
 8012ad6:	6078      	str	r0, [r7, #4]
 8012ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8012ada:	4b29      	ldr	r3, [pc, #164]	; (8012b80 <prvAddCurrentTaskToDelayedList+0xb0>)
 8012adc:	681b      	ldr	r3, [r3, #0]
 8012ade:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012ae0:	4b28      	ldr	r3, [pc, #160]	; (8012b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	3304      	adds	r3, #4
 8012ae6:	4618      	mov	r0, r3
 8012ae8:	f7fe f838 	bl	8010b5c <uxListRemove>
 8012aec:	4603      	mov	r3, r0
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d10b      	bne.n	8012b0a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8012af2:	4b24      	ldr	r3, [pc, #144]	; (8012b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012af8:	2201      	movs	r2, #1
 8012afa:	fa02 f303 	lsl.w	r3, r2, r3
 8012afe:	43da      	mvns	r2, r3
 8012b00:	4b21      	ldr	r3, [pc, #132]	; (8012b88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	4013      	ands	r3, r2
 8012b06:	4a20      	ldr	r2, [pc, #128]	; (8012b88 <prvAddCurrentTaskToDelayedList+0xb8>)
 8012b08:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8012b0a:	687b      	ldr	r3, [r7, #4]
 8012b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b10:	d10a      	bne.n	8012b28 <prvAddCurrentTaskToDelayedList+0x58>
 8012b12:	683b      	ldr	r3, [r7, #0]
 8012b14:	2b00      	cmp	r3, #0
 8012b16:	d007      	beq.n	8012b28 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b18:	4b1a      	ldr	r3, [pc, #104]	; (8012b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	3304      	adds	r3, #4
 8012b1e:	4619      	mov	r1, r3
 8012b20:	481a      	ldr	r0, [pc, #104]	; (8012b8c <prvAddCurrentTaskToDelayedList+0xbc>)
 8012b22:	f7fd ffbe 	bl	8010aa2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8012b26:	e026      	b.n	8012b76 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8012b28:	68fa      	ldr	r2, [r7, #12]
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	4413      	add	r3, r2
 8012b2e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8012b30:	4b14      	ldr	r3, [pc, #80]	; (8012b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	68ba      	ldr	r2, [r7, #8]
 8012b36:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8012b38:	68ba      	ldr	r2, [r7, #8]
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	429a      	cmp	r2, r3
 8012b3e:	d209      	bcs.n	8012b54 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b40:	4b13      	ldr	r3, [pc, #76]	; (8012b90 <prvAddCurrentTaskToDelayedList+0xc0>)
 8012b42:	681a      	ldr	r2, [r3, #0]
 8012b44:	4b0f      	ldr	r3, [pc, #60]	; (8012b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b46:	681b      	ldr	r3, [r3, #0]
 8012b48:	3304      	adds	r3, #4
 8012b4a:	4619      	mov	r1, r3
 8012b4c:	4610      	mov	r0, r2
 8012b4e:	f7fd ffcc 	bl	8010aea <vListInsert>
}
 8012b52:	e010      	b.n	8012b76 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8012b54:	4b0f      	ldr	r3, [pc, #60]	; (8012b94 <prvAddCurrentTaskToDelayedList+0xc4>)
 8012b56:	681a      	ldr	r2, [r3, #0]
 8012b58:	4b0a      	ldr	r3, [pc, #40]	; (8012b84 <prvAddCurrentTaskToDelayedList+0xb4>)
 8012b5a:	681b      	ldr	r3, [r3, #0]
 8012b5c:	3304      	adds	r3, #4
 8012b5e:	4619      	mov	r1, r3
 8012b60:	4610      	mov	r0, r2
 8012b62:	f7fd ffc2 	bl	8010aea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8012b66:	4b0c      	ldr	r3, [pc, #48]	; (8012b98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b68:	681b      	ldr	r3, [r3, #0]
 8012b6a:	68ba      	ldr	r2, [r7, #8]
 8012b6c:	429a      	cmp	r2, r3
 8012b6e:	d202      	bcs.n	8012b76 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8012b70:	4a09      	ldr	r2, [pc, #36]	; (8012b98 <prvAddCurrentTaskToDelayedList+0xc8>)
 8012b72:	68bb      	ldr	r3, [r7, #8]
 8012b74:	6013      	str	r3, [r2, #0]
}
 8012b76:	bf00      	nop
 8012b78:	3710      	adds	r7, #16
 8012b7a:	46bd      	mov	sp, r7
 8012b7c:	bd80      	pop	{r7, pc}
 8012b7e:	bf00      	nop
 8012b80:	2000083c 	.word	0x2000083c
 8012b84:	20000738 	.word	0x20000738
 8012b88:	20000840 	.word	0x20000840
 8012b8c:	20000824 	.word	0x20000824
 8012b90:	200007f4 	.word	0x200007f4
 8012b94:	200007f0 	.word	0x200007f0
 8012b98:	20000858 	.word	0x20000858

08012b9c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8012b9c:	b480      	push	{r7}
 8012b9e:	b085      	sub	sp, #20
 8012ba0:	af00      	add	r7, sp, #0
 8012ba2:	60f8      	str	r0, [r7, #12]
 8012ba4:	60b9      	str	r1, [r7, #8]
 8012ba6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8012ba8:	68fb      	ldr	r3, [r7, #12]
 8012baa:	3b04      	subs	r3, #4
 8012bac:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8012bb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012bb6:	68fb      	ldr	r3, [r7, #12]
 8012bb8:	3b04      	subs	r3, #4
 8012bba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8012bbc:	68bb      	ldr	r3, [r7, #8]
 8012bbe:	f023 0201 	bic.w	r2, r3, #1
 8012bc2:	68fb      	ldr	r3, [r7, #12]
 8012bc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	3b04      	subs	r3, #4
 8012bca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8012bcc:	4a0c      	ldr	r2, [pc, #48]	; (8012c00 <pxPortInitialiseStack+0x64>)
 8012bce:	68fb      	ldr	r3, [r7, #12]
 8012bd0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	3b14      	subs	r3, #20
 8012bd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8012bd8:	687a      	ldr	r2, [r7, #4]
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	3b04      	subs	r3, #4
 8012be2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8012be4:	68fb      	ldr	r3, [r7, #12]
 8012be6:	f06f 0202 	mvn.w	r2, #2
 8012bea:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	3b20      	subs	r3, #32
 8012bf0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8012bf2:	68fb      	ldr	r3, [r7, #12]
}
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	3714      	adds	r7, #20
 8012bf8:	46bd      	mov	sp, r7
 8012bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfe:	4770      	bx	lr
 8012c00:	08012c05 	.word	0x08012c05

08012c04 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8012c04:	b480      	push	{r7}
 8012c06:	b085      	sub	sp, #20
 8012c08:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8012c0e:	4b14      	ldr	r3, [pc, #80]	; (8012c60 <prvTaskExitError+0x5c>)
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c16:	d00c      	beq.n	8012c32 <prvTaskExitError+0x2e>
	__asm volatile
 8012c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c1c:	b672      	cpsid	i
 8012c1e:	f383 8811 	msr	BASEPRI, r3
 8012c22:	f3bf 8f6f 	isb	sy
 8012c26:	f3bf 8f4f 	dsb	sy
 8012c2a:	b662      	cpsie	i
 8012c2c:	60fb      	str	r3, [r7, #12]
}
 8012c2e:	bf00      	nop
 8012c30:	e7fe      	b.n	8012c30 <prvTaskExitError+0x2c>
	__asm volatile
 8012c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c36:	b672      	cpsid	i
 8012c38:	f383 8811 	msr	BASEPRI, r3
 8012c3c:	f3bf 8f6f 	isb	sy
 8012c40:	f3bf 8f4f 	dsb	sy
 8012c44:	b662      	cpsie	i
 8012c46:	60bb      	str	r3, [r7, #8]
}
 8012c48:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8012c4a:	bf00      	nop
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d0fc      	beq.n	8012c4c <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8012c52:	bf00      	nop
 8012c54:	bf00      	nop
 8012c56:	3714      	adds	r7, #20
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c5e:	4770      	bx	lr
 8012c60:	20000080 	.word	0x20000080
	...

08012c70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8012c70:	4b07      	ldr	r3, [pc, #28]	; (8012c90 <pxCurrentTCBConst2>)
 8012c72:	6819      	ldr	r1, [r3, #0]
 8012c74:	6808      	ldr	r0, [r1, #0]
 8012c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c7a:	f380 8809 	msr	PSP, r0
 8012c7e:	f3bf 8f6f 	isb	sy
 8012c82:	f04f 0000 	mov.w	r0, #0
 8012c86:	f380 8811 	msr	BASEPRI, r0
 8012c8a:	4770      	bx	lr
 8012c8c:	f3af 8000 	nop.w

08012c90 <pxCurrentTCBConst2>:
 8012c90:	20000738 	.word	0x20000738
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8012c94:	bf00      	nop
 8012c96:	bf00      	nop

08012c98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8012c98:	4808      	ldr	r0, [pc, #32]	; (8012cbc <prvPortStartFirstTask+0x24>)
 8012c9a:	6800      	ldr	r0, [r0, #0]
 8012c9c:	6800      	ldr	r0, [r0, #0]
 8012c9e:	f380 8808 	msr	MSP, r0
 8012ca2:	f04f 0000 	mov.w	r0, #0
 8012ca6:	f380 8814 	msr	CONTROL, r0
 8012caa:	b662      	cpsie	i
 8012cac:	b661      	cpsie	f
 8012cae:	f3bf 8f4f 	dsb	sy
 8012cb2:	f3bf 8f6f 	isb	sy
 8012cb6:	df00      	svc	0
 8012cb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8012cba:	bf00      	nop
 8012cbc:	e000ed08 	.word	0xe000ed08

08012cc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8012cc0:	b580      	push	{r7, lr}
 8012cc2:	b084      	sub	sp, #16
 8012cc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8012cc6:	4b37      	ldr	r3, [pc, #220]	; (8012da4 <xPortStartScheduler+0xe4>)
 8012cc8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8012cca:	68fb      	ldr	r3, [r7, #12]
 8012ccc:	781b      	ldrb	r3, [r3, #0]
 8012cce:	b2db      	uxtb	r3, r3
 8012cd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	22ff      	movs	r2, #255	; 0xff
 8012cd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	781b      	ldrb	r3, [r3, #0]
 8012cdc:	b2db      	uxtb	r3, r3
 8012cde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8012ce0:	78fb      	ldrb	r3, [r7, #3]
 8012ce2:	b2db      	uxtb	r3, r3
 8012ce4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8012ce8:	b2da      	uxtb	r2, r3
 8012cea:	4b2f      	ldr	r3, [pc, #188]	; (8012da8 <xPortStartScheduler+0xe8>)
 8012cec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8012cee:	4b2f      	ldr	r3, [pc, #188]	; (8012dac <xPortStartScheduler+0xec>)
 8012cf0:	2207      	movs	r2, #7
 8012cf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012cf4:	e009      	b.n	8012d0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8012cf6:	4b2d      	ldr	r3, [pc, #180]	; (8012dac <xPortStartScheduler+0xec>)
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	3b01      	subs	r3, #1
 8012cfc:	4a2b      	ldr	r2, [pc, #172]	; (8012dac <xPortStartScheduler+0xec>)
 8012cfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8012d00:	78fb      	ldrb	r3, [r7, #3]
 8012d02:	b2db      	uxtb	r3, r3
 8012d04:	005b      	lsls	r3, r3, #1
 8012d06:	b2db      	uxtb	r3, r3
 8012d08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8012d0a:	78fb      	ldrb	r3, [r7, #3]
 8012d0c:	b2db      	uxtb	r3, r3
 8012d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012d12:	2b80      	cmp	r3, #128	; 0x80
 8012d14:	d0ef      	beq.n	8012cf6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8012d16:	4b25      	ldr	r3, [pc, #148]	; (8012dac <xPortStartScheduler+0xec>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	f1c3 0307 	rsb	r3, r3, #7
 8012d1e:	2b04      	cmp	r3, #4
 8012d20:	d00c      	beq.n	8012d3c <xPortStartScheduler+0x7c>
	__asm volatile
 8012d22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012d26:	b672      	cpsid	i
 8012d28:	f383 8811 	msr	BASEPRI, r3
 8012d2c:	f3bf 8f6f 	isb	sy
 8012d30:	f3bf 8f4f 	dsb	sy
 8012d34:	b662      	cpsie	i
 8012d36:	60bb      	str	r3, [r7, #8]
}
 8012d38:	bf00      	nop
 8012d3a:	e7fe      	b.n	8012d3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8012d3c:	4b1b      	ldr	r3, [pc, #108]	; (8012dac <xPortStartScheduler+0xec>)
 8012d3e:	681b      	ldr	r3, [r3, #0]
 8012d40:	021b      	lsls	r3, r3, #8
 8012d42:	4a1a      	ldr	r2, [pc, #104]	; (8012dac <xPortStartScheduler+0xec>)
 8012d44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8012d46:	4b19      	ldr	r3, [pc, #100]	; (8012dac <xPortStartScheduler+0xec>)
 8012d48:	681b      	ldr	r3, [r3, #0]
 8012d4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8012d4e:	4a17      	ldr	r2, [pc, #92]	; (8012dac <xPortStartScheduler+0xec>)
 8012d50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	b2da      	uxtb	r2, r3
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8012d5a:	4b15      	ldr	r3, [pc, #84]	; (8012db0 <xPortStartScheduler+0xf0>)
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	4a14      	ldr	r2, [pc, #80]	; (8012db0 <xPortStartScheduler+0xf0>)
 8012d60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8012d64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8012d66:	4b12      	ldr	r3, [pc, #72]	; (8012db0 <xPortStartScheduler+0xf0>)
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	4a11      	ldr	r2, [pc, #68]	; (8012db0 <xPortStartScheduler+0xf0>)
 8012d6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8012d70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8012d72:	f000 f8dd 	bl	8012f30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8012d76:	4b0f      	ldr	r3, [pc, #60]	; (8012db4 <xPortStartScheduler+0xf4>)
 8012d78:	2200      	movs	r2, #0
 8012d7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8012d7c:	f000 f8fc 	bl	8012f78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8012d80:	4b0d      	ldr	r3, [pc, #52]	; (8012db8 <xPortStartScheduler+0xf8>)
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	4a0c      	ldr	r2, [pc, #48]	; (8012db8 <xPortStartScheduler+0xf8>)
 8012d86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8012d8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8012d8c:	f7ff ff84 	bl	8012c98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8012d90:	f7ff fa56 	bl	8012240 <vTaskSwitchContext>
	prvTaskExitError();
 8012d94:	f7ff ff36 	bl	8012c04 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8012d98:	2300      	movs	r3, #0
}
 8012d9a:	4618      	mov	r0, r3
 8012d9c:	3710      	adds	r7, #16
 8012d9e:	46bd      	mov	sp, r7
 8012da0:	bd80      	pop	{r7, pc}
 8012da2:	bf00      	nop
 8012da4:	e000e400 	.word	0xe000e400
 8012da8:	20000864 	.word	0x20000864
 8012dac:	20000868 	.word	0x20000868
 8012db0:	e000ed20 	.word	0xe000ed20
 8012db4:	20000080 	.word	0x20000080
 8012db8:	e000ef34 	.word	0xe000ef34

08012dbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8012dbc:	b480      	push	{r7}
 8012dbe:	b083      	sub	sp, #12
 8012dc0:	af00      	add	r7, sp, #0
	__asm volatile
 8012dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dc6:	b672      	cpsid	i
 8012dc8:	f383 8811 	msr	BASEPRI, r3
 8012dcc:	f3bf 8f6f 	isb	sy
 8012dd0:	f3bf 8f4f 	dsb	sy
 8012dd4:	b662      	cpsie	i
 8012dd6:	607b      	str	r3, [r7, #4]
}
 8012dd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8012dda:	4b10      	ldr	r3, [pc, #64]	; (8012e1c <vPortEnterCritical+0x60>)
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	3301      	adds	r3, #1
 8012de0:	4a0e      	ldr	r2, [pc, #56]	; (8012e1c <vPortEnterCritical+0x60>)
 8012de2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8012de4:	4b0d      	ldr	r3, [pc, #52]	; (8012e1c <vPortEnterCritical+0x60>)
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	2b01      	cmp	r3, #1
 8012dea:	d111      	bne.n	8012e10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8012dec:	4b0c      	ldr	r3, [pc, #48]	; (8012e20 <vPortEnterCritical+0x64>)
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	b2db      	uxtb	r3, r3
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	d00c      	beq.n	8012e10 <vPortEnterCritical+0x54>
	__asm volatile
 8012df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012dfa:	b672      	cpsid	i
 8012dfc:	f383 8811 	msr	BASEPRI, r3
 8012e00:	f3bf 8f6f 	isb	sy
 8012e04:	f3bf 8f4f 	dsb	sy
 8012e08:	b662      	cpsie	i
 8012e0a:	603b      	str	r3, [r7, #0]
}
 8012e0c:	bf00      	nop
 8012e0e:	e7fe      	b.n	8012e0e <vPortEnterCritical+0x52>
	}
}
 8012e10:	bf00      	nop
 8012e12:	370c      	adds	r7, #12
 8012e14:	46bd      	mov	sp, r7
 8012e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e1a:	4770      	bx	lr
 8012e1c:	20000080 	.word	0x20000080
 8012e20:	e000ed04 	.word	0xe000ed04

08012e24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8012e24:	b480      	push	{r7}
 8012e26:	b083      	sub	sp, #12
 8012e28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8012e2a:	4b13      	ldr	r3, [pc, #76]	; (8012e78 <vPortExitCritical+0x54>)
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d10c      	bne.n	8012e4c <vPortExitCritical+0x28>
	__asm volatile
 8012e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e36:	b672      	cpsid	i
 8012e38:	f383 8811 	msr	BASEPRI, r3
 8012e3c:	f3bf 8f6f 	isb	sy
 8012e40:	f3bf 8f4f 	dsb	sy
 8012e44:	b662      	cpsie	i
 8012e46:	607b      	str	r3, [r7, #4]
}
 8012e48:	bf00      	nop
 8012e4a:	e7fe      	b.n	8012e4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8012e4c:	4b0a      	ldr	r3, [pc, #40]	; (8012e78 <vPortExitCritical+0x54>)
 8012e4e:	681b      	ldr	r3, [r3, #0]
 8012e50:	3b01      	subs	r3, #1
 8012e52:	4a09      	ldr	r2, [pc, #36]	; (8012e78 <vPortExitCritical+0x54>)
 8012e54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8012e56:	4b08      	ldr	r3, [pc, #32]	; (8012e78 <vPortExitCritical+0x54>)
 8012e58:	681b      	ldr	r3, [r3, #0]
 8012e5a:	2b00      	cmp	r3, #0
 8012e5c:	d105      	bne.n	8012e6a <vPortExitCritical+0x46>
 8012e5e:	2300      	movs	r3, #0
 8012e60:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012e62:	683b      	ldr	r3, [r7, #0]
 8012e64:	f383 8811 	msr	BASEPRI, r3
}
 8012e68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8012e6a:	bf00      	nop
 8012e6c:	370c      	adds	r7, #12
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e74:	4770      	bx	lr
 8012e76:	bf00      	nop
 8012e78:	20000080 	.word	0x20000080
 8012e7c:	00000000 	.word	0x00000000

08012e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8012e80:	f3ef 8009 	mrs	r0, PSP
 8012e84:	f3bf 8f6f 	isb	sy
 8012e88:	4b15      	ldr	r3, [pc, #84]	; (8012ee0 <pxCurrentTCBConst>)
 8012e8a:	681a      	ldr	r2, [r3, #0]
 8012e8c:	f01e 0f10 	tst.w	lr, #16
 8012e90:	bf08      	it	eq
 8012e92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8012e96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e9a:	6010      	str	r0, [r2, #0]
 8012e9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8012ea0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8012ea4:	b672      	cpsid	i
 8012ea6:	f380 8811 	msr	BASEPRI, r0
 8012eaa:	f3bf 8f4f 	dsb	sy
 8012eae:	f3bf 8f6f 	isb	sy
 8012eb2:	b662      	cpsie	i
 8012eb4:	f7ff f9c4 	bl	8012240 <vTaskSwitchContext>
 8012eb8:	f04f 0000 	mov.w	r0, #0
 8012ebc:	f380 8811 	msr	BASEPRI, r0
 8012ec0:	bc09      	pop	{r0, r3}
 8012ec2:	6819      	ldr	r1, [r3, #0]
 8012ec4:	6808      	ldr	r0, [r1, #0]
 8012ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012eca:	f01e 0f10 	tst.w	lr, #16
 8012ece:	bf08      	it	eq
 8012ed0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8012ed4:	f380 8809 	msr	PSP, r0
 8012ed8:	f3bf 8f6f 	isb	sy
 8012edc:	4770      	bx	lr
 8012ede:	bf00      	nop

08012ee0 <pxCurrentTCBConst>:
 8012ee0:	20000738 	.word	0x20000738
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8012ee4:	bf00      	nop
 8012ee6:	bf00      	nop

08012ee8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8012ee8:	b580      	push	{r7, lr}
 8012eea:	b082      	sub	sp, #8
 8012eec:	af00      	add	r7, sp, #0
	__asm volatile
 8012eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ef2:	b672      	cpsid	i
 8012ef4:	f383 8811 	msr	BASEPRI, r3
 8012ef8:	f3bf 8f6f 	isb	sy
 8012efc:	f3bf 8f4f 	dsb	sy
 8012f00:	b662      	cpsie	i
 8012f02:	607b      	str	r3, [r7, #4]
}
 8012f04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8012f06:	f7ff f8e1 	bl	80120cc <xTaskIncrementTick>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	2b00      	cmp	r3, #0
 8012f0e:	d003      	beq.n	8012f18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8012f10:	4b06      	ldr	r3, [pc, #24]	; (8012f2c <SysTick_Handler+0x44>)
 8012f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f16:	601a      	str	r2, [r3, #0]
 8012f18:	2300      	movs	r3, #0
 8012f1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8012f1c:	683b      	ldr	r3, [r7, #0]
 8012f1e:	f383 8811 	msr	BASEPRI, r3
}
 8012f22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8012f24:	bf00      	nop
 8012f26:	3708      	adds	r7, #8
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}
 8012f2c:	e000ed04 	.word	0xe000ed04

08012f30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8012f30:	b480      	push	{r7}
 8012f32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8012f34:	4b0b      	ldr	r3, [pc, #44]	; (8012f64 <vPortSetupTimerInterrupt+0x34>)
 8012f36:	2200      	movs	r2, #0
 8012f38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8012f3a:	4b0b      	ldr	r3, [pc, #44]	; (8012f68 <vPortSetupTimerInterrupt+0x38>)
 8012f3c:	2200      	movs	r2, #0
 8012f3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8012f40:	4b0a      	ldr	r3, [pc, #40]	; (8012f6c <vPortSetupTimerInterrupt+0x3c>)
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	4a0a      	ldr	r2, [pc, #40]	; (8012f70 <vPortSetupTimerInterrupt+0x40>)
 8012f46:	fba2 2303 	umull	r2, r3, r2, r3
 8012f4a:	099b      	lsrs	r3, r3, #6
 8012f4c:	4a09      	ldr	r2, [pc, #36]	; (8012f74 <vPortSetupTimerInterrupt+0x44>)
 8012f4e:	3b01      	subs	r3, #1
 8012f50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8012f52:	4b04      	ldr	r3, [pc, #16]	; (8012f64 <vPortSetupTimerInterrupt+0x34>)
 8012f54:	2207      	movs	r2, #7
 8012f56:	601a      	str	r2, [r3, #0]
}
 8012f58:	bf00      	nop
 8012f5a:	46bd      	mov	sp, r7
 8012f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f60:	4770      	bx	lr
 8012f62:	bf00      	nop
 8012f64:	e000e010 	.word	0xe000e010
 8012f68:	e000e018 	.word	0xe000e018
 8012f6c:	20000040 	.word	0x20000040
 8012f70:	10624dd3 	.word	0x10624dd3
 8012f74:	e000e014 	.word	0xe000e014

08012f78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8012f78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8012f88 <vPortEnableVFP+0x10>
 8012f7c:	6801      	ldr	r1, [r0, #0]
 8012f7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8012f82:	6001      	str	r1, [r0, #0]
 8012f84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8012f86:	bf00      	nop
 8012f88:	e000ed88 	.word	0xe000ed88

08012f8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8012f8c:	b480      	push	{r7}
 8012f8e:	b085      	sub	sp, #20
 8012f90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8012f92:	f3ef 8305 	mrs	r3, IPSR
 8012f96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	2b0f      	cmp	r3, #15
 8012f9c:	d916      	bls.n	8012fcc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8012f9e:	4a19      	ldr	r2, [pc, #100]	; (8013004 <vPortValidateInterruptPriority+0x78>)
 8012fa0:	68fb      	ldr	r3, [r7, #12]
 8012fa2:	4413      	add	r3, r2
 8012fa4:	781b      	ldrb	r3, [r3, #0]
 8012fa6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8012fa8:	4b17      	ldr	r3, [pc, #92]	; (8013008 <vPortValidateInterruptPriority+0x7c>)
 8012faa:	781b      	ldrb	r3, [r3, #0]
 8012fac:	7afa      	ldrb	r2, [r7, #11]
 8012fae:	429a      	cmp	r2, r3
 8012fb0:	d20c      	bcs.n	8012fcc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8012fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fb6:	b672      	cpsid	i
 8012fb8:	f383 8811 	msr	BASEPRI, r3
 8012fbc:	f3bf 8f6f 	isb	sy
 8012fc0:	f3bf 8f4f 	dsb	sy
 8012fc4:	b662      	cpsie	i
 8012fc6:	607b      	str	r3, [r7, #4]
}
 8012fc8:	bf00      	nop
 8012fca:	e7fe      	b.n	8012fca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8012fcc:	4b0f      	ldr	r3, [pc, #60]	; (801300c <vPortValidateInterruptPriority+0x80>)
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8012fd4:	4b0e      	ldr	r3, [pc, #56]	; (8013010 <vPortValidateInterruptPriority+0x84>)
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	429a      	cmp	r2, r3
 8012fda:	d90c      	bls.n	8012ff6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8012fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012fe0:	b672      	cpsid	i
 8012fe2:	f383 8811 	msr	BASEPRI, r3
 8012fe6:	f3bf 8f6f 	isb	sy
 8012fea:	f3bf 8f4f 	dsb	sy
 8012fee:	b662      	cpsie	i
 8012ff0:	603b      	str	r3, [r7, #0]
}
 8012ff2:	bf00      	nop
 8012ff4:	e7fe      	b.n	8012ff4 <vPortValidateInterruptPriority+0x68>
	}
 8012ff6:	bf00      	nop
 8012ff8:	3714      	adds	r7, #20
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013000:	4770      	bx	lr
 8013002:	bf00      	nop
 8013004:	e000e3f0 	.word	0xe000e3f0
 8013008:	20000864 	.word	0x20000864
 801300c:	e000ed0c 	.word	0xe000ed0c
 8013010:	20000868 	.word	0x20000868

08013014 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8013014:	b580      	push	{r7, lr}
 8013016:	b08a      	sub	sp, #40	; 0x28
 8013018:	af00      	add	r7, sp, #0
 801301a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 801301c:	2300      	movs	r3, #0
 801301e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013020:	f7fe ff86 	bl	8011f30 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8013024:	4b5e      	ldr	r3, [pc, #376]	; (80131a0 <pvPortMalloc+0x18c>)
 8013026:	681b      	ldr	r3, [r3, #0]
 8013028:	2b00      	cmp	r3, #0
 801302a:	d101      	bne.n	8013030 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 801302c:	f000 f920 	bl	8013270 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013030:	4b5c      	ldr	r3, [pc, #368]	; (80131a4 <pvPortMalloc+0x190>)
 8013032:	681a      	ldr	r2, [r3, #0]
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	4013      	ands	r3, r2
 8013038:	2b00      	cmp	r3, #0
 801303a:	f040 8092 	bne.w	8013162 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d01f      	beq.n	8013084 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8013044:	2208      	movs	r2, #8
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	4413      	add	r3, r2
 801304a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	f003 0307 	and.w	r3, r3, #7
 8013052:	2b00      	cmp	r3, #0
 8013054:	d016      	beq.n	8013084 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	f023 0307 	bic.w	r3, r3, #7
 801305c:	3308      	adds	r3, #8
 801305e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	f003 0307 	and.w	r3, r3, #7
 8013066:	2b00      	cmp	r3, #0
 8013068:	d00c      	beq.n	8013084 <pvPortMalloc+0x70>
	__asm volatile
 801306a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801306e:	b672      	cpsid	i
 8013070:	f383 8811 	msr	BASEPRI, r3
 8013074:	f3bf 8f6f 	isb	sy
 8013078:	f3bf 8f4f 	dsb	sy
 801307c:	b662      	cpsie	i
 801307e:	617b      	str	r3, [r7, #20]
}
 8013080:	bf00      	nop
 8013082:	e7fe      	b.n	8013082 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8013084:	687b      	ldr	r3, [r7, #4]
 8013086:	2b00      	cmp	r3, #0
 8013088:	d06b      	beq.n	8013162 <pvPortMalloc+0x14e>
 801308a:	4b47      	ldr	r3, [pc, #284]	; (80131a8 <pvPortMalloc+0x194>)
 801308c:	681b      	ldr	r3, [r3, #0]
 801308e:	687a      	ldr	r2, [r7, #4]
 8013090:	429a      	cmp	r2, r3
 8013092:	d866      	bhi.n	8013162 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8013094:	4b45      	ldr	r3, [pc, #276]	; (80131ac <pvPortMalloc+0x198>)
 8013096:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8013098:	4b44      	ldr	r3, [pc, #272]	; (80131ac <pvPortMalloc+0x198>)
 801309a:	681b      	ldr	r3, [r3, #0]
 801309c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801309e:	e004      	b.n	80130aa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80130a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80130a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80130aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ac:	685b      	ldr	r3, [r3, #4]
 80130ae:	687a      	ldr	r2, [r7, #4]
 80130b0:	429a      	cmp	r2, r3
 80130b2:	d903      	bls.n	80130bc <pvPortMalloc+0xa8>
 80130b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130b6:	681b      	ldr	r3, [r3, #0]
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d1f1      	bne.n	80130a0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80130bc:	4b38      	ldr	r3, [pc, #224]	; (80131a0 <pvPortMalloc+0x18c>)
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130c2:	429a      	cmp	r2, r3
 80130c4:	d04d      	beq.n	8013162 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80130c6:	6a3b      	ldr	r3, [r7, #32]
 80130c8:	681b      	ldr	r3, [r3, #0]
 80130ca:	2208      	movs	r2, #8
 80130cc:	4413      	add	r3, r2
 80130ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80130d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130d2:	681a      	ldr	r2, [r3, #0]
 80130d4:	6a3b      	ldr	r3, [r7, #32]
 80130d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80130d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130da:	685a      	ldr	r2, [r3, #4]
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	1ad2      	subs	r2, r2, r3
 80130e0:	2308      	movs	r3, #8
 80130e2:	005b      	lsls	r3, r3, #1
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d921      	bls.n	801312c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80130e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	4413      	add	r3, r2
 80130ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80130f0:	69bb      	ldr	r3, [r7, #24]
 80130f2:	f003 0307 	and.w	r3, r3, #7
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d00c      	beq.n	8013114 <pvPortMalloc+0x100>
	__asm volatile
 80130fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80130fe:	b672      	cpsid	i
 8013100:	f383 8811 	msr	BASEPRI, r3
 8013104:	f3bf 8f6f 	isb	sy
 8013108:	f3bf 8f4f 	dsb	sy
 801310c:	b662      	cpsie	i
 801310e:	613b      	str	r3, [r7, #16]
}
 8013110:	bf00      	nop
 8013112:	e7fe      	b.n	8013112 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013116:	685a      	ldr	r2, [r3, #4]
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	1ad2      	subs	r2, r2, r3
 801311c:	69bb      	ldr	r3, [r7, #24]
 801311e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013122:	687a      	ldr	r2, [r7, #4]
 8013124:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8013126:	69b8      	ldr	r0, [r7, #24]
 8013128:	f000 f904 	bl	8013334 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 801312c:	4b1e      	ldr	r3, [pc, #120]	; (80131a8 <pvPortMalloc+0x194>)
 801312e:	681a      	ldr	r2, [r3, #0]
 8013130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013132:	685b      	ldr	r3, [r3, #4]
 8013134:	1ad3      	subs	r3, r2, r3
 8013136:	4a1c      	ldr	r2, [pc, #112]	; (80131a8 <pvPortMalloc+0x194>)
 8013138:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801313a:	4b1b      	ldr	r3, [pc, #108]	; (80131a8 <pvPortMalloc+0x194>)
 801313c:	681a      	ldr	r2, [r3, #0]
 801313e:	4b1c      	ldr	r3, [pc, #112]	; (80131b0 <pvPortMalloc+0x19c>)
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	429a      	cmp	r2, r3
 8013144:	d203      	bcs.n	801314e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8013146:	4b18      	ldr	r3, [pc, #96]	; (80131a8 <pvPortMalloc+0x194>)
 8013148:	681b      	ldr	r3, [r3, #0]
 801314a:	4a19      	ldr	r2, [pc, #100]	; (80131b0 <pvPortMalloc+0x19c>)
 801314c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 801314e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013150:	685a      	ldr	r2, [r3, #4]
 8013152:	4b14      	ldr	r3, [pc, #80]	; (80131a4 <pvPortMalloc+0x190>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	431a      	orrs	r2, r3
 8013158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 801315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315e:	2200      	movs	r2, #0
 8013160:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013162:	f7fe fef3 	bl	8011f4c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 8013166:	69fb      	ldr	r3, [r7, #28]
 8013168:	2b00      	cmp	r3, #0
 801316a:	d101      	bne.n	8013170 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 801316c:	f7ed fba4 	bl	80008b8 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013170:	69fb      	ldr	r3, [r7, #28]
 8013172:	f003 0307 	and.w	r3, r3, #7
 8013176:	2b00      	cmp	r3, #0
 8013178:	d00c      	beq.n	8013194 <pvPortMalloc+0x180>
	__asm volatile
 801317a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801317e:	b672      	cpsid	i
 8013180:	f383 8811 	msr	BASEPRI, r3
 8013184:	f3bf 8f6f 	isb	sy
 8013188:	f3bf 8f4f 	dsb	sy
 801318c:	b662      	cpsie	i
 801318e:	60fb      	str	r3, [r7, #12]
}
 8013190:	bf00      	nop
 8013192:	e7fe      	b.n	8013192 <pvPortMalloc+0x17e>
	return pvReturn;
 8013194:	69fb      	ldr	r3, [r7, #28]
}
 8013196:	4618      	mov	r0, r3
 8013198:	3728      	adds	r7, #40	; 0x28
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	bf00      	nop
 80131a0:	20008874 	.word	0x20008874
 80131a4:	20008880 	.word	0x20008880
 80131a8:	20008878 	.word	0x20008878
 80131ac:	2000886c 	.word	0x2000886c
 80131b0:	2000887c 	.word	0x2000887c

080131b4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b086      	sub	sp, #24
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d04c      	beq.n	8013260 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80131c6:	2308      	movs	r3, #8
 80131c8:	425b      	negs	r3, r3
 80131ca:	697a      	ldr	r2, [r7, #20]
 80131cc:	4413      	add	r3, r2
 80131ce:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80131d4:	693b      	ldr	r3, [r7, #16]
 80131d6:	685a      	ldr	r2, [r3, #4]
 80131d8:	4b23      	ldr	r3, [pc, #140]	; (8013268 <vPortFree+0xb4>)
 80131da:	681b      	ldr	r3, [r3, #0]
 80131dc:	4013      	ands	r3, r2
 80131de:	2b00      	cmp	r3, #0
 80131e0:	d10c      	bne.n	80131fc <vPortFree+0x48>
	__asm volatile
 80131e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80131e6:	b672      	cpsid	i
 80131e8:	f383 8811 	msr	BASEPRI, r3
 80131ec:	f3bf 8f6f 	isb	sy
 80131f0:	f3bf 8f4f 	dsb	sy
 80131f4:	b662      	cpsie	i
 80131f6:	60fb      	str	r3, [r7, #12]
}
 80131f8:	bf00      	nop
 80131fa:	e7fe      	b.n	80131fa <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80131fc:	693b      	ldr	r3, [r7, #16]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	2b00      	cmp	r3, #0
 8013202:	d00c      	beq.n	801321e <vPortFree+0x6a>
	__asm volatile
 8013204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013208:	b672      	cpsid	i
 801320a:	f383 8811 	msr	BASEPRI, r3
 801320e:	f3bf 8f6f 	isb	sy
 8013212:	f3bf 8f4f 	dsb	sy
 8013216:	b662      	cpsie	i
 8013218:	60bb      	str	r3, [r7, #8]
}
 801321a:	bf00      	nop
 801321c:	e7fe      	b.n	801321c <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801321e:	693b      	ldr	r3, [r7, #16]
 8013220:	685a      	ldr	r2, [r3, #4]
 8013222:	4b11      	ldr	r3, [pc, #68]	; (8013268 <vPortFree+0xb4>)
 8013224:	681b      	ldr	r3, [r3, #0]
 8013226:	4013      	ands	r3, r2
 8013228:	2b00      	cmp	r3, #0
 801322a:	d019      	beq.n	8013260 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	2b00      	cmp	r3, #0
 8013232:	d115      	bne.n	8013260 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013234:	693b      	ldr	r3, [r7, #16]
 8013236:	685a      	ldr	r2, [r3, #4]
 8013238:	4b0b      	ldr	r3, [pc, #44]	; (8013268 <vPortFree+0xb4>)
 801323a:	681b      	ldr	r3, [r3, #0]
 801323c:	43db      	mvns	r3, r3
 801323e:	401a      	ands	r2, r3
 8013240:	693b      	ldr	r3, [r7, #16]
 8013242:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013244:	f7fe fe74 	bl	8011f30 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013248:	693b      	ldr	r3, [r7, #16]
 801324a:	685a      	ldr	r2, [r3, #4]
 801324c:	4b07      	ldr	r3, [pc, #28]	; (801326c <vPortFree+0xb8>)
 801324e:	681b      	ldr	r3, [r3, #0]
 8013250:	4413      	add	r3, r2
 8013252:	4a06      	ldr	r2, [pc, #24]	; (801326c <vPortFree+0xb8>)
 8013254:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013256:	6938      	ldr	r0, [r7, #16]
 8013258:	f000 f86c 	bl	8013334 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 801325c:	f7fe fe76 	bl	8011f4c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8013260:	bf00      	nop
 8013262:	3718      	adds	r7, #24
 8013264:	46bd      	mov	sp, r7
 8013266:	bd80      	pop	{r7, pc}
 8013268:	20008880 	.word	0x20008880
 801326c:	20008878 	.word	0x20008878

08013270 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013270:	b480      	push	{r7}
 8013272:	b085      	sub	sp, #20
 8013274:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801327a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801327c:	4b27      	ldr	r3, [pc, #156]	; (801331c <prvHeapInit+0xac>)
 801327e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8013280:	68fb      	ldr	r3, [r7, #12]
 8013282:	f003 0307 	and.w	r3, r3, #7
 8013286:	2b00      	cmp	r3, #0
 8013288:	d00c      	beq.n	80132a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801328a:	68fb      	ldr	r3, [r7, #12]
 801328c:	3307      	adds	r3, #7
 801328e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	f023 0307 	bic.w	r3, r3, #7
 8013296:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8013298:	68ba      	ldr	r2, [r7, #8]
 801329a:	68fb      	ldr	r3, [r7, #12]
 801329c:	1ad3      	subs	r3, r2, r3
 801329e:	4a1f      	ldr	r2, [pc, #124]	; (801331c <prvHeapInit+0xac>)
 80132a0:	4413      	add	r3, r2
 80132a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80132a4:	68fb      	ldr	r3, [r7, #12]
 80132a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80132a8:	4a1d      	ldr	r2, [pc, #116]	; (8013320 <prvHeapInit+0xb0>)
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80132ae:	4b1c      	ldr	r3, [pc, #112]	; (8013320 <prvHeapInit+0xb0>)
 80132b0:	2200      	movs	r2, #0
 80132b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	68ba      	ldr	r2, [r7, #8]
 80132b8:	4413      	add	r3, r2
 80132ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80132bc:	2208      	movs	r2, #8
 80132be:	68fb      	ldr	r3, [r7, #12]
 80132c0:	1a9b      	subs	r3, r3, r2
 80132c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	f023 0307 	bic.w	r3, r3, #7
 80132ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80132cc:	68fb      	ldr	r3, [r7, #12]
 80132ce:	4a15      	ldr	r2, [pc, #84]	; (8013324 <prvHeapInit+0xb4>)
 80132d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80132d2:	4b14      	ldr	r3, [pc, #80]	; (8013324 <prvHeapInit+0xb4>)
 80132d4:	681b      	ldr	r3, [r3, #0]
 80132d6:	2200      	movs	r2, #0
 80132d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80132da:	4b12      	ldr	r3, [pc, #72]	; (8013324 <prvHeapInit+0xb4>)
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	2200      	movs	r2, #0
 80132e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80132e6:	683b      	ldr	r3, [r7, #0]
 80132e8:	68fa      	ldr	r2, [r7, #12]
 80132ea:	1ad2      	subs	r2, r2, r3
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80132f0:	4b0c      	ldr	r3, [pc, #48]	; (8013324 <prvHeapInit+0xb4>)
 80132f2:	681a      	ldr	r2, [r3, #0]
 80132f4:	683b      	ldr	r3, [r7, #0]
 80132f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80132f8:	683b      	ldr	r3, [r7, #0]
 80132fa:	685b      	ldr	r3, [r3, #4]
 80132fc:	4a0a      	ldr	r2, [pc, #40]	; (8013328 <prvHeapInit+0xb8>)
 80132fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013300:	683b      	ldr	r3, [r7, #0]
 8013302:	685b      	ldr	r3, [r3, #4]
 8013304:	4a09      	ldr	r2, [pc, #36]	; (801332c <prvHeapInit+0xbc>)
 8013306:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013308:	4b09      	ldr	r3, [pc, #36]	; (8013330 <prvHeapInit+0xc0>)
 801330a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 801330e:	601a      	str	r2, [r3, #0]
}
 8013310:	bf00      	nop
 8013312:	3714      	adds	r7, #20
 8013314:	46bd      	mov	sp, r7
 8013316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801331a:	4770      	bx	lr
 801331c:	2000086c 	.word	0x2000086c
 8013320:	2000886c 	.word	0x2000886c
 8013324:	20008874 	.word	0x20008874
 8013328:	2000887c 	.word	0x2000887c
 801332c:	20008878 	.word	0x20008878
 8013330:	20008880 	.word	0x20008880

08013334 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013334:	b480      	push	{r7}
 8013336:	b085      	sub	sp, #20
 8013338:	af00      	add	r7, sp, #0
 801333a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801333c:	4b28      	ldr	r3, [pc, #160]	; (80133e0 <prvInsertBlockIntoFreeList+0xac>)
 801333e:	60fb      	str	r3, [r7, #12]
 8013340:	e002      	b.n	8013348 <prvInsertBlockIntoFreeList+0x14>
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	60fb      	str	r3, [r7, #12]
 8013348:	68fb      	ldr	r3, [r7, #12]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	687a      	ldr	r2, [r7, #4]
 801334e:	429a      	cmp	r2, r3
 8013350:	d8f7      	bhi.n	8013342 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	685b      	ldr	r3, [r3, #4]
 801335a:	68ba      	ldr	r2, [r7, #8]
 801335c:	4413      	add	r3, r2
 801335e:	687a      	ldr	r2, [r7, #4]
 8013360:	429a      	cmp	r2, r3
 8013362:	d108      	bne.n	8013376 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	685a      	ldr	r2, [r3, #4]
 8013368:	687b      	ldr	r3, [r7, #4]
 801336a:	685b      	ldr	r3, [r3, #4]
 801336c:	441a      	add	r2, r3
 801336e:	68fb      	ldr	r3, [r7, #12]
 8013370:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	685b      	ldr	r3, [r3, #4]
 801337e:	68ba      	ldr	r2, [r7, #8]
 8013380:	441a      	add	r2, r3
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	681b      	ldr	r3, [r3, #0]
 8013386:	429a      	cmp	r2, r3
 8013388:	d118      	bne.n	80133bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801338a:	68fb      	ldr	r3, [r7, #12]
 801338c:	681a      	ldr	r2, [r3, #0]
 801338e:	4b15      	ldr	r3, [pc, #84]	; (80133e4 <prvInsertBlockIntoFreeList+0xb0>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	429a      	cmp	r2, r3
 8013394:	d00d      	beq.n	80133b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	685a      	ldr	r2, [r3, #4]
 801339a:	68fb      	ldr	r3, [r7, #12]
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	685b      	ldr	r3, [r3, #4]
 80133a0:	441a      	add	r2, r3
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80133a6:	68fb      	ldr	r3, [r7, #12]
 80133a8:	681b      	ldr	r3, [r3, #0]
 80133aa:	681a      	ldr	r2, [r3, #0]
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	601a      	str	r2, [r3, #0]
 80133b0:	e008      	b.n	80133c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80133b2:	4b0c      	ldr	r3, [pc, #48]	; (80133e4 <prvInsertBlockIntoFreeList+0xb0>)
 80133b4:	681a      	ldr	r2, [r3, #0]
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	601a      	str	r2, [r3, #0]
 80133ba:	e003      	b.n	80133c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	681a      	ldr	r2, [r3, #0]
 80133c0:	687b      	ldr	r3, [r7, #4]
 80133c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80133c4:	68fa      	ldr	r2, [r7, #12]
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	429a      	cmp	r2, r3
 80133ca:	d002      	beq.n	80133d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	687a      	ldr	r2, [r7, #4]
 80133d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80133d2:	bf00      	nop
 80133d4:	3714      	adds	r7, #20
 80133d6:	46bd      	mov	sp, r7
 80133d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133dc:	4770      	bx	lr
 80133de:	bf00      	nop
 80133e0:	2000886c 	.word	0x2000886c
 80133e4:	20008874 	.word	0x20008874

080133e8 <__errno>:
 80133e8:	4b01      	ldr	r3, [pc, #4]	; (80133f0 <__errno+0x8>)
 80133ea:	6818      	ldr	r0, [r3, #0]
 80133ec:	4770      	bx	lr
 80133ee:	bf00      	nop
 80133f0:	20000084 	.word	0x20000084

080133f4 <__libc_init_array>:
 80133f4:	b570      	push	{r4, r5, r6, lr}
 80133f6:	4d0d      	ldr	r5, [pc, #52]	; (801342c <__libc_init_array+0x38>)
 80133f8:	4c0d      	ldr	r4, [pc, #52]	; (8013430 <__libc_init_array+0x3c>)
 80133fa:	1b64      	subs	r4, r4, r5
 80133fc:	10a4      	asrs	r4, r4, #2
 80133fe:	2600      	movs	r6, #0
 8013400:	42a6      	cmp	r6, r4
 8013402:	d109      	bne.n	8013418 <__libc_init_array+0x24>
 8013404:	4d0b      	ldr	r5, [pc, #44]	; (8013434 <__libc_init_array+0x40>)
 8013406:	4c0c      	ldr	r4, [pc, #48]	; (8013438 <__libc_init_array+0x44>)
 8013408:	f000 fc4e 	bl	8013ca8 <_init>
 801340c:	1b64      	subs	r4, r4, r5
 801340e:	10a4      	asrs	r4, r4, #2
 8013410:	2600      	movs	r6, #0
 8013412:	42a6      	cmp	r6, r4
 8013414:	d105      	bne.n	8013422 <__libc_init_array+0x2e>
 8013416:	bd70      	pop	{r4, r5, r6, pc}
 8013418:	f855 3b04 	ldr.w	r3, [r5], #4
 801341c:	4798      	blx	r3
 801341e:	3601      	adds	r6, #1
 8013420:	e7ee      	b.n	8013400 <__libc_init_array+0xc>
 8013422:	f855 3b04 	ldr.w	r3, [r5], #4
 8013426:	4798      	blx	r3
 8013428:	3601      	adds	r6, #1
 801342a:	e7f2      	b.n	8013412 <__libc_init_array+0x1e>
 801342c:	08015e90 	.word	0x08015e90
 8013430:	08015e90 	.word	0x08015e90
 8013434:	08015e90 	.word	0x08015e90
 8013438:	08015e94 	.word	0x08015e94

0801343c <memcpy>:
 801343c:	440a      	add	r2, r1
 801343e:	4291      	cmp	r1, r2
 8013440:	f100 33ff 	add.w	r3, r0, #4294967295
 8013444:	d100      	bne.n	8013448 <memcpy+0xc>
 8013446:	4770      	bx	lr
 8013448:	b510      	push	{r4, lr}
 801344a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801344e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013452:	4291      	cmp	r1, r2
 8013454:	d1f9      	bne.n	801344a <memcpy+0xe>
 8013456:	bd10      	pop	{r4, pc}

08013458 <memset>:
 8013458:	4402      	add	r2, r0
 801345a:	4603      	mov	r3, r0
 801345c:	4293      	cmp	r3, r2
 801345e:	d100      	bne.n	8013462 <memset+0xa>
 8013460:	4770      	bx	lr
 8013462:	f803 1b01 	strb.w	r1, [r3], #1
 8013466:	e7f9      	b.n	801345c <memset+0x4>

08013468 <siprintf>:
 8013468:	b40e      	push	{r1, r2, r3}
 801346a:	b500      	push	{lr}
 801346c:	b09c      	sub	sp, #112	; 0x70
 801346e:	ab1d      	add	r3, sp, #116	; 0x74
 8013470:	9002      	str	r0, [sp, #8]
 8013472:	9006      	str	r0, [sp, #24]
 8013474:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8013478:	4809      	ldr	r0, [pc, #36]	; (80134a0 <siprintf+0x38>)
 801347a:	9107      	str	r1, [sp, #28]
 801347c:	9104      	str	r1, [sp, #16]
 801347e:	4909      	ldr	r1, [pc, #36]	; (80134a4 <siprintf+0x3c>)
 8013480:	f853 2b04 	ldr.w	r2, [r3], #4
 8013484:	9105      	str	r1, [sp, #20]
 8013486:	6800      	ldr	r0, [r0, #0]
 8013488:	9301      	str	r3, [sp, #4]
 801348a:	a902      	add	r1, sp, #8
 801348c:	f000 f868 	bl	8013560 <_svfiprintf_r>
 8013490:	9b02      	ldr	r3, [sp, #8]
 8013492:	2200      	movs	r2, #0
 8013494:	701a      	strb	r2, [r3, #0]
 8013496:	b01c      	add	sp, #112	; 0x70
 8013498:	f85d eb04 	ldr.w	lr, [sp], #4
 801349c:	b003      	add	sp, #12
 801349e:	4770      	bx	lr
 80134a0:	20000084 	.word	0x20000084
 80134a4:	ffff0208 	.word	0xffff0208

080134a8 <__ssputs_r>:
 80134a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80134ac:	688e      	ldr	r6, [r1, #8]
 80134ae:	429e      	cmp	r6, r3
 80134b0:	4682      	mov	sl, r0
 80134b2:	460c      	mov	r4, r1
 80134b4:	4690      	mov	r8, r2
 80134b6:	461f      	mov	r7, r3
 80134b8:	d838      	bhi.n	801352c <__ssputs_r+0x84>
 80134ba:	898a      	ldrh	r2, [r1, #12]
 80134bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80134c0:	d032      	beq.n	8013528 <__ssputs_r+0x80>
 80134c2:	6825      	ldr	r5, [r4, #0]
 80134c4:	6909      	ldr	r1, [r1, #16]
 80134c6:	eba5 0901 	sub.w	r9, r5, r1
 80134ca:	6965      	ldr	r5, [r4, #20]
 80134cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80134d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80134d4:	3301      	adds	r3, #1
 80134d6:	444b      	add	r3, r9
 80134d8:	106d      	asrs	r5, r5, #1
 80134da:	429d      	cmp	r5, r3
 80134dc:	bf38      	it	cc
 80134de:	461d      	movcc	r5, r3
 80134e0:	0553      	lsls	r3, r2, #21
 80134e2:	d531      	bpl.n	8013548 <__ssputs_r+0xa0>
 80134e4:	4629      	mov	r1, r5
 80134e6:	f000 fb39 	bl	8013b5c <_malloc_r>
 80134ea:	4606      	mov	r6, r0
 80134ec:	b950      	cbnz	r0, 8013504 <__ssputs_r+0x5c>
 80134ee:	230c      	movs	r3, #12
 80134f0:	f8ca 3000 	str.w	r3, [sl]
 80134f4:	89a3      	ldrh	r3, [r4, #12]
 80134f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80134fa:	81a3      	strh	r3, [r4, #12]
 80134fc:	f04f 30ff 	mov.w	r0, #4294967295
 8013500:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013504:	6921      	ldr	r1, [r4, #16]
 8013506:	464a      	mov	r2, r9
 8013508:	f7ff ff98 	bl	801343c <memcpy>
 801350c:	89a3      	ldrh	r3, [r4, #12]
 801350e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013512:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013516:	81a3      	strh	r3, [r4, #12]
 8013518:	6126      	str	r6, [r4, #16]
 801351a:	6165      	str	r5, [r4, #20]
 801351c:	444e      	add	r6, r9
 801351e:	eba5 0509 	sub.w	r5, r5, r9
 8013522:	6026      	str	r6, [r4, #0]
 8013524:	60a5      	str	r5, [r4, #8]
 8013526:	463e      	mov	r6, r7
 8013528:	42be      	cmp	r6, r7
 801352a:	d900      	bls.n	801352e <__ssputs_r+0x86>
 801352c:	463e      	mov	r6, r7
 801352e:	4632      	mov	r2, r6
 8013530:	6820      	ldr	r0, [r4, #0]
 8013532:	4641      	mov	r1, r8
 8013534:	f000 faa8 	bl	8013a88 <memmove>
 8013538:	68a3      	ldr	r3, [r4, #8]
 801353a:	6822      	ldr	r2, [r4, #0]
 801353c:	1b9b      	subs	r3, r3, r6
 801353e:	4432      	add	r2, r6
 8013540:	60a3      	str	r3, [r4, #8]
 8013542:	6022      	str	r2, [r4, #0]
 8013544:	2000      	movs	r0, #0
 8013546:	e7db      	b.n	8013500 <__ssputs_r+0x58>
 8013548:	462a      	mov	r2, r5
 801354a:	f000 fb61 	bl	8013c10 <_realloc_r>
 801354e:	4606      	mov	r6, r0
 8013550:	2800      	cmp	r0, #0
 8013552:	d1e1      	bne.n	8013518 <__ssputs_r+0x70>
 8013554:	6921      	ldr	r1, [r4, #16]
 8013556:	4650      	mov	r0, sl
 8013558:	f000 fab0 	bl	8013abc <_free_r>
 801355c:	e7c7      	b.n	80134ee <__ssputs_r+0x46>
	...

08013560 <_svfiprintf_r>:
 8013560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013564:	4698      	mov	r8, r3
 8013566:	898b      	ldrh	r3, [r1, #12]
 8013568:	061b      	lsls	r3, r3, #24
 801356a:	b09d      	sub	sp, #116	; 0x74
 801356c:	4607      	mov	r7, r0
 801356e:	460d      	mov	r5, r1
 8013570:	4614      	mov	r4, r2
 8013572:	d50e      	bpl.n	8013592 <_svfiprintf_r+0x32>
 8013574:	690b      	ldr	r3, [r1, #16]
 8013576:	b963      	cbnz	r3, 8013592 <_svfiprintf_r+0x32>
 8013578:	2140      	movs	r1, #64	; 0x40
 801357a:	f000 faef 	bl	8013b5c <_malloc_r>
 801357e:	6028      	str	r0, [r5, #0]
 8013580:	6128      	str	r0, [r5, #16]
 8013582:	b920      	cbnz	r0, 801358e <_svfiprintf_r+0x2e>
 8013584:	230c      	movs	r3, #12
 8013586:	603b      	str	r3, [r7, #0]
 8013588:	f04f 30ff 	mov.w	r0, #4294967295
 801358c:	e0d1      	b.n	8013732 <_svfiprintf_r+0x1d2>
 801358e:	2340      	movs	r3, #64	; 0x40
 8013590:	616b      	str	r3, [r5, #20]
 8013592:	2300      	movs	r3, #0
 8013594:	9309      	str	r3, [sp, #36]	; 0x24
 8013596:	2320      	movs	r3, #32
 8013598:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801359c:	f8cd 800c 	str.w	r8, [sp, #12]
 80135a0:	2330      	movs	r3, #48	; 0x30
 80135a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801374c <_svfiprintf_r+0x1ec>
 80135a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80135aa:	f04f 0901 	mov.w	r9, #1
 80135ae:	4623      	mov	r3, r4
 80135b0:	469a      	mov	sl, r3
 80135b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80135b6:	b10a      	cbz	r2, 80135bc <_svfiprintf_r+0x5c>
 80135b8:	2a25      	cmp	r2, #37	; 0x25
 80135ba:	d1f9      	bne.n	80135b0 <_svfiprintf_r+0x50>
 80135bc:	ebba 0b04 	subs.w	fp, sl, r4
 80135c0:	d00b      	beq.n	80135da <_svfiprintf_r+0x7a>
 80135c2:	465b      	mov	r3, fp
 80135c4:	4622      	mov	r2, r4
 80135c6:	4629      	mov	r1, r5
 80135c8:	4638      	mov	r0, r7
 80135ca:	f7ff ff6d 	bl	80134a8 <__ssputs_r>
 80135ce:	3001      	adds	r0, #1
 80135d0:	f000 80aa 	beq.w	8013728 <_svfiprintf_r+0x1c8>
 80135d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80135d6:	445a      	add	r2, fp
 80135d8:	9209      	str	r2, [sp, #36]	; 0x24
 80135da:	f89a 3000 	ldrb.w	r3, [sl]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	f000 80a2 	beq.w	8013728 <_svfiprintf_r+0x1c8>
 80135e4:	2300      	movs	r3, #0
 80135e6:	f04f 32ff 	mov.w	r2, #4294967295
 80135ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80135ee:	f10a 0a01 	add.w	sl, sl, #1
 80135f2:	9304      	str	r3, [sp, #16]
 80135f4:	9307      	str	r3, [sp, #28]
 80135f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80135fa:	931a      	str	r3, [sp, #104]	; 0x68
 80135fc:	4654      	mov	r4, sl
 80135fe:	2205      	movs	r2, #5
 8013600:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013604:	4851      	ldr	r0, [pc, #324]	; (801374c <_svfiprintf_r+0x1ec>)
 8013606:	f7ec fe0b 	bl	8000220 <memchr>
 801360a:	9a04      	ldr	r2, [sp, #16]
 801360c:	b9d8      	cbnz	r0, 8013646 <_svfiprintf_r+0xe6>
 801360e:	06d0      	lsls	r0, r2, #27
 8013610:	bf44      	itt	mi
 8013612:	2320      	movmi	r3, #32
 8013614:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013618:	0711      	lsls	r1, r2, #28
 801361a:	bf44      	itt	mi
 801361c:	232b      	movmi	r3, #43	; 0x2b
 801361e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013622:	f89a 3000 	ldrb.w	r3, [sl]
 8013626:	2b2a      	cmp	r3, #42	; 0x2a
 8013628:	d015      	beq.n	8013656 <_svfiprintf_r+0xf6>
 801362a:	9a07      	ldr	r2, [sp, #28]
 801362c:	4654      	mov	r4, sl
 801362e:	2000      	movs	r0, #0
 8013630:	f04f 0c0a 	mov.w	ip, #10
 8013634:	4621      	mov	r1, r4
 8013636:	f811 3b01 	ldrb.w	r3, [r1], #1
 801363a:	3b30      	subs	r3, #48	; 0x30
 801363c:	2b09      	cmp	r3, #9
 801363e:	d94e      	bls.n	80136de <_svfiprintf_r+0x17e>
 8013640:	b1b0      	cbz	r0, 8013670 <_svfiprintf_r+0x110>
 8013642:	9207      	str	r2, [sp, #28]
 8013644:	e014      	b.n	8013670 <_svfiprintf_r+0x110>
 8013646:	eba0 0308 	sub.w	r3, r0, r8
 801364a:	fa09 f303 	lsl.w	r3, r9, r3
 801364e:	4313      	orrs	r3, r2
 8013650:	9304      	str	r3, [sp, #16]
 8013652:	46a2      	mov	sl, r4
 8013654:	e7d2      	b.n	80135fc <_svfiprintf_r+0x9c>
 8013656:	9b03      	ldr	r3, [sp, #12]
 8013658:	1d19      	adds	r1, r3, #4
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	9103      	str	r1, [sp, #12]
 801365e:	2b00      	cmp	r3, #0
 8013660:	bfbb      	ittet	lt
 8013662:	425b      	neglt	r3, r3
 8013664:	f042 0202 	orrlt.w	r2, r2, #2
 8013668:	9307      	strge	r3, [sp, #28]
 801366a:	9307      	strlt	r3, [sp, #28]
 801366c:	bfb8      	it	lt
 801366e:	9204      	strlt	r2, [sp, #16]
 8013670:	7823      	ldrb	r3, [r4, #0]
 8013672:	2b2e      	cmp	r3, #46	; 0x2e
 8013674:	d10c      	bne.n	8013690 <_svfiprintf_r+0x130>
 8013676:	7863      	ldrb	r3, [r4, #1]
 8013678:	2b2a      	cmp	r3, #42	; 0x2a
 801367a:	d135      	bne.n	80136e8 <_svfiprintf_r+0x188>
 801367c:	9b03      	ldr	r3, [sp, #12]
 801367e:	1d1a      	adds	r2, r3, #4
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	9203      	str	r2, [sp, #12]
 8013684:	2b00      	cmp	r3, #0
 8013686:	bfb8      	it	lt
 8013688:	f04f 33ff 	movlt.w	r3, #4294967295
 801368c:	3402      	adds	r4, #2
 801368e:	9305      	str	r3, [sp, #20]
 8013690:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801375c <_svfiprintf_r+0x1fc>
 8013694:	7821      	ldrb	r1, [r4, #0]
 8013696:	2203      	movs	r2, #3
 8013698:	4650      	mov	r0, sl
 801369a:	f7ec fdc1 	bl	8000220 <memchr>
 801369e:	b140      	cbz	r0, 80136b2 <_svfiprintf_r+0x152>
 80136a0:	2340      	movs	r3, #64	; 0x40
 80136a2:	eba0 000a 	sub.w	r0, r0, sl
 80136a6:	fa03 f000 	lsl.w	r0, r3, r0
 80136aa:	9b04      	ldr	r3, [sp, #16]
 80136ac:	4303      	orrs	r3, r0
 80136ae:	3401      	adds	r4, #1
 80136b0:	9304      	str	r3, [sp, #16]
 80136b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80136b6:	4826      	ldr	r0, [pc, #152]	; (8013750 <_svfiprintf_r+0x1f0>)
 80136b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80136bc:	2206      	movs	r2, #6
 80136be:	f7ec fdaf 	bl	8000220 <memchr>
 80136c2:	2800      	cmp	r0, #0
 80136c4:	d038      	beq.n	8013738 <_svfiprintf_r+0x1d8>
 80136c6:	4b23      	ldr	r3, [pc, #140]	; (8013754 <_svfiprintf_r+0x1f4>)
 80136c8:	bb1b      	cbnz	r3, 8013712 <_svfiprintf_r+0x1b2>
 80136ca:	9b03      	ldr	r3, [sp, #12]
 80136cc:	3307      	adds	r3, #7
 80136ce:	f023 0307 	bic.w	r3, r3, #7
 80136d2:	3308      	adds	r3, #8
 80136d4:	9303      	str	r3, [sp, #12]
 80136d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136d8:	4433      	add	r3, r6
 80136da:	9309      	str	r3, [sp, #36]	; 0x24
 80136dc:	e767      	b.n	80135ae <_svfiprintf_r+0x4e>
 80136de:	fb0c 3202 	mla	r2, ip, r2, r3
 80136e2:	460c      	mov	r4, r1
 80136e4:	2001      	movs	r0, #1
 80136e6:	e7a5      	b.n	8013634 <_svfiprintf_r+0xd4>
 80136e8:	2300      	movs	r3, #0
 80136ea:	3401      	adds	r4, #1
 80136ec:	9305      	str	r3, [sp, #20]
 80136ee:	4619      	mov	r1, r3
 80136f0:	f04f 0c0a 	mov.w	ip, #10
 80136f4:	4620      	mov	r0, r4
 80136f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80136fa:	3a30      	subs	r2, #48	; 0x30
 80136fc:	2a09      	cmp	r2, #9
 80136fe:	d903      	bls.n	8013708 <_svfiprintf_r+0x1a8>
 8013700:	2b00      	cmp	r3, #0
 8013702:	d0c5      	beq.n	8013690 <_svfiprintf_r+0x130>
 8013704:	9105      	str	r1, [sp, #20]
 8013706:	e7c3      	b.n	8013690 <_svfiprintf_r+0x130>
 8013708:	fb0c 2101 	mla	r1, ip, r1, r2
 801370c:	4604      	mov	r4, r0
 801370e:	2301      	movs	r3, #1
 8013710:	e7f0      	b.n	80136f4 <_svfiprintf_r+0x194>
 8013712:	ab03      	add	r3, sp, #12
 8013714:	9300      	str	r3, [sp, #0]
 8013716:	462a      	mov	r2, r5
 8013718:	4b0f      	ldr	r3, [pc, #60]	; (8013758 <_svfiprintf_r+0x1f8>)
 801371a:	a904      	add	r1, sp, #16
 801371c:	4638      	mov	r0, r7
 801371e:	f3af 8000 	nop.w
 8013722:	1c42      	adds	r2, r0, #1
 8013724:	4606      	mov	r6, r0
 8013726:	d1d6      	bne.n	80136d6 <_svfiprintf_r+0x176>
 8013728:	89ab      	ldrh	r3, [r5, #12]
 801372a:	065b      	lsls	r3, r3, #25
 801372c:	f53f af2c 	bmi.w	8013588 <_svfiprintf_r+0x28>
 8013730:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013732:	b01d      	add	sp, #116	; 0x74
 8013734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013738:	ab03      	add	r3, sp, #12
 801373a:	9300      	str	r3, [sp, #0]
 801373c:	462a      	mov	r2, r5
 801373e:	4b06      	ldr	r3, [pc, #24]	; (8013758 <_svfiprintf_r+0x1f8>)
 8013740:	a904      	add	r1, sp, #16
 8013742:	4638      	mov	r0, r7
 8013744:	f000 f87a 	bl	801383c <_printf_i>
 8013748:	e7eb      	b.n	8013722 <_svfiprintf_r+0x1c2>
 801374a:	bf00      	nop
 801374c:	08015e52 	.word	0x08015e52
 8013750:	08015e5c 	.word	0x08015e5c
 8013754:	00000000 	.word	0x00000000
 8013758:	080134a9 	.word	0x080134a9
 801375c:	08015e58 	.word	0x08015e58

08013760 <_printf_common>:
 8013760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013764:	4616      	mov	r6, r2
 8013766:	4699      	mov	r9, r3
 8013768:	688a      	ldr	r2, [r1, #8]
 801376a:	690b      	ldr	r3, [r1, #16]
 801376c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013770:	4293      	cmp	r3, r2
 8013772:	bfb8      	it	lt
 8013774:	4613      	movlt	r3, r2
 8013776:	6033      	str	r3, [r6, #0]
 8013778:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801377c:	4607      	mov	r7, r0
 801377e:	460c      	mov	r4, r1
 8013780:	b10a      	cbz	r2, 8013786 <_printf_common+0x26>
 8013782:	3301      	adds	r3, #1
 8013784:	6033      	str	r3, [r6, #0]
 8013786:	6823      	ldr	r3, [r4, #0]
 8013788:	0699      	lsls	r1, r3, #26
 801378a:	bf42      	ittt	mi
 801378c:	6833      	ldrmi	r3, [r6, #0]
 801378e:	3302      	addmi	r3, #2
 8013790:	6033      	strmi	r3, [r6, #0]
 8013792:	6825      	ldr	r5, [r4, #0]
 8013794:	f015 0506 	ands.w	r5, r5, #6
 8013798:	d106      	bne.n	80137a8 <_printf_common+0x48>
 801379a:	f104 0a19 	add.w	sl, r4, #25
 801379e:	68e3      	ldr	r3, [r4, #12]
 80137a0:	6832      	ldr	r2, [r6, #0]
 80137a2:	1a9b      	subs	r3, r3, r2
 80137a4:	42ab      	cmp	r3, r5
 80137a6:	dc26      	bgt.n	80137f6 <_printf_common+0x96>
 80137a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80137ac:	1e13      	subs	r3, r2, #0
 80137ae:	6822      	ldr	r2, [r4, #0]
 80137b0:	bf18      	it	ne
 80137b2:	2301      	movne	r3, #1
 80137b4:	0692      	lsls	r2, r2, #26
 80137b6:	d42b      	bmi.n	8013810 <_printf_common+0xb0>
 80137b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80137bc:	4649      	mov	r1, r9
 80137be:	4638      	mov	r0, r7
 80137c0:	47c0      	blx	r8
 80137c2:	3001      	adds	r0, #1
 80137c4:	d01e      	beq.n	8013804 <_printf_common+0xa4>
 80137c6:	6823      	ldr	r3, [r4, #0]
 80137c8:	68e5      	ldr	r5, [r4, #12]
 80137ca:	6832      	ldr	r2, [r6, #0]
 80137cc:	f003 0306 	and.w	r3, r3, #6
 80137d0:	2b04      	cmp	r3, #4
 80137d2:	bf08      	it	eq
 80137d4:	1aad      	subeq	r5, r5, r2
 80137d6:	68a3      	ldr	r3, [r4, #8]
 80137d8:	6922      	ldr	r2, [r4, #16]
 80137da:	bf0c      	ite	eq
 80137dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80137e0:	2500      	movne	r5, #0
 80137e2:	4293      	cmp	r3, r2
 80137e4:	bfc4      	itt	gt
 80137e6:	1a9b      	subgt	r3, r3, r2
 80137e8:	18ed      	addgt	r5, r5, r3
 80137ea:	2600      	movs	r6, #0
 80137ec:	341a      	adds	r4, #26
 80137ee:	42b5      	cmp	r5, r6
 80137f0:	d11a      	bne.n	8013828 <_printf_common+0xc8>
 80137f2:	2000      	movs	r0, #0
 80137f4:	e008      	b.n	8013808 <_printf_common+0xa8>
 80137f6:	2301      	movs	r3, #1
 80137f8:	4652      	mov	r2, sl
 80137fa:	4649      	mov	r1, r9
 80137fc:	4638      	mov	r0, r7
 80137fe:	47c0      	blx	r8
 8013800:	3001      	adds	r0, #1
 8013802:	d103      	bne.n	801380c <_printf_common+0xac>
 8013804:	f04f 30ff 	mov.w	r0, #4294967295
 8013808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801380c:	3501      	adds	r5, #1
 801380e:	e7c6      	b.n	801379e <_printf_common+0x3e>
 8013810:	18e1      	adds	r1, r4, r3
 8013812:	1c5a      	adds	r2, r3, #1
 8013814:	2030      	movs	r0, #48	; 0x30
 8013816:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801381a:	4422      	add	r2, r4
 801381c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013820:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013824:	3302      	adds	r3, #2
 8013826:	e7c7      	b.n	80137b8 <_printf_common+0x58>
 8013828:	2301      	movs	r3, #1
 801382a:	4622      	mov	r2, r4
 801382c:	4649      	mov	r1, r9
 801382e:	4638      	mov	r0, r7
 8013830:	47c0      	blx	r8
 8013832:	3001      	adds	r0, #1
 8013834:	d0e6      	beq.n	8013804 <_printf_common+0xa4>
 8013836:	3601      	adds	r6, #1
 8013838:	e7d9      	b.n	80137ee <_printf_common+0x8e>
	...

0801383c <_printf_i>:
 801383c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013840:	460c      	mov	r4, r1
 8013842:	4691      	mov	r9, r2
 8013844:	7e27      	ldrb	r7, [r4, #24]
 8013846:	990c      	ldr	r1, [sp, #48]	; 0x30
 8013848:	2f78      	cmp	r7, #120	; 0x78
 801384a:	4680      	mov	r8, r0
 801384c:	469a      	mov	sl, r3
 801384e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013852:	d807      	bhi.n	8013864 <_printf_i+0x28>
 8013854:	2f62      	cmp	r7, #98	; 0x62
 8013856:	d80a      	bhi.n	801386e <_printf_i+0x32>
 8013858:	2f00      	cmp	r7, #0
 801385a:	f000 80d8 	beq.w	8013a0e <_printf_i+0x1d2>
 801385e:	2f58      	cmp	r7, #88	; 0x58
 8013860:	f000 80a3 	beq.w	80139aa <_printf_i+0x16e>
 8013864:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8013868:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801386c:	e03a      	b.n	80138e4 <_printf_i+0xa8>
 801386e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013872:	2b15      	cmp	r3, #21
 8013874:	d8f6      	bhi.n	8013864 <_printf_i+0x28>
 8013876:	a001      	add	r0, pc, #4	; (adr r0, 801387c <_printf_i+0x40>)
 8013878:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801387c:	080138d5 	.word	0x080138d5
 8013880:	080138e9 	.word	0x080138e9
 8013884:	08013865 	.word	0x08013865
 8013888:	08013865 	.word	0x08013865
 801388c:	08013865 	.word	0x08013865
 8013890:	08013865 	.word	0x08013865
 8013894:	080138e9 	.word	0x080138e9
 8013898:	08013865 	.word	0x08013865
 801389c:	08013865 	.word	0x08013865
 80138a0:	08013865 	.word	0x08013865
 80138a4:	08013865 	.word	0x08013865
 80138a8:	080139f5 	.word	0x080139f5
 80138ac:	08013919 	.word	0x08013919
 80138b0:	080139d7 	.word	0x080139d7
 80138b4:	08013865 	.word	0x08013865
 80138b8:	08013865 	.word	0x08013865
 80138bc:	08013a17 	.word	0x08013a17
 80138c0:	08013865 	.word	0x08013865
 80138c4:	08013919 	.word	0x08013919
 80138c8:	08013865 	.word	0x08013865
 80138cc:	08013865 	.word	0x08013865
 80138d0:	080139df 	.word	0x080139df
 80138d4:	680b      	ldr	r3, [r1, #0]
 80138d6:	1d1a      	adds	r2, r3, #4
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	600a      	str	r2, [r1, #0]
 80138dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80138e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80138e4:	2301      	movs	r3, #1
 80138e6:	e0a3      	b.n	8013a30 <_printf_i+0x1f4>
 80138e8:	6825      	ldr	r5, [r4, #0]
 80138ea:	6808      	ldr	r0, [r1, #0]
 80138ec:	062e      	lsls	r6, r5, #24
 80138ee:	f100 0304 	add.w	r3, r0, #4
 80138f2:	d50a      	bpl.n	801390a <_printf_i+0xce>
 80138f4:	6805      	ldr	r5, [r0, #0]
 80138f6:	600b      	str	r3, [r1, #0]
 80138f8:	2d00      	cmp	r5, #0
 80138fa:	da03      	bge.n	8013904 <_printf_i+0xc8>
 80138fc:	232d      	movs	r3, #45	; 0x2d
 80138fe:	426d      	negs	r5, r5
 8013900:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013904:	485e      	ldr	r0, [pc, #376]	; (8013a80 <_printf_i+0x244>)
 8013906:	230a      	movs	r3, #10
 8013908:	e019      	b.n	801393e <_printf_i+0x102>
 801390a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801390e:	6805      	ldr	r5, [r0, #0]
 8013910:	600b      	str	r3, [r1, #0]
 8013912:	bf18      	it	ne
 8013914:	b22d      	sxthne	r5, r5
 8013916:	e7ef      	b.n	80138f8 <_printf_i+0xbc>
 8013918:	680b      	ldr	r3, [r1, #0]
 801391a:	6825      	ldr	r5, [r4, #0]
 801391c:	1d18      	adds	r0, r3, #4
 801391e:	6008      	str	r0, [r1, #0]
 8013920:	0628      	lsls	r0, r5, #24
 8013922:	d501      	bpl.n	8013928 <_printf_i+0xec>
 8013924:	681d      	ldr	r5, [r3, #0]
 8013926:	e002      	b.n	801392e <_printf_i+0xf2>
 8013928:	0669      	lsls	r1, r5, #25
 801392a:	d5fb      	bpl.n	8013924 <_printf_i+0xe8>
 801392c:	881d      	ldrh	r5, [r3, #0]
 801392e:	4854      	ldr	r0, [pc, #336]	; (8013a80 <_printf_i+0x244>)
 8013930:	2f6f      	cmp	r7, #111	; 0x6f
 8013932:	bf0c      	ite	eq
 8013934:	2308      	moveq	r3, #8
 8013936:	230a      	movne	r3, #10
 8013938:	2100      	movs	r1, #0
 801393a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801393e:	6866      	ldr	r6, [r4, #4]
 8013940:	60a6      	str	r6, [r4, #8]
 8013942:	2e00      	cmp	r6, #0
 8013944:	bfa2      	ittt	ge
 8013946:	6821      	ldrge	r1, [r4, #0]
 8013948:	f021 0104 	bicge.w	r1, r1, #4
 801394c:	6021      	strge	r1, [r4, #0]
 801394e:	b90d      	cbnz	r5, 8013954 <_printf_i+0x118>
 8013950:	2e00      	cmp	r6, #0
 8013952:	d04d      	beq.n	80139f0 <_printf_i+0x1b4>
 8013954:	4616      	mov	r6, r2
 8013956:	fbb5 f1f3 	udiv	r1, r5, r3
 801395a:	fb03 5711 	mls	r7, r3, r1, r5
 801395e:	5dc7      	ldrb	r7, [r0, r7]
 8013960:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8013964:	462f      	mov	r7, r5
 8013966:	42bb      	cmp	r3, r7
 8013968:	460d      	mov	r5, r1
 801396a:	d9f4      	bls.n	8013956 <_printf_i+0x11a>
 801396c:	2b08      	cmp	r3, #8
 801396e:	d10b      	bne.n	8013988 <_printf_i+0x14c>
 8013970:	6823      	ldr	r3, [r4, #0]
 8013972:	07df      	lsls	r7, r3, #31
 8013974:	d508      	bpl.n	8013988 <_printf_i+0x14c>
 8013976:	6923      	ldr	r3, [r4, #16]
 8013978:	6861      	ldr	r1, [r4, #4]
 801397a:	4299      	cmp	r1, r3
 801397c:	bfde      	ittt	le
 801397e:	2330      	movle	r3, #48	; 0x30
 8013980:	f806 3c01 	strble.w	r3, [r6, #-1]
 8013984:	f106 36ff 	addle.w	r6, r6, #4294967295
 8013988:	1b92      	subs	r2, r2, r6
 801398a:	6122      	str	r2, [r4, #16]
 801398c:	f8cd a000 	str.w	sl, [sp]
 8013990:	464b      	mov	r3, r9
 8013992:	aa03      	add	r2, sp, #12
 8013994:	4621      	mov	r1, r4
 8013996:	4640      	mov	r0, r8
 8013998:	f7ff fee2 	bl	8013760 <_printf_common>
 801399c:	3001      	adds	r0, #1
 801399e:	d14c      	bne.n	8013a3a <_printf_i+0x1fe>
 80139a0:	f04f 30ff 	mov.w	r0, #4294967295
 80139a4:	b004      	add	sp, #16
 80139a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80139aa:	4835      	ldr	r0, [pc, #212]	; (8013a80 <_printf_i+0x244>)
 80139ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80139b0:	6823      	ldr	r3, [r4, #0]
 80139b2:	680e      	ldr	r6, [r1, #0]
 80139b4:	061f      	lsls	r7, r3, #24
 80139b6:	f856 5b04 	ldr.w	r5, [r6], #4
 80139ba:	600e      	str	r6, [r1, #0]
 80139bc:	d514      	bpl.n	80139e8 <_printf_i+0x1ac>
 80139be:	07d9      	lsls	r1, r3, #31
 80139c0:	bf44      	itt	mi
 80139c2:	f043 0320 	orrmi.w	r3, r3, #32
 80139c6:	6023      	strmi	r3, [r4, #0]
 80139c8:	b91d      	cbnz	r5, 80139d2 <_printf_i+0x196>
 80139ca:	6823      	ldr	r3, [r4, #0]
 80139cc:	f023 0320 	bic.w	r3, r3, #32
 80139d0:	6023      	str	r3, [r4, #0]
 80139d2:	2310      	movs	r3, #16
 80139d4:	e7b0      	b.n	8013938 <_printf_i+0xfc>
 80139d6:	6823      	ldr	r3, [r4, #0]
 80139d8:	f043 0320 	orr.w	r3, r3, #32
 80139dc:	6023      	str	r3, [r4, #0]
 80139de:	2378      	movs	r3, #120	; 0x78
 80139e0:	4828      	ldr	r0, [pc, #160]	; (8013a84 <_printf_i+0x248>)
 80139e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80139e6:	e7e3      	b.n	80139b0 <_printf_i+0x174>
 80139e8:	065e      	lsls	r6, r3, #25
 80139ea:	bf48      	it	mi
 80139ec:	b2ad      	uxthmi	r5, r5
 80139ee:	e7e6      	b.n	80139be <_printf_i+0x182>
 80139f0:	4616      	mov	r6, r2
 80139f2:	e7bb      	b.n	801396c <_printf_i+0x130>
 80139f4:	680b      	ldr	r3, [r1, #0]
 80139f6:	6826      	ldr	r6, [r4, #0]
 80139f8:	6960      	ldr	r0, [r4, #20]
 80139fa:	1d1d      	adds	r5, r3, #4
 80139fc:	600d      	str	r5, [r1, #0]
 80139fe:	0635      	lsls	r5, r6, #24
 8013a00:	681b      	ldr	r3, [r3, #0]
 8013a02:	d501      	bpl.n	8013a08 <_printf_i+0x1cc>
 8013a04:	6018      	str	r0, [r3, #0]
 8013a06:	e002      	b.n	8013a0e <_printf_i+0x1d2>
 8013a08:	0671      	lsls	r1, r6, #25
 8013a0a:	d5fb      	bpl.n	8013a04 <_printf_i+0x1c8>
 8013a0c:	8018      	strh	r0, [r3, #0]
 8013a0e:	2300      	movs	r3, #0
 8013a10:	6123      	str	r3, [r4, #16]
 8013a12:	4616      	mov	r6, r2
 8013a14:	e7ba      	b.n	801398c <_printf_i+0x150>
 8013a16:	680b      	ldr	r3, [r1, #0]
 8013a18:	1d1a      	adds	r2, r3, #4
 8013a1a:	600a      	str	r2, [r1, #0]
 8013a1c:	681e      	ldr	r6, [r3, #0]
 8013a1e:	6862      	ldr	r2, [r4, #4]
 8013a20:	2100      	movs	r1, #0
 8013a22:	4630      	mov	r0, r6
 8013a24:	f7ec fbfc 	bl	8000220 <memchr>
 8013a28:	b108      	cbz	r0, 8013a2e <_printf_i+0x1f2>
 8013a2a:	1b80      	subs	r0, r0, r6
 8013a2c:	6060      	str	r0, [r4, #4]
 8013a2e:	6863      	ldr	r3, [r4, #4]
 8013a30:	6123      	str	r3, [r4, #16]
 8013a32:	2300      	movs	r3, #0
 8013a34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013a38:	e7a8      	b.n	801398c <_printf_i+0x150>
 8013a3a:	6923      	ldr	r3, [r4, #16]
 8013a3c:	4632      	mov	r2, r6
 8013a3e:	4649      	mov	r1, r9
 8013a40:	4640      	mov	r0, r8
 8013a42:	47d0      	blx	sl
 8013a44:	3001      	adds	r0, #1
 8013a46:	d0ab      	beq.n	80139a0 <_printf_i+0x164>
 8013a48:	6823      	ldr	r3, [r4, #0]
 8013a4a:	079b      	lsls	r3, r3, #30
 8013a4c:	d413      	bmi.n	8013a76 <_printf_i+0x23a>
 8013a4e:	68e0      	ldr	r0, [r4, #12]
 8013a50:	9b03      	ldr	r3, [sp, #12]
 8013a52:	4298      	cmp	r0, r3
 8013a54:	bfb8      	it	lt
 8013a56:	4618      	movlt	r0, r3
 8013a58:	e7a4      	b.n	80139a4 <_printf_i+0x168>
 8013a5a:	2301      	movs	r3, #1
 8013a5c:	4632      	mov	r2, r6
 8013a5e:	4649      	mov	r1, r9
 8013a60:	4640      	mov	r0, r8
 8013a62:	47d0      	blx	sl
 8013a64:	3001      	adds	r0, #1
 8013a66:	d09b      	beq.n	80139a0 <_printf_i+0x164>
 8013a68:	3501      	adds	r5, #1
 8013a6a:	68e3      	ldr	r3, [r4, #12]
 8013a6c:	9903      	ldr	r1, [sp, #12]
 8013a6e:	1a5b      	subs	r3, r3, r1
 8013a70:	42ab      	cmp	r3, r5
 8013a72:	dcf2      	bgt.n	8013a5a <_printf_i+0x21e>
 8013a74:	e7eb      	b.n	8013a4e <_printf_i+0x212>
 8013a76:	2500      	movs	r5, #0
 8013a78:	f104 0619 	add.w	r6, r4, #25
 8013a7c:	e7f5      	b.n	8013a6a <_printf_i+0x22e>
 8013a7e:	bf00      	nop
 8013a80:	08015e63 	.word	0x08015e63
 8013a84:	08015e74 	.word	0x08015e74

08013a88 <memmove>:
 8013a88:	4288      	cmp	r0, r1
 8013a8a:	b510      	push	{r4, lr}
 8013a8c:	eb01 0402 	add.w	r4, r1, r2
 8013a90:	d902      	bls.n	8013a98 <memmove+0x10>
 8013a92:	4284      	cmp	r4, r0
 8013a94:	4623      	mov	r3, r4
 8013a96:	d807      	bhi.n	8013aa8 <memmove+0x20>
 8013a98:	1e43      	subs	r3, r0, #1
 8013a9a:	42a1      	cmp	r1, r4
 8013a9c:	d008      	beq.n	8013ab0 <memmove+0x28>
 8013a9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8013aa2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8013aa6:	e7f8      	b.n	8013a9a <memmove+0x12>
 8013aa8:	4402      	add	r2, r0
 8013aaa:	4601      	mov	r1, r0
 8013aac:	428a      	cmp	r2, r1
 8013aae:	d100      	bne.n	8013ab2 <memmove+0x2a>
 8013ab0:	bd10      	pop	{r4, pc}
 8013ab2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013ab6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8013aba:	e7f7      	b.n	8013aac <memmove+0x24>

08013abc <_free_r>:
 8013abc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013abe:	2900      	cmp	r1, #0
 8013ac0:	d048      	beq.n	8013b54 <_free_r+0x98>
 8013ac2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013ac6:	9001      	str	r0, [sp, #4]
 8013ac8:	2b00      	cmp	r3, #0
 8013aca:	f1a1 0404 	sub.w	r4, r1, #4
 8013ace:	bfb8      	it	lt
 8013ad0:	18e4      	addlt	r4, r4, r3
 8013ad2:	f000 f8d3 	bl	8013c7c <__malloc_lock>
 8013ad6:	4a20      	ldr	r2, [pc, #128]	; (8013b58 <_free_r+0x9c>)
 8013ad8:	9801      	ldr	r0, [sp, #4]
 8013ada:	6813      	ldr	r3, [r2, #0]
 8013adc:	4615      	mov	r5, r2
 8013ade:	b933      	cbnz	r3, 8013aee <_free_r+0x32>
 8013ae0:	6063      	str	r3, [r4, #4]
 8013ae2:	6014      	str	r4, [r2, #0]
 8013ae4:	b003      	add	sp, #12
 8013ae6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013aea:	f000 b8cd 	b.w	8013c88 <__malloc_unlock>
 8013aee:	42a3      	cmp	r3, r4
 8013af0:	d90b      	bls.n	8013b0a <_free_r+0x4e>
 8013af2:	6821      	ldr	r1, [r4, #0]
 8013af4:	1862      	adds	r2, r4, r1
 8013af6:	4293      	cmp	r3, r2
 8013af8:	bf04      	itt	eq
 8013afa:	681a      	ldreq	r2, [r3, #0]
 8013afc:	685b      	ldreq	r3, [r3, #4]
 8013afe:	6063      	str	r3, [r4, #4]
 8013b00:	bf04      	itt	eq
 8013b02:	1852      	addeq	r2, r2, r1
 8013b04:	6022      	streq	r2, [r4, #0]
 8013b06:	602c      	str	r4, [r5, #0]
 8013b08:	e7ec      	b.n	8013ae4 <_free_r+0x28>
 8013b0a:	461a      	mov	r2, r3
 8013b0c:	685b      	ldr	r3, [r3, #4]
 8013b0e:	b10b      	cbz	r3, 8013b14 <_free_r+0x58>
 8013b10:	42a3      	cmp	r3, r4
 8013b12:	d9fa      	bls.n	8013b0a <_free_r+0x4e>
 8013b14:	6811      	ldr	r1, [r2, #0]
 8013b16:	1855      	adds	r5, r2, r1
 8013b18:	42a5      	cmp	r5, r4
 8013b1a:	d10b      	bne.n	8013b34 <_free_r+0x78>
 8013b1c:	6824      	ldr	r4, [r4, #0]
 8013b1e:	4421      	add	r1, r4
 8013b20:	1854      	adds	r4, r2, r1
 8013b22:	42a3      	cmp	r3, r4
 8013b24:	6011      	str	r1, [r2, #0]
 8013b26:	d1dd      	bne.n	8013ae4 <_free_r+0x28>
 8013b28:	681c      	ldr	r4, [r3, #0]
 8013b2a:	685b      	ldr	r3, [r3, #4]
 8013b2c:	6053      	str	r3, [r2, #4]
 8013b2e:	4421      	add	r1, r4
 8013b30:	6011      	str	r1, [r2, #0]
 8013b32:	e7d7      	b.n	8013ae4 <_free_r+0x28>
 8013b34:	d902      	bls.n	8013b3c <_free_r+0x80>
 8013b36:	230c      	movs	r3, #12
 8013b38:	6003      	str	r3, [r0, #0]
 8013b3a:	e7d3      	b.n	8013ae4 <_free_r+0x28>
 8013b3c:	6825      	ldr	r5, [r4, #0]
 8013b3e:	1961      	adds	r1, r4, r5
 8013b40:	428b      	cmp	r3, r1
 8013b42:	bf04      	itt	eq
 8013b44:	6819      	ldreq	r1, [r3, #0]
 8013b46:	685b      	ldreq	r3, [r3, #4]
 8013b48:	6063      	str	r3, [r4, #4]
 8013b4a:	bf04      	itt	eq
 8013b4c:	1949      	addeq	r1, r1, r5
 8013b4e:	6021      	streq	r1, [r4, #0]
 8013b50:	6054      	str	r4, [r2, #4]
 8013b52:	e7c7      	b.n	8013ae4 <_free_r+0x28>
 8013b54:	b003      	add	sp, #12
 8013b56:	bd30      	pop	{r4, r5, pc}
 8013b58:	20008884 	.word	0x20008884

08013b5c <_malloc_r>:
 8013b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b5e:	1ccd      	adds	r5, r1, #3
 8013b60:	f025 0503 	bic.w	r5, r5, #3
 8013b64:	3508      	adds	r5, #8
 8013b66:	2d0c      	cmp	r5, #12
 8013b68:	bf38      	it	cc
 8013b6a:	250c      	movcc	r5, #12
 8013b6c:	2d00      	cmp	r5, #0
 8013b6e:	4606      	mov	r6, r0
 8013b70:	db01      	blt.n	8013b76 <_malloc_r+0x1a>
 8013b72:	42a9      	cmp	r1, r5
 8013b74:	d903      	bls.n	8013b7e <_malloc_r+0x22>
 8013b76:	230c      	movs	r3, #12
 8013b78:	6033      	str	r3, [r6, #0]
 8013b7a:	2000      	movs	r0, #0
 8013b7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013b7e:	f000 f87d 	bl	8013c7c <__malloc_lock>
 8013b82:	4921      	ldr	r1, [pc, #132]	; (8013c08 <_malloc_r+0xac>)
 8013b84:	680a      	ldr	r2, [r1, #0]
 8013b86:	4614      	mov	r4, r2
 8013b88:	b99c      	cbnz	r4, 8013bb2 <_malloc_r+0x56>
 8013b8a:	4f20      	ldr	r7, [pc, #128]	; (8013c0c <_malloc_r+0xb0>)
 8013b8c:	683b      	ldr	r3, [r7, #0]
 8013b8e:	b923      	cbnz	r3, 8013b9a <_malloc_r+0x3e>
 8013b90:	4621      	mov	r1, r4
 8013b92:	4630      	mov	r0, r6
 8013b94:	f000 f862 	bl	8013c5c <_sbrk_r>
 8013b98:	6038      	str	r0, [r7, #0]
 8013b9a:	4629      	mov	r1, r5
 8013b9c:	4630      	mov	r0, r6
 8013b9e:	f000 f85d 	bl	8013c5c <_sbrk_r>
 8013ba2:	1c43      	adds	r3, r0, #1
 8013ba4:	d123      	bne.n	8013bee <_malloc_r+0x92>
 8013ba6:	230c      	movs	r3, #12
 8013ba8:	6033      	str	r3, [r6, #0]
 8013baa:	4630      	mov	r0, r6
 8013bac:	f000 f86c 	bl	8013c88 <__malloc_unlock>
 8013bb0:	e7e3      	b.n	8013b7a <_malloc_r+0x1e>
 8013bb2:	6823      	ldr	r3, [r4, #0]
 8013bb4:	1b5b      	subs	r3, r3, r5
 8013bb6:	d417      	bmi.n	8013be8 <_malloc_r+0x8c>
 8013bb8:	2b0b      	cmp	r3, #11
 8013bba:	d903      	bls.n	8013bc4 <_malloc_r+0x68>
 8013bbc:	6023      	str	r3, [r4, #0]
 8013bbe:	441c      	add	r4, r3
 8013bc0:	6025      	str	r5, [r4, #0]
 8013bc2:	e004      	b.n	8013bce <_malloc_r+0x72>
 8013bc4:	6863      	ldr	r3, [r4, #4]
 8013bc6:	42a2      	cmp	r2, r4
 8013bc8:	bf0c      	ite	eq
 8013bca:	600b      	streq	r3, [r1, #0]
 8013bcc:	6053      	strne	r3, [r2, #4]
 8013bce:	4630      	mov	r0, r6
 8013bd0:	f000 f85a 	bl	8013c88 <__malloc_unlock>
 8013bd4:	f104 000b 	add.w	r0, r4, #11
 8013bd8:	1d23      	adds	r3, r4, #4
 8013bda:	f020 0007 	bic.w	r0, r0, #7
 8013bde:	1ac2      	subs	r2, r0, r3
 8013be0:	d0cc      	beq.n	8013b7c <_malloc_r+0x20>
 8013be2:	1a1b      	subs	r3, r3, r0
 8013be4:	50a3      	str	r3, [r4, r2]
 8013be6:	e7c9      	b.n	8013b7c <_malloc_r+0x20>
 8013be8:	4622      	mov	r2, r4
 8013bea:	6864      	ldr	r4, [r4, #4]
 8013bec:	e7cc      	b.n	8013b88 <_malloc_r+0x2c>
 8013bee:	1cc4      	adds	r4, r0, #3
 8013bf0:	f024 0403 	bic.w	r4, r4, #3
 8013bf4:	42a0      	cmp	r0, r4
 8013bf6:	d0e3      	beq.n	8013bc0 <_malloc_r+0x64>
 8013bf8:	1a21      	subs	r1, r4, r0
 8013bfa:	4630      	mov	r0, r6
 8013bfc:	f000 f82e 	bl	8013c5c <_sbrk_r>
 8013c00:	3001      	adds	r0, #1
 8013c02:	d1dd      	bne.n	8013bc0 <_malloc_r+0x64>
 8013c04:	e7cf      	b.n	8013ba6 <_malloc_r+0x4a>
 8013c06:	bf00      	nop
 8013c08:	20008884 	.word	0x20008884
 8013c0c:	20008888 	.word	0x20008888

08013c10 <_realloc_r>:
 8013c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013c12:	4607      	mov	r7, r0
 8013c14:	4614      	mov	r4, r2
 8013c16:	460e      	mov	r6, r1
 8013c18:	b921      	cbnz	r1, 8013c24 <_realloc_r+0x14>
 8013c1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013c1e:	4611      	mov	r1, r2
 8013c20:	f7ff bf9c 	b.w	8013b5c <_malloc_r>
 8013c24:	b922      	cbnz	r2, 8013c30 <_realloc_r+0x20>
 8013c26:	f7ff ff49 	bl	8013abc <_free_r>
 8013c2a:	4625      	mov	r5, r4
 8013c2c:	4628      	mov	r0, r5
 8013c2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013c30:	f000 f830 	bl	8013c94 <_malloc_usable_size_r>
 8013c34:	42a0      	cmp	r0, r4
 8013c36:	d20f      	bcs.n	8013c58 <_realloc_r+0x48>
 8013c38:	4621      	mov	r1, r4
 8013c3a:	4638      	mov	r0, r7
 8013c3c:	f7ff ff8e 	bl	8013b5c <_malloc_r>
 8013c40:	4605      	mov	r5, r0
 8013c42:	2800      	cmp	r0, #0
 8013c44:	d0f2      	beq.n	8013c2c <_realloc_r+0x1c>
 8013c46:	4631      	mov	r1, r6
 8013c48:	4622      	mov	r2, r4
 8013c4a:	f7ff fbf7 	bl	801343c <memcpy>
 8013c4e:	4631      	mov	r1, r6
 8013c50:	4638      	mov	r0, r7
 8013c52:	f7ff ff33 	bl	8013abc <_free_r>
 8013c56:	e7e9      	b.n	8013c2c <_realloc_r+0x1c>
 8013c58:	4635      	mov	r5, r6
 8013c5a:	e7e7      	b.n	8013c2c <_realloc_r+0x1c>

08013c5c <_sbrk_r>:
 8013c5c:	b538      	push	{r3, r4, r5, lr}
 8013c5e:	4d06      	ldr	r5, [pc, #24]	; (8013c78 <_sbrk_r+0x1c>)
 8013c60:	2300      	movs	r3, #0
 8013c62:	4604      	mov	r4, r0
 8013c64:	4608      	mov	r0, r1
 8013c66:	602b      	str	r3, [r5, #0]
 8013c68:	f7f0 fba8 	bl	80043bc <_sbrk>
 8013c6c:	1c43      	adds	r3, r0, #1
 8013c6e:	d102      	bne.n	8013c76 <_sbrk_r+0x1a>
 8013c70:	682b      	ldr	r3, [r5, #0]
 8013c72:	b103      	cbz	r3, 8013c76 <_sbrk_r+0x1a>
 8013c74:	6023      	str	r3, [r4, #0]
 8013c76:	bd38      	pop	{r3, r4, r5, pc}
 8013c78:	2000977c 	.word	0x2000977c

08013c7c <__malloc_lock>:
 8013c7c:	4801      	ldr	r0, [pc, #4]	; (8013c84 <__malloc_lock+0x8>)
 8013c7e:	f000 b811 	b.w	8013ca4 <__retarget_lock_acquire_recursive>
 8013c82:	bf00      	nop
 8013c84:	20009784 	.word	0x20009784

08013c88 <__malloc_unlock>:
 8013c88:	4801      	ldr	r0, [pc, #4]	; (8013c90 <__malloc_unlock+0x8>)
 8013c8a:	f000 b80c 	b.w	8013ca6 <__retarget_lock_release_recursive>
 8013c8e:	bf00      	nop
 8013c90:	20009784 	.word	0x20009784

08013c94 <_malloc_usable_size_r>:
 8013c94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013c98:	1f18      	subs	r0, r3, #4
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	bfbc      	itt	lt
 8013c9e:	580b      	ldrlt	r3, [r1, r0]
 8013ca0:	18c0      	addlt	r0, r0, r3
 8013ca2:	4770      	bx	lr

08013ca4 <__retarget_lock_acquire_recursive>:
 8013ca4:	4770      	bx	lr

08013ca6 <__retarget_lock_release_recursive>:
 8013ca6:	4770      	bx	lr

08013ca8 <_init>:
 8013ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013caa:	bf00      	nop
 8013cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cae:	bc08      	pop	{r3}
 8013cb0:	469e      	mov	lr, r3
 8013cb2:	4770      	bx	lr

08013cb4 <_fini>:
 8013cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013cb6:	bf00      	nop
 8013cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013cba:	bc08      	pop	{r3}
 8013cbc:	469e      	mov	lr, r3
 8013cbe:	4770      	bx	lr
